"use strict";
(self["webpackChunkluojunbang_github_io"] = self["webpackChunkluojunbang_github_io"] || []).push([[44],{

/***/ 54415:
/***/ (function() {

// extracted by mini-css-extract-plugin


/***/ }),

/***/ 1446:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": function() { return /* binding */ _export_sfc; }
/* harmony export */ });
var _export_sfc = (sfc, props) => {
  const target = sfc.__vccOpts || sfc;
  for (const [key, val] of props) {
    target[key] = val;
  }
  return target;
};


//# sourceMappingURL=plugin-vue_export-helper.mjs.map


/***/ }),

/***/ 26270:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {


// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "Xb": function() { return /* binding */ ElCheckbox; },
  "lm": function() { return /* binding */ ElCheckboxButton; },
  "z5": function() { return /* binding */ ElCheckboxGroup; }
});

// UNUSED EXPORTS: checkboxEmits, checkboxGroupEmits, checkboxProps, default, useCheckbox, useCheckboxGroup, useCheckboxGroupId, useCheckboxGroupProps

// EXTERNAL MODULE: external "Vue"
var external_Vue_ = __webpack_require__(10311);
// EXTERNAL MODULE: ./node_modules/@vue/shared/dist/shared.esm-bundler.js
var shared_esm_bundler = __webpack_require__(3577);
// EXTERNAL MODULE: ./node_modules/element-plus/es/hooks/use-common-props/index.mjs + 1 modules
var use_common_props = __webpack_require__(75711);
// EXTERNAL MODULE: ./node_modules/element-plus/es/tokens/form.mjs
var tokens_form = __webpack_require__(87815);
// EXTERNAL MODULE: ./node_modules/element-plus/es/hooks/use-form-item/index.mjs
var use_form_item = __webpack_require__(79966);
// EXTERNAL MODULE: ./node_modules/element-plus/es/constants/event.mjs
var constants_event = __webpack_require__(9460);
// EXTERNAL MODULE: ./node_modules/element-plus/es/utils/error.mjs
var error = __webpack_require__(24721);
// EXTERNAL MODULE: ./node_modules/@vueuse/shared/index.mjs
var shared = __webpack_require__(47475);
;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/checkbox/src/checkbox.mjs













const useCheckboxGroupProps = {
  modelValue: {
    type: Array,
    default: () => []
  },
  disabled: Boolean,
  min: {
    type: Number,
    default: void 0
  },
  max: {
    type: Number,
    default: void 0
  },
  size: use_common_props/* useSizeProp */.Pp,
  id: {
    type: String,
    default: void 0
  },
  label: {
    type: String,
    default: void 0
  },
  fill: {
    type: String,
    default: void 0
  },
  textColor: {
    type: String,
    default: void 0
  },
  tag: {
    type: String,
    default: "div"
  }
};
const checkboxProps = {
  modelValue: {
    type: [Number, String, Boolean],
    default: () => void 0
  },
  label: {
    type: [String, Boolean, Number, Object]
  },
  indeterminate: Boolean,
  disabled: Boolean,
  checked: Boolean,
  name: {
    type: String,
    default: void 0
  },
  trueLabel: {
    type: [String, Number],
    default: void 0
  },
  falseLabel: {
    type: [String, Number],
    default: void 0
  },
  id: {
    type: String,
    default: void 0
  },
  controls: {
    type: String,
    default: void 0
  },
  border: Boolean,
  size: use_common_props/* useSizeProp */.Pp,
  tabindex: [String, Number]
};
const useCheckboxGroup = () => {
  const elForm = (0,external_Vue_.inject)(tokens_form/* formContextKey */.H, {});
  const elFormItem = (0,external_Vue_.inject)(tokens_form/* formItemContextKey */.K, {});
  const checkboxGroup = (0,external_Vue_.inject)("CheckboxGroup", {});
  const isGroup = (0,external_Vue_.computed)(() => checkboxGroup && (checkboxGroup == null ? void 0 : checkboxGroup.name) === "ElCheckboxGroup");
  const elFormItemSize = (0,external_Vue_.computed)(() => {
    return elFormItem.size;
  });
  return {
    isGroup,
    checkboxGroup,
    elForm,
    elFormItemSize,
    elFormItem
  };
};
const useCheckboxGroupId = (props, { elFormItem }) => {
  const { inputId: groupId, isLabeledByFormItem } = (0,use_form_item/* useFormItemInputId */.p)(props, {
    formItemContext: elFormItem
  });
  return {
    isLabeledByFormItem,
    groupId
  };
};
const useModel = (props) => {
  const selfModel = (0,external_Vue_.ref)(false);
  const { emit } = (0,external_Vue_.getCurrentInstance)();
  const { isGroup, checkboxGroup, elFormItem } = useCheckboxGroup();
  const isLimitExceeded = (0,external_Vue_.ref)(false);
  const model = (0,external_Vue_.computed)({
    get() {
      var _a, _b;
      return isGroup.value ? (_a = checkboxGroup.modelValue) == null ? void 0 : _a.value : (_b = props.modelValue) != null ? _b : selfModel.value;
    },
    set(val) {
      var _a;
      if (isGroup.value && Array.isArray(val)) {
        isLimitExceeded.value = checkboxGroup.max !== void 0 && val.length > checkboxGroup.max.value;
        isLimitExceeded.value === false && ((_a = checkboxGroup == null ? void 0 : checkboxGroup.changeEvent) == null ? void 0 : _a.call(checkboxGroup, val));
      } else {
        emit(constants_event/* UPDATE_MODEL_EVENT */.f_, val);
        selfModel.value = val;
      }
    }
  });
  return {
    model,
    isGroup,
    isLimitExceeded,
    elFormItem
  };
};
const useCheckboxStatus = (props, slots, { model }) => {
  const { isGroup, checkboxGroup } = useCheckboxGroup();
  const focus = (0,external_Vue_.ref)(false);
  const size = (0,use_common_props/* useSize */.tH)(checkboxGroup == null ? void 0 : checkboxGroup.checkboxGroupSize, { prop: true });
  const isChecked = (0,external_Vue_.computed)(() => {
    const value = model.value;
    if ((0,shared_esm_bundler/* toTypeString */.BF)(value) === "[object Boolean]") {
      return value;
    } else if (Array.isArray(value)) {
      return value.includes(props.label);
    } else if (value !== null && value !== void 0) {
      return value === props.trueLabel;
    } else {
      return !!value;
    }
  });
  const checkboxSize = (0,use_common_props/* useSize */.tH)((0,external_Vue_.computed)(() => {
    var _a;
    return isGroup.value ? (_a = checkboxGroup == null ? void 0 : checkboxGroup.checkboxGroupSize) == null ? void 0 : _a.value : void 0;
  }));
  const hasOwnLabel = (0,external_Vue_.computed)(() => {
    return !!(slots.default || props.label);
  });
  return {
    isChecked,
    focus,
    size,
    checkboxSize,
    hasOwnLabel
  };
};
const useDisabled = (props, {
  model,
  isChecked
}) => {
  const { elForm, isGroup, checkboxGroup } = useCheckboxGroup();
  const isLimitDisabled = (0,external_Vue_.computed)(() => {
    var _a, _b;
    const max = (_a = checkboxGroup.max) == null ? void 0 : _a.value;
    const min = (_b = checkboxGroup.min) == null ? void 0 : _b.value;
    return !!(max || min) && model.value.length >= max && !isChecked.value || model.value.length <= min && isChecked.value;
  });
  const isDisabled = (0,external_Vue_.computed)(() => {
    var _a, _b;
    const disabled = props.disabled || (elForm == null ? void 0 : elForm.disabled);
    return (_b = isGroup.value ? ((_a = checkboxGroup.disabled) == null ? void 0 : _a.value) || disabled || isLimitDisabled.value : disabled) != null ? _b : false;
  });
  return {
    isDisabled,
    isLimitDisabled
  };
};
const setStoreValue = (props, { model }) => {
  function addToStore() {
    if (Array.isArray(model.value) && !model.value.includes(props.label)) {
      model.value.push(props.label);
    } else {
      model.value = props.trueLabel || true;
    }
  }
  props.checked && addToStore();
};
const useEvent = (props, {
  model,
  isLimitExceeded,
  hasOwnLabel,
  isDisabled,
  isLabeledByFormItem
}) => {
  const { elFormItem } = useCheckboxGroup();
  const { emit } = (0,external_Vue_.getCurrentInstance)();
  function getLabeledValue(value) {
    var _a, _b;
    return value === props.trueLabel || value === true ? (_a = props.trueLabel) != null ? _a : true : (_b = props.falseLabel) != null ? _b : false;
  }
  function emitChangeEvent(checked, e) {
    emit("change", getLabeledValue(checked), e);
  }
  function handleChange(e) {
    if (isLimitExceeded.value)
      return;
    const target = e.target;
    emit("change", getLabeledValue(target.checked), e);
  }
  async function onClickRoot(e) {
    if (isLimitExceeded.value)
      return;
    if (!hasOwnLabel.value && !isDisabled.value && isLabeledByFormItem.value) {
      model.value = getLabeledValue([false, props.falseLabel].includes(model.value));
      await (0,external_Vue_.nextTick)();
      emitChangeEvent(model.value, e);
    }
  }
  (0,external_Vue_.watch)(() => props.modelValue, () => {
    var _a;
    (_a = elFormItem == null ? void 0 : elFormItem.validate) == null ? void 0 : _a.call(elFormItem, "change").catch((err) => (0,error/* debugWarn */.N)(err));
  });
  return {
    handleChange,
    onClickRoot
  };
};
const checkboxEmits = {
  [constants_event/* UPDATE_MODEL_EVENT */.f_]: (val) => (0,shared_esm_bundler/* isString */.HD)(val) || (0,shared/* isNumber */.hj)(val) || (0,shared/* isBoolean */.jn)(val),
  change: (val) => (0,shared_esm_bundler/* isString */.HD)(val) || (0,shared/* isNumber */.hj)(val) || (0,shared/* isBoolean */.jn)(val)
};
const checkboxGroupEmits = {
  [constants_event/* UPDATE_MODEL_EVENT */.f_]: (val) => (0,shared_esm_bundler/* isArray */.kJ)(val),
  change: (val) => (0,shared_esm_bundler/* isArray */.kJ)(val)
};
const useCheckbox = (props, slots) => {
  const { model, isGroup, isLimitExceeded, elFormItem } = useModel(props);
  const { focus, size, isChecked, checkboxSize, hasOwnLabel } = useCheckboxStatus(props, slots, {
    model
  });
  const { isDisabled } = useDisabled(props, { model, isChecked });
  const { inputId, isLabeledByFormItem } = (0,use_form_item/* useFormItemInputId */.p)(props, {
    formItemContext: elFormItem,
    disableIdGeneration: hasOwnLabel,
    disableIdManagement: isGroup
  });
  const { handleChange, onClickRoot } = useEvent(props, {
    model,
    isLimitExceeded,
    hasOwnLabel,
    isDisabled,
    isLabeledByFormItem
  });
  setStoreValue(props, { model });
  return {
    elFormItem,
    inputId,
    isLabeledByFormItem,
    isChecked,
    isDisabled,
    isGroup,
    checkboxSize,
    hasOwnLabel,
    model,
    handleChange,
    onClickRoot,
    focus,
    size
  };
};


//# sourceMappingURL=checkbox.mjs.map

// EXTERNAL MODULE: ./node_modules/element-plus/es/_virtual/plugin-vue_export-helper.mjs
var plugin_vue_export_helper = __webpack_require__(1446);
// EXTERNAL MODULE: ./node_modules/element-plus/es/hooks/use-namespace/index.mjs
var use_namespace = __webpack_require__(99143);
;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/checkbox/src/checkbox2.mjs






const _hoisted_1 = ["tabindex", "role", "aria-checked"];
const _hoisted_2 = ["id", "aria-hidden", "name", "tabindex", "disabled", "true-value", "false-value"];
const _hoisted_3 = ["id", "aria-hidden", "disabled", "value", "name", "tabindex"];
const __default__ = {
  name: "ElCheckbox"
};
const _sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...__default__,
  props: checkboxProps,
  emits: checkboxEmits,
  setup(__props) {
    const props = __props;
    const slots = (0,external_Vue_.useSlots)();
    const {
      inputId,
      isLabeledByFormItem,
      isChecked,
      isDisabled,
      checkboxSize,
      hasOwnLabel,
      model,
      handleChange,
      onClickRoot,
      focus
    } = useCheckbox(props, slots);
    const ns = (0,use_namespace/* useNamespace */.s)("checkbox");
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.resolveDynamicComponent)(!(0,external_Vue_.unref)(hasOwnLabel) && (0,external_Vue_.unref)(isLabeledByFormItem) ? "span" : "label"), {
        class: (0,external_Vue_.normalizeClass)([
          (0,external_Vue_.unref)(ns).b(),
          (0,external_Vue_.unref)(ns).m((0,external_Vue_.unref)(checkboxSize)),
          (0,external_Vue_.unref)(ns).is("disabled", (0,external_Vue_.unref)(isDisabled)),
          (0,external_Vue_.unref)(ns).is("bordered", _ctx.border),
          (0,external_Vue_.unref)(ns).is("checked", (0,external_Vue_.unref)(isChecked))
        ]),
        "aria-controls": _ctx.indeterminate ? _ctx.controls : null,
        onClick: (0,external_Vue_.unref)(onClickRoot)
      }, {
        default: (0,external_Vue_.withCtx)(() => [
          (0,external_Vue_.createElementVNode)("span", {
            class: (0,external_Vue_.normalizeClass)([
              (0,external_Vue_.unref)(ns).e("input"),
              (0,external_Vue_.unref)(ns).is("disabled", (0,external_Vue_.unref)(isDisabled)),
              (0,external_Vue_.unref)(ns).is("checked", (0,external_Vue_.unref)(isChecked)),
              (0,external_Vue_.unref)(ns).is("indeterminate", _ctx.indeterminate),
              (0,external_Vue_.unref)(ns).is("focus", (0,external_Vue_.unref)(focus))
            ]),
            tabindex: _ctx.indeterminate ? 0 : void 0,
            role: _ctx.indeterminate ? "checkbox" : void 0,
            "aria-checked": _ctx.indeterminate ? "mixed" : void 0
          }, [
            _ctx.trueLabel || _ctx.falseLabel ? (0,external_Vue_.withDirectives)(((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("input", {
              key: 0,
              id: (0,external_Vue_.unref)(inputId),
              "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => (0,external_Vue_.isRef)(model) ? model.value = $event : null),
              class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("original")),
              type: "checkbox",
              "aria-hidden": _ctx.indeterminate ? "true" : "false",
              name: _ctx.name,
              tabindex: _ctx.tabindex,
              disabled: (0,external_Vue_.unref)(isDisabled),
              "true-value": _ctx.trueLabel,
              "false-value": _ctx.falseLabel,
              onChange: _cache[1] || (_cache[1] = (...args) => (0,external_Vue_.unref)(handleChange) && (0,external_Vue_.unref)(handleChange)(...args)),
              onFocus: _cache[2] || (_cache[2] = ($event) => focus.value = true),
              onBlur: _cache[3] || (_cache[3] = ($event) => focus.value = false)
            }, null, 42, _hoisted_2)), [
              [external_Vue_.vModelCheckbox, (0,external_Vue_.unref)(model)]
            ]) : (0,external_Vue_.withDirectives)(((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("input", {
              key: 1,
              id: (0,external_Vue_.unref)(inputId),
              "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => (0,external_Vue_.isRef)(model) ? model.value = $event : null),
              class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("original")),
              type: "checkbox",
              "aria-hidden": _ctx.indeterminate ? "true" : "false",
              disabled: (0,external_Vue_.unref)(isDisabled),
              value: _ctx.label,
              name: _ctx.name,
              tabindex: _ctx.tabindex,
              onChange: _cache[5] || (_cache[5] = (...args) => (0,external_Vue_.unref)(handleChange) && (0,external_Vue_.unref)(handleChange)(...args)),
              onFocus: _cache[6] || (_cache[6] = ($event) => focus.value = true),
              onBlur: _cache[7] || (_cache[7] = ($event) => focus.value = false)
            }, null, 42, _hoisted_3)), [
              [external_Vue_.vModelCheckbox, (0,external_Vue_.unref)(model)]
            ]),
            (0,external_Vue_.createElementVNode)("span", {
              class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("inner"))
            }, null, 2)
          ], 10, _hoisted_1),
          (0,external_Vue_.unref)(hasOwnLabel) ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("span", {
            key: 0,
            class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("label"))
          }, [
            (0,external_Vue_.renderSlot)(_ctx.$slots, "default"),
            !_ctx.$slots.default ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, { key: 0 }, [
              (0,external_Vue_.createTextVNode)((0,external_Vue_.toDisplayString)(_ctx.label), 1)
            ], 64)) : (0,external_Vue_.createCommentVNode)("v-if", true)
          ], 2)) : (0,external_Vue_.createCommentVNode)("v-if", true)
        ]),
        _: 3
      }, 8, ["class", "aria-controls", "onClick"]);
    };
  }
});
var Checkbox = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/checkbox/src/checkbox.vue"]]);


//# sourceMappingURL=checkbox2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/checkbox/src/checkbox-button.mjs






const checkbox_button_hoisted_1 = ["name", "tabindex", "disabled", "true-value", "false-value"];
const checkbox_button_hoisted_2 = ["name", "tabindex", "disabled", "value"];
const checkbox_button_default_ = {
  name: "ElCheckboxButton"
};
const checkbox_button_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...checkbox_button_default_,
  props: checkboxProps,
  emits: checkboxEmits,
  setup(__props) {
    const props = __props;
    const slots = (0,external_Vue_.useSlots)();
    const { focus, isChecked, isDisabled, size, model, handleChange } = useCheckbox(props, slots);
    const { checkboxGroup } = useCheckboxGroup();
    const ns = (0,use_namespace/* useNamespace */.s)("checkbox");
    const activeStyle = (0,external_Vue_.computed)(() => {
      var _a, _b, _c, _d;
      const fillValue = (_b = (_a = checkboxGroup == null ? void 0 : checkboxGroup.fill) == null ? void 0 : _a.value) != null ? _b : "";
      return {
        backgroundColor: fillValue,
        borderColor: fillValue,
        color: (_d = (_c = checkboxGroup == null ? void 0 : checkboxGroup.textColor) == null ? void 0 : _c.value) != null ? _d : "",
        boxShadow: fillValue ? `-1px 0 0 0 ${fillValue}` : void 0
      };
    });
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("label", {
        class: (0,external_Vue_.normalizeClass)([
          (0,external_Vue_.unref)(ns).b("button"),
          (0,external_Vue_.unref)(ns).bm("button", (0,external_Vue_.unref)(size)),
          (0,external_Vue_.unref)(ns).is("disabled", (0,external_Vue_.unref)(isDisabled)),
          (0,external_Vue_.unref)(ns).is("checked", (0,external_Vue_.unref)(isChecked)),
          (0,external_Vue_.unref)(ns).is("focus", (0,external_Vue_.unref)(focus))
        ])
      }, [
        _ctx.trueLabel || _ctx.falseLabel ? (0,external_Vue_.withDirectives)(((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("input", {
          key: 0,
          "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => (0,external_Vue_.isRef)(model) ? model.value = $event : null),
          class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).be("button", "original")),
          type: "checkbox",
          name: _ctx.name,
          tabindex: _ctx.tabindex,
          disabled: (0,external_Vue_.unref)(isDisabled),
          "true-value": _ctx.trueLabel,
          "false-value": _ctx.falseLabel,
          onChange: _cache[1] || (_cache[1] = (...args) => (0,external_Vue_.unref)(handleChange) && (0,external_Vue_.unref)(handleChange)(...args)),
          onFocus: _cache[2] || (_cache[2] = ($event) => focus.value = true),
          onBlur: _cache[3] || (_cache[3] = ($event) => focus.value = false)
        }, null, 42, checkbox_button_hoisted_1)), [
          [external_Vue_.vModelCheckbox, (0,external_Vue_.unref)(model)]
        ]) : (0,external_Vue_.withDirectives)(((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("input", {
          key: 1,
          "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => (0,external_Vue_.isRef)(model) ? model.value = $event : null),
          class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).be("button", "original")),
          type: "checkbox",
          name: _ctx.name,
          tabindex: _ctx.tabindex,
          disabled: (0,external_Vue_.unref)(isDisabled),
          value: _ctx.label,
          onChange: _cache[5] || (_cache[5] = (...args) => (0,external_Vue_.unref)(handleChange) && (0,external_Vue_.unref)(handleChange)(...args)),
          onFocus: _cache[6] || (_cache[6] = ($event) => focus.value = true),
          onBlur: _cache[7] || (_cache[7] = ($event) => focus.value = false)
        }, null, 42, checkbox_button_hoisted_2)), [
          [external_Vue_.vModelCheckbox, (0,external_Vue_.unref)(model)]
        ]),
        _ctx.$slots.default || _ctx.label ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("span", {
          key: 2,
          class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).be("button", "inner")),
          style: (0,external_Vue_.normalizeStyle)((0,external_Vue_.unref)(isChecked) ? (0,external_Vue_.unref)(activeStyle) : void 0)
        }, [
          (0,external_Vue_.renderSlot)(_ctx.$slots, "default", {}, () => [
            (0,external_Vue_.createTextVNode)((0,external_Vue_.toDisplayString)(_ctx.label), 1)
          ])
        ], 6)) : (0,external_Vue_.createCommentVNode)("v-if", true)
      ], 2);
    };
  }
});
var CheckboxButton = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(checkbox_button_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/checkbox/src/checkbox-button.vue"]]);


//# sourceMappingURL=checkbox-button.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/checkbox/src/checkbox-group.mjs











const checkbox_group_default_ = {
  name: "ElCheckboxGroup"
};
const checkbox_group_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...checkbox_group_default_,
  props: useCheckboxGroupProps,
  emits: checkboxGroupEmits,
  setup(__props, { emit }) {
    const props = __props;
    const { elFormItem } = useCheckboxGroup();
    const { groupId, isLabeledByFormItem } = useCheckboxGroupId(props, {
      elFormItem
    });
    const checkboxGroupSize = (0,use_common_props/* useSize */.tH)();
    const ns = (0,use_namespace/* useNamespace */.s)("checkbox");
    const changeEvent = (value) => {
      emit(constants_event/* UPDATE_MODEL_EVENT */.f_, value);
      (0,external_Vue_.nextTick)(() => {
        emit("change", value);
      });
    };
    const modelValue = (0,external_Vue_.computed)({
      get() {
        return props.modelValue;
      },
      set(val) {
        changeEvent(val);
      }
    });
    (0,external_Vue_.provide)("CheckboxGroup", {
      name: "ElCheckboxGroup",
      modelValue,
      ...(0,external_Vue_.toRefs)(props),
      checkboxGroupSize,
      changeEvent
    });
    (0,external_Vue_.watch)(() => props.modelValue, () => {
      var _a;
      (_a = elFormItem.validate) == null ? void 0 : _a.call(elFormItem, "change").catch((err) => (0,error/* debugWarn */.N)(err));
    });
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.resolveDynamicComponent)(_ctx.tag), {
        id: (0,external_Vue_.unref)(groupId),
        class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).b("group")),
        role: "group",
        "aria-label": !(0,external_Vue_.unref)(isLabeledByFormItem) ? _ctx.label || "checkbox-group" : void 0,
        "aria-labelledby": (0,external_Vue_.unref)(isLabeledByFormItem) ? (0,external_Vue_.unref)(elFormItem).labelId : void 0
      }, {
        default: (0,external_Vue_.withCtx)(() => [
          (0,external_Vue_.renderSlot)(_ctx.$slots, "default")
        ]),
        _: 3
      }, 8, ["id", "class", "aria-label", "aria-labelledby"]);
    };
  }
});
var CheckboxGroup = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(checkbox_group_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/checkbox/src/checkbox-group.vue"]]);


//# sourceMappingURL=checkbox-group.mjs.map

// EXTERNAL MODULE: ./node_modules/element-plus/es/utils/vue/install.mjs
var install = __webpack_require__(2123);
;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/checkbox/index.mjs








const ElCheckbox = (0,install/* withInstall */.nz)(Checkbox, {
  CheckboxButton: CheckboxButton,
  CheckboxGroup: CheckboxGroup
});
const ElCheckboxButton = (0,install/* withNoopInstall */.dp)(CheckboxButton);
const ElCheckboxGroup = (0,install/* withNoopInstall */.dp)(CheckboxGroup);


//# sourceMappingURL=index.mjs.map


/***/ }),

/***/ 20129:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {


// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "ly": function() { return /* binding */ ElForm; },
  "nH": function() { return /* binding */ ElFormItem; }
});

// UNUSED EXPORTS: default, formEmits, formItemProps, formItemValidateStates, formProps

// EXTERNAL MODULE: external "Vue"
var external_Vue_ = __webpack_require__(10311);
// EXTERNAL MODULE: ./node_modules/element-plus/es/utils/vue/props/runtime.mjs
var runtime = __webpack_require__(35027);
// EXTERNAL MODULE: ./node_modules/element-plus/es/constants/size.mjs
var size = __webpack_require__(90209);
// EXTERNAL MODULE: ./node_modules/@vue/shared/dist/shared.esm-bundler.js
var shared_esm_bundler = __webpack_require__(3577);
// EXTERNAL MODULE: ./node_modules/@vueuse/shared/index.mjs
var shared = __webpack_require__(47475);
;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/form/src/form.mjs







const formProps = (0,runtime/* buildProps */.o8)({
  model: Object,
  rules: {
    type: (0,runtime/* definePropType */.Cq)(Object)
  },
  labelPosition: {
    type: String,
    values: ["left", "right", "top"],
    default: "right"
  },
  labelWidth: {
    type: [String, Number],
    default: ""
  },
  labelSuffix: {
    type: String,
    default: ""
  },
  inline: Boolean,
  inlineMessage: Boolean,
  statusIcon: Boolean,
  showMessage: {
    type: Boolean,
    default: true
  },
  size: {
    type: String,
    values: size/* componentSizes */.k
  },
  disabled: Boolean,
  validateOnRuleChange: {
    type: Boolean,
    default: true
  },
  hideRequiredAsterisk: {
    type: Boolean,
    default: false
  },
  scrollToError: Boolean
});
const formEmits = {
  validate: (prop, isValid, message) => ((0,shared_esm_bundler/* isArray */.kJ)(prop) || (0,shared_esm_bundler/* isString */.HD)(prop)) && (0,shared/* isBoolean */.jn)(isValid) && (0,shared_esm_bundler/* isString */.HD)(message)
};


//# sourceMappingURL=form.mjs.map

// EXTERNAL MODULE: ./node_modules/element-plus/es/utils/error.mjs
var error = __webpack_require__(24721);
// EXTERNAL MODULE: ./node_modules/lodash-es/castArray.js
var castArray = __webpack_require__(62006);
;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/form/src/utils.mjs





const SCOPE = "ElForm";
function useFormLabelWidth() {
  const potentialLabelWidthArr = (0,external_Vue_.ref)([]);
  const autoLabelWidth = (0,external_Vue_.computed)(() => {
    if (!potentialLabelWidthArr.value.length)
      return "0";
    const max = Math.max(...potentialLabelWidthArr.value);
    return max ? `${max}px` : "";
  });
  function getLabelWidthIndex(width) {
    const index = potentialLabelWidthArr.value.indexOf(width);
    if (index === -1) {
      (0,error/* debugWarn */.N)(SCOPE, `unexpected width ${width}`);
    }
    return index;
  }
  function registerLabelWidth(val, oldVal) {
    if (val && oldVal) {
      const index = getLabelWidthIndex(oldVal);
      potentialLabelWidthArr.value.splice(index, 1, val);
    } else if (val) {
      potentialLabelWidthArr.value.push(val);
    }
  }
  function deregisterLabelWidth(val) {
    const index = getLabelWidthIndex(val);
    if (index > -1) {
      potentialLabelWidthArr.value.splice(index, 1);
    }
  }
  return {
    autoLabelWidth,
    registerLabelWidth,
    deregisterLabelWidth
  };
}
const filterFields = (fields, props) => {
  const normalized = (0,castArray/* default */.Z)(props);
  return normalized.length > 0 ? fields.filter((field) => field.prop && normalized.includes(field.prop)) : fields;
};


//# sourceMappingURL=utils.mjs.map

// EXTERNAL MODULE: ./node_modules/element-plus/es/_virtual/plugin-vue_export-helper.mjs
var plugin_vue_export_helper = __webpack_require__(1446);
// EXTERNAL MODULE: ./node_modules/element-plus/es/hooks/use-common-props/index.mjs + 1 modules
var use_common_props = __webpack_require__(75711);
// EXTERNAL MODULE: ./node_modules/element-plus/es/hooks/use-namespace/index.mjs
var use_namespace = __webpack_require__(99143);
// EXTERNAL MODULE: ./node_modules/element-plus/es/tokens/form.mjs
var tokens_form = __webpack_require__(87815);
;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/form/src/form2.mjs













const __default__ = {
  name: "ElForm"
};
const _sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...__default__,
  props: formProps,
  emits: formEmits,
  setup(__props, { expose, emit }) {
    const props = __props;
    const COMPONENT_NAME = "ElForm";
    const fields = [];
    const formSize = (0,use_common_props/* useSize */.tH)();
    const ns = (0,use_namespace/* useNamespace */.s)("form");
    const formClasses = (0,external_Vue_.computed)(() => {
      const { labelPosition, inline } = props;
      return [
        ns.b(),
        ns.m(formSize.value || "default"),
        {
          [ns.m(`label-${labelPosition}`)]: labelPosition,
          [ns.m("inline")]: inline
        }
      ];
    });
    const addField = (field) => {
      fields.push(field);
    };
    const removeField = (field) => {
      if (field.prop) {
        fields.splice(fields.indexOf(field), 1);
      }
    };
    const resetFields = (properties = []) => {
      if (!props.model) {
        (0,error/* debugWarn */.N)(COMPONENT_NAME, "model is required for resetFields to work.");
        return;
      }
      filterFields(fields, properties).forEach((field) => field.resetField());
    };
    const clearValidate = (props2 = []) => {
      filterFields(fields, props2).forEach((field) => field.clearValidate());
    };
    const isValidatable = (0,external_Vue_.computed)(() => {
      const hasModel = !!props.model;
      if (!hasModel) {
        (0,error/* debugWarn */.N)(COMPONENT_NAME, "model is required for validate to work.");
      }
      return hasModel;
    });
    const obtainValidateFields = (props2) => {
      if (fields.length === 0)
        return [];
      const filteredFields = filterFields(fields, props2);
      if (!filteredFields.length) {
        (0,error/* debugWarn */.N)(COMPONENT_NAME, "please pass correct props!");
        return [];
      }
      return filteredFields;
    };
    const validate = async (callback) => validateField(void 0, callback);
    const doValidateField = async (props2 = []) => {
      if (!isValidatable.value)
        return false;
      const fields2 = obtainValidateFields(props2);
      if (fields2.length === 0)
        return true;
      let validationErrors = {};
      for (const field of fields2) {
        try {
          await field.validate("");
        } catch (fields3) {
          validationErrors = {
            ...validationErrors,
            ...fields3
          };
        }
      }
      if (Object.keys(validationErrors).length === 0)
        return true;
      return Promise.reject(validationErrors);
    };
    const validateField = async (modelProps = [], callback) => {
      const shouldThrow = !(0,shared_esm_bundler/* isFunction */.mf)(callback);
      try {
        const result = await doValidateField(modelProps);
        if (result === true) {
          callback == null ? void 0 : callback(result);
        }
        return result;
      } catch (e) {
        const invalidFields = e;
        if (props.scrollToError) {
          scrollToField(Object.keys(invalidFields)[0]);
        }
        callback == null ? void 0 : callback(false, invalidFields);
        return shouldThrow && Promise.reject(invalidFields);
      }
    };
    const scrollToField = (prop) => {
      var _a;
      const field = filterFields(fields, prop)[0];
      if (field) {
        (_a = field.$el) == null ? void 0 : _a.scrollIntoView();
      }
    };
    (0,external_Vue_.watch)(() => props.rules, () => {
      if (props.validateOnRuleChange) {
        validate().catch((err) => (0,error/* debugWarn */.N)(err));
      }
    }, { deep: true });
    (0,external_Vue_.provide)(tokens_form/* formContextKey */.H, (0,external_Vue_.reactive)({
      ...(0,external_Vue_.toRefs)(props),
      emit,
      resetFields,
      clearValidate,
      validateField,
      addField,
      removeField,
      ...useFormLabelWidth()
    }));
    expose({
      validate,
      validateField,
      resetFields,
      clearValidate,
      scrollToField
    });
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("form", {
        class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(formClasses))
      }, [
        (0,external_Vue_.renderSlot)(_ctx.$slots, "default")
      ], 2);
    };
  }
});
var Form = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/form/src/form.vue"]]);


//# sourceMappingURL=form2.mjs.map

// EXTERNAL MODULE: ./node_modules/async-validator/dist-web/index.js
var dist_web = __webpack_require__(25715);
// EXTERNAL MODULE: ./node_modules/lodash-es/isEqual.js + 7 modules
var isEqual = __webpack_require__(38964);
// EXTERNAL MODULE: ./node_modules/lodash-es/clone.js + 28 modules
var clone = __webpack_require__(44508);
;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/form/src/form-item.mjs





const formItemValidateStates = [
  "",
  "error",
  "validating",
  "success"
];
const formItemProps = (0,runtime/* buildProps */.o8)({
  label: String,
  labelWidth: {
    type: [String, Number],
    default: ""
  },
  prop: {
    type: (0,runtime/* definePropType */.Cq)([String, Array])
  },
  required: {
    type: Boolean,
    default: void 0
  },
  rules: {
    type: (0,runtime/* definePropType */.Cq)([Object, Array])
  },
  error: String,
  validateStatus: {
    type: String,
    values: formItemValidateStates
  },
  for: String,
  inlineMessage: {
    type: [String, Boolean],
    default: ""
  },
  showMessage: {
    type: Boolean,
    default: true
  },
  size: {
    type: String,
    values: size/* componentSizes */.k
  }
});


//# sourceMappingURL=form-item.mjs.map

// EXTERNAL MODULE: ./node_modules/@vueuse/core/index.mjs
var core = __webpack_require__(66309);
;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/form/src/form-label-wrap.mjs









const COMPONENT_NAME = "ElLabelWrap";
var FormLabelWrap = (0,external_Vue_.defineComponent)({
  name: COMPONENT_NAME,
  props: {
    isAutoWidth: Boolean,
    updateAll: Boolean
  },
  setup(props, {
    slots
  }) {
    const formContext = (0,external_Vue_.inject)(tokens_form/* formContextKey */.H, void 0);
    const formItemContext = (0,external_Vue_.inject)(tokens_form/* formItemContextKey */.K);
    if (!formItemContext)
      (0,error/* throwError */._)(COMPONENT_NAME, "usage: <el-form-item><label-wrap /></el-form-item>");
    const ns = (0,use_namespace/* useNamespace */.s)("form");
    const el = (0,external_Vue_.ref)();
    const computedWidth = (0,external_Vue_.ref)(0);
    const getLabelWidth = () => {
      var _a;
      if ((_a = el.value) == null ? void 0 : _a.firstElementChild) {
        const width = window.getComputedStyle(el.value.firstElementChild).width;
        return Math.ceil(Number.parseFloat(width));
      } else {
        return 0;
      }
    };
    const updateLabelWidth = (action = "update") => {
      (0,external_Vue_.nextTick)(() => {
        if (slots.default && props.isAutoWidth) {
          if (action === "update") {
            computedWidth.value = getLabelWidth();
          } else if (action === "remove") {
            formContext == null ? void 0 : formContext.deregisterLabelWidth(computedWidth.value);
          }
        }
      });
    };
    const updateLabelWidthFn = () => updateLabelWidth("update");
    (0,external_Vue_.onMounted)(() => {
      updateLabelWidthFn();
    });
    (0,external_Vue_.onBeforeUnmount)(() => {
      updateLabelWidth("remove");
    });
    (0,external_Vue_.onUpdated)(() => updateLabelWidthFn());
    (0,external_Vue_.watch)(computedWidth, (val, oldVal) => {
      if (props.updateAll) {
        formContext == null ? void 0 : formContext.registerLabelWidth(val, oldVal);
      }
    });
    (0,core/* useResizeObserver */.yU7)((0,external_Vue_.computed)(() => {
      var _a, _b;
      return (_b = (_a = el.value) == null ? void 0 : _a.firstElementChild) != null ? _b : null;
    }), updateLabelWidthFn);
    return () => {
      var _a, _b;
      if (!slots)
        return null;
      const {
        isAutoWidth
      } = props;
      if (isAutoWidth) {
        const autoLabelWidth = formContext == null ? void 0 : formContext.autoLabelWidth;
        const style = {};
        if (autoLabelWidth && autoLabelWidth !== "auto") {
          const marginWidth = Math.max(0, Number.parseInt(autoLabelWidth, 10) - computedWidth.value);
          const marginPosition = formContext.labelPosition === "left" ? "marginRight" : "marginLeft";
          if (marginWidth) {
            style[marginPosition] = `${marginWidth}px`;
          }
        }
        return (0,external_Vue_.createVNode)("div", {
          "ref": el,
          "class": [ns.be("item", "label-wrap")],
          "style": style
        }, [(_a = slots.default) == null ? void 0 : _a.call(slots)]);
      } else {
        return (0,external_Vue_.createVNode)(external_Vue_.Fragment, {
          "ref": el
        }, [(_b = slots.default) == null ? void 0 : _b.call(slots)]);
      }
    };
  }
});


//# sourceMappingURL=form-label-wrap.mjs.map

// EXTERNAL MODULE: ./node_modules/element-plus/es/hooks/use-id/index.mjs
var use_id = __webpack_require__(82259);
// EXTERNAL MODULE: ./node_modules/element-plus/es/utils/dom/style.mjs
var style = __webpack_require__(67675);
// EXTERNAL MODULE: ./node_modules/element-plus/es/utils/objects.mjs
var objects = __webpack_require__(14574);
;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/form/src/form-item2.mjs


















const _hoisted_1 = ["role", "aria-labelledby"];
const form_item2_default_ = {
  name: "ElFormItem"
};
const form_item2_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...form_item2_default_,
  props: formItemProps,
  setup(__props, { expose }) {
    const props = __props;
    const slots = (0,external_Vue_.useSlots)();
    const formContext = (0,external_Vue_.inject)(tokens_form/* formContextKey */.H, void 0);
    const parentFormItemContext = (0,external_Vue_.inject)(tokens_form/* formItemContextKey */.K, void 0);
    const _size = (0,use_common_props/* useSize */.tH)(void 0, { formItem: false });
    const ns = (0,use_namespace/* useNamespace */.s)("form-item");
    const labelId = (0,use_id/* useId */.M)().value;
    const inputIds = (0,external_Vue_.ref)([]);
    const validateState = (0,external_Vue_.ref)("");
    const validateStateDebounced = (0,shared/* refDebounced */.Dp)(validateState, 100);
    const validateMessage = (0,external_Vue_.ref)("");
    const formItemRef = (0,external_Vue_.ref)();
    let initialValue = void 0;
    let isResettingField = false;
    const labelStyle = (0,external_Vue_.computed)(() => {
      if ((formContext == null ? void 0 : formContext.labelPosition) === "top") {
        return {};
      }
      const labelWidth = (0,style/* addUnit */.Nn)(props.labelWidth || (formContext == null ? void 0 : formContext.labelWidth) || "");
      if (labelWidth)
        return { width: labelWidth };
      return {};
    });
    const contentStyle = (0,external_Vue_.computed)(() => {
      if ((formContext == null ? void 0 : formContext.labelPosition) === "top" || (formContext == null ? void 0 : formContext.inline)) {
        return {};
      }
      if (!props.label && !props.labelWidth && isNested) {
        return {};
      }
      const labelWidth = (0,style/* addUnit */.Nn)(props.labelWidth || (formContext == null ? void 0 : formContext.labelWidth) || "");
      if (!props.label && !slots.label) {
        return { marginLeft: labelWidth };
      }
      return {};
    });
    const formItemClasses = (0,external_Vue_.computed)(() => [
      ns.b(),
      ns.m(_size.value),
      ns.is("error", validateState.value === "error"),
      ns.is("validating", validateState.value === "validating"),
      ns.is("success", validateState.value === "success"),
      ns.is("required", isRequired.value || props.required),
      ns.is("no-asterisk", formContext == null ? void 0 : formContext.hideRequiredAsterisk),
      { [ns.m("feedback")]: formContext == null ? void 0 : formContext.statusIcon }
    ]);
    const _inlineMessage = (0,external_Vue_.computed)(() => (0,shared/* isBoolean */.jn)(props.inlineMessage) ? props.inlineMessage : (formContext == null ? void 0 : formContext.inlineMessage) || false);
    const validateClasses = (0,external_Vue_.computed)(() => [
      ns.e("error"),
      { [ns.em("error", "inline")]: _inlineMessage.value }
    ]);
    const propString = (0,external_Vue_.computed)(() => {
      if (!props.prop)
        return "";
      return (0,shared_esm_bundler/* isString */.HD)(props.prop) ? props.prop : props.prop.join(".");
    });
    const hasLabel = (0,external_Vue_.computed)(() => {
      return !!(props.label || slots.label);
    });
    const labelFor = (0,external_Vue_.computed)(() => {
      return props.for || inputIds.value.length === 1 ? inputIds.value[0] : void 0;
    });
    const isGroup = (0,external_Vue_.computed)(() => {
      return !labelFor.value && hasLabel.value;
    });
    const isNested = !!parentFormItemContext;
    const fieldValue = (0,external_Vue_.computed)(() => {
      const model = formContext == null ? void 0 : formContext.model;
      if (!model || !props.prop) {
        return;
      }
      return (0,objects/* getProp */.WJ)(model, props.prop).value;
    });
    const _rules = (0,external_Vue_.computed)(() => {
      const rules = props.rules ? (0,castArray/* default */.Z)(props.rules) : [];
      const formRules = formContext == null ? void 0 : formContext.rules;
      if (formRules && props.prop) {
        const _rules2 = (0,objects/* getProp */.WJ)(formRules, props.prop).value;
        if (_rules2) {
          rules.push(...(0,castArray/* default */.Z)(_rules2));
        }
      }
      if (props.required !== void 0) {
        rules.push({ required: !!props.required });
      }
      return rules;
    });
    const validateEnabled = (0,external_Vue_.computed)(() => _rules.value.length > 0);
    const getFilteredRule = (trigger) => {
      const rules = _rules.value;
      return rules.filter((rule) => {
        if (!rule.trigger || !trigger)
          return true;
        if (Array.isArray(rule.trigger)) {
          return rule.trigger.includes(trigger);
        } else {
          return rule.trigger === trigger;
        }
      }).map(({ trigger: trigger2, ...rule }) => rule);
    };
    const isRequired = (0,external_Vue_.computed)(() => _rules.value.some((rule) => rule.required === true));
    const shouldShowError = (0,external_Vue_.computed)(() => {
      var _a;
      return validateStateDebounced.value === "error" && props.showMessage && ((_a = formContext == null ? void 0 : formContext.showMessage) != null ? _a : true);
    });
    const currentLabel = (0,external_Vue_.computed)(() => `${props.label || ""}${(formContext == null ? void 0 : formContext.labelSuffix) || ""}`);
    const setValidationState = (state) => {
      validateState.value = state;
    };
    const onValidationFailed = (error) => {
      var _a, _b;
      const { errors, fields } = error;
      if (!errors || !fields) {
        console.error(error);
      }
      setValidationState("error");
      validateMessage.value = errors ? (_b = (_a = errors == null ? void 0 : errors[0]) == null ? void 0 : _a.message) != null ? _b : `${props.prop} is required` : "";
      formContext == null ? void 0 : formContext.emit("validate", props.prop, false, validateMessage.value);
    };
    const onValidationSucceeded = () => {
      setValidationState("success");
      formContext == null ? void 0 : formContext.emit("validate", props.prop, true, "");
    };
    const doValidate = async (rules) => {
      const modelName = propString.value;
      const validator = new dist_web/* default */.Z({
        [modelName]: rules
      });
      return validator.validate({ [modelName]: fieldValue.value }, { firstFields: true }).then(() => {
        onValidationSucceeded();
        return true;
      }).catch((err) => {
        onValidationFailed(err);
        return Promise.reject(err);
      });
    };
    const validate = async (trigger, callback) => {
      if (isResettingField) {
        isResettingField = false;
        return false;
      }
      const hasCallback = (0,shared_esm_bundler/* isFunction */.mf)(callback);
      if (!validateEnabled.value) {
        callback == null ? void 0 : callback(false);
        return false;
      }
      const rules = getFilteredRule(trigger);
      if (rules.length === 0) {
        callback == null ? void 0 : callback(true);
        return true;
      }
      setValidationState("validating");
      return doValidate(rules).then(() => {
        callback == null ? void 0 : callback(true);
        return true;
      }).catch((err) => {
        const { fields } = err;
        callback == null ? void 0 : callback(false, fields);
        return hasCallback ? false : Promise.reject(fields);
      });
    };
    const clearValidate = () => {
      setValidationState("");
      validateMessage.value = "";
    };
    const resetField = async () => {
      const model = formContext == null ? void 0 : formContext.model;
      if (!model || !props.prop)
        return;
      const computedValue = (0,objects/* getProp */.WJ)(model, props.prop);
      if (!(0,isEqual/* default */.Z)(computedValue.value, initialValue)) {
        isResettingField = true;
      }
      computedValue.value = (0,clone/* default */.Z)(initialValue);
      await (0,external_Vue_.nextTick)();
      clearValidate();
    };
    const addInputId = (id) => {
      if (!inputIds.value.includes(id)) {
        inputIds.value.push(id);
      }
    };
    const removeInputId = (id) => {
      inputIds.value = inputIds.value.filter((listId) => listId !== id);
    };
    (0,external_Vue_.watch)(() => props.error, (val) => {
      validateMessage.value = val || "";
      setValidationState(val ? "error" : "");
    }, { immediate: true });
    (0,external_Vue_.watch)(() => props.validateStatus, (val) => setValidationState(val || ""));
    const context = (0,external_Vue_.reactive)({
      ...(0,external_Vue_.toRefs)(props),
      $el: formItemRef,
      size: _size,
      validateState,
      labelId,
      inputIds,
      isGroup,
      addInputId,
      removeInputId,
      resetField,
      clearValidate,
      validate
    });
    (0,external_Vue_.provide)(tokens_form/* formItemContextKey */.K, context);
    (0,external_Vue_.onMounted)(() => {
      if (props.prop) {
        formContext == null ? void 0 : formContext.addField(context);
        initialValue = (0,clone/* default */.Z)(fieldValue.value);
      }
    });
    (0,external_Vue_.onBeforeUnmount)(() => {
      formContext == null ? void 0 : formContext.removeField(context);
    });
    expose({
      size: _size,
      validateMessage,
      validateState,
      validate,
      clearValidate,
      resetField
    });
    return (_ctx, _cache) => {
      var _a;
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
        ref_key: "formItemRef",
        ref: formItemRef,
        class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(formItemClasses)),
        role: (0,external_Vue_.unref)(isGroup) ? "group" : void 0,
        "aria-labelledby": (0,external_Vue_.unref)(isGroup) ? (0,external_Vue_.unref)(labelId) : void 0
      }, [
        (0,external_Vue_.createVNode)((0,external_Vue_.unref)(FormLabelWrap), {
          "is-auto-width": (0,external_Vue_.unref)(labelStyle).width === "auto",
          "update-all": ((_a = (0,external_Vue_.unref)(formContext)) == null ? void 0 : _a.labelWidth) === "auto"
        }, {
          default: (0,external_Vue_.withCtx)(() => [
            (0,external_Vue_.unref)(hasLabel) ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.resolveDynamicComponent)((0,external_Vue_.unref)(labelFor) ? "label" : "div"), {
              key: 0,
              id: (0,external_Vue_.unref)(labelId),
              for: (0,external_Vue_.unref)(labelFor),
              class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("label")),
              style: (0,external_Vue_.normalizeStyle)((0,external_Vue_.unref)(labelStyle))
            }, {
              default: (0,external_Vue_.withCtx)(() => [
                (0,external_Vue_.renderSlot)(_ctx.$slots, "label", { label: (0,external_Vue_.unref)(currentLabel) }, () => [
                  (0,external_Vue_.createTextVNode)((0,external_Vue_.toDisplayString)((0,external_Vue_.unref)(currentLabel)), 1)
                ])
              ]),
              _: 3
            }, 8, ["id", "for", "class", "style"])) : (0,external_Vue_.createCommentVNode)("v-if", true)
          ]),
          _: 3
        }, 8, ["is-auto-width", "update-all"]),
        (0,external_Vue_.createElementVNode)("div", {
          class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("content")),
          style: (0,external_Vue_.normalizeStyle)((0,external_Vue_.unref)(contentStyle))
        }, [
          (0,external_Vue_.renderSlot)(_ctx.$slots, "default"),
          (0,external_Vue_.createVNode)(external_Vue_.Transition, {
            name: `${(0,external_Vue_.unref)(ns).namespace.value}-zoom-in-top`
          }, {
            default: (0,external_Vue_.withCtx)(() => [
              (0,external_Vue_.unref)(shouldShowError) ? (0,external_Vue_.renderSlot)(_ctx.$slots, "error", {
                key: 0,
                error: validateMessage.value
              }, () => [
                (0,external_Vue_.createElementVNode)("div", {
                  class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(validateClasses))
                }, (0,external_Vue_.toDisplayString)(validateMessage.value), 3)
              ]) : (0,external_Vue_.createCommentVNode)("v-if", true)
            ]),
            _: 3
          }, 8, ["name"])
        ], 6)
      ], 10, _hoisted_1);
    };
  }
});
var FormItem = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(form_item2_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/form/src/form-item.vue"]]);


//# sourceMappingURL=form-item2.mjs.map

// EXTERNAL MODULE: ./node_modules/element-plus/es/utils/vue/install.mjs
var install = __webpack_require__(2123);
;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/form/index.mjs








const ElForm = (0,install/* withInstall */.nz)(Form, {
  FormItem: FormItem
});
const ElFormItem = (0,install/* withNoopInstall */.dp)(FormItem);


//# sourceMappingURL=index.mjs.map


/***/ }),

/***/ 14181:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {


// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "gn": function() { return /* binding */ ElIcon; }
});

// UNUSED EXPORTS: default, iconProps

// EXTERNAL MODULE: external "Vue"
var external_Vue_ = __webpack_require__(10311);
// EXTERNAL MODULE: ./node_modules/element-plus/es/utils/vue/props/runtime.mjs
var runtime = __webpack_require__(35027);
;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/icon/src/icon.mjs



const iconProps = (0,runtime/* buildProps */.o8)({
  size: {
    type: (0,runtime/* definePropType */.Cq)([Number, String])
  },
  color: {
    type: String
  }
});


//# sourceMappingURL=icon.mjs.map

// EXTERNAL MODULE: ./node_modules/element-plus/es/_virtual/plugin-vue_export-helper.mjs
var plugin_vue_export_helper = __webpack_require__(1446);
// EXTERNAL MODULE: ./node_modules/element-plus/es/hooks/use-namespace/index.mjs
var use_namespace = __webpack_require__(99143);
// EXTERNAL MODULE: ./node_modules/element-plus/es/utils/types.mjs
var types = __webpack_require__(35162);
// EXTERNAL MODULE: ./node_modules/element-plus/es/utils/dom/style.mjs
var dom_style = __webpack_require__(67675);
;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/icon/src/icon2.mjs









const __default__ = {
  name: "ElIcon",
  inheritAttrs: false
};
const _sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...__default__,
  props: iconProps,
  setup(__props) {
    const props = __props;
    const ns = (0,use_namespace/* useNamespace */.s)("icon");
    const style = (0,external_Vue_.computed)(() => {
      if (!props.size && !props.color)
        return {};
      return {
        fontSize: (0,types/* isUndefined */.o8)(props.size) ? void 0 : (0,dom_style/* addUnit */.Nn)(props.size),
        "--color": props.color
      };
    });
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("i", (0,external_Vue_.mergeProps)({
        class: (0,external_Vue_.unref)(ns).b(),
        style: (0,external_Vue_.unref)(style)
      }, _ctx.$attrs), [
        (0,external_Vue_.renderSlot)(_ctx.$slots, "default")
      ], 16);
    };
  }
});
var Icon = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/icon/src/icon.vue"]]);


//# sourceMappingURL=icon2.mjs.map

// EXTERNAL MODULE: ./node_modules/element-plus/es/utils/vue/install.mjs
var install = __webpack_require__(2123);
;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/icon/index.mjs





const ElIcon = (0,install/* withInstall */.nz)(Icon);


//# sourceMappingURL=index.mjs.map


/***/ }),

/***/ 43378:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {


// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "EZ": function() { return /* binding */ ElInput; }
});

// UNUSED EXPORTS: default, inputEmits, inputProps

// EXTERNAL MODULE: external "Vue"
var external_Vue_ = __webpack_require__(10311);
// EXTERNAL MODULE: ./node_modules/@vueuse/core/index.mjs
var core = __webpack_require__(66309);
// EXTERNAL MODULE: ./node_modules/@vueuse/shared/index.mjs
var shared = __webpack_require__(47475);
// EXTERNAL MODULE: ./node_modules/lodash-es/isNil.js
var isNil = __webpack_require__(27601);
// EXTERNAL MODULE: ./node_modules/element-plus/es/components/icon/index.mjs + 2 modules
var icon = __webpack_require__(14181);
// EXTERNAL MODULE: ./node_modules/@element-plus/icons-vue/dist/index.js
var dist = __webpack_require__(65781);
;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/input/src/utils.mjs



let hiddenTextarea = void 0;
const HIDDEN_STYLE = `
  height:0 !important;
  visibility:hidden !important;
  overflow:hidden !important;
  position:absolute !important;
  z-index:-1000 !important;
  top:0 !important;
  right:0 !important;
`;
const CONTEXT_STYLE = [
  "letter-spacing",
  "line-height",
  "padding-top",
  "padding-bottom",
  "font-family",
  "font-weight",
  "font-size",
  "text-rendering",
  "text-transform",
  "width",
  "text-indent",
  "padding-left",
  "padding-right",
  "border-width",
  "box-sizing"
];
function calculateNodeStyling(targetElement) {
  const style = window.getComputedStyle(targetElement);
  const boxSizing = style.getPropertyValue("box-sizing");
  const paddingSize = Number.parseFloat(style.getPropertyValue("padding-bottom")) + Number.parseFloat(style.getPropertyValue("padding-top"));
  const borderSize = Number.parseFloat(style.getPropertyValue("border-bottom-width")) + Number.parseFloat(style.getPropertyValue("border-top-width"));
  const contextStyle = CONTEXT_STYLE.map((name) => `${name}:${style.getPropertyValue(name)}`).join(";");
  return { contextStyle, paddingSize, borderSize, boxSizing };
}
function calcTextareaHeight(targetElement, minRows = 1, maxRows) {
  var _a;
  if (!hiddenTextarea) {
    hiddenTextarea = document.createElement("textarea");
    document.body.appendChild(hiddenTextarea);
  }
  const { paddingSize, borderSize, boxSizing, contextStyle } = calculateNodeStyling(targetElement);
  hiddenTextarea.setAttribute("style", `${contextStyle};${HIDDEN_STYLE}`);
  hiddenTextarea.value = targetElement.value || targetElement.placeholder || "";
  let height = hiddenTextarea.scrollHeight;
  const result = {};
  if (boxSizing === "border-box") {
    height = height + borderSize;
  } else if (boxSizing === "content-box") {
    height = height - paddingSize;
  }
  hiddenTextarea.value = "";
  const singleRowHeight = hiddenTextarea.scrollHeight - paddingSize;
  if ((0,shared/* isNumber */.hj)(minRows)) {
    let minHeight = singleRowHeight * minRows;
    if (boxSizing === "border-box") {
      minHeight = minHeight + paddingSize + borderSize;
    }
    height = Math.max(minHeight, height);
    result.minHeight = `${minHeight}px`;
  }
  if ((0,shared/* isNumber */.hj)(maxRows)) {
    let maxHeight = singleRowHeight * maxRows;
    if (boxSizing === "border-box") {
      maxHeight = maxHeight + paddingSize + borderSize;
    }
    height = Math.min(maxHeight, height);
  }
  result.height = `${height}px`;
  (_a = hiddenTextarea.parentNode) == null ? void 0 : _a.removeChild(hiddenTextarea);
  hiddenTextarea = void 0;
  return result;
}


//# sourceMappingURL=utils.mjs.map

// EXTERNAL MODULE: ./node_modules/@vue/shared/dist/shared.esm-bundler.js
var shared_esm_bundler = __webpack_require__(3577);
// EXTERNAL MODULE: ./node_modules/element-plus/es/utils/vue/props/runtime.mjs
var runtime = __webpack_require__(35027);
// EXTERNAL MODULE: ./node_modules/element-plus/es/hooks/use-common-props/index.mjs + 1 modules
var use_common_props = __webpack_require__(75711);
// EXTERNAL MODULE: ./node_modules/element-plus/es/utils/vue/icon.mjs
var vue_icon = __webpack_require__(79809);
// EXTERNAL MODULE: ./node_modules/element-plus/es/utils/typescript.mjs
var typescript = __webpack_require__(25450);
// EXTERNAL MODULE: ./node_modules/element-plus/es/constants/event.mjs
var constants_event = __webpack_require__(9460);
;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/input/src/input.mjs










const inputProps = (0,runtime/* buildProps */.o8)({
  id: {
    type: String,
    default: void 0
  },
  size: use_common_props/* useSizeProp */.Pp,
  disabled: Boolean,
  modelValue: {
    type: (0,runtime/* definePropType */.Cq)([
      String,
      Number,
      Object
    ]),
    default: ""
  },
  type: {
    type: String,
    default: "text"
  },
  resize: {
    type: String,
    values: ["none", "both", "horizontal", "vertical"]
  },
  autosize: {
    type: (0,runtime/* definePropType */.Cq)([Boolean, Object]),
    default: false
  },
  autocomplete: {
    type: String,
    default: "off"
  },
  formatter: {
    type: Function
  },
  parser: {
    type: Function
  },
  placeholder: {
    type: String
  },
  form: {
    type: String,
    default: ""
  },
  readonly: {
    type: Boolean,
    default: false
  },
  clearable: {
    type: Boolean,
    default: false
  },
  showPassword: {
    type: Boolean,
    default: false
  },
  showWordLimit: {
    type: Boolean,
    default: false
  },
  suffixIcon: {
    type: vue_icon/* iconPropType */.AA,
    default: ""
  },
  prefixIcon: {
    type: vue_icon/* iconPropType */.AA,
    default: ""
  },
  containerRole: {
    type: String,
    default: void 0
  },
  label: {
    type: String,
    default: void 0
  },
  tabindex: {
    type: [String, Number],
    default: 0
  },
  validateEvent: {
    type: Boolean,
    default: true
  },
  inputStyle: {
    type: (0,runtime/* definePropType */.Cq)([Object, Array, String]),
    default: () => (0,typescript/* mutable */.N)({})
  }
});
const inputEmits = {
  [constants_event/* UPDATE_MODEL_EVENT */.f_]: (value) => (0,shared_esm_bundler/* isString */.HD)(value),
  input: (value) => (0,shared_esm_bundler/* isString */.HD)(value),
  change: (value) => (0,shared_esm_bundler/* isString */.HD)(value),
  focus: (evt) => evt instanceof FocusEvent,
  blur: (evt) => evt instanceof FocusEvent,
  clear: () => true,
  mouseleave: (evt) => evt instanceof MouseEvent,
  mouseenter: (evt) => evt instanceof MouseEvent,
  keydown: (evt) => evt instanceof Event,
  compositionstart: (evt) => evt instanceof CompositionEvent,
  compositionupdate: (evt) => evt instanceof CompositionEvent,
  compositionend: (evt) => evt instanceof CompositionEvent
};


//# sourceMappingURL=input.mjs.map

// EXTERNAL MODULE: ./node_modules/element-plus/es/_virtual/plugin-vue_export-helper.mjs
var plugin_vue_export_helper = __webpack_require__(1446);
// EXTERNAL MODULE: ./node_modules/element-plus/es/hooks/use-attrs/index.mjs
var use_attrs = __webpack_require__(96274);
// EXTERNAL MODULE: ./node_modules/element-plus/es/hooks/use-form-item/index.mjs
var use_form_item = __webpack_require__(79966);
// EXTERNAL MODULE: ./node_modules/element-plus/es/hooks/use-namespace/index.mjs
var use_namespace = __webpack_require__(99143);
;// CONCATENATED MODULE: ./node_modules/element-plus/es/hooks/use-cursor/index.mjs


function useCursor(input) {
  const selectionRef = (0,external_Vue_.ref)();
  function recordCursor() {
    if (input.value == void 0)
      return;
    const { selectionStart, selectionEnd, value } = input.value;
    if (selectionStart == null || selectionEnd == null)
      return;
    const beforeTxt = value.slice(0, Math.max(0, selectionStart));
    const afterTxt = value.slice(Math.max(0, selectionEnd));
    selectionRef.value = {
      selectionStart,
      selectionEnd,
      value,
      beforeTxt,
      afterTxt
    };
  }
  function setCursor() {
    if (input.value == void 0 || selectionRef.value == void 0)
      return;
    const { value } = input.value;
    const { beforeTxt, afterTxt, selectionStart } = selectionRef.value;
    if (beforeTxt == void 0 || afterTxt == void 0 || selectionStart == void 0)
      return;
    let startPos = value.length;
    if (value.endsWith(afterTxt)) {
      startPos = value.length - afterTxt.length;
    } else if (value.startsWith(beforeTxt)) {
      startPos = beforeTxt.length;
    } else {
      const beforeLastChar = beforeTxt[selectionStart - 1];
      const newIndex = value.indexOf(beforeLastChar, selectionStart - 1);
      if (newIndex !== -1) {
        startPos = newIndex + 1;
      }
    }
    input.value.setSelectionRange(startPos, startPos);
  }
  return [recordCursor, setCursor];
}


//# sourceMappingURL=index.mjs.map

// EXTERNAL MODULE: ./node_modules/element-plus/es/utils/i18n.mjs
var i18n = __webpack_require__(62746);
// EXTERNAL MODULE: ./node_modules/element-plus/es/utils/error.mjs
var error = __webpack_require__(24721);
;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/input/src/input2.mjs






















const _hoisted_1 = ["role"];
const _hoisted_2 = ["id", "type", "disabled", "formatter", "parser", "readonly", "autocomplete", "tabindex", "aria-label", "placeholder"];
const _hoisted_3 = ["id", "tabindex", "disabled", "readonly", "autocomplete", "aria-label", "placeholder"];
const __default__ = {
  name: "ElInput",
  inheritAttrs: false
};
const _sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...__default__,
  props: inputProps,
  emits: inputEmits,
  setup(__props, { expose, emit }) {
    const props = __props;
    const PENDANT_MAP = {
      suffix: "append",
      prefix: "prepend"
    };
    const instance = (0,external_Vue_.getCurrentInstance)();
    const rawAttrs = (0,external_Vue_.useAttrs)();
    const slots = (0,external_Vue_.useSlots)();
    const containerAttrs = (0,external_Vue_.computed)(() => {
      const comboBoxAttrs = {};
      if (props.containerRole === "combobox") {
        comboBoxAttrs["aria-haspopup"] = rawAttrs["aria-haspopup"];
        comboBoxAttrs["aria-owns"] = rawAttrs["aria-owns"];
        comboBoxAttrs["aria-expanded"] = rawAttrs["aria-expanded"];
      }
      return comboBoxAttrs;
    });
    const attrs = (0,use_attrs/* useAttrs */.l)({
      excludeKeys: (0,external_Vue_.computed)(() => {
        return Object.keys(containerAttrs.value);
      })
    });
    const { form, formItem } = (0,use_form_item/* useFormItem */.A)();
    const { inputId } = (0,use_form_item/* useFormItemInputId */.p)(props, {
      formItemContext: formItem
    });
    const inputSize = (0,use_common_props/* useSize */.tH)();
    const inputDisabled = (0,use_common_props/* useDisabled */.B4)();
    const nsInput = (0,use_namespace/* useNamespace */.s)("input");
    const nsTextarea = (0,use_namespace/* useNamespace */.s)("textarea");
    const input = (0,external_Vue_.shallowRef)();
    const textarea = (0,external_Vue_.shallowRef)();
    const focused = (0,external_Vue_.ref)(false);
    const hovering = (0,external_Vue_.ref)(false);
    const isComposing = (0,external_Vue_.ref)(false);
    const passwordVisible = (0,external_Vue_.ref)(false);
    const countStyle = (0,external_Vue_.ref)();
    const textareaCalcStyle = (0,external_Vue_.shallowRef)(props.inputStyle);
    const _ref = (0,external_Vue_.computed)(() => input.value || textarea.value);
    const needStatusIcon = (0,external_Vue_.computed)(() => {
      var _a;
      return (_a = form == null ? void 0 : form.statusIcon) != null ? _a : false;
    });
    const validateState = (0,external_Vue_.computed)(() => (formItem == null ? void 0 : formItem.validateState) || "");
    const validateIcon = (0,external_Vue_.computed)(() => validateState.value && vue_icon/* ValidateComponentsMap */.rU[validateState.value]);
    const passwordIcon = (0,external_Vue_.computed)(() => passwordVisible.value ? dist/* View */.G7x : dist/* Hide */.caK);
    const containerStyle = (0,external_Vue_.computed)(() => [
      rawAttrs.style,
      props.inputStyle
    ]);
    const textareaStyle = (0,external_Vue_.computed)(() => [
      props.inputStyle,
      textareaCalcStyle.value,
      { resize: props.resize }
    ]);
    const nativeInputValue = (0,external_Vue_.computed)(() => (0,isNil/* default */.Z)(props.modelValue) ? "" : String(props.modelValue));
    const showClear = (0,external_Vue_.computed)(() => props.clearable && !inputDisabled.value && !props.readonly && !!nativeInputValue.value && (focused.value || hovering.value));
    const showPwdVisible = (0,external_Vue_.computed)(() => props.showPassword && !inputDisabled.value && !props.readonly && !!nativeInputValue.value && (!!nativeInputValue.value || focused.value));
    const isWordLimitVisible = (0,external_Vue_.computed)(() => props.showWordLimit && !!attrs.value.maxlength && (props.type === "text" || props.type === "textarea") && !inputDisabled.value && !props.readonly && !props.showPassword);
    const textLength = (0,external_Vue_.computed)(() => Array.from(nativeInputValue.value).length);
    const inputExceed = (0,external_Vue_.computed)(() => !!isWordLimitVisible.value && textLength.value > Number(attrs.value.maxlength));
    const suffixVisible = (0,external_Vue_.computed)(() => !!slots.suffix || !!props.suffixIcon || showClear.value || props.showPassword || isWordLimitVisible.value || !!validateState.value && needStatusIcon.value);
    const [recordCursor, setCursor] = useCursor(input);
    (0,core/* useResizeObserver */.yU7)(textarea, (entries) => {
      if (!isWordLimitVisible.value || props.resize !== "both")
        return;
      const entry = entries[0];
      const { width } = entry.contentRect;
      countStyle.value = {
        right: `calc(100% - ${width + 15 + 6}px)`
      };
    });
    const resizeTextarea = () => {
      const { type, autosize } = props;
      if (!shared/* isClient */.C5 || type !== "textarea")
        return;
      if (autosize) {
        const minRows = (0,shared_esm_bundler/* isObject */.Kn)(autosize) ? autosize.minRows : void 0;
        const maxRows = (0,shared_esm_bundler/* isObject */.Kn)(autosize) ? autosize.maxRows : void 0;
        textareaCalcStyle.value = {
          ...calcTextareaHeight(textarea.value, minRows, maxRows)
        };
      } else {
        textareaCalcStyle.value = {
          minHeight: calcTextareaHeight(textarea.value).minHeight
        };
      }
    };
    const setNativeInputValue = () => {
      const input2 = _ref.value;
      if (!input2 || input2.value === nativeInputValue.value)
        return;
      input2.value = nativeInputValue.value;
    };
    const calcIconOffset = (place) => {
      const { el } = instance.vnode;
      if (!el)
        return;
      const elList = Array.from(el.querySelectorAll(`.${nsInput.e(place)}`));
      const target = elList.find((item) => item.parentNode === el);
      if (!target)
        return;
      const pendant = PENDANT_MAP[place];
      if (slots[pendant]) {
        target.style.transform = `translateX(${place === "suffix" ? "-" : ""}${el.querySelector(`.${nsInput.be("group", pendant)}`).offsetWidth}px)`;
      } else {
        target.removeAttribute("style");
      }
    };
    const updateIconOffset = () => {
      calcIconOffset("prefix");
      calcIconOffset("suffix");
    };
    const handleInput = async (event) => {
      recordCursor();
      let { value } = event.target;
      if (props.formatter) {
        value = props.parser ? props.parser(value) : value;
        value = props.formatter(value);
      }
      if (isComposing.value)
        return;
      if (value === nativeInputValue.value)
        return;
      emit(constants_event/* UPDATE_MODEL_EVENT */.f_, value);
      emit("input", value);
      await (0,external_Vue_.nextTick)();
      setNativeInputValue();
      setCursor();
    };
    const handleChange = (event) => {
      emit("change", event.target.value);
    };
    const handleCompositionStart = (event) => {
      emit("compositionstart", event);
      isComposing.value = true;
    };
    const handleCompositionUpdate = (event) => {
      var _a;
      emit("compositionupdate", event);
      const text = (_a = event.target) == null ? void 0 : _a.value;
      const lastCharacter = text[text.length - 1] || "";
      isComposing.value = !(0,i18n/* isKorean */.w)(lastCharacter);
    };
    const handleCompositionEnd = (event) => {
      emit("compositionend", event);
      if (isComposing.value) {
        isComposing.value = false;
        handleInput(event);
      }
    };
    const handlePasswordVisible = () => {
      passwordVisible.value = !passwordVisible.value;
      focus();
    };
    const focus = async () => {
      var _a;
      await (0,external_Vue_.nextTick)();
      (_a = _ref.value) == null ? void 0 : _a.focus();
    };
    const blur = () => {
      var _a;
      return (_a = _ref.value) == null ? void 0 : _a.blur();
    };
    const handleFocus = (event) => {
      focused.value = true;
      emit("focus", event);
    };
    const handleBlur = (event) => {
      var _a;
      focused.value = false;
      emit("blur", event);
      if (props.validateEvent) {
        (_a = formItem == null ? void 0 : formItem.validate) == null ? void 0 : _a.call(formItem, "blur").catch((err) => (0,error/* debugWarn */.N)(err));
      }
    };
    const handleMouseLeave = (evt) => {
      hovering.value = false;
      emit("mouseleave", evt);
    };
    const handleMouseEnter = (evt) => {
      hovering.value = true;
      emit("mouseenter", evt);
    };
    const handleKeydown = (evt) => {
      emit("keydown", evt);
    };
    const select = () => {
      var _a;
      (_a = _ref.value) == null ? void 0 : _a.select();
    };
    const clear = () => {
      emit(constants_event/* UPDATE_MODEL_EVENT */.f_, "");
      emit("change", "");
      emit("clear");
      emit("input", "");
    };
    (0,external_Vue_.watch)(() => props.modelValue, () => {
      var _a;
      (0,external_Vue_.nextTick)(() => resizeTextarea());
      if (props.validateEvent) {
        (_a = formItem == null ? void 0 : formItem.validate) == null ? void 0 : _a.call(formItem, "change").catch((err) => (0,error/* debugWarn */.N)(err));
      }
    });
    (0,external_Vue_.watch)(nativeInputValue, () => setNativeInputValue());
    (0,external_Vue_.watch)(() => props.type, async () => {
      await (0,external_Vue_.nextTick)();
      setNativeInputValue();
      resizeTextarea();
      updateIconOffset();
    });
    (0,external_Vue_.onMounted)(async () => {
      if (!props.formatter && props.parser) {
        (0,error/* debugWarn */.N)("ElInput", "If you set the parser, you also need to set the formatter.");
      }
      setNativeInputValue();
      updateIconOffset();
      await (0,external_Vue_.nextTick)();
      resizeTextarea();
    });
    (0,external_Vue_.onUpdated)(async () => {
      await (0,external_Vue_.nextTick)();
      updateIconOffset();
    });
    expose({
      input,
      textarea,
      ref: _ref,
      textareaStyle,
      autosize: (0,external_Vue_.toRef)(props, "autosize"),
      focus,
      blur,
      select,
      clear,
      resizeTextarea
    });
    return (_ctx, _cache) => {
      return (0,external_Vue_.withDirectives)(((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", (0,external_Vue_.mergeProps)((0,external_Vue_.unref)(containerAttrs), {
        class: [
          _ctx.type === "textarea" ? (0,external_Vue_.unref)(nsTextarea).b() : (0,external_Vue_.unref)(nsInput).b(),
          (0,external_Vue_.unref)(nsInput).m((0,external_Vue_.unref)(inputSize)),
          (0,external_Vue_.unref)(nsInput).is("disabled", (0,external_Vue_.unref)(inputDisabled)),
          (0,external_Vue_.unref)(nsInput).is("exceed", (0,external_Vue_.unref)(inputExceed)),
          {
            [(0,external_Vue_.unref)(nsInput).b("group")]: _ctx.$slots.prepend || _ctx.$slots.append,
            [(0,external_Vue_.unref)(nsInput).bm("group", "append")]: _ctx.$slots.append,
            [(0,external_Vue_.unref)(nsInput).bm("group", "prepend")]: _ctx.$slots.prepend,
            [(0,external_Vue_.unref)(nsInput).m("prefix")]: _ctx.$slots.prefix || _ctx.prefixIcon,
            [(0,external_Vue_.unref)(nsInput).m("suffix")]: _ctx.$slots.suffix || _ctx.suffixIcon || _ctx.clearable || _ctx.showPassword,
            [(0,external_Vue_.unref)(nsInput).bm("suffix", "password-clear")]: (0,external_Vue_.unref)(showClear) && (0,external_Vue_.unref)(showPwdVisible)
          },
          _ctx.$attrs.class
        ],
        style: (0,external_Vue_.unref)(containerStyle),
        role: _ctx.containerRole,
        onMouseenter: handleMouseEnter,
        onMouseleave: handleMouseLeave
      }), [
        (0,external_Vue_.createCommentVNode)(" input "),
        _ctx.type !== "textarea" ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, { key: 0 }, [
          (0,external_Vue_.createCommentVNode)(" prepend slot "),
          _ctx.$slots.prepend ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
            key: 0,
            class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(nsInput).be("group", "prepend"))
          }, [
            (0,external_Vue_.renderSlot)(_ctx.$slots, "prepend")
          ], 2)) : (0,external_Vue_.createCommentVNode)("v-if", true),
          (0,external_Vue_.createElementVNode)("div", {
            class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(nsInput).e("wrapper"), (0,external_Vue_.unref)(nsInput).is("focus", focused.value)])
          }, [
            (0,external_Vue_.createCommentVNode)(" prefix slot "),
            _ctx.$slots.prefix || _ctx.prefixIcon ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("span", {
              key: 0,
              class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(nsInput).e("prefix"))
            }, [
              (0,external_Vue_.createElementVNode)("span", {
                class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(nsInput).e("prefix-inner"))
              }, [
                (0,external_Vue_.renderSlot)(_ctx.$slots, "prefix"),
                _ctx.prefixIcon ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.unref)(icon/* ElIcon */.gn), {
                  key: 0,
                  class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(nsInput).e("icon"))
                }, {
                  default: (0,external_Vue_.withCtx)(() => [
                    ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.resolveDynamicComponent)(_ctx.prefixIcon)))
                  ]),
                  _: 1
                }, 8, ["class"])) : (0,external_Vue_.createCommentVNode)("v-if", true)
              ], 2)
            ], 2)) : (0,external_Vue_.createCommentVNode)("v-if", true),
            (0,external_Vue_.createElementVNode)("input", (0,external_Vue_.mergeProps)({
              id: (0,external_Vue_.unref)(inputId),
              ref_key: "input",
              ref: input,
              class: (0,external_Vue_.unref)(nsInput).e("inner")
            }, (0,external_Vue_.unref)(attrs), {
              type: _ctx.showPassword ? passwordVisible.value ? "text" : "password" : _ctx.type,
              disabled: (0,external_Vue_.unref)(inputDisabled),
              formatter: _ctx.formatter,
              parser: _ctx.parser,
              readonly: _ctx.readonly,
              autocomplete: _ctx.autocomplete,
              tabindex: _ctx.tabindex,
              "aria-label": _ctx.label,
              placeholder: _ctx.placeholder,
              style: _ctx.inputStyle,
              onCompositionstart: handleCompositionStart,
              onCompositionupdate: handleCompositionUpdate,
              onCompositionend: handleCompositionEnd,
              onInput: handleInput,
              onFocus: handleFocus,
              onBlur: handleBlur,
              onChange: handleChange,
              onKeydown: handleKeydown
            }), null, 16, _hoisted_2),
            (0,external_Vue_.createCommentVNode)(" suffix slot "),
            (0,external_Vue_.unref)(suffixVisible) ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("span", {
              key: 1,
              class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(nsInput).e("suffix"))
            }, [
              (0,external_Vue_.createElementVNode)("span", {
                class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(nsInput).e("suffix-inner"))
              }, [
                !(0,external_Vue_.unref)(showClear) || !(0,external_Vue_.unref)(showPwdVisible) || !(0,external_Vue_.unref)(isWordLimitVisible) ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, { key: 0 }, [
                  (0,external_Vue_.renderSlot)(_ctx.$slots, "suffix"),
                  _ctx.suffixIcon ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.unref)(icon/* ElIcon */.gn), {
                    key: 0,
                    class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(nsInput).e("icon"))
                  }, {
                    default: (0,external_Vue_.withCtx)(() => [
                      ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.resolveDynamicComponent)(_ctx.suffixIcon)))
                    ]),
                    _: 1
                  }, 8, ["class"])) : (0,external_Vue_.createCommentVNode)("v-if", true)
                ], 64)) : (0,external_Vue_.createCommentVNode)("v-if", true),
                (0,external_Vue_.unref)(showClear) ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.unref)(icon/* ElIcon */.gn), {
                  key: 1,
                  class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(nsInput).e("icon"), (0,external_Vue_.unref)(nsInput).e("clear")]),
                  onMousedown: (0,external_Vue_.withModifiers)((0,external_Vue_.unref)(shared_esm_bundler/* NOOP */.dG), ["prevent"]),
                  onClick: clear
                }, {
                  default: (0,external_Vue_.withCtx)(() => [
                    (0,external_Vue_.createVNode)((0,external_Vue_.unref)(dist/* CircleClose */.K41))
                  ]),
                  _: 1
                }, 8, ["class", "onMousedown"])) : (0,external_Vue_.createCommentVNode)("v-if", true),
                (0,external_Vue_.unref)(showPwdVisible) ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.unref)(icon/* ElIcon */.gn), {
                  key: 2,
                  class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(nsInput).e("icon"), (0,external_Vue_.unref)(nsInput).e("password")]),
                  onClick: handlePasswordVisible
                }, {
                  default: (0,external_Vue_.withCtx)(() => [
                    ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.resolveDynamicComponent)((0,external_Vue_.unref)(passwordIcon))))
                  ]),
                  _: 1
                }, 8, ["class"])) : (0,external_Vue_.createCommentVNode)("v-if", true),
                (0,external_Vue_.unref)(isWordLimitVisible) ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("span", {
                  key: 3,
                  class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(nsInput).e("count"))
                }, [
                  (0,external_Vue_.createElementVNode)("span", {
                    class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(nsInput).e("count-inner"))
                  }, (0,external_Vue_.toDisplayString)((0,external_Vue_.unref)(textLength)) + " / " + (0,external_Vue_.toDisplayString)((0,external_Vue_.unref)(attrs).maxlength), 3)
                ], 2)) : (0,external_Vue_.createCommentVNode)("v-if", true),
                (0,external_Vue_.unref)(validateState) && (0,external_Vue_.unref)(validateIcon) && (0,external_Vue_.unref)(needStatusIcon) ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.unref)(icon/* ElIcon */.gn), {
                  key: 4,
                  class: (0,external_Vue_.normalizeClass)([
                    (0,external_Vue_.unref)(nsInput).e("icon"),
                    (0,external_Vue_.unref)(nsInput).e("validateIcon"),
                    (0,external_Vue_.unref)(nsInput).is("loading", (0,external_Vue_.unref)(validateState) === "validating")
                  ])
                }, {
                  default: (0,external_Vue_.withCtx)(() => [
                    ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.resolveDynamicComponent)((0,external_Vue_.unref)(validateIcon))))
                  ]),
                  _: 1
                }, 8, ["class"])) : (0,external_Vue_.createCommentVNode)("v-if", true)
              ], 2)
            ], 2)) : (0,external_Vue_.createCommentVNode)("v-if", true)
          ], 2),
          (0,external_Vue_.createCommentVNode)(" append slot "),
          _ctx.$slots.append ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
            key: 1,
            class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(nsInput).be("group", "append"))
          }, [
            (0,external_Vue_.renderSlot)(_ctx.$slots, "append")
          ], 2)) : (0,external_Vue_.createCommentVNode)("v-if", true)
        ], 64)) : ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, { key: 1 }, [
          (0,external_Vue_.createCommentVNode)(" textarea "),
          (0,external_Vue_.createElementVNode)("textarea", (0,external_Vue_.mergeProps)({
            id: (0,external_Vue_.unref)(inputId),
            ref_key: "textarea",
            ref: textarea,
            class: (0,external_Vue_.unref)(nsTextarea).e("inner")
          }, (0,external_Vue_.unref)(attrs), {
            tabindex: _ctx.tabindex,
            disabled: (0,external_Vue_.unref)(inputDisabled),
            readonly: _ctx.readonly,
            autocomplete: _ctx.autocomplete,
            style: (0,external_Vue_.unref)(textareaStyle),
            "aria-label": _ctx.label,
            placeholder: _ctx.placeholder,
            onCompositionstart: handleCompositionStart,
            onCompositionupdate: handleCompositionUpdate,
            onCompositionend: handleCompositionEnd,
            onInput: handleInput,
            onFocus: handleFocus,
            onBlur: handleBlur,
            onChange: handleChange,
            onKeydown: handleKeydown
          }), null, 16, _hoisted_3),
          (0,external_Vue_.unref)(isWordLimitVisible) ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("span", {
            key: 0,
            style: (0,external_Vue_.normalizeStyle)(countStyle.value),
            class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(nsInput).e("count"))
          }, (0,external_Vue_.toDisplayString)((0,external_Vue_.unref)(textLength)) + " / " + (0,external_Vue_.toDisplayString)((0,external_Vue_.unref)(attrs).maxlength), 7)) : (0,external_Vue_.createCommentVNode)("v-if", true)
        ], 64))
      ], 16, _hoisted_1)), [
        [external_Vue_.vShow, _ctx.type !== "hidden"]
      ]);
    };
  }
});
var Input = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/input/src/input.vue"]]);


//# sourceMappingURL=input2.mjs.map

// EXTERNAL MODULE: ./node_modules/element-plus/es/utils/vue/install.mjs
var install = __webpack_require__(2123);
;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/input/index.mjs





const ElInput = (0,install/* withInstall */.nz)(Input);


//# sourceMappingURL=index.mjs.map


/***/ }),

/***/ 6503:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "P": function() { return /* binding */ datePickTypes; },
/* harmony export */   "p": function() { return /* binding */ WEEK_DAYS; }
/* harmony export */ });
const datePickTypes = [
  "year",
  "month",
  "date",
  "dates",
  "week",
  "datetime",
  "datetimerange",
  "daterange",
  "monthrange"
];
const WEEK_DAYS = [
  "sun",
  "mon",
  "tue",
  "wed",
  "thu",
  "fri",
  "sat"
];


//# sourceMappingURL=date.mjs.map


/***/ }),

/***/ 9460:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "O7": function() { return /* binding */ CHANGE_EVENT; },
/* harmony export */   "e_": function() { return /* binding */ INPUT_EVENT; },
/* harmony export */   "f_": function() { return /* binding */ UPDATE_MODEL_EVENT; }
/* harmony export */ });
const UPDATE_MODEL_EVENT = "update:modelValue";
const CHANGE_EVENT = "change";
const INPUT_EVENT = "input";


//# sourceMappingURL=event.mjs.map


/***/ }),

/***/ 90209:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "V": function() { return /* binding */ componentSizeMap; },
/* harmony export */   "k": function() { return /* binding */ componentSizes; }
/* harmony export */ });
const componentSizes = ["", "default", "small", "large"];
const componentSizeMap = {
  large: 40,
  default: 32,
  small: 24
};


//# sourceMappingURL=size.mjs.map


/***/ }),

/***/ 77340:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {


// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "Z": function() { return /* binding */ installer; }
});

;// CONCATENATED MODULE: ./node_modules/element-plus/es/version.mjs
const version = "2.2.8";


//# sourceMappingURL=version.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/constants/key.mjs
const INSTALLED_KEY = Symbol("INSTALLED_KEY");


//# sourceMappingURL=key.mjs.map

// EXTERNAL MODULE: ./node_modules/element-plus/es/hooks/use-global-config/index.mjs + 1 modules
var use_global_config = __webpack_require__(66722);
;// CONCATENATED MODULE: ./node_modules/element-plus/es/make-installer.mjs






const makeInstaller = (components = []) => {
  const install = (app, options) => {
    if (app[INSTALLED_KEY])
      return;
    app[INSTALLED_KEY] = true;
    components.forEach((c) => app.use(c));
    if (options)
      (0,use_global_config/* provideGlobalConfig */.A)(options, app, true);
  };
  return {
    version: version,
    install
  };
};


//# sourceMappingURL=make-installer.mjs.map

// EXTERNAL MODULE: external "Vue"
var external_Vue_ = __webpack_require__(10311);
// EXTERNAL MODULE: ./node_modules/@vueuse/core/index.mjs
var core = __webpack_require__(66309);
// EXTERNAL MODULE: ./node_modules/element-plus/es/utils/vue/props/runtime.mjs
var runtime = __webpack_require__(35027);
// EXTERNAL MODULE: ./node_modules/@vueuse/shared/index.mjs
var shared = __webpack_require__(47475);
// EXTERNAL MODULE: ./node_modules/element-plus/es/constants/event.mjs
var constants_event = __webpack_require__(9460);
;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/affix/src/affix.mjs






const affixProps = (0,runtime/* buildProps */.o8)({
  zIndex: {
    type: (0,runtime/* definePropType */.Cq)([Number, String]),
    default: 100
  },
  target: {
    type: String,
    default: ""
  },
  offset: {
    type: Number,
    default: 0
  },
  position: {
    type: String,
    values: ["top", "bottom"],
    default: "top"
  }
});
const affixEmits = {
  scroll: ({ scrollTop, fixed }) => (0,shared/* isNumber */.hj)(scrollTop) && (0,shared/* isBoolean */.jn)(fixed),
  [constants_event/* CHANGE_EVENT */.O7]: (fixed) => (0,shared/* isBoolean */.jn)(fixed)
};


//# sourceMappingURL=affix.mjs.map

// EXTERNAL MODULE: ./node_modules/element-plus/es/_virtual/plugin-vue_export-helper.mjs
var plugin_vue_export_helper = __webpack_require__(1446);
// EXTERNAL MODULE: ./node_modules/element-plus/es/hooks/use-namespace/index.mjs
var use_namespace = __webpack_require__(99143);
// EXTERNAL MODULE: ./node_modules/element-plus/es/utils/error.mjs
var error = __webpack_require__(24721);
// EXTERNAL MODULE: ./node_modules/element-plus/es/utils/dom/style.mjs
var dom_style = __webpack_require__(67675);
;// CONCATENATED MODULE: ./node_modules/element-plus/es/utils/dom/scroll.mjs



const isScroll = (el, isVertical) => {
  if (!shared/* isClient */.C5)
    return false;
  const key = {
    undefined: "overflow",
    true: "overflow-y",
    false: "overflow-x"
  }[String(isVertical)];
  const overflow = (0,dom_style/* getStyle */.C2)(el, key);
  return ["scroll", "auto", "overlay"].some((s) => overflow.includes(s));
};
const getScrollContainer = (el, isVertical) => {
  if (!shared/* isClient */.C5)
    return;
  let parent = el;
  while (parent) {
    if ([window, document, document.documentElement].includes(parent))
      return window;
    if (isScroll(parent, isVertical))
      return parent;
    parent = parent.parentNode;
  }
  return parent;
};
let scrollBarWidth;
const getScrollBarWidth = () => {
  var _a;
  if (!shared/* isClient */.C5)
    return 0;
  if (scrollBarWidth !== void 0)
    return scrollBarWidth;
  const outer = document.createElement("div");
  outer.className = "el-scrollbar__wrap";
  outer.style.visibility = "hidden";
  outer.style.width = "100px";
  outer.style.position = "absolute";
  outer.style.top = "-9999px";
  document.body.appendChild(outer);
  const widthNoScroll = outer.offsetWidth;
  outer.style.overflow = "scroll";
  const inner = document.createElement("div");
  inner.style.width = "100%";
  outer.appendChild(inner);
  const widthWithScroll = inner.offsetWidth;
  (_a = outer.parentNode) == null ? void 0 : _a.removeChild(outer);
  scrollBarWidth = widthNoScroll - widthWithScroll;
  return scrollBarWidth;
};
function scrollIntoView(container, selected) {
  if (!shared/* isClient */.C5)
    return;
  if (!selected) {
    container.scrollTop = 0;
    return;
  }
  const offsetParents = [];
  let pointer = selected.offsetParent;
  while (pointer !== null && container !== pointer && container.contains(pointer)) {
    offsetParents.push(pointer);
    pointer = pointer.offsetParent;
  }
  const top = selected.offsetTop + offsetParents.reduce((prev, curr) => prev + curr.offsetTop, 0);
  const bottom = top + selected.offsetHeight;
  const viewRectTop = container.scrollTop;
  const viewRectBottom = viewRectTop + container.clientHeight;
  if (top < viewRectTop) {
    container.scrollTop = top;
  } else if (bottom > viewRectBottom) {
    container.scrollTop = bottom - container.clientHeight;
  }
}


//# sourceMappingURL=scroll.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/affix/src/affix2.mjs










const __default__ = {
  name: "ElAffix"
};
const _sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...__default__,
  props: affixProps,
  emits: affixEmits,
  setup(__props, { expose, emit }) {
    const props = __props;
    const COMPONENT_NAME = "ElAffix";
    const ns = (0,use_namespace/* useNamespace */.s)("affix");
    const target = (0,external_Vue_.shallowRef)();
    const root = (0,external_Vue_.shallowRef)();
    const scrollContainer = (0,external_Vue_.shallowRef)();
    const { height: windowHeight } = (0,core/* useWindowSize */.iPe)();
    const {
      height: rootHeight,
      width: rootWidth,
      top: rootTop,
      bottom: rootBottom,
      update: updateRoot
    } = (0,core/* useElementBounding */.rBN)(root);
    const targetRect = (0,core/* useElementBounding */.rBN)(target);
    const fixed = (0,external_Vue_.ref)(false);
    const scrollTop = (0,external_Vue_.ref)(0);
    const transform = (0,external_Vue_.ref)(0);
    const rootStyle = (0,external_Vue_.computed)(() => {
      return {
        height: fixed.value ? `${rootHeight.value}px` : "",
        width: fixed.value ? `${rootWidth.value}px` : ""
      };
    });
    const affixStyle = (0,external_Vue_.computed)(() => {
      if (!fixed.value)
        return {};
      const offset = props.offset ? `${props.offset}px` : 0;
      return {
        height: `${rootHeight.value}px`,
        width: `${rootWidth.value}px`,
        top: props.position === "top" ? offset : "",
        bottom: props.position === "bottom" ? offset : "",
        transform: transform.value ? `translateY(${transform.value}px)` : "",
        zIndex: props.zIndex
      };
    });
    const update = () => {
      if (!scrollContainer.value)
        return;
      scrollTop.value = scrollContainer.value instanceof Window ? document.documentElement.scrollTop : scrollContainer.value.scrollTop || 0;
      if (props.position === "top") {
        if (props.target) {
          const difference = targetRect.bottom.value - props.offset - rootHeight.value;
          fixed.value = props.offset > rootTop.value && targetRect.bottom.value > 0;
          transform.value = difference < 0 ? difference : 0;
        } else {
          fixed.value = props.offset > rootTop.value;
        }
      } else if (props.target) {
        const difference = windowHeight.value - targetRect.top.value - props.offset - rootHeight.value;
        fixed.value = windowHeight.value - props.offset < rootBottom.value && windowHeight.value > targetRect.top.value;
        transform.value = difference < 0 ? -difference : 0;
      } else {
        fixed.value = windowHeight.value - props.offset < rootBottom.value;
      }
    };
    const handleScroll = () => {
      emit("scroll", {
        scrollTop: scrollTop.value,
        fixed: fixed.value
      });
    };
    (0,external_Vue_.watch)(fixed, (val) => emit("change", val));
    (0,external_Vue_.onMounted)(() => {
      var _a;
      if (props.target) {
        target.value = (_a = document.querySelector(props.target)) != null ? _a : void 0;
        if (!target.value)
          (0,error/* throwError */._)(COMPONENT_NAME, `Target is not existed: ${props.target}`);
      } else {
        target.value = document.documentElement;
      }
      scrollContainer.value = getScrollContainer(root.value, true);
      updateRoot();
    });
    (0,core/* useEventListener */.ORN)(scrollContainer, "scroll", handleScroll);
    (0,external_Vue_.watchEffect)(update);
    expose({
      update
    });
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
        ref_key: "root",
        ref: root,
        class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).b()),
        style: (0,external_Vue_.normalizeStyle)((0,external_Vue_.unref)(rootStyle))
      }, [
        (0,external_Vue_.createElementVNode)("div", {
          class: (0,external_Vue_.normalizeClass)({ [(0,external_Vue_.unref)(ns).m("fixed")]: fixed.value }),
          style: (0,external_Vue_.normalizeStyle)((0,external_Vue_.unref)(affixStyle))
        }, [
          (0,external_Vue_.renderSlot)(_ctx.$slots, "default")
        ], 6)
      ], 6);
    };
  }
});
var Affix = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/affix/src/affix.vue"]]);


//# sourceMappingURL=affix2.mjs.map

// EXTERNAL MODULE: ./node_modules/element-plus/es/utils/vue/install.mjs
var install = __webpack_require__(2123);
;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/affix/index.mjs





const ElAffix = (0,install/* withInstall */.nz)(Affix);


//# sourceMappingURL=index.mjs.map

// EXTERNAL MODULE: ./node_modules/element-plus/es/components/icon/index.mjs + 2 modules
var components_icon = __webpack_require__(14181);
// EXTERNAL MODULE: ./node_modules/element-plus/es/utils/objects.mjs
var objects = __webpack_require__(14574);
// EXTERNAL MODULE: ./node_modules/element-plus/es/utils/vue/icon.mjs
var icon = __webpack_require__(79809);
;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/alert/src/alert.mjs





const alertEffects = ["light", "dark"];
const alertProps = (0,runtime/* buildProps */.o8)({
  title: {
    type: String,
    default: ""
  },
  description: {
    type: String,
    default: ""
  },
  type: {
    type: String,
    values: (0,objects/* keysOf */.uc)(icon/* TypeComponentsMap */.Rp),
    default: "info"
  },
  closable: {
    type: Boolean,
    default: true
  },
  closeText: {
    type: String,
    default: ""
  },
  showIcon: Boolean,
  center: Boolean,
  effect: {
    type: String,
    values: alertEffects,
    default: "light"
  }
});
const alertEmits = {
  close: (evt) => evt instanceof MouseEvent
};


//# sourceMappingURL=alert.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/alert/src/alert2.mjs









const alert2_default_ = {
  name: "ElAlert"
};
const alert2_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...alert2_default_,
  props: alertProps,
  emits: alertEmits,
  setup(__props, { emit }) {
    const props = __props;
    const { Close } = icon/* TypeComponents */.f5;
    const slots = (0,external_Vue_.useSlots)();
    const ns = (0,use_namespace/* useNamespace */.s)("alert");
    const visible = (0,external_Vue_.ref)(true);
    const iconComponent = (0,external_Vue_.computed)(() => icon/* TypeComponentsMap */.Rp[props.type]);
    const iconClass = (0,external_Vue_.computed)(() => [
      ns.e("icon"),
      { [ns.is("big")]: !!props.description || !!slots.default }
    ]);
    const isBoldTitle = (0,external_Vue_.computed)(() => props.description || { [ns.is("bold")]: slots.default });
    const close = (evt) => {
      visible.value = false;
      emit("close", evt);
    };
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(external_Vue_.Transition, {
        name: (0,external_Vue_.unref)(ns).b("fade"),
        persisted: ""
      }, {
        default: (0,external_Vue_.withCtx)(() => [
          (0,external_Vue_.withDirectives)((0,external_Vue_.createElementVNode)("div", {
            class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(ns).b(), (0,external_Vue_.unref)(ns).m(_ctx.type), (0,external_Vue_.unref)(ns).is("center", _ctx.center), (0,external_Vue_.unref)(ns).is(_ctx.effect)]),
            role: "alert"
          }, [
            _ctx.showIcon && (0,external_Vue_.unref)(iconComponent) ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.unref)(components_icon/* ElIcon */.gn), {
              key: 0,
              class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(iconClass))
            }, {
              default: (0,external_Vue_.withCtx)(() => [
                ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.resolveDynamicComponent)((0,external_Vue_.unref)(iconComponent))))
              ]),
              _: 1
            }, 8, ["class"])) : (0,external_Vue_.createCommentVNode)("v-if", true),
            (0,external_Vue_.createElementVNode)("div", {
              class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("content"))
            }, [
              _ctx.title || _ctx.$slots.title ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("span", {
                key: 0,
                class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(ns).e("title"), (0,external_Vue_.unref)(isBoldTitle)])
              }, [
                (0,external_Vue_.renderSlot)(_ctx.$slots, "title", {}, () => [
                  (0,external_Vue_.createTextVNode)((0,external_Vue_.toDisplayString)(_ctx.title), 1)
                ])
              ], 2)) : (0,external_Vue_.createCommentVNode)("v-if", true),
              _ctx.$slots.default || _ctx.description ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("p", {
                key: 1,
                class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("description"))
              }, [
                (0,external_Vue_.renderSlot)(_ctx.$slots, "default", {}, () => [
                  (0,external_Vue_.createTextVNode)((0,external_Vue_.toDisplayString)(_ctx.description), 1)
                ])
              ], 2)) : (0,external_Vue_.createCommentVNode)("v-if", true),
              _ctx.closable ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, { key: 2 }, [
                _ctx.closeText ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
                  key: 0,
                  class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(ns).e("close-btn"), (0,external_Vue_.unref)(ns).is("customed")]),
                  onClick: close
                }, (0,external_Vue_.toDisplayString)(_ctx.closeText), 3)) : ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.unref)(components_icon/* ElIcon */.gn), {
                  key: 1,
                  class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("close-btn")),
                  onClick: close
                }, {
                  default: (0,external_Vue_.withCtx)(() => [
                    (0,external_Vue_.createVNode)((0,external_Vue_.unref)(Close))
                  ]),
                  _: 1
                }, 8, ["class"]))
              ], 64)) : (0,external_Vue_.createCommentVNode)("v-if", true)
            ], 2)
          ], 2), [
            [external_Vue_.vShow, visible.value]
          ])
        ]),
        _: 3
      }, 8, ["name"]);
    };
  }
});
var Alert = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(alert2_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/alert/src/alert.vue"]]);


//# sourceMappingURL=alert2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/alert/index.mjs





const ElAlert = (0,install/* withInstall */.nz)(Alert);


//# sourceMappingURL=index.mjs.map

// EXTERNAL MODULE: ./node_modules/lodash-es/debounce.js + 4 modules
var debounce = __webpack_require__(8891);
// EXTERNAL MODULE: ./node_modules/@element-plus/icons-vue/dist/index.js
var dist = __webpack_require__(65781);
// EXTERNAL MODULE: ./node_modules/element-plus/es/components/input/index.mjs + 4 modules
var components_input = __webpack_require__(43378);
;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/scrollbar/src/util.mjs
const GAP = 4;
const BAR_MAP = {
  vertical: {
    offset: "offsetHeight",
    scroll: "scrollTop",
    scrollSize: "scrollHeight",
    size: "height",
    key: "vertical",
    axis: "Y",
    client: "clientY",
    direction: "top"
  },
  horizontal: {
    offset: "offsetWidth",
    scroll: "scrollLeft",
    scrollSize: "scrollWidth",
    size: "width",
    key: "horizontal",
    axis: "X",
    client: "clientX",
    direction: "left"
  }
};
const renderThumbStyle = ({
  move,
  size,
  bar
}) => ({
  [bar.size]: size,
  transform: `translate${bar.axis}(${move}%)`
});


//# sourceMappingURL=util.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/scrollbar/src/thumb.mjs



const thumbProps = (0,runtime/* buildProps */.o8)({
  vertical: Boolean,
  size: String,
  move: Number,
  ratio: {
    type: Number,
    required: true
  },
  always: Boolean
});


//# sourceMappingURL=thumb.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/tokens/scrollbar.mjs
const scrollbarContextKey = Symbol("scrollbarContextKey");


//# sourceMappingURL=scrollbar.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/scrollbar/src/thumb2.mjs












const thumb2_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  __name: "thumb",
  props: thumbProps,
  setup(__props) {
    const props = __props;
    const COMPONENT_NAME = "Thumb";
    const scrollbar = (0,external_Vue_.inject)(scrollbarContextKey);
    const ns = (0,use_namespace/* useNamespace */.s)("scrollbar");
    if (!scrollbar)
      (0,error/* throwError */._)(COMPONENT_NAME, "can not inject scrollbar context");
    const instance = (0,external_Vue_.ref)();
    const thumb = (0,external_Vue_.ref)();
    const thumbState = (0,external_Vue_.ref)({});
    const visible = (0,external_Vue_.ref)(false);
    let cursorDown = false;
    let cursorLeave = false;
    let originalOnSelectStart = shared/* isClient */.C5 ? document.onselectstart : null;
    const bar = (0,external_Vue_.computed)(() => BAR_MAP[props.vertical ? "vertical" : "horizontal"]);
    const thumbStyle = (0,external_Vue_.computed)(() => renderThumbStyle({
      size: props.size,
      move: props.move,
      bar: bar.value
    }));
    const offsetRatio = (0,external_Vue_.computed)(() => instance.value[bar.value.offset] ** 2 / scrollbar.wrapElement[bar.value.scrollSize] / props.ratio / thumb.value[bar.value.offset]);
    const clickThumbHandler = (e) => {
      var _a;
      e.stopPropagation();
      if (e.ctrlKey || [1, 2].includes(e.button))
        return;
      (_a = window.getSelection()) == null ? void 0 : _a.removeAllRanges();
      startDrag(e);
      const el = e.currentTarget;
      if (!el)
        return;
      thumbState.value[bar.value.axis] = el[bar.value.offset] - (e[bar.value.client] - el.getBoundingClientRect()[bar.value.direction]);
    };
    const clickTrackHandler = (e) => {
      if (!thumb.value || !instance.value || !scrollbar.wrapElement)
        return;
      const offset = Math.abs(e.target.getBoundingClientRect()[bar.value.direction] - e[bar.value.client]);
      const thumbHalf = thumb.value[bar.value.offset] / 2;
      const thumbPositionPercentage = (offset - thumbHalf) * 100 * offsetRatio.value / instance.value[bar.value.offset];
      scrollbar.wrapElement[bar.value.scroll] = thumbPositionPercentage * scrollbar.wrapElement[bar.value.scrollSize] / 100;
    };
    const startDrag = (e) => {
      e.stopImmediatePropagation();
      cursorDown = true;
      document.addEventListener("mousemove", mouseMoveDocumentHandler);
      document.addEventListener("mouseup", mouseUpDocumentHandler);
      originalOnSelectStart = document.onselectstart;
      document.onselectstart = () => false;
    };
    const mouseMoveDocumentHandler = (e) => {
      if (!instance.value || !thumb.value)
        return;
      if (cursorDown === false)
        return;
      const prevPage = thumbState.value[bar.value.axis];
      if (!prevPage)
        return;
      const offset = (instance.value.getBoundingClientRect()[bar.value.direction] - e[bar.value.client]) * -1;
      const thumbClickPosition = thumb.value[bar.value.offset] - prevPage;
      const thumbPositionPercentage = (offset - thumbClickPosition) * 100 * offsetRatio.value / instance.value[bar.value.offset];
      scrollbar.wrapElement[bar.value.scroll] = thumbPositionPercentage * scrollbar.wrapElement[bar.value.scrollSize] / 100;
    };
    const mouseUpDocumentHandler = () => {
      cursorDown = false;
      thumbState.value[bar.value.axis] = 0;
      document.removeEventListener("mousemove", mouseMoveDocumentHandler);
      document.removeEventListener("mouseup", mouseUpDocumentHandler);
      restoreOnselectstart();
      if (cursorLeave)
        visible.value = false;
    };
    const mouseMoveScrollbarHandler = () => {
      cursorLeave = false;
      visible.value = !!props.size;
    };
    const mouseLeaveScrollbarHandler = () => {
      cursorLeave = true;
      visible.value = cursorDown;
    };
    (0,external_Vue_.onBeforeUnmount)(() => {
      restoreOnselectstart();
      document.removeEventListener("mouseup", mouseUpDocumentHandler);
    });
    const restoreOnselectstart = () => {
      if (document.onselectstart !== originalOnSelectStart)
        document.onselectstart = originalOnSelectStart;
    };
    (0,core/* useEventListener */.ORN)((0,external_Vue_.toRef)(scrollbar, "scrollbarElement"), "mousemove", mouseMoveScrollbarHandler);
    (0,core/* useEventListener */.ORN)((0,external_Vue_.toRef)(scrollbar, "scrollbarElement"), "mouseleave", mouseLeaveScrollbarHandler);
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(external_Vue_.Transition, {
        name: (0,external_Vue_.unref)(ns).b("fade"),
        persisted: ""
      }, {
        default: (0,external_Vue_.withCtx)(() => [
          (0,external_Vue_.withDirectives)((0,external_Vue_.createElementVNode)("div", {
            ref_key: "instance",
            ref: instance,
            class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(ns).e("bar"), (0,external_Vue_.unref)(ns).is((0,external_Vue_.unref)(bar).key)]),
            onMousedown: clickTrackHandler
          }, [
            (0,external_Vue_.createElementVNode)("div", {
              ref_key: "thumb",
              ref: thumb,
              class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("thumb")),
              style: (0,external_Vue_.normalizeStyle)((0,external_Vue_.unref)(thumbStyle)),
              onMousedown: clickThumbHandler
            }, null, 38)
          ], 34), [
            [external_Vue_.vShow, _ctx.always || visible.value]
          ])
        ]),
        _: 1
      }, 8, ["name"]);
    };
  }
});
var Thumb = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(thumb2_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/scrollbar/src/thumb.vue"]]);


//# sourceMappingURL=thumb2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/scrollbar/src/bar.mjs



const barProps = (0,runtime/* buildProps */.o8)({
  always: {
    type: Boolean,
    default: true
  },
  width: String,
  height: String,
  ratioX: {
    type: Number,
    default: 1
  },
  ratioY: {
    type: Number,
    default: 1
  }
});


//# sourceMappingURL=bar.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/scrollbar/src/bar2.mjs






const bar2_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  __name: "bar",
  props: barProps,
  setup(__props, { expose }) {
    const props = __props;
    const moveX = (0,external_Vue_.ref)(0);
    const moveY = (0,external_Vue_.ref)(0);
    const handleScroll = (wrap) => {
      if (wrap) {
        const offsetHeight = wrap.offsetHeight - GAP;
        const offsetWidth = wrap.offsetWidth - GAP;
        moveY.value = wrap.scrollTop * 100 / offsetHeight * props.ratioY;
        moveX.value = wrap.scrollLeft * 100 / offsetWidth * props.ratioX;
      }
    };
    expose({
      handleScroll
    });
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, null, [
        (0,external_Vue_.createVNode)(Thumb, {
          move: moveX.value,
          ratio: _ctx.ratioX,
          size: _ctx.width,
          always: _ctx.always
        }, null, 8, ["move", "ratio", "size", "always"]),
        (0,external_Vue_.createVNode)(Thumb, {
          move: moveY.value,
          ratio: _ctx.ratioY,
          size: _ctx.height,
          vertical: "",
          always: _ctx.always
        }, null, 8, ["move", "ratio", "size", "always"])
      ], 64);
    };
  }
});
var Bar = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(bar2_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/scrollbar/src/bar.vue"]]);


//# sourceMappingURL=bar2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/scrollbar/src/scrollbar.mjs




const scrollbarProps = (0,runtime/* buildProps */.o8)({
  height: {
    type: [String, Number],
    default: ""
  },
  maxHeight: {
    type: [String, Number],
    default: ""
  },
  native: Boolean,
  wrapStyle: {
    type: (0,runtime/* definePropType */.Cq)([String, Object, Array]),
    default: ""
  },
  wrapClass: {
    type: [String, Array],
    default: ""
  },
  viewClass: {
    type: [String, Array],
    default: ""
  },
  viewStyle: {
    type: [String, Array, Object],
    default: ""
  },
  noresize: Boolean,
  tag: {
    type: String,
    default: "div"
  },
  always: Boolean,
  minSize: {
    type: Number,
    default: 20
  }
});
const scrollbarEmits = {
  scroll: ({
    scrollTop,
    scrollLeft
  }) => [scrollTop, scrollLeft].every(shared/* isNumber */.hj)
};


//# sourceMappingURL=scrollbar.mjs.map

// EXTERNAL MODULE: ./node_modules/@vue/shared/dist/shared.esm-bundler.js
var shared_esm_bundler = __webpack_require__(3577);
;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/scrollbar/src/scrollbar2.mjs















const scrollbar2_default_ = {
  name: "ElScrollbar"
};
const scrollbar2_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...scrollbar2_default_,
  props: scrollbarProps,
  emits: scrollbarEmits,
  setup(__props, { expose, emit }) {
    const props = __props;
    const ns = (0,use_namespace/* useNamespace */.s)("scrollbar");
    let stopResizeObserver = void 0;
    let stopResizeListener = void 0;
    const scrollbar$ = (0,external_Vue_.ref)();
    const wrap$ = (0,external_Vue_.ref)();
    const resize$ = (0,external_Vue_.ref)();
    const sizeWidth = (0,external_Vue_.ref)("0");
    const sizeHeight = (0,external_Vue_.ref)("0");
    const barRef = (0,external_Vue_.ref)();
    const ratioY = (0,external_Vue_.ref)(1);
    const ratioX = (0,external_Vue_.ref)(1);
    const SCOPE = "ElScrollbar";
    const style = (0,external_Vue_.computed)(() => {
      const style2 = {};
      if (props.height)
        style2.height = (0,dom_style/* addUnit */.Nn)(props.height);
      if (props.maxHeight)
        style2.maxHeight = (0,dom_style/* addUnit */.Nn)(props.maxHeight);
      return [props.wrapStyle, style2];
    });
    const handleScroll = () => {
      var _a;
      if (wrap$.value) {
        (_a = barRef.value) == null ? void 0 : _a.handleScroll(wrap$.value);
        emit("scroll", {
          scrollTop: wrap$.value.scrollTop,
          scrollLeft: wrap$.value.scrollLeft
        });
      }
    };
    function scrollTo(arg1, arg2) {
      if ((0,shared_esm_bundler/* isObject */.Kn)(arg1)) {
        wrap$.value.scrollTo(arg1);
      } else if ((0,shared/* isNumber */.hj)(arg1) && (0,shared/* isNumber */.hj)(arg2)) {
        wrap$.value.scrollTo(arg1, arg2);
      }
    }
    const setScrollTop = (value) => {
      if (!(0,shared/* isNumber */.hj)(value)) {
        (0,error/* debugWarn */.N)(SCOPE, "value must be a number");
        return;
      }
      wrap$.value.scrollTop = value;
    };
    const setScrollLeft = (value) => {
      if (!(0,shared/* isNumber */.hj)(value)) {
        (0,error/* debugWarn */.N)(SCOPE, "value must be a number");
        return;
      }
      wrap$.value.scrollLeft = value;
    };
    const update = () => {
      if (!wrap$.value)
        return;
      const offsetHeight = wrap$.value.offsetHeight - GAP;
      const offsetWidth = wrap$.value.offsetWidth - GAP;
      const originalHeight = offsetHeight ** 2 / wrap$.value.scrollHeight;
      const originalWidth = offsetWidth ** 2 / wrap$.value.scrollWidth;
      const height = Math.max(originalHeight, props.minSize);
      const width = Math.max(originalWidth, props.minSize);
      ratioY.value = originalHeight / (offsetHeight - originalHeight) / (height / (offsetHeight - height));
      ratioX.value = originalWidth / (offsetWidth - originalWidth) / (width / (offsetWidth - width));
      sizeHeight.value = height + GAP < offsetHeight ? `${height}px` : "";
      sizeWidth.value = width + GAP < offsetWidth ? `${width}px` : "";
    };
    (0,external_Vue_.watch)(() => props.noresize, (noresize) => {
      if (noresize) {
        stopResizeObserver == null ? void 0 : stopResizeObserver();
        stopResizeListener == null ? void 0 : stopResizeListener();
      } else {
        ;
        ({ stop: stopResizeObserver } = (0,core/* useResizeObserver */.yU7)(resize$, update));
        stopResizeListener = (0,core/* useEventListener */.ORN)("resize", update);
      }
    }, { immediate: true });
    (0,external_Vue_.watch)(() => [props.maxHeight, props.height], () => {
      if (!props.native)
        (0,external_Vue_.nextTick)(() => {
          var _a;
          update();
          if (wrap$.value) {
            (_a = barRef.value) == null ? void 0 : _a.handleScroll(wrap$.value);
          }
        });
    });
    (0,external_Vue_.provide)(scrollbarContextKey, (0,external_Vue_.reactive)({
      scrollbarElement: scrollbar$,
      wrapElement: wrap$
    }));
    (0,external_Vue_.onMounted)(() => {
      if (!props.native)
        (0,external_Vue_.nextTick)(() => update());
    });
    (0,external_Vue_.onUpdated)(() => update());
    expose({
      wrap$,
      update,
      scrollTo,
      setScrollTop,
      setScrollLeft,
      handleScroll
    });
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
        ref_key: "scrollbar$",
        ref: scrollbar$,
        class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).b())
      }, [
        (0,external_Vue_.createElementVNode)("div", {
          ref_key: "wrap$",
          ref: wrap$,
          class: (0,external_Vue_.normalizeClass)([
            _ctx.wrapClass,
            (0,external_Vue_.unref)(ns).e("wrap"),
            { [(0,external_Vue_.unref)(ns).em("wrap", "hidden-default")]: !_ctx.native }
          ]),
          style: (0,external_Vue_.normalizeStyle)((0,external_Vue_.unref)(style)),
          onScroll: handleScroll
        }, [
          ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.resolveDynamicComponent)(_ctx.tag), {
            ref_key: "resize$",
            ref: resize$,
            class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(ns).e("view"), _ctx.viewClass]),
            style: (0,external_Vue_.normalizeStyle)(_ctx.viewStyle)
          }, {
            default: (0,external_Vue_.withCtx)(() => [
              (0,external_Vue_.renderSlot)(_ctx.$slots, "default")
            ]),
            _: 3
          }, 8, ["class", "style"]))
        ], 38),
        !_ctx.native ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(Bar, {
          key: 0,
          ref_key: "barRef",
          ref: barRef,
          height: sizeHeight.value,
          width: sizeWidth.value,
          always: _ctx.always,
          "ratio-x": ratioX.value,
          "ratio-y": ratioY.value
        }, null, 8, ["height", "width", "always", "ratio-x", "ratio-y"])) : (0,external_Vue_.createCommentVNode)("v-if", true)
      ], 2);
    };
  }
});
var Scrollbar = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(scrollbar2_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/scrollbar/src/scrollbar.vue"]]);


//# sourceMappingURL=scrollbar2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/scrollbar/index.mjs







const ElScrollbar = (0,install/* withInstall */.nz)(Scrollbar);


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/popper/src/popper.mjs



const effects = (/* unused pure expression or super */ null && (["light", "dark"]));
const triggers = (/* unused pure expression or super */ null && (["click", "contextmenu", "hover", "focus"]));
const Effect = {
  LIGHT: "light",
  DARK: "dark"
};
const usePopperProps = (0,runtime/* buildProps */.o8)({
  role: {
    type: String,
    default: "tooltip"
  }
});


//# sourceMappingURL=popper.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/tokens/popper.mjs
const POPPER_INJECTION_KEY = Symbol("popper");
const POPPER_CONTENT_INJECTION_KEY = Symbol("popperContent");


//# sourceMappingURL=popper.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/popper/src/popper2.mjs






const popper2_default_ = {
  name: "ElPopperRoot",
  inheritAttrs: false
};
const popper2_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...popper2_default_,
  props: usePopperProps,
  setup(__props, { expose }) {
    const props = __props;
    const triggerRef = (0,external_Vue_.ref)();
    const popperInstanceRef = (0,external_Vue_.ref)();
    const contentRef = (0,external_Vue_.ref)();
    const referenceRef = (0,external_Vue_.ref)();
    const role = (0,external_Vue_.computed)(() => props.role);
    const popperProvides = {
      triggerRef,
      popperInstanceRef,
      contentRef,
      referenceRef,
      role
    };
    expose(popperProvides);
    (0,external_Vue_.provide)(POPPER_INJECTION_KEY, popperProvides);
    return (_ctx, _cache) => {
      return (0,external_Vue_.renderSlot)(_ctx.$slots, "default");
    };
  }
});
var Popper = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(popper2_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/popper/src/popper.vue"]]);


//# sourceMappingURL=popper2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/popper/index.mjs











const ElPopper = (0,install/* withInstall */.nz)(Popper);


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/hooks/use-timeout/index.mjs


function useTimeout() {
  let timeoutHandle;
  const registerTimeout = (fn, delay) => {
    cancelTimeout();
    timeoutHandle = window.setTimeout(fn, delay);
  };
  const cancelTimeout = () => window.clearTimeout(timeoutHandle);
  (0,shared/* tryOnScopeDispose */.IY)(() => cancelTimeout());
  return {
    registerTimeout,
    cancelTimeout
  };
}


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/hooks/use-delayed-toggle/index.mjs





const useDelayedToggleProps = (0,runtime/* buildProps */.o8)({
  showAfter: {
    type: Number,
    default: 0
  },
  hideAfter: {
    type: Number,
    default: 200
  }
});
const useDelayedToggle = ({
  showAfter,
  hideAfter,
  open,
  close
}) => {
  const { registerTimeout } = useTimeout();
  const onOpen = (event) => {
    registerTimeout(() => {
      open(event);
    }, (0,external_Vue_.unref)(showAfter));
  };
  const onClose = (event) => {
    registerTimeout(() => {
      close(event);
    }, (0,external_Vue_.unref)(hideAfter));
  };
  return {
    onOpen,
    onClose
  };
};


//# sourceMappingURL=index.mjs.map

// EXTERNAL MODULE: ./node_modules/@popperjs/core/dist/index.mjs
var core_dist = __webpack_require__(80220);
;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/popper/src/content.mjs




const POSITIONING_STRATEGIES = ["fixed", "absolute"];
const usePopperCoreConfigProps = (0,runtime/* buildProps */.o8)({
  boundariesPadding: {
    type: Number,
    default: 0
  },
  fallbackPlacements: {
    type: (0,runtime/* definePropType */.Cq)(Array),
    default: () => []
  },
  gpuAcceleration: {
    type: Boolean,
    default: true
  },
  offset: {
    type: Number,
    default: 12
  },
  placement: {
    type: String,
    values: core_dist/* placements */.Ct,
    default: "bottom"
  },
  popperOptions: {
    type: (0,runtime/* definePropType */.Cq)(Object),
    default: () => ({})
  },
  strategy: {
    type: String,
    values: POSITIONING_STRATEGIES,
    default: "absolute"
  }
});
const usePopperContentProps = (0,runtime/* buildProps */.o8)({
  ...usePopperCoreConfigProps,
  id: String,
  style: { type: (0,runtime/* definePropType */.Cq)([String, Array, Object]) },
  className: { type: (0,runtime/* definePropType */.Cq)([String, Array, Object]) },
  effect: {
    type: String,
    default: "dark"
  },
  visible: Boolean,
  enterable: {
    type: Boolean,
    default: true
  },
  pure: Boolean,
  focusOnShow: {
    type: Boolean,
    default: false
  },
  trapping: {
    type: Boolean,
    default: false
  },
  popperClass: {
    type: (0,runtime/* definePropType */.Cq)([String, Array, Object])
  },
  popperStyle: {
    type: (0,runtime/* definePropType */.Cq)([String, Array, Object])
  },
  referenceEl: {
    type: (0,runtime/* definePropType */.Cq)(Object)
  },
  triggerTargetEl: {
    type: (0,runtime/* definePropType */.Cq)(Object)
  },
  stopPopperMouseEvent: {
    type: Boolean,
    default: true
  },
  ariaLabel: {
    type: String,
    default: void 0
  },
  virtualTriggering: Boolean,
  zIndex: Number
});
const usePopperContentEmits = [
  "mouseenter",
  "mouseleave",
  "focus",
  "blur",
  "close"
];


//# sourceMappingURL=content.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/utils/rand.mjs
const rand_generateId = () => Math.floor(Math.random() * 1e4);
const getRandomInt = (max) => Math.floor(Math.random() * Math.floor(max));


//# sourceMappingURL=rand.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/hooks/use-popper-container/index.mjs





let cachedContainer;
const POPPER_CONTAINER_ID = `el-popper-container-${rand_generateId()}`;
const POPPER_CONTAINER_SELECTOR = `#${POPPER_CONTAINER_ID}`;
const createContainer = () => {
  const container = document.createElement("div");
  container.id = POPPER_CONTAINER_ID;
  document.body.appendChild(container);
  return container;
};
const usePopperContainer = () => {
  (0,external_Vue_.onBeforeMount)(() => {
    if (!shared/* isClient */.C5)
      return;
    if ( false || !cachedContainer || !document.body.querySelector(POPPER_CONTAINER_SELECTOR)) {
      cachedContainer = createContainer();
    }
  });
};


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/popper/src/trigger.mjs



const usePopperTriggerProps = (0,runtime/* buildProps */.o8)({
  virtualRef: {
    type: (0,runtime/* definePropType */.Cq)(Object)
  },
  virtualTriggering: Boolean,
  onMouseenter: Function,
  onMouseleave: Function,
  onClick: Function,
  onKeydown: Function,
  onFocus: Function,
  onBlur: Function,
  onContextmenu: Function,
  id: String,
  open: Boolean
});


//# sourceMappingURL=trigger.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/constants/aria.mjs
const aria_EVENT_CODE = {
  tab: "Tab",
  enter: "Enter",
  space: "Space",
  left: "ArrowLeft",
  up: "ArrowUp",
  right: "ArrowRight",
  down: "ArrowDown",
  esc: "Escape",
  delete: "Delete",
  backspace: "Backspace",
  numpadEnter: "NumpadEnter",
  pageUp: "PageUp",
  pageDown: "PageDown",
  home: "Home",
  end: "End"
};


//# sourceMappingURL=aria.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/tooltip/src/tooltip.mjs












const tooltip_triggers = (/* unused pure expression or super */ null && (["hover", "focus", "click", "contextmenu"]));
const ns = (0,use_namespace/* useNamespace */.s)("tooltip");
const useTooltipContentProps = (0,runtime/* buildProps */.o8)({
  ...useDelayedToggleProps,
  ...usePopperContentProps,
  appendTo: {
    type: (0,runtime/* definePropType */.Cq)([String, Object]),
    default: POPPER_CONTAINER_SELECTOR
  },
  content: {
    type: String,
    default: ""
  },
  rawContent: {
    type: Boolean,
    default: false
  },
  persistent: Boolean,
  ariaLabel: String,
  visible: {
    type: (0,runtime/* definePropType */.Cq)(Boolean),
    default: null
  },
  transition: {
    type: String,
    default: `${ns.namespace.value}-fade-in-linear`
  },
  teleported: {
    type: Boolean,
    default: true
  },
  disabled: {
    type: Boolean
  }
});
const useTooltipTriggerProps = (0,runtime/* buildProps */.o8)({
  ...usePopperTriggerProps,
  disabled: Boolean,
  trigger: {
    type: (0,runtime/* definePropType */.Cq)([String, Array]),
    default: "hover"
  },
  triggerKeys: {
    type: (0,runtime/* definePropType */.Cq)(Array),
    default: () => [aria_EVENT_CODE.enter, aria_EVENT_CODE.space]
  }
});
const useTooltipProps = (0,runtime/* buildProps */.o8)({
  openDelay: {
    type: Number
  },
  visibleArrow: {
    type: Boolean,
    default: void 0
  },
  hideAfter: {
    type: Number,
    default: 200
  },
  showArrow: {
    type: Boolean,
    default: true
  }
});


//# sourceMappingURL=tooltip.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/tooltip/src/tokens.mjs
const TOOLTIP_INJECTION_KEY = Symbol("elTooltip");


//# sourceMappingURL=tokens.mjs.map

// EXTERNAL MODULE: ./node_modules/lodash-es/isNil.js
var lodash_es_isNil = __webpack_require__(27601);
;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/popper/src/utils.mjs


const buildPopperOptions = (props, arrowProps) => {
  const { placement, strategy, popperOptions } = props;
  const options = {
    placement,
    strategy,
    ...popperOptions,
    modifiers: genModifiers(props)
  };
  attachArrow(options, arrowProps);
  deriveExtraModifiers(options, popperOptions == null ? void 0 : popperOptions.modifiers);
  return options;
};
const unwrapMeasurableEl = ($el) => {
  if (!shared/* isClient */.C5)
    return;
  return (0,core/* unrefElement */.NXq)($el);
};
function genModifiers(options) {
  const { offset, gpuAcceleration, fallbackPlacements } = options;
  return [
    {
      name: "offset",
      options: {
        offset: [0, offset != null ? offset : 12]
      }
    },
    {
      name: "preventOverflow",
      options: {
        padding: {
          top: 2,
          bottom: 2,
          left: 5,
          right: 5
        }
      }
    },
    {
      name: "flip",
      options: {
        padding: 5,
        fallbackPlacements: fallbackPlacements != null ? fallbackPlacements : []
      }
    },
    {
      name: "computeStyles",
      options: {
        gpuAcceleration,
        adaptive: gpuAcceleration
      }
    }
  ];
}
function attachArrow(options, { arrowEl, arrowOffset }) {
  options.modifiers.push({
    name: "arrow",
    options: {
      element: arrowEl,
      padding: arrowOffset != null ? arrowOffset : 5
    }
  });
}
function deriveExtraModifiers(options, modifiers) {
  if (modifiers) {
    options.modifiers = [...options.modifiers, ...modifiers != null ? modifiers : []];
  }
}


//# sourceMappingURL=utils.mjs.map

// EXTERNAL MODULE: ./node_modules/element-plus/es/tokens/form.mjs
var tokens_form = __webpack_require__(87815);
;// CONCATENATED MODULE: ./node_modules/element-plus/es/hooks/use-z-index/index.mjs



const zIndex = (0,external_Vue_.ref)(0);
const useZIndex = () => {
  const initialZIndex = (0,use_global_config/* useGlobalConfig */.W)("zIndex", 2e3);
  const currentZIndex = (0,external_Vue_.computed)(() => initialZIndex.value + zIndex.value);
  const nextZIndex = () => {
    zIndex.value++;
    return currentZIndex.value;
  };
  return {
    initialZIndex,
    currentZIndex,
    nextZIndex
  };
};


//# sourceMappingURL=index.mjs.map

// EXTERNAL MODULE: ./node_modules/element-plus/es/utils/types.mjs
var types = __webpack_require__(35162);
;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/focus-trap/src/utils.mjs
const obtainAllFocusableElements = (element) => {
  const nodes = [];
  const walker = document.createTreeWalker(element, NodeFilter.SHOW_ELEMENT, {
    acceptNode: (node) => {
      const isHiddenInput = node.tagName === "INPUT" && node.type === "hidden";
      if (node.disabled || node.hidden || isHiddenInput)
        return NodeFilter.FILTER_SKIP;
      return node.tabIndex >= 0 || node === document.activeElement ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;
    }
  });
  while (walker.nextNode())
    nodes.push(walker.currentNode);
  return nodes;
};
const getVisibleElement = (elements, container) => {
  for (const element of elements) {
    if (!isHidden(element, container))
      return element;
  }
};
const isHidden = (element, container) => {
  if (false)
    {}
  if (getComputedStyle(element).visibility === "hidden")
    return true;
  while (element) {
    if (container && element === container)
      return false;
    if (getComputedStyle(element).display === "none")
      return true;
    element = element.parentElement;
  }
  return false;
};
const getEdges = (container) => {
  const focusable = obtainAllFocusableElements(container);
  const first = getVisibleElement(focusable, container);
  const last = getVisibleElement(focusable.reverse(), container);
  return [first, last];
};
const isSelectable = (element) => {
  return element instanceof HTMLInputElement && "select" in element;
};
const tryFocus = (element, shouldSelect) => {
  if (element && element.focus) {
    const prevFocusedElement = document.activeElement;
    element.focus({ preventScroll: true });
    if (element !== prevFocusedElement && isSelectable(element) && shouldSelect) {
      element.select();
    }
  }
};
function removeFromStack(list, item) {
  const copy = [...list];
  const idx = list.indexOf(item);
  if (idx !== -1) {
    copy.splice(idx, 1);
  }
  return copy;
}
const createFocusableStack = () => {
  let stack = [];
  const push = (layer) => {
    const currentLayer = stack[0];
    if (currentLayer && layer !== currentLayer) {
      currentLayer.pause();
    }
    stack = removeFromStack(stack, layer);
    stack.unshift(layer);
  };
  const remove = (layer) => {
    var _a, _b;
    stack = removeFromStack(stack, layer);
    (_b = (_a = stack[0]) == null ? void 0 : _a.resume) == null ? void 0 : _b.call(_a);
  };
  return {
    push,
    remove
  };
};
const focusFirstDescendant = (elements, shouldSelect = false) => {
  const prevFocusedElement = document.activeElement;
  for (const element of elements) {
    tryFocus(element, shouldSelect);
    if (document.activeElement !== prevFocusedElement)
      return;
  }
};
const focusableStack = createFocusableStack();


//# sourceMappingURL=utils.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/focus-trap/src/tokens.mjs
const FOCUS_AFTER_TRAPPED = "focus-trap.focus-after-trapped";
const FOCUS_AFTER_RELEASED = "focus-trap.focus-after-released";
const FOCUS_AFTER_TRAPPED_OPTS = {
  cancelable: true,
  bubbles: false
};
const ON_TRAP_FOCUS_EVT = "focusAfterTrapped";
const ON_RELEASE_FOCUS_EVT = "focusAfterReleased";
const FOCUS_TRAP_INJECTION_KEY = Symbol("elFocusTrap");


//# sourceMappingURL=tokens.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/hooks/use-escape-keydown/index.mjs





let registeredEscapeHandlers = [];
const useEscapeKeydown = (handler) => {
  const cachedHandler = (e) => {
    const event = e;
    if (event.key === aria_EVENT_CODE.esc) {
      registeredEscapeHandlers.forEach((registeredHandler) => registeredHandler(event));
    }
  };
  (0,external_Vue_.onMounted)(() => {
    if (registeredEscapeHandlers.length === 0) {
      document.addEventListener("keydown", cachedHandler);
    }
    if (shared/* isClient */.C5)
      registeredEscapeHandlers.push(handler);
  });
  (0,external_Vue_.onBeforeUnmount)(() => {
    registeredEscapeHandlers = registeredEscapeHandlers.filter((registeredHandler) => registeredHandler !== handler);
    if (registeredEscapeHandlers.length === 0) {
      if (shared/* isClient */.C5)
        document.removeEventListener("keydown", cachedHandler);
    }
  });
};


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/focus-trap/src/focus-trap.mjs












const focus_trap_sfc_main = (0,external_Vue_.defineComponent)({
  name: "ElFocusTrap",
  inheritAttrs: false,
  props: {
    loop: Boolean,
    trapped: Boolean,
    focusTrapEl: Object,
    focusStartEl: {
      type: [Object, String],
      default: "first"
    }
  },
  emits: [
    ON_TRAP_FOCUS_EVT,
    ON_RELEASE_FOCUS_EVT,
    "focusin",
    "focusout",
    "focusout-prevented",
    "release-requested"
  ],
  setup(props, { emit }) {
    const forwardRef = (0,external_Vue_.ref)();
    let lastFocusBeforeTrapped;
    let lastFocusAfterTrapped;
    useEscapeKeydown((event) => {
      if (props.trapped && !focusLayer.paused) {
        emit("release-requested", event);
      }
    });
    const focusLayer = {
      paused: false,
      pause() {
        this.paused = true;
      },
      resume() {
        this.paused = false;
      }
    };
    const onKeydown = (e) => {
      if (!props.loop && !props.trapped)
        return;
      if (focusLayer.paused)
        return;
      const { key, altKey, ctrlKey, metaKey, currentTarget, shiftKey } = e;
      const { loop } = props;
      const isTabbing = key === aria_EVENT_CODE.tab && !altKey && !ctrlKey && !metaKey;
      const currentFocusingEl = document.activeElement;
      if (isTabbing && currentFocusingEl) {
        const container = currentTarget;
        const [first, last] = getEdges(container);
        const isTabbable = first && last;
        if (!isTabbable) {
          if (currentFocusingEl === container) {
            e.preventDefault();
            emit("focusout-prevented");
          }
        } else {
          if (!shiftKey && currentFocusingEl === last) {
            e.preventDefault();
            if (loop)
              tryFocus(first, true);
            emit("focusout-prevented");
          } else if (shiftKey && [first, container].includes(currentFocusingEl)) {
            e.preventDefault();
            if (loop)
              tryFocus(last, true);
            emit("focusout-prevented");
          }
        }
      }
    };
    (0,external_Vue_.provide)(FOCUS_TRAP_INJECTION_KEY, {
      focusTrapRef: forwardRef,
      onKeydown
    });
    (0,external_Vue_.watch)(() => props.focusTrapEl, (focusTrapEl) => {
      if (focusTrapEl) {
        forwardRef.value = focusTrapEl;
      }
    }, { immediate: true });
    (0,external_Vue_.watch)([forwardRef], ([forwardRef2], [oldForwardRef]) => {
      if (forwardRef2) {
        forwardRef2.addEventListener("keydown", onKeydown);
        forwardRef2.addEventListener("focusin", onFocusIn);
        forwardRef2.addEventListener("focusout", onFocusOut);
      }
      if (oldForwardRef) {
        oldForwardRef.removeEventListener("keydown", onKeydown);
        oldForwardRef.removeEventListener("focusin", onFocusIn);
        oldForwardRef.removeEventListener("focusout", onFocusOut);
      }
    });
    const trapOnFocus = (e) => {
      emit(ON_TRAP_FOCUS_EVT, e);
    };
    const releaseOnFocus = (e) => emit(ON_RELEASE_FOCUS_EVT, e);
    const onFocusIn = (e) => {
      const trapContainer = (0,external_Vue_.unref)(forwardRef);
      if (!trapContainer)
        return;
      const target = e.target;
      const isFocusedInTrap = target && trapContainer.contains(target);
      if (isFocusedInTrap)
        emit("focusin", e);
      if (focusLayer.paused)
        return;
      if (props.trapped) {
        if (isFocusedInTrap) {
          lastFocusAfterTrapped = target;
        } else {
          tryFocus(lastFocusAfterTrapped, true);
        }
      }
    };
    const onFocusOut = (e) => {
      const trapContainer = (0,external_Vue_.unref)(forwardRef);
      if (focusLayer.paused || !trapContainer)
        return;
      if (props.trapped) {
        const relatedTarget = e.relatedTarget;
        if (!(0,lodash_es_isNil/* default */.Z)(relatedTarget) && !trapContainer.contains(relatedTarget)) {
          setTimeout(() => {
            if (!focusLayer.paused && props.trapped) {
              tryFocus(lastFocusAfterTrapped, true);
            }
          }, 0);
        }
      } else {
        const target = e.target;
        const isFocusedInTrap = target && trapContainer.contains(target);
        if (!isFocusedInTrap)
          emit("focusout", e);
      }
    };
    async function startTrap() {
      await (0,external_Vue_.nextTick)();
      const trapContainer = (0,external_Vue_.unref)(forwardRef);
      if (trapContainer) {
        focusableStack.push(focusLayer);
        const prevFocusedElement = document.activeElement;
        lastFocusBeforeTrapped = prevFocusedElement;
        const isPrevFocusContained = trapContainer.contains(prevFocusedElement);
        if (!isPrevFocusContained) {
          const focusEvent = new Event(FOCUS_AFTER_TRAPPED, FOCUS_AFTER_TRAPPED_OPTS);
          trapContainer.addEventListener(FOCUS_AFTER_TRAPPED, trapOnFocus);
          trapContainer.dispatchEvent(focusEvent);
          if (!focusEvent.defaultPrevented) {
            (0,external_Vue_.nextTick)(() => {
              let focusStartEl = props.focusStartEl;
              if (!(0,shared_esm_bundler/* isString */.HD)(focusStartEl)) {
                tryFocus(focusStartEl);
                if (document.activeElement !== focusStartEl) {
                  focusStartEl = "first";
                }
              }
              if (focusStartEl === "first") {
                focusFirstDescendant(obtainAllFocusableElements(trapContainer), true);
              }
              if (document.activeElement === prevFocusedElement || focusStartEl === "container") {
                tryFocus(trapContainer);
              }
            });
          }
        }
      }
    }
    function stopTrap() {
      const trapContainer = (0,external_Vue_.unref)(forwardRef);
      if (trapContainer) {
        trapContainer.removeEventListener(FOCUS_AFTER_TRAPPED, trapOnFocus);
        const releasedEvent = new Event(FOCUS_AFTER_RELEASED, FOCUS_AFTER_TRAPPED_OPTS);
        trapContainer.addEventListener(FOCUS_AFTER_RELEASED, releaseOnFocus);
        trapContainer.dispatchEvent(releasedEvent);
        if (!releasedEvent.defaultPrevented) {
          tryFocus(lastFocusBeforeTrapped != null ? lastFocusBeforeTrapped : document.body, true);
        }
        trapContainer.removeEventListener(FOCUS_AFTER_RELEASED, trapOnFocus);
        focusableStack.remove(focusLayer);
      }
    }
    (0,external_Vue_.onMounted)(() => {
      if (props.trapped) {
        startTrap();
      }
      (0,external_Vue_.watch)(() => props.trapped, (trapped) => {
        if (trapped) {
          startTrap();
        } else {
          stopTrap();
        }
      });
    });
    (0,external_Vue_.onBeforeUnmount)(() => {
      if (props.trapped) {
        stopTrap();
      }
    });
    return {
      onKeydown
    };
  }
});
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return (0,external_Vue_.renderSlot)(_ctx.$slots, "default", { handleKeydown: _ctx.onKeydown });
}
var ElFocusTrap = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(focus_trap_sfc_main, [["render", _sfc_render], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/focus-trap/src/focus-trap.vue"]]);


//# sourceMappingURL=focus-trap.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/popper/src/content2.mjs


















const content2_default_ = {
  name: "ElPopperContent"
};
const content2_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...content2_default_,
  props: usePopperContentProps,
  emits: usePopperContentEmits,
  setup(__props, { expose, emit }) {
    const props = __props;
    const { popperInstanceRef, contentRef, triggerRef, role } = (0,external_Vue_.inject)(POPPER_INJECTION_KEY, void 0);
    const formItemContext = (0,external_Vue_.inject)(tokens_form/* formItemContextKey */.K, void 0);
    const { nextZIndex } = useZIndex();
    const ns = (0,use_namespace/* useNamespace */.s)("popper");
    const popperContentRef = (0,external_Vue_.ref)();
    const focusStartRef = (0,external_Vue_.ref)("first");
    const arrowRef = (0,external_Vue_.ref)();
    const arrowOffset = (0,external_Vue_.ref)();
    (0,external_Vue_.provide)(POPPER_CONTENT_INJECTION_KEY, {
      arrowRef,
      arrowOffset
    });
    if (formItemContext && (formItemContext.addInputId || formItemContext.removeInputId)) {
      (0,external_Vue_.provide)(tokens_form/* formItemContextKey */.K, {
        ...formItemContext,
        addInputId: shared_esm_bundler/* NOOP */.dG,
        removeInputId: shared_esm_bundler/* NOOP */.dG
      });
    }
    const contentZIndex = (0,external_Vue_.ref)(props.zIndex || nextZIndex());
    const trapped = (0,external_Vue_.ref)(false);
    let triggerTargetAriaStopWatch = void 0;
    const computedReference = (0,external_Vue_.computed)(() => unwrapMeasurableEl(props.referenceEl) || (0,external_Vue_.unref)(triggerRef));
    const contentStyle = (0,external_Vue_.computed)(() => [{ zIndex: (0,external_Vue_.unref)(contentZIndex) }, props.popperStyle]);
    const contentClass = (0,external_Vue_.computed)(() => [
      ns.b(),
      ns.is("pure", props.pure),
      ns.is(props.effect),
      props.popperClass
    ]);
    const ariaModal = (0,external_Vue_.computed)(() => {
      return role && role.value === "dialog" ? "false" : void 0;
    });
    const createPopperInstance = ({ referenceEl, popperContentEl, arrowEl }) => {
      const options = buildPopperOptions(props, {
        arrowEl,
        arrowOffset: (0,external_Vue_.unref)(arrowOffset)
      });
      return (0,core_dist/* createPopper */.fi)(referenceEl, popperContentEl, options);
    };
    const updatePopper = (shouldUpdateZIndex = true) => {
      var _a;
      (_a = (0,external_Vue_.unref)(popperInstanceRef)) == null ? void 0 : _a.update();
      shouldUpdateZIndex && (contentZIndex.value = props.zIndex || nextZIndex());
    };
    const togglePopperAlive = () => {
      var _a, _b;
      const monitorable = { name: "eventListeners", enabled: props.visible };
      (_b = (_a = (0,external_Vue_.unref)(popperInstanceRef)) == null ? void 0 : _a.setOptions) == null ? void 0 : _b.call(_a, (options) => ({
        ...options,
        modifiers: [...options.modifiers || [], monitorable]
      }));
      updatePopper(false);
      if (props.visible && props.focusOnShow) {
        trapped.value = true;
      } else if (props.visible === false) {
        trapped.value = false;
      }
    };
    const onFocusAfterTrapped = () => {
      emit("focus");
    };
    const onFocusAfterReleased = () => {
      focusStartRef.value = "first";
      emit("blur");
    };
    const onFocusInTrap = (event) => {
      var _a;
      if (props.visible && !trapped.value) {
        if (event.relatedTarget) {
          ;
          (_a = event.relatedTarget) == null ? void 0 : _a.focus();
        }
        if (event.target) {
          focusStartRef.value = event.target;
        }
        trapped.value = true;
      }
    };
    const onFocusoutPrevented = () => {
      if (!props.trapping) {
        trapped.value = false;
      }
    };
    const onReleaseRequested = () => {
      trapped.value = false;
      emit("close");
    };
    (0,external_Vue_.onMounted)(() => {
      let updateHandle;
      (0,external_Vue_.watch)(computedReference, (referenceEl) => {
        var _a;
        updateHandle == null ? void 0 : updateHandle();
        const popperInstance = (0,external_Vue_.unref)(popperInstanceRef);
        (_a = popperInstance == null ? void 0 : popperInstance.destroy) == null ? void 0 : _a.call(popperInstance);
        if (referenceEl) {
          const popperContentEl = (0,external_Vue_.unref)(popperContentRef);
          contentRef.value = popperContentEl;
          popperInstanceRef.value = createPopperInstance({
            referenceEl,
            popperContentEl,
            arrowEl: (0,external_Vue_.unref)(arrowRef)
          });
          updateHandle = (0,external_Vue_.watch)(() => referenceEl.getBoundingClientRect(), () => updatePopper(), {
            immediate: true
          });
        } else {
          popperInstanceRef.value = void 0;
        }
      }, {
        immediate: true
      });
      (0,external_Vue_.watch)(() => props.triggerTargetEl, (triggerTargetEl, prevTriggerTargetEl) => {
        triggerTargetAriaStopWatch == null ? void 0 : triggerTargetAriaStopWatch();
        triggerTargetAriaStopWatch = void 0;
        const el = (0,external_Vue_.unref)(triggerTargetEl || popperContentRef.value);
        const prevEl = (0,external_Vue_.unref)(prevTriggerTargetEl || popperContentRef.value);
        if ((0,types/* isElement */.kK)(el)) {
          const { ariaLabel, id } = (0,external_Vue_.toRefs)(props);
          triggerTargetAriaStopWatch = (0,external_Vue_.watch)([role, ariaLabel, ariaModal, id], (watches) => {
            ;
            ["role", "aria-label", "aria-modal", "id"].forEach((key, idx) => {
              (0,lodash_es_isNil/* default */.Z)(watches[idx]) ? el.removeAttribute(key) : el.setAttribute(key, watches[idx]);
            });
          }, { immediate: true });
        }
        if ((0,types/* isElement */.kK)(prevEl)) {
          ;
          ["role", "aria-label", "aria-modal", "id"].forEach((key) => {
            prevEl.removeAttribute(key);
          });
        }
      }, { immediate: true });
      (0,external_Vue_.watch)(() => props.visible, togglePopperAlive, { immediate: true });
      (0,external_Vue_.watch)(() => buildPopperOptions(props, {
        arrowEl: (0,external_Vue_.unref)(arrowRef),
        arrowOffset: (0,external_Vue_.unref)(arrowOffset)
      }), (option) => {
        var _a;
        return (_a = popperInstanceRef.value) == null ? void 0 : _a.setOptions(option);
      });
    });
    (0,external_Vue_.onBeforeUnmount)(() => {
      triggerTargetAriaStopWatch == null ? void 0 : triggerTargetAriaStopWatch();
      triggerTargetAriaStopWatch = void 0;
    });
    expose({
      popperContentRef,
      popperInstanceRef,
      updatePopper,
      contentStyle
    });
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
        ref_key: "popperContentRef",
        ref: popperContentRef,
        style: (0,external_Vue_.normalizeStyle)((0,external_Vue_.unref)(contentStyle)),
        class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(contentClass)),
        tabindex: "-1",
        onMouseenter: _cache[0] || (_cache[0] = (e) => _ctx.$emit("mouseenter", e)),
        onMouseleave: _cache[1] || (_cache[1] = (e) => _ctx.$emit("mouseleave", e))
      }, [
        (0,external_Vue_.createVNode)((0,external_Vue_.unref)(ElFocusTrap), {
          trapped: trapped.value,
          "trap-on-focus-in": true,
          "focus-trap-el": popperContentRef.value,
          "focus-start-el": focusStartRef.value,
          onFocusAfterTrapped,
          onFocusAfterReleased,
          onFocusin: onFocusInTrap,
          onFocusoutPrevented,
          onReleaseRequested
        }, {
          default: (0,external_Vue_.withCtx)(() => [
            (0,external_Vue_.renderSlot)(_ctx.$slots, "default")
          ]),
          _: 3
        }, 8, ["trapped", "focus-trap-el", "focus-start-el"])
      ], 38);
    };
  }
});
var ElPopperContent = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(content2_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/popper/src/content.vue"]]);


//# sourceMappingURL=content2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/utils/dom/event.mjs
const event_on = (element, event, handler, useCapture = false) => {
  if (element && event && handler) {
    element == null ? void 0 : element.addEventListener(event, handler, useCapture);
  }
};
const off = (element, event, handler, useCapture = false) => {
  if (element && event && handler) {
    element == null ? void 0 : element.removeEventListener(event, handler, useCapture);
  }
};
const once = (el, event, fn) => {
  const listener = function(...args) {
    if (fn) {
      fn.apply(this, args);
    }
    off(el, event, listener);
  };
  event_on(el, event, listener);
};
const composeEventHandlers = (theirsHandler, oursHandler, { checkForDefaultPrevented = true } = {}) => {
  const handleEvent = (event) => {
    const shouldPrevent = theirsHandler == null ? void 0 : theirsHandler(event);
    if (checkForDefaultPrevented === false || !shouldPrevent) {
      return oursHandler == null ? void 0 : oursHandler(event);
    }
  };
  return handleEvent;
};
const whenMouse = (handler) => {
  return (e) => e.pointerType === "mouse" ? handler(e) : void 0;
};


//# sourceMappingURL=event.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/tooltip/src/content.mjs










const content_sfc_main = (0,external_Vue_.defineComponent)({
  name: "ElTooltipContent",
  components: {
    ElPopperContent: ElPopperContent
  },
  inheritAttrs: false,
  props: useTooltipContentProps,
  setup(props) {
    const contentRef = (0,external_Vue_.ref)(null);
    const intermediateOpen = (0,external_Vue_.ref)(false);
    const entering = (0,external_Vue_.ref)(false);
    const leaving = (0,external_Vue_.ref)(false);
    const destroyed = (0,external_Vue_.ref)(false);
    const {
      controlled,
      id,
      open,
      trigger,
      onClose,
      onOpen,
      onShow,
      onHide,
      onBeforeShow,
      onBeforeHide
    } = (0,external_Vue_.inject)(TOOLTIP_INJECTION_KEY, void 0);
    const persistentRef = (0,external_Vue_.computed)(() => {
      if (false) {}
      return props.persistent;
    });
    (0,external_Vue_.onBeforeUnmount)(() => {
      destroyed.value = true;
    });
    const shouldRender = (0,external_Vue_.computed)(() => {
      return (0,external_Vue_.unref)(persistentRef) ? true : (0,external_Vue_.unref)(open);
    });
    const shouldShow = (0,external_Vue_.computed)(() => {
      return props.disabled ? false : (0,external_Vue_.unref)(open);
    });
    const contentStyle = (0,external_Vue_.computed)(() => {
      var _a;
      return (_a = props.style) != null ? _a : {};
    });
    const ariaHidden = (0,external_Vue_.computed)(() => !(0,external_Vue_.unref)(open));
    const onTransitionLeave = () => {
      onHide();
    };
    const stopWhenControlled = () => {
      if ((0,external_Vue_.unref)(controlled))
        return true;
    };
    const onContentEnter = composeEventHandlers(stopWhenControlled, () => {
      if (props.enterable && (0,external_Vue_.unref)(trigger) === "hover") {
        onOpen();
      }
    });
    const onContentLeave = composeEventHandlers(stopWhenControlled, () => {
      if ((0,external_Vue_.unref)(trigger) === "hover") {
        onClose();
      }
    });
    const onBeforeEnter = () => {
      var _a, _b;
      (_b = (_a = contentRef.value) == null ? void 0 : _a.updatePopper) == null ? void 0 : _b.call(_a);
      onBeforeShow == null ? void 0 : onBeforeShow();
    };
    const onBeforeLeave = () => {
      onBeforeHide == null ? void 0 : onBeforeHide();
    };
    const onAfterShow = () => {
      onShow();
      stopHandle = (0,core/* onClickOutside */.i9H)((0,external_Vue_.computed)(() => {
        var _a;
        return (_a = contentRef.value) == null ? void 0 : _a.popperContentRef;
      }), () => {
        if ((0,external_Vue_.unref)(controlled))
          return;
        const $trigger = (0,external_Vue_.unref)(trigger);
        if ($trigger !== "hover") {
          onClose();
        }
      });
    };
    const onBlur = () => {
      if (!props.virtualTriggering) {
        onClose();
      }
    };
    let stopHandle;
    (0,external_Vue_.watch)(() => (0,external_Vue_.unref)(open), (val) => {
      if (!val) {
        stopHandle == null ? void 0 : stopHandle();
      }
    }, {
      flush: "post"
    });
    return {
      ariaHidden,
      entering,
      leaving,
      id,
      intermediateOpen,
      contentStyle,
      contentRef,
      destroyed,
      shouldRender,
      shouldShow,
      onClose,
      open,
      onAfterShow,
      onBeforeEnter,
      onBeforeLeave,
      onContentEnter,
      onContentLeave,
      onTransitionLeave,
      onBlur
    };
  }
});
function content_sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_el_popper_content = (0,external_Vue_.resolveComponent)("el-popper-content");
  return (0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(external_Vue_.Teleport, {
    disabled: !_ctx.teleported,
    to: _ctx.appendTo
  }, [
    (0,external_Vue_.createVNode)(external_Vue_.Transition, {
      name: _ctx.transition,
      onAfterLeave: _ctx.onTransitionLeave,
      onBeforeEnter: _ctx.onBeforeEnter,
      onAfterEnter: _ctx.onAfterShow,
      onBeforeLeave: _ctx.onBeforeLeave
    }, {
      default: (0,external_Vue_.withCtx)(() => [
        _ctx.shouldRender ? (0,external_Vue_.withDirectives)(((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(_component_el_popper_content, (0,external_Vue_.mergeProps)({
          key: 0,
          id: _ctx.id,
          ref: "contentRef"
        }, _ctx.$attrs, {
          "aria-label": _ctx.ariaLabel,
          "aria-hidden": _ctx.ariaHidden,
          "boundaries-padding": _ctx.boundariesPadding,
          "fallback-placements": _ctx.fallbackPlacements,
          "gpu-acceleration": _ctx.gpuAcceleration,
          offset: _ctx.offset,
          placement: _ctx.placement,
          "popper-options": _ctx.popperOptions,
          strategy: _ctx.strategy,
          effect: _ctx.effect,
          enterable: _ctx.enterable,
          pure: _ctx.pure,
          "popper-class": _ctx.popperClass,
          "popper-style": [_ctx.popperStyle, _ctx.contentStyle],
          "reference-el": _ctx.referenceEl,
          "trigger-target-el": _ctx.triggerTargetEl,
          visible: _ctx.shouldShow,
          "z-index": _ctx.zIndex,
          onMouseenter: _ctx.onContentEnter,
          onMouseleave: _ctx.onContentLeave,
          onBlur: _ctx.onBlur,
          onClose: _ctx.onClose
        }), {
          default: (0,external_Vue_.withCtx)(() => [
            (0,external_Vue_.createCommentVNode)(" Workaround bug #6378 "),
            !_ctx.destroyed ? (0,external_Vue_.renderSlot)(_ctx.$slots, "default", { key: 0 }) : (0,external_Vue_.createCommentVNode)("v-if", true)
          ]),
          _: 3
        }, 16, ["id", "aria-label", "aria-hidden", "boundaries-padding", "fallback-placements", "gpu-acceleration", "offset", "placement", "popper-options", "strategy", "effect", "enterable", "pure", "popper-class", "popper-style", "reference-el", "trigger-target-el", "visible", "z-index", "onMouseenter", "onMouseleave", "onBlur", "onClose"])), [
          [external_Vue_.vShow, _ctx.shouldShow]
        ]) : (0,external_Vue_.createCommentVNode)("v-if", true)
      ]),
      _: 3
    }, 8, ["name", "onAfterLeave", "onBeforeEnter", "onAfterEnter", "onBeforeLeave"])
  ], 8, ["disabled", "to"]);
}
var ElTooltipContent = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(content_sfc_main, [["render", content_sfc_render], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/tooltip/src/content.vue"]]);


//# sourceMappingURL=content.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/tooltip/src/utils.mjs




const isTriggerType = (trigger, type) => {
  if ((0,shared_esm_bundler/* isArray */.kJ)(trigger)) {
    return trigger.includes(type);
  }
  return trigger === type;
};
const whenTrigger = (trigger, type, handler) => {
  return (e) => {
    isTriggerType((0,external_Vue_.unref)(trigger), type) && handler(e);
  };
};


//# sourceMappingURL=utils.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/hooks/use-forward-ref/index.mjs


const FORWARD_REF_INJECTION_KEY = Symbol("elForwardRef");
const useForwardRef = (forwardRef) => {
  const setForwardRef = (el) => {
    forwardRef.value = el;
  };
  (0,external_Vue_.provide)(FORWARD_REF_INJECTION_KEY, {
    setForwardRef
  });
};
const useForwardRefDirective = (setForwardRef) => {
  return {
    mounted(el) {
      setForwardRef(el);
    },
    updated(el) {
      setForwardRef(el);
    },
    unmounted() {
      setForwardRef(null);
    }
  };
};


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/slot/src/only-child.mjs







const NAME = "ElOnlyChild";
const OnlyChild = (0,external_Vue_.defineComponent)({
  name: NAME,
  setup(_, {
    slots,
    attrs
  }) {
    var _a;
    const forwardRefInjection = (0,external_Vue_.inject)(FORWARD_REF_INJECTION_KEY);
    const forwardRefDirective = useForwardRefDirective((_a = forwardRefInjection == null ? void 0 : forwardRefInjection.setForwardRef) != null ? _a : shared_esm_bundler/* NOOP */.dG);
    return () => {
      var _a2;
      const defaultSlot = (_a2 = slots.default) == null ? void 0 : _a2.call(slots, attrs);
      if (!defaultSlot)
        return null;
      if (defaultSlot.length > 1) {
        (0,error/* debugWarn */.N)(NAME, "requires exact only one valid child.");
        return null;
      }
      const firstLegitNode = findFirstLegitChild(defaultSlot);
      if (!firstLegitNode) {
        (0,error/* debugWarn */.N)(NAME, "no valid child node found");
        return null;
      }
      return (0,external_Vue_.withDirectives)((0,external_Vue_.cloneVNode)(firstLegitNode, attrs), [[forwardRefDirective]]);
    };
  }
});
function findFirstLegitChild(node) {
  if (!node)
    return null;
  const children = node;
  for (const child of children) {
    if ((0,shared_esm_bundler/* isObject */.Kn)(child)) {
      switch (child.type) {
        case external_Vue_.Comment:
          continue;
        case external_Vue_.Text:
        case "svg":
          return wrapTextContent(child);
        case external_Vue_.Fragment:
          return findFirstLegitChild(child.children);
        default:
          return child;
      }
    }
    return wrapTextContent(child);
  }
  return null;
}
function wrapTextContent(s) {
  return (0,external_Vue_.createVNode)("span", {
    "class": "el-only-child__content"
  }, [s]);
}


//# sourceMappingURL=only-child.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/popper/src/trigger2.mjs














const trigger2_default_ = {
  name: "ElPopperTrigger",
  inheritAttrs: false
};
const trigger2_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...trigger2_default_,
  props: usePopperTriggerProps,
  setup(__props, { expose }) {
    const props = __props;
    const { role, triggerRef } = (0,external_Vue_.inject)(POPPER_INJECTION_KEY, void 0);
    useForwardRef(triggerRef);
    const ariaControls = (0,external_Vue_.computed)(() => {
      return ariaHaspopup.value ? props.id : void 0;
    });
    const ariaDescribedby = (0,external_Vue_.computed)(() => {
      if (role && role.value === "tooltip") {
        return props.open && props.id ? props.id : void 0;
      }
      return void 0;
    });
    const ariaHaspopup = (0,external_Vue_.computed)(() => {
      if (role && role.value !== "tooltip") {
        return role.value;
      }
      return void 0;
    });
    const ariaExpanded = (0,external_Vue_.computed)(() => {
      return ariaHaspopup.value ? `${props.open}` : void 0;
    });
    let virtualTriggerAriaStopWatch = void 0;
    (0,external_Vue_.onMounted)(() => {
      (0,external_Vue_.watch)(() => props.virtualRef, (virtualEl) => {
        if (virtualEl) {
          triggerRef.value = (0,core/* unrefElement */.NXq)(virtualEl);
        }
      }, {
        immediate: true
      });
      (0,external_Vue_.watch)(() => triggerRef.value, (el, prevEl) => {
        virtualTriggerAriaStopWatch == null ? void 0 : virtualTriggerAriaStopWatch();
        virtualTriggerAriaStopWatch = void 0;
        if ((0,types/* isElement */.kK)(el)) {
          ;
          [
            "onMouseenter",
            "onMouseleave",
            "onClick",
            "onKeydown",
            "onFocus",
            "onBlur",
            "onContextmenu"
          ].forEach((eventName) => {
            var _a;
            const handler = props[eventName];
            if (handler) {
              ;
              el.addEventListener(eventName.slice(2).toLowerCase(), handler);
              (_a = prevEl == null ? void 0 : prevEl.removeEventListener) == null ? void 0 : _a.call(prevEl, eventName.slice(2).toLowerCase(), handler);
            }
          });
          virtualTriggerAriaStopWatch = (0,external_Vue_.watch)([ariaControls, ariaDescribedby, ariaHaspopup, ariaExpanded], (watches) => {
            ;
            [
              "aria-controls",
              "aria-describedby",
              "aria-haspopup",
              "aria-expanded"
            ].forEach((key, idx) => {
              (0,lodash_es_isNil/* default */.Z)(watches[idx]) ? el.removeAttribute(key) : el.setAttribute(key, watches[idx]);
            });
          }, { immediate: true });
        }
        if ((0,types/* isElement */.kK)(prevEl)) {
          ;
          [
            "aria-controls",
            "aria-describedby",
            "aria-haspopup",
            "aria-expanded"
          ].forEach((key) => prevEl.removeAttribute(key));
        }
      }, {
        immediate: true
      });
    });
    (0,external_Vue_.onBeforeUnmount)(() => {
      virtualTriggerAriaStopWatch == null ? void 0 : virtualTriggerAriaStopWatch();
      virtualTriggerAriaStopWatch = void 0;
    });
    expose({
      triggerRef
    });
    return (_ctx, _cache) => {
      return !_ctx.virtualTriggering ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.unref)(OnlyChild), (0,external_Vue_.mergeProps)({ key: 0 }, _ctx.$attrs, {
        "aria-controls": (0,external_Vue_.unref)(ariaControls),
        "aria-describedby": (0,external_Vue_.unref)(ariaDescribedby),
        "aria-expanded": (0,external_Vue_.unref)(ariaExpanded),
        "aria-haspopup": (0,external_Vue_.unref)(ariaHaspopup)
      }), {
        default: (0,external_Vue_.withCtx)(() => [
          (0,external_Vue_.renderSlot)(_ctx.$slots, "default")
        ]),
        _: 3
      }, 16, ["aria-controls", "aria-describedby", "aria-expanded", "aria-haspopup"])) : (0,external_Vue_.createCommentVNode)("v-if", true);
    };
  }
});
var ElPopperTrigger = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(trigger2_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/popper/src/trigger.vue"]]);


//# sourceMappingURL=trigger2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/tooltip/src/trigger.mjs












const trigger_sfc_main = (0,external_Vue_.defineComponent)({
  name: "ElTooltipTrigger",
  components: {
    ElPopperTrigger: ElPopperTrigger
  },
  props: useTooltipTriggerProps,
  setup(props) {
    const ns = (0,use_namespace/* useNamespace */.s)("tooltip");
    const { controlled, id, open, onOpen, onClose, onToggle } = (0,external_Vue_.inject)(TOOLTIP_INJECTION_KEY, void 0);
    const triggerRef = (0,external_Vue_.ref)(null);
    const stopWhenControlledOrDisabled = () => {
      if ((0,external_Vue_.unref)(controlled) || props.disabled) {
        return true;
      }
    };
    const trigger = (0,external_Vue_.toRef)(props, "trigger");
    const onMouseenter = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, "hover", onOpen));
    const onMouseleave = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, "hover", onClose));
    const onClick = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, "click", (e) => {
      if (e.button === 0) {
        onToggle(e);
      }
    }));
    const onFocus = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, "focus", onOpen));
    const onBlur = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, "focus", onClose));
    const onContextMenu = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, "contextmenu", (e) => {
      e.preventDefault();
      onToggle(e);
    }));
    const onKeydown = composeEventHandlers(stopWhenControlledOrDisabled, (e) => {
      const { code } = e;
      if (props.triggerKeys.includes(code)) {
        e.preventDefault();
        onToggle(e);
      }
    });
    return {
      onBlur,
      onContextMenu,
      onFocus,
      onMouseenter,
      onMouseleave,
      onClick,
      onKeydown,
      open,
      id,
      triggerRef,
      ns
    };
  }
});
function trigger_sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_el_popper_trigger = (0,external_Vue_.resolveComponent)("el-popper-trigger");
  return (0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(_component_el_popper_trigger, {
    id: _ctx.id,
    "virtual-ref": _ctx.virtualRef,
    open: _ctx.open,
    "virtual-triggering": _ctx.virtualTriggering,
    class: (0,external_Vue_.normalizeClass)(_ctx.ns.e("trigger")),
    onBlur: _ctx.onBlur,
    onClick: _ctx.onClick,
    onContextmenu: _ctx.onContextMenu,
    onFocus: _ctx.onFocus,
    onMouseenter: _ctx.onMouseenter,
    onMouseleave: _ctx.onMouseleave,
    onKeydown: _ctx.onKeydown
  }, {
    default: (0,external_Vue_.withCtx)(() => [
      (0,external_Vue_.renderSlot)(_ctx.$slots, "default")
    ]),
    _: 3
  }, 8, ["id", "virtual-ref", "open", "virtual-triggering", "class", "onBlur", "onClick", "onContextmenu", "onFocus", "onMouseenter", "onMouseleave", "onKeydown"]);
}
var ElTooltipTrigger = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(trigger_sfc_main, [["render", trigger_sfc_render], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/tooltip/src/trigger.vue"]]);


//# sourceMappingURL=trigger.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/hooks/use-model-toggle/index.mjs






const _prop = (0,runtime/* buildProp */.l0)({
  type: (0,runtime/* definePropType */.Cq)(Boolean),
  default: null
});
const _event = (0,runtime/* buildProp */.l0)({
  type: (0,runtime/* definePropType */.Cq)(Function)
});
const createModelToggleComposable = (name) => {
  const updateEventKey = `update:${name}`;
  const updateEventKeyRaw = `onUpdate:${name}`;
  const useModelToggleEmits2 = [updateEventKey];
  const useModelToggleProps2 = {
    [name]: _prop,
    [updateEventKeyRaw]: _event
  };
  const useModelToggle2 = ({
    indicator,
    toggleReason,
    shouldHideWhenRouteChanges,
    shouldProceed,
    onShow,
    onHide
  }) => {
    const instance = (0,external_Vue_.getCurrentInstance)();
    const { emit } = instance;
    const props = instance.props;
    const hasUpdateHandler = (0,external_Vue_.computed)(() => (0,shared_esm_bundler/* isFunction */.mf)(props[updateEventKeyRaw]));
    const isModelBindingAbsent = (0,external_Vue_.computed)(() => props[name] === null);
    const doShow = (event) => {
      if (indicator.value === true) {
        return;
      }
      indicator.value = true;
      if (toggleReason) {
        toggleReason.value = event;
      }
      if ((0,shared_esm_bundler/* isFunction */.mf)(onShow)) {
        onShow(event);
      }
    };
    const doHide = (event) => {
      if (indicator.value === false) {
        return;
      }
      indicator.value = false;
      if (toggleReason) {
        toggleReason.value = event;
      }
      if ((0,shared_esm_bundler/* isFunction */.mf)(onHide)) {
        onHide(event);
      }
    };
    const show = (event) => {
      if (props.disabled === true || (0,shared_esm_bundler/* isFunction */.mf)(shouldProceed) && !shouldProceed())
        return;
      const shouldEmit = hasUpdateHandler.value && shared/* isClient */.C5;
      if (shouldEmit) {
        emit(updateEventKey, true);
      }
      if (isModelBindingAbsent.value || !shouldEmit) {
        doShow(event);
      }
    };
    const hide = (event) => {
      if (props.disabled === true || !shared/* isClient */.C5)
        return;
      const shouldEmit = hasUpdateHandler.value && shared/* isClient */.C5;
      if (shouldEmit) {
        emit(updateEventKey, false);
      }
      if (isModelBindingAbsent.value || !shouldEmit) {
        doHide(event);
      }
    };
    const onChange = (val) => {
      if (!(0,shared/* isBoolean */.jn)(val))
        return;
      if (props.disabled && val) {
        if (hasUpdateHandler.value) {
          emit(updateEventKey, false);
        }
      } else if (indicator.value !== val) {
        if (val) {
          doShow();
        } else {
          doHide();
        }
      }
    };
    const toggle = () => {
      if (indicator.value) {
        hide();
      } else {
        show();
      }
    };
    (0,external_Vue_.watch)(() => props[name], onChange);
    if (shouldHideWhenRouteChanges && instance.appContext.config.globalProperties.$route !== void 0) {
      (0,external_Vue_.watch)(() => ({
        ...instance.proxy.$route
      }), () => {
        if (shouldHideWhenRouteChanges.value && indicator.value) {
          hide();
        }
      });
    }
    (0,external_Vue_.onMounted)(() => {
      onChange(props[name]);
    });
    return {
      hide,
      show,
      toggle
    };
  };
  return {
    useModelToggle: useModelToggle2,
    useModelToggleProps: useModelToggleProps2,
    useModelToggleEmits: useModelToggleEmits2
  };
};
const { useModelToggle, useModelToggleProps, useModelToggleEmits } = createModelToggleComposable("modelValue");


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/popper/src/arrow.mjs



const usePopperArrowProps = (0,runtime/* buildProps */.o8)({
  arrowOffset: {
    type: Number,
    default: 5
  }
});


//# sourceMappingURL=arrow.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/popper/src/arrow2.mjs








const arrow2_default_ = {
  name: "ElPopperArrow",
  inheritAttrs: false
};
const arrow2_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...arrow2_default_,
  props: usePopperArrowProps,
  setup(__props, { expose }) {
    const props = __props;
    const ns = (0,use_namespace/* useNamespace */.s)("popper");
    const { arrowOffset, arrowRef } = (0,external_Vue_.inject)(POPPER_CONTENT_INJECTION_KEY, void 0);
    (0,external_Vue_.watch)(() => props.arrowOffset, (val) => {
      arrowOffset.value = val;
    });
    (0,external_Vue_.onBeforeUnmount)(() => {
      arrowRef.value = void 0;
    });
    expose({
      arrowRef
    });
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("span", {
        ref_key: "arrowRef",
        ref: arrowRef,
        class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("arrow")),
        "data-popper-arrow": ""
      }, null, 2);
    };
  }
});
var ElPopperArrow = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(arrow2_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/popper/src/arrow.vue"]]);


//# sourceMappingURL=arrow2.mjs.map

// EXTERNAL MODULE: ./node_modules/element-plus/es/hooks/use-id/index.mjs
var use_id = __webpack_require__(82259);
;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/tooltip/src/tooltip2.mjs




















const { useModelToggleProps: tooltip2_useModelToggleProps, useModelToggle: tooltip2_useModelToggle, useModelToggleEmits: tooltip2_useModelToggleEmits } = createModelToggleComposable("visible");
const tooltip2_sfc_main = (0,external_Vue_.defineComponent)({
  name: "ElTooltip",
  components: {
    ElPopper: ElPopper,
    ElPopperArrow: ElPopperArrow,
    ElTooltipContent: ElTooltipContent,
    ElTooltipTrigger: ElTooltipTrigger
  },
  props: {
    ...usePopperProps,
    ...tooltip2_useModelToggleProps,
    ...useTooltipContentProps,
    ...useTooltipTriggerProps,
    ...usePopperArrowProps,
    ...useTooltipProps
  },
  emits: [
    ...tooltip2_useModelToggleEmits,
    "before-show",
    "before-hide",
    "show",
    "hide",
    "open",
    "close"
  ],
  setup(props, { emit }) {
    usePopperContainer();
    const compatShowAfter = (0,external_Vue_.computed)(() => {
      if (!(0,types/* isUndefined */.o8)(props.openDelay)) {
        (0,error/* debugWarn */.N)("ElTooltip", "open-delay is about to be deprecated in the next major version, please use `show-after` instead");
      }
      return props.openDelay || props.showAfter;
    });
    const compatShowArrow = (0,external_Vue_.computed)(() => {
      if (!(0,types/* isUndefined */.o8)(props.visibleArrow)) {
        (0,error/* debugWarn */.N)("ElTooltip", "`visible-arrow` is about to be deprecated in the next major version, please use `show-arrow` instead");
      }
      return (0,shared/* isBoolean */.jn)(props.visibleArrow) ? props.visibleArrow : props.showArrow;
    });
    const id = (0,use_id/* useId */.M)();
    const popperRef = (0,external_Vue_.ref)(null);
    const contentRef = (0,external_Vue_.ref)(null);
    const updatePopper = () => {
      var _a;
      const popperComponent = (0,external_Vue_.unref)(popperRef);
      if (popperComponent) {
        (_a = popperComponent.popperInstanceRef) == null ? void 0 : _a.update();
      }
    };
    const open = (0,external_Vue_.ref)(false);
    const toggleReason = (0,external_Vue_.ref)(void 0);
    const { show, hide } = tooltip2_useModelToggle({
      indicator: open,
      toggleReason
    });
    const { onOpen, onClose } = useDelayedToggle({
      showAfter: compatShowAfter,
      hideAfter: (0,external_Vue_.toRef)(props, "hideAfter"),
      open: show,
      close: hide
    });
    const controlled = (0,external_Vue_.computed)(() => (0,shared/* isBoolean */.jn)(props.visible));
    (0,external_Vue_.provide)(TOOLTIP_INJECTION_KEY, {
      controlled,
      id,
      open: (0,external_Vue_.readonly)(open),
      trigger: (0,external_Vue_.toRef)(props, "trigger"),
      onOpen: (event) => {
        onOpen(event);
      },
      onClose: (event) => {
        onClose(event);
      },
      onToggle: (event) => {
        if ((0,external_Vue_.unref)(open)) {
          onClose(event);
        } else {
          onOpen(event);
        }
      },
      onShow: () => {
        emit("show", toggleReason.value);
      },
      onHide: () => {
        emit("hide", toggleReason.value);
      },
      onBeforeShow: () => {
        emit("before-show", toggleReason.value);
      },
      onBeforeHide: () => {
        emit("before-hide", toggleReason.value);
      },
      updatePopper
    });
    (0,external_Vue_.watch)(() => props.disabled, (disabled) => {
      if (disabled && open.value) {
        open.value = false;
      }
    });
    const isFocusInsideContent = () => {
      var _a, _b;
      const popperContent = (_b = (_a = contentRef.value) == null ? void 0 : _a.contentRef) == null ? void 0 : _b.popperContentRef;
      return popperContent && popperContent.contains(document.activeElement);
    };
    (0,external_Vue_.onDeactivated)(() => open.value && hide());
    return {
      compatShowAfter,
      compatShowArrow,
      popperRef,
      contentRef,
      open,
      hide,
      isFocusInsideContent,
      updatePopper,
      onOpen,
      onClose
    };
  }
});
const _hoisted_1 = ["innerHTML"];
const _hoisted_2 = { key: 1 };
function tooltip2_sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_el_tooltip_trigger = (0,external_Vue_.resolveComponent)("el-tooltip-trigger");
  const _component_el_popper_arrow = (0,external_Vue_.resolveComponent)("el-popper-arrow");
  const _component_el_tooltip_content = (0,external_Vue_.resolveComponent)("el-tooltip-content");
  const _component_el_popper = (0,external_Vue_.resolveComponent)("el-popper");
  return (0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(_component_el_popper, {
    ref: "popperRef",
    role: _ctx.role
  }, {
    default: (0,external_Vue_.withCtx)(() => [
      (0,external_Vue_.createVNode)(_component_el_tooltip_trigger, {
        disabled: _ctx.disabled,
        trigger: _ctx.trigger,
        "trigger-keys": _ctx.triggerKeys,
        "virtual-ref": _ctx.virtualRef,
        "virtual-triggering": _ctx.virtualTriggering
      }, {
        default: (0,external_Vue_.withCtx)(() => [
          _ctx.$slots.default ? (0,external_Vue_.renderSlot)(_ctx.$slots, "default", { key: 0 }) : (0,external_Vue_.createCommentVNode)("v-if", true)
        ]),
        _: 3
      }, 8, ["disabled", "trigger", "trigger-keys", "virtual-ref", "virtual-triggering"]),
      (0,external_Vue_.createVNode)(_component_el_tooltip_content, {
        ref: "contentRef",
        "aria-label": _ctx.ariaLabel,
        "boundaries-padding": _ctx.boundariesPadding,
        content: _ctx.content,
        disabled: _ctx.disabled,
        effect: _ctx.effect,
        enterable: _ctx.enterable,
        "fallback-placements": _ctx.fallbackPlacements,
        "hide-after": _ctx.hideAfter,
        "gpu-acceleration": _ctx.gpuAcceleration,
        offset: _ctx.offset,
        persistent: _ctx.persistent,
        "popper-class": _ctx.popperClass,
        "popper-style": _ctx.popperStyle,
        placement: _ctx.placement,
        "popper-options": _ctx.popperOptions,
        pure: _ctx.pure,
        "raw-content": _ctx.rawContent,
        "reference-el": _ctx.referenceEl,
        "trigger-target-el": _ctx.triggerTargetEl,
        "show-after": _ctx.compatShowAfter,
        strategy: _ctx.strategy,
        teleported: _ctx.teleported,
        transition: _ctx.transition,
        "virtual-triggering": _ctx.virtualTriggering,
        "z-index": _ctx.zIndex,
        "append-to": _ctx.appendTo
      }, {
        default: (0,external_Vue_.withCtx)(() => [
          (0,external_Vue_.renderSlot)(_ctx.$slots, "content", {}, () => [
            _ctx.rawContent ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("span", {
              key: 0,
              innerHTML: _ctx.content
            }, null, 8, _hoisted_1)) : ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("span", _hoisted_2, (0,external_Vue_.toDisplayString)(_ctx.content), 1))
          ]),
          _ctx.compatShowArrow ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(_component_el_popper_arrow, {
            key: 0,
            "arrow-offset": _ctx.arrowOffset
          }, null, 8, ["arrow-offset"])) : (0,external_Vue_.createCommentVNode)("v-if", true)
        ]),
        _: 3
      }, 8, ["aria-label", "boundaries-padding", "content", "disabled", "effect", "enterable", "fallback-placements", "hide-after", "gpu-acceleration", "offset", "persistent", "popper-class", "popper-style", "placement", "popper-options", "pure", "raw-content", "reference-el", "trigger-target-el", "show-after", "strategy", "teleported", "transition", "virtual-triggering", "z-index", "append-to"])
    ]),
    _: 3
  }, 8, ["role"]);
}
var Tooltip = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(tooltip2_sfc_main, [["render", tooltip2_sfc_render], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/tooltip/src/tooltip.vue"]]);


//# sourceMappingURL=tooltip2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/tooltip/index.mjs






const ElTooltip = (0,install/* withInstall */.nz)(Tooltip);


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/autocomplete/src/autocomplete.mjs








const autocompleteProps = (0,runtime/* buildProps */.o8)({
  valueKey: {
    type: String,
    default: "value"
  },
  modelValue: {
    type: [String, Number],
    default: ""
  },
  debounce: {
    type: Number,
    default: 300
  },
  placement: {
    type: (0,runtime/* definePropType */.Cq)(String),
    values: [
      "top",
      "top-start",
      "top-end",
      "bottom",
      "bottom-start",
      "bottom-end"
    ],
    default: "bottom-start"
  },
  fetchSuggestions: {
    type: (0,runtime/* definePropType */.Cq)([Function, Array]),
    default: shared_esm_bundler/* NOOP */.dG
  },
  popperClass: {
    type: String,
    default: ""
  },
  triggerOnFocus: {
    type: Boolean,
    default: true
  },
  selectWhenUnmatched: {
    type: Boolean,
    default: false
  },
  hideLoading: {
    type: Boolean,
    default: false
  },
  label: {
    type: String
  },
  teleported: useTooltipContentProps.teleported,
  highlightFirstItem: {
    type: Boolean,
    default: false
  }
});
const autocompleteEmits = {
  [constants_event/* UPDATE_MODEL_EVENT */.f_]: (value) => (0,shared_esm_bundler/* isString */.HD)(value),
  [constants_event/* INPUT_EVENT */.e_]: (value) => (0,shared_esm_bundler/* isString */.HD)(value),
  [constants_event/* CHANGE_EVENT */.O7]: (value) => (0,shared_esm_bundler/* isString */.HD)(value),
  focus: (evt) => evt instanceof FocusEvent,
  blur: (evt) => evt instanceof FocusEvent,
  clear: () => true,
  select: (item) => (0,shared_esm_bundler/* isObject */.Kn)(item)
};


//# sourceMappingURL=autocomplete.mjs.map

// EXTERNAL MODULE: ./node_modules/element-plus/es/hooks/use-attrs/index.mjs
var use_attrs = __webpack_require__(96274);
// EXTERNAL MODULE: ./node_modules/element-plus/es/hooks/use-common-props/index.mjs + 1 modules
var use_common_props = __webpack_require__(75711);
;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/autocomplete/src/autocomplete2.mjs





















const autocomplete2_hoisted_1 = ["aria-expanded", "aria-owns"];
const autocomplete2_hoisted_2 = { key: 0 };
const _hoisted_3 = ["id", "aria-selected", "onClick"];
const autocomplete2_default_ = {
  name: "ElAutocomplete",
  inheritAttrs: false
};
const autocomplete2_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...autocomplete2_default_,
  props: autocompleteProps,
  emits: autocompleteEmits,
  setup(__props, { expose, emit }) {
    const props = __props;
    const COMPONENT_NAME = "ElAutocomplete";
    const attrs = (0,use_attrs/* useAttrs */.l)();
    const rawAttrs = (0,external_Vue_.useAttrs)();
    const disabled = (0,use_common_props/* useDisabled */.B4)();
    const ns = (0,use_namespace/* useNamespace */.s)("autocomplete");
    const inputRef = (0,external_Vue_.ref)();
    const regionRef = (0,external_Vue_.ref)();
    const popperRef = (0,external_Vue_.ref)();
    const listboxRef = (0,external_Vue_.ref)();
    let ignoreFocusEvent = false;
    const suggestions = (0,external_Vue_.ref)([]);
    const highlightedIndex = (0,external_Vue_.ref)(-1);
    const dropdownWidth = (0,external_Vue_.ref)("");
    const activated = (0,external_Vue_.ref)(false);
    const suggestionDisabled = (0,external_Vue_.ref)(false);
    const loading = (0,external_Vue_.ref)(false);
    const listboxId = (0,external_Vue_.computed)(() => ns.b(String(rand_generateId())));
    const styles = (0,external_Vue_.computed)(() => rawAttrs.style);
    const suggestionVisible = (0,external_Vue_.computed)(() => {
      const isValidData = suggestions.value.length > 0;
      return (isValidData || loading.value) && activated.value;
    });
    const suggestionLoading = (0,external_Vue_.computed)(() => !props.hideLoading && loading.value);
    const refInput = (0,external_Vue_.computed)(() => {
      if (inputRef.value) {
        return Array.from(inputRef.value.$el.querySelectorAll("input"));
      }
      return [];
    });
    const onSuggestionShow = async () => {
      await (0,external_Vue_.nextTick)();
      if (suggestionVisible.value) {
        dropdownWidth.value = `${inputRef.value.$el.offsetWidth}px`;
      }
    };
    const onShow = () => {
      ignoreFocusEvent = true;
    };
    const onHide = () => {
      ignoreFocusEvent = false;
      highlightedIndex.value = -1;
    };
    const getData = async (queryString) => {
      if (suggestionDisabled.value)
        return;
      const cb = (suggestionList) => {
        loading.value = false;
        if (suggestionDisabled.value)
          return;
        if ((0,shared_esm_bundler/* isArray */.kJ)(suggestionList)) {
          suggestions.value = suggestionList;
          highlightedIndex.value = props.highlightFirstItem ? 0 : -1;
        } else {
          (0,error/* throwError */._)(COMPONENT_NAME, "autocomplete suggestions must be an array");
        }
      };
      loading.value = true;
      if ((0,shared_esm_bundler/* isArray */.kJ)(props.fetchSuggestions)) {
        cb(props.fetchSuggestions);
      } else {
        const result = await props.fetchSuggestions(queryString, cb);
        if ((0,shared_esm_bundler/* isArray */.kJ)(result))
          cb(result);
      }
    };
    const debouncedGetData = (0,debounce/* default */.Z)(getData, props.debounce);
    const handleInput = (value) => {
      const valuePresented = !!value;
      emit(constants_event/* INPUT_EVENT */.e_, value);
      emit(constants_event/* UPDATE_MODEL_EVENT */.f_, value);
      suggestionDisabled.value = false;
      activated.value || (activated.value = valuePresented);
      if (!props.triggerOnFocus && !value) {
        suggestionDisabled.value = true;
        suggestions.value = [];
        return;
      }
      debouncedGetData(value);
    };
    const handleMouseDown = (event) => {
      var _a;
      if (disabled.value)
        return;
      if (((_a = event.target) == null ? void 0 : _a.tagName) !== "INPUT" || refInput.value.includes(document.activeElement)) {
        activated.value = true;
      }
    };
    const handleChange = (value) => {
      emit(constants_event/* CHANGE_EVENT */.O7, value);
    };
    const handleFocus = (evt) => {
      if (ignoreFocusEvent)
        return;
      activated.value = true;
      emit("focus", evt);
      if (props.triggerOnFocus) {
        debouncedGetData(String(props.modelValue));
      }
    };
    const handleBlur = (evt) => {
      if (ignoreFocusEvent)
        return;
      emit("blur", evt);
    };
    const handleClear = () => {
      activated.value = false;
      emit(constants_event/* UPDATE_MODEL_EVENT */.f_, "");
      emit("clear");
    };
    const handleKeyEnter = async () => {
      if (suggestionVisible.value && highlightedIndex.value >= 0 && highlightedIndex.value < suggestions.value.length) {
        handleSelect(suggestions.value[highlightedIndex.value]);
      } else if (props.selectWhenUnmatched) {
        emit("select", { value: props.modelValue });
        suggestions.value = [];
        highlightedIndex.value = -1;
      }
    };
    const handleKeyEscape = (evt) => {
      if (suggestionVisible.value) {
        evt.preventDefault();
        evt.stopPropagation();
        close();
      }
    };
    const close = () => {
      activated.value = false;
    };
    const focus = () => {
      var _a;
      (_a = inputRef.value) == null ? void 0 : _a.focus();
    };
    const blur = () => {
      var _a;
      (_a = inputRef.value) == null ? void 0 : _a.blur();
    };
    const handleSelect = async (item) => {
      emit(constants_event/* INPUT_EVENT */.e_, item[props.valueKey]);
      emit(constants_event/* UPDATE_MODEL_EVENT */.f_, item[props.valueKey]);
      emit("select", item);
      suggestions.value = [];
      highlightedIndex.value = -1;
    };
    const highlight = (index) => {
      if (!suggestionVisible.value || loading.value)
        return;
      if (index < 0) {
        highlightedIndex.value = -1;
        return;
      }
      if (index >= suggestions.value.length) {
        index = suggestions.value.length - 1;
      }
      const suggestion = regionRef.value.querySelector(`.${ns.be("suggestion", "wrap")}`);
      const suggestionList = suggestion.querySelectorAll(`.${ns.be("suggestion", "list")} li`);
      const highlightItem = suggestionList[index];
      const scrollTop = suggestion.scrollTop;
      const { offsetTop, scrollHeight } = highlightItem;
      if (offsetTop + scrollHeight > scrollTop + suggestion.clientHeight) {
        suggestion.scrollTop += scrollHeight;
      }
      if (offsetTop < scrollTop) {
        suggestion.scrollTop -= scrollHeight;
      }
      highlightedIndex.value = index;
      inputRef.value.ref.setAttribute("aria-activedescendant", `${listboxId.value}-item-${highlightedIndex.value}`);
    };
    (0,core/* onClickOutside */.i9H)(listboxRef, () => {
      suggestionVisible.value && close();
    });
    (0,external_Vue_.onMounted)(() => {
      ;
      inputRef.value.ref.setAttribute("role", "textbox");
      inputRef.value.ref.setAttribute("aria-autocomplete", "list");
      inputRef.value.ref.setAttribute("aria-controls", "id");
      inputRef.value.ref.setAttribute("aria-activedescendant", `${listboxId.value}-item-${highlightedIndex.value}`);
    });
    expose({
      highlightedIndex,
      activated,
      loading,
      inputRef,
      popperRef,
      suggestions,
      handleSelect,
      handleKeyEnter,
      focus,
      blur,
      close,
      highlight
    });
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.unref)(ElTooltip), {
        ref_key: "popperRef",
        ref: popperRef,
        visible: (0,external_Vue_.unref)(suggestionVisible),
        "onUpdate:visible": _cache[2] || (_cache[2] = ($event) => (0,external_Vue_.isRef)(suggestionVisible) ? suggestionVisible.value = $event : null),
        placement: _ctx.placement,
        "fallback-placements": ["bottom-start", "top-start"],
        "popper-class": [(0,external_Vue_.unref)(ns).e("popper"), _ctx.popperClass],
        teleported: _ctx.teleported,
        "gpu-acceleration": false,
        pure: "",
        "manual-mode": "",
        effect: "light",
        trigger: "click",
        transition: `${(0,external_Vue_.unref)(ns).namespace.value}-zoom-in-top`,
        persistent: "",
        onBeforeShow: onSuggestionShow,
        onShow,
        onHide
      }, {
        content: (0,external_Vue_.withCtx)(() => [
          (0,external_Vue_.createElementVNode)("div", {
            ref_key: "regionRef",
            ref: regionRef,
            class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(ns).b("suggestion"), (0,external_Vue_.unref)(ns).is("loading", (0,external_Vue_.unref)(suggestionLoading))]),
            style: (0,external_Vue_.normalizeStyle)({ minWidth: dropdownWidth.value, outline: "none" }),
            role: "region"
          }, [
            (0,external_Vue_.createVNode)((0,external_Vue_.unref)(ElScrollbar), {
              id: (0,external_Vue_.unref)(listboxId),
              tag: "ul",
              "wrap-class": (0,external_Vue_.unref)(ns).be("suggestion", "wrap"),
              "view-class": (0,external_Vue_.unref)(ns).be("suggestion", "list"),
              role: "listbox"
            }, {
              default: (0,external_Vue_.withCtx)(() => [
                (0,external_Vue_.unref)(suggestionLoading) ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("li", autocomplete2_hoisted_2, [
                  (0,external_Vue_.createVNode)((0,external_Vue_.unref)(components_icon/* ElIcon */.gn), {
                    class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).is("loading"))
                  }, {
                    default: (0,external_Vue_.withCtx)(() => [
                      (0,external_Vue_.createVNode)((0,external_Vue_.unref)(dist/* Loading */.gbz))
                    ]),
                    _: 1
                  }, 8, ["class"])
                ])) : ((0,external_Vue_.openBlock)(true), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, { key: 1 }, (0,external_Vue_.renderList)(suggestions.value, (item, index) => {
                  return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("li", {
                    id: `${(0,external_Vue_.unref)(listboxId)}-item-${index}`,
                    key: index,
                    class: (0,external_Vue_.normalizeClass)({ highlighted: highlightedIndex.value === index }),
                    role: "option",
                    "aria-selected": highlightedIndex.value === index,
                    onClick: ($event) => handleSelect(item)
                  }, [
                    (0,external_Vue_.renderSlot)(_ctx.$slots, "default", { item }, () => [
                      (0,external_Vue_.createTextVNode)((0,external_Vue_.toDisplayString)(item[_ctx.valueKey]), 1)
                    ])
                  ], 10, _hoisted_3);
                }), 128))
              ]),
              _: 3
            }, 8, ["id", "wrap-class", "view-class"])
          ], 6)
        ]),
        default: (0,external_Vue_.withCtx)(() => [
          (0,external_Vue_.createElementVNode)("div", {
            ref_key: "listboxRef",
            ref: listboxRef,
            class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(ns).b(), _ctx.$attrs.class]),
            style: (0,external_Vue_.normalizeStyle)((0,external_Vue_.unref)(styles)),
            role: "combobox",
            "aria-haspopup": "listbox",
            "aria-expanded": (0,external_Vue_.unref)(suggestionVisible),
            "aria-owns": (0,external_Vue_.unref)(listboxId)
          }, [
            (0,external_Vue_.createVNode)((0,external_Vue_.unref)(components_input/* ElInput */.EZ), (0,external_Vue_.mergeProps)({
              ref_key: "inputRef",
              ref: inputRef
            }, (0,external_Vue_.unref)(attrs), {
              "model-value": _ctx.modelValue,
              onInput: handleInput,
              onChange: handleChange,
              onFocus: handleFocus,
              onBlur: handleBlur,
              onClear: handleClear,
              onKeydown: [
                _cache[0] || (_cache[0] = (0,external_Vue_.withKeys)((0,external_Vue_.withModifiers)(($event) => highlight(highlightedIndex.value - 1), ["prevent"]), ["up"])),
                _cache[1] || (_cache[1] = (0,external_Vue_.withKeys)((0,external_Vue_.withModifiers)(($event) => highlight(highlightedIndex.value + 1), ["prevent"]), ["down"])),
                (0,external_Vue_.withKeys)(handleKeyEnter, ["enter"]),
                (0,external_Vue_.withKeys)(close, ["tab"]),
                (0,external_Vue_.withKeys)(handleKeyEscape, ["esc"])
              ],
              onMousedown: handleMouseDown
            }), (0,external_Vue_.createSlots)({ _: 2 }, [
              _ctx.$slots.prepend ? {
                name: "prepend",
                fn: (0,external_Vue_.withCtx)(() => [
                  (0,external_Vue_.renderSlot)(_ctx.$slots, "prepend")
                ])
              } : void 0,
              _ctx.$slots.append ? {
                name: "append",
                fn: (0,external_Vue_.withCtx)(() => [
                  (0,external_Vue_.renderSlot)(_ctx.$slots, "append")
                ])
              } : void 0,
              _ctx.$slots.prefix ? {
                name: "prefix",
                fn: (0,external_Vue_.withCtx)(() => [
                  (0,external_Vue_.renderSlot)(_ctx.$slots, "prefix")
                ])
              } : void 0,
              _ctx.$slots.suffix ? {
                name: "suffix",
                fn: (0,external_Vue_.withCtx)(() => [
                  (0,external_Vue_.renderSlot)(_ctx.$slots, "suffix")
                ])
              } : void 0
            ]), 1040, ["model-value", "onKeydown"])
          ], 14, autocomplete2_hoisted_1)
        ]),
        _: 3
      }, 8, ["visible", "placement", "popper-class", "teleported", "transition"]);
    };
  }
});
var Autocomplete = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(autocomplete2_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/autocomplete/src/autocomplete.vue"]]);


//# sourceMappingURL=autocomplete2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/autocomplete/index.mjs





const ElAutocomplete = (0,install/* withInstall */.nz)(Autocomplete);


//# sourceMappingURL=index.mjs.map

// EXTERNAL MODULE: ./node_modules/element-plus/es/constants/size.mjs
var constants_size = __webpack_require__(90209);
;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/avatar/src/avatar.mjs







const avatarProps = (0,runtime/* buildProps */.o8)({
  size: {
    type: [Number, String],
    values: constants_size/* componentSizes */.k,
    default: "",
    validator: (val) => (0,shared/* isNumber */.hj)(val)
  },
  shape: {
    type: String,
    values: ["circle", "square"],
    default: "circle"
  },
  icon: {
    type: icon/* iconPropType */.AA
  },
  src: {
    type: String,
    default: ""
  },
  alt: String,
  srcSet: String,
  fit: {
    type: (0,runtime/* definePropType */.Cq)(String),
    default: "cover"
  }
});
const avatarEmits = {
  error: (evt) => evt instanceof Event
};


//# sourceMappingURL=avatar.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/avatar/src/avatar2.mjs











const avatar2_hoisted_1 = ["src", "alt", "srcset"];
const avatar2_default_ = {
  name: "ElAvatar"
};
const avatar2_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...avatar2_default_,
  props: avatarProps,
  emits: avatarEmits,
  setup(__props, { emit }) {
    const props = __props;
    const ns = (0,use_namespace/* useNamespace */.s)("avatar");
    const hasLoadError = (0,external_Vue_.ref)(false);
    const avatarClass = (0,external_Vue_.computed)(() => {
      const { size, icon, shape } = props;
      const classList = [ns.b()];
      if ((0,shared_esm_bundler/* isString */.HD)(size))
        classList.push(ns.m(size));
      if (icon)
        classList.push(ns.m("icon"));
      if (shape)
        classList.push(ns.m(shape));
      return classList;
    });
    const sizeStyle = (0,external_Vue_.computed)(() => {
      const { size } = props;
      return (0,shared/* isNumber */.hj)(size) ? ns.cssVarBlock({
        size: (0,dom_style/* addUnit */.Nn)(size) || ""
      }) : void 0;
    });
    const fitStyle = (0,external_Vue_.computed)(() => ({
      objectFit: props.fit
    }));
    (0,external_Vue_.watch)(() => props.src, () => hasLoadError.value = false);
    function handleError(e) {
      hasLoadError.value = true;
      emit("error", e);
    }
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("span", {
        class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(avatarClass)),
        style: (0,external_Vue_.normalizeStyle)((0,external_Vue_.unref)(sizeStyle))
      }, [
        (_ctx.src || _ctx.srcSet) && !hasLoadError.value ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("img", {
          key: 0,
          src: _ctx.src,
          alt: _ctx.alt,
          srcset: _ctx.srcSet,
          style: (0,external_Vue_.normalizeStyle)((0,external_Vue_.unref)(fitStyle)),
          onError: handleError
        }, null, 44, avatar2_hoisted_1)) : _ctx.icon ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.unref)(components_icon/* ElIcon */.gn), { key: 1 }, {
          default: (0,external_Vue_.withCtx)(() => [
            ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.resolveDynamicComponent)(_ctx.icon)))
          ]),
          _: 1
        })) : (0,external_Vue_.renderSlot)(_ctx.$slots, "default", { key: 2 })
      ], 6);
    };
  }
});
var Avatar = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(avatar2_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/avatar/src/avatar.vue"]]);


//# sourceMappingURL=avatar2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/avatar/index.mjs





const ElAvatar = (0,install/* withInstall */.nz)(Avatar);


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/backtop/src/backtop.mjs
const backtopProps = {
  visibilityHeight: {
    type: Number,
    default: 200
  },
  target: {
    type: String,
    default: ""
  },
  right: {
    type: Number,
    default: 40
  },
  bottom: {
    type: Number,
    default: 40
  }
};
const backtopEmits = {
  click: (evt) => evt instanceof MouseEvent
};


//# sourceMappingURL=backtop.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/utils/animation.mjs
const cubic = (value) => {
  return value ** 3;
};
const easeInOutCubic = (value) => value < 0.5 ? cubic(value * 2) / 2 : 1 - cubic((1 - value) * 2) / 2;


//# sourceMappingURL=animation.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/backtop/src/backtop2.mjs












const backtop2_hoisted_1 = ["onClick"];
const backtop2_default_ = {
  name: "ElBacktop"
};
const backtop2_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...backtop2_default_,
  props: backtopProps,
  emits: backtopEmits,
  setup(__props, { emit }) {
    const props = __props;
    const COMPONENT_NAME = "ElBacktop";
    const ns = (0,use_namespace/* useNamespace */.s)("backtop");
    const el = (0,external_Vue_.shallowRef)();
    const container = (0,external_Vue_.shallowRef)();
    const visible = (0,external_Vue_.ref)(false);
    const backTopStyle = (0,external_Vue_.computed)(() => ({
      right: `${props.right}px`,
      bottom: `${props.bottom}px`
    }));
    const scrollToTop = () => {
      if (!el.value)
        return;
      const beginTime = Date.now();
      const beginValue = el.value.scrollTop;
      const frameFunc = () => {
        if (!el.value)
          return;
        const progress = (Date.now() - beginTime) / 500;
        if (progress < 1) {
          el.value.scrollTop = beginValue * (1 - easeInOutCubic(progress));
          requestAnimationFrame(frameFunc);
        } else {
          el.value.scrollTop = 0;
        }
      };
      requestAnimationFrame(frameFunc);
    };
    const handleScroll = () => {
      if (el.value)
        visible.value = el.value.scrollTop >= props.visibilityHeight;
    };
    const handleClick = (event) => {
      scrollToTop();
      emit("click", event);
    };
    const handleScrollThrottled = (0,shared/* useThrottleFn */.vA)(handleScroll, 300);
    (0,core/* useEventListener */.ORN)(container, "scroll", handleScrollThrottled);
    (0,external_Vue_.onMounted)(() => {
      var _a;
      container.value = document;
      el.value = document.documentElement;
      if (props.target) {
        el.value = (_a = document.querySelector(props.target)) != null ? _a : void 0;
        if (!el.value) {
          (0,error/* throwError */._)(COMPONENT_NAME, `target is not existed: ${props.target}`);
        }
        container.value = el.value;
      }
    });
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(external_Vue_.Transition, {
        name: `${(0,external_Vue_.unref)(ns).namespace.value}-fade-in`
      }, {
        default: (0,external_Vue_.withCtx)(() => [
          visible.value ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
            key: 0,
            style: (0,external_Vue_.normalizeStyle)((0,external_Vue_.unref)(backTopStyle)),
            class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).b()),
            onClick: (0,external_Vue_.withModifiers)(handleClick, ["stop"])
          }, [
            (0,external_Vue_.renderSlot)(_ctx.$slots, "default", {}, () => [
              (0,external_Vue_.createVNode)((0,external_Vue_.unref)(components_icon/* ElIcon */.gn), {
                class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("icon"))
              }, {
                default: (0,external_Vue_.withCtx)(() => [
                  (0,external_Vue_.createVNode)((0,external_Vue_.unref)(dist/* CaretTop */.Vx7))
                ]),
                _: 1
              }, 8, ["class"])
            ])
          ], 14, backtop2_hoisted_1)) : (0,external_Vue_.createCommentVNode)("v-if", true)
        ]),
        _: 3
      }, 8, ["name"]);
    };
  }
});
var Backtop = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(backtop2_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/backtop/src/backtop.vue"]]);


//# sourceMappingURL=backtop2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/backtop/index.mjs





const ElBacktop = (0,install/* withInstall */.nz)(Backtop);


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/badge/src/badge.mjs



const badgeProps = (0,runtime/* buildProps */.o8)({
  value: {
    type: [String, Number],
    default: ""
  },
  max: {
    type: Number,
    default: 99
  },
  isDot: Boolean,
  hidden: Boolean,
  type: {
    type: String,
    values: ["primary", "success", "warning", "info", "danger"],
    default: "danger"
  }
});


//# sourceMappingURL=badge.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/badge/src/badge2.mjs








const badge2_hoisted_1 = ["textContent"];
const badge2_default_ = {
  name: "ElBadge"
};
const badge2_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...badge2_default_,
  props: badgeProps,
  setup(__props, { expose }) {
    const props = __props;
    const ns = (0,use_namespace/* useNamespace */.s)("badge");
    const content = (0,external_Vue_.computed)(() => {
      if (props.isDot)
        return "";
      if ((0,shared/* isNumber */.hj)(props.value) && (0,shared/* isNumber */.hj)(props.max)) {
        return props.max < props.value ? `${props.max}+` : `${props.value}`;
      }
      return `${props.value}`;
    });
    expose({
      content
    });
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
        class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).b())
      }, [
        (0,external_Vue_.renderSlot)(_ctx.$slots, "default"),
        (0,external_Vue_.createVNode)(external_Vue_.Transition, {
          name: `${(0,external_Vue_.unref)(ns).namespace.value}-zoom-in-center`,
          persisted: ""
        }, {
          default: (0,external_Vue_.withCtx)(() => [
            (0,external_Vue_.withDirectives)((0,external_Vue_.createElementVNode)("sup", {
              class: (0,external_Vue_.normalizeClass)([
                (0,external_Vue_.unref)(ns).e("content"),
                (0,external_Vue_.unref)(ns).em("content", _ctx.type),
                (0,external_Vue_.unref)(ns).is("fixed", !!_ctx.$slots.default),
                (0,external_Vue_.unref)(ns).is("dot", _ctx.isDot)
              ]),
              textContent: (0,external_Vue_.toDisplayString)((0,external_Vue_.unref)(content))
            }, null, 10, badge2_hoisted_1), [
              [external_Vue_.vShow, !_ctx.hidden && ((0,external_Vue_.unref)(content) || _ctx.isDot)]
            ])
          ]),
          _: 1
        }, 8, ["name"])
      ], 2);
    };
  }
});
var Badge = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(badge2_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/badge/src/badge.vue"]]);


//# sourceMappingURL=badge2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/badge/index.mjs





const ElBadge = (0,install/* withInstall */.nz)(Badge);


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/breadcrumb/src/breadcrumb.mjs




const breadcrumbProps = (0,runtime/* buildProps */.o8)({
  separator: {
    type: String,
    default: "/"
  },
  separatorIcon: {
    type: icon/* iconPropType */.AA,
    default: ""
  }
});


//# sourceMappingURL=breadcrumb.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/tokens/breadcrumb.mjs
const breadcrumbKey = Symbol("breadcrumbKey");


//# sourceMappingURL=breadcrumb.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/breadcrumb/src/breadcrumb2.mjs








const breadcrumb2_default_ = {
  name: "ElBreadcrumb"
};
const breadcrumb2_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...breadcrumb2_default_,
  props: breadcrumbProps,
  setup(__props) {
    const props = __props;
    const ns = (0,use_namespace/* useNamespace */.s)("breadcrumb");
    const breadcrumb = (0,external_Vue_.ref)();
    (0,external_Vue_.provide)(breadcrumbKey, props);
    (0,external_Vue_.onMounted)(() => {
      const items = breadcrumb.value.querySelectorAll(`.${ns.e("item")}`);
      if (items.length) {
        items[items.length - 1].setAttribute("aria-current", "page");
      }
    });
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
        ref_key: "breadcrumb",
        ref: breadcrumb,
        class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).b()),
        "aria-label": "Breadcrumb",
        role: "navigation"
      }, [
        (0,external_Vue_.renderSlot)(_ctx.$slots, "default")
      ], 2);
    };
  }
});
var Breadcrumb = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(breadcrumb2_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/breadcrumb/src/breadcrumb.vue"]]);


//# sourceMappingURL=breadcrumb2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/breadcrumb/src/breadcrumb-item.mjs



const breadcrumbItemProps = (0,runtime/* buildProps */.o8)({
  to: {
    type: (0,runtime/* definePropType */.Cq)([String, Object]),
    default: ""
  },
  replace: {
    type: Boolean,
    default: false
  }
});


//# sourceMappingURL=breadcrumb-item.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/breadcrumb/src/breadcrumb-item2.mjs









const breadcrumb_item2_default_ = {
  name: "ElBreadcrumbItem"
};
const breadcrumb_item2_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...breadcrumb_item2_default_,
  props: breadcrumbItemProps,
  setup(__props) {
    const props = __props;
    const instance = (0,external_Vue_.getCurrentInstance)();
    const breadcrumbContext = (0,external_Vue_.inject)(breadcrumbKey, void 0);
    const ns = (0,use_namespace/* useNamespace */.s)("breadcrumb");
    const { separator, separatorIcon } = (0,external_Vue_.toRefs)(breadcrumbContext);
    const router = instance.appContext.config.globalProperties.$router;
    const link = (0,external_Vue_.ref)();
    const onClick = () => {
      if (!props.to || !router)
        return;
      props.replace ? router.replace(props.to) : router.push(props.to);
    };
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("span", {
        class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("item"))
      }, [
        (0,external_Vue_.createElementVNode)("span", {
          ref_key: "link",
          ref: link,
          class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(ns).e("inner"), (0,external_Vue_.unref)(ns).is("link", !!_ctx.to)]),
          role: "link",
          onClick
        }, [
          (0,external_Vue_.renderSlot)(_ctx.$slots, "default")
        ], 2),
        (0,external_Vue_.unref)(separatorIcon) ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.unref)(components_icon/* ElIcon */.gn), {
          key: 0,
          class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("separator"))
        }, {
          default: (0,external_Vue_.withCtx)(() => [
            ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.resolveDynamicComponent)((0,external_Vue_.unref)(separatorIcon))))
          ]),
          _: 1
        }, 8, ["class"])) : ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("span", {
          key: 1,
          class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("separator")),
          role: "presentation"
        }, (0,external_Vue_.toDisplayString)((0,external_Vue_.unref)(separator)), 3))
      ], 2);
    };
  }
});
var BreadcrumbItem = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(breadcrumb_item2_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/breadcrumb/src/breadcrumb-item.vue"]]);


//# sourceMappingURL=breadcrumb-item2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/breadcrumb/index.mjs







const ElBreadcrumb = (0,install/* withInstall */.nz)(Breadcrumb, {
  BreadcrumbItem: BreadcrumbItem
});
const ElBreadcrumbItem = (0,install/* withNoopInstall */.dp)(BreadcrumbItem);


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/button/src/button.mjs







const buttonTypes = [
  "default",
  "primary",
  "success",
  "warning",
  "info",
  "danger",
  "text",
  ""
];
const buttonNativeTypes = ["button", "submit", "reset"];
const buttonProps = (0,runtime/* buildProps */.o8)({
  size: use_common_props/* useSizeProp */.Pp,
  disabled: Boolean,
  type: {
    type: String,
    values: buttonTypes,
    default: ""
  },
  icon: {
    type: icon/* iconPropType */.AA,
    default: ""
  },
  nativeType: {
    type: String,
    values: buttonNativeTypes,
    default: "button"
  },
  loading: Boolean,
  loadingIcon: {
    type: icon/* iconPropType */.AA,
    default: () => dist/* Loading */.gbz
  },
  plain: Boolean,
  text: Boolean,
  link: Boolean,
  bg: Boolean,
  autofocus: Boolean,
  round: Boolean,
  circle: Boolean,
  color: String,
  dark: Boolean,
  autoInsertSpace: {
    type: Boolean,
    default: void 0
  }
});
const buttonEmits = {
  click: (evt) => evt instanceof MouseEvent
};


//# sourceMappingURL=button.mjs.map

// EXTERNAL MODULE: ./node_modules/@ctrl/tinycolor/dist/module/index.js + 4 modules
var dist_module = __webpack_require__(98032);
;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/button/src/button-custom.mjs






function darken(color, amount = 20) {
  return color.mix("#141414", amount).toString();
}
function useButtonCustomStyle(props) {
  const _disabled = (0,use_common_props/* useDisabled */.B4)();
  const ns = (0,use_namespace/* useNamespace */.s)("button");
  return (0,external_Vue_.computed)(() => {
    let styles = {};
    const buttonColor = props.color;
    if (buttonColor) {
      const color = new dist_module/* TinyColor */.C(buttonColor);
      const activeBgColor = props.dark ? color.tint(20).toString() : darken(color, 20);
      if (props.plain) {
        styles = ns.cssVarBlock({
          "bg-color": props.dark ? darken(color, 90) : color.tint(90).toString(),
          "text-color": buttonColor,
          "border-color": props.dark ? darken(color, 50) : color.tint(50).toString(),
          "hover-text-color": `var(${ns.cssVarName("color-white")})`,
          "hover-bg-color": buttonColor,
          "hover-border-color": buttonColor,
          "active-bg-color": activeBgColor,
          "active-text-color": `var(${ns.cssVarName("color-white")})`,
          "active-border-color": activeBgColor
        });
        if (_disabled.value) {
          styles[ns.cssVarBlockName("disabled-bg-color")] = props.dark ? darken(color, 90) : color.tint(90).toString();
          styles[ns.cssVarBlockName("disabled-text-color")] = props.dark ? darken(color, 50) : color.tint(50).toString();
          styles[ns.cssVarBlockName("disabled-border-color")] = props.dark ? darken(color, 80) : color.tint(80).toString();
        }
      } else {
        const hoverBgColor = props.dark ? darken(color, 30) : color.tint(30).toString();
        const textColor = color.isDark() ? `var(${ns.cssVarName("color-white")})` : `var(${ns.cssVarName("color-black")})`;
        styles = ns.cssVarBlock({
          "bg-color": buttonColor,
          "text-color": textColor,
          "border-color": buttonColor,
          "hover-bg-color": hoverBgColor,
          "hover-text-color": textColor,
          "hover-border-color": hoverBgColor,
          "active-bg-color": activeBgColor,
          "active-border-color": activeBgColor
        });
        if (_disabled.value) {
          const disabledButtonColor = props.dark ? darken(color, 50) : color.tint(50).toString();
          styles[ns.cssVarBlockName("disabled-bg-color")] = disabledButtonColor;
          styles[ns.cssVarBlockName("disabled-text-color")] = props.dark ? "rgba(255, 255, 255, 0.5)" : `var(${ns.cssVarName("color-white")})`;
          styles[ns.cssVarBlockName("disabled-border-color")] = disabledButtonColor;
        }
      }
    }
    return styles;
  });
}


//# sourceMappingURL=button-custom.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/hooks/use-deprecated/index.mjs




const useDeprecated = ({ from, replacement, scope, version, ref, type = "API" }, condition) => {
  (0,external_Vue_.watch)(() => (0,external_Vue_.unref)(condition), (val) => {
    if (val) {
      (0,error/* debugWarn */.N)(scope, `[${type}] ${from} is about to be deprecated in version ${version}, please use ${replacement} instead.
For more detail, please visit: ${ref}
`);
    }
  }, {
    immediate: true
  });
};


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/tokens/button.mjs
const buttonGroupContextKey = Symbol("buttonGroupContextKey");


//# sourceMappingURL=button.mjs.map

// EXTERNAL MODULE: ./node_modules/element-plus/es/hooks/use-form-item/index.mjs
var use_form_item = __webpack_require__(79966);
;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/button/src/button2.mjs














const button2_hoisted_1 = ["aria-disabled", "disabled", "autofocus", "type"];
const button2_default_ = {
  name: "ElButton"
};
const button2_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...button2_default_,
  props: buttonProps,
  emits: buttonEmits,
  setup(__props, { expose, emit }) {
    const props = __props;
    const slots = (0,external_Vue_.useSlots)();
    useDeprecated({
      from: "type.text",
      replacement: "type.link",
      version: "3.0.0",
      scope: "props",
      ref: "https://element-plus.org/en-US/component/button.html#button-attributes"
    }, (0,external_Vue_.computed)(() => props.type === "text"));
    const buttonGroupContext = (0,external_Vue_.inject)(buttonGroupContextKey, void 0);
    const globalConfig = (0,use_global_config/* useGlobalConfig */.W)("button");
    const ns = (0,use_namespace/* useNamespace */.s)("button");
    const { form } = (0,use_form_item/* useFormItem */.A)();
    const _size = (0,use_common_props/* useSize */.tH)((0,external_Vue_.computed)(() => buttonGroupContext == null ? void 0 : buttonGroupContext.size));
    const _disabled = (0,use_common_props/* useDisabled */.B4)();
    const _ref = (0,external_Vue_.ref)();
    const _type = (0,external_Vue_.computed)(() => props.type || (buttonGroupContext == null ? void 0 : buttonGroupContext.type) || "");
    const autoInsertSpace = (0,external_Vue_.computed)(() => {
      var _a, _b, _c;
      return (_c = (_b = props.autoInsertSpace) != null ? _b : (_a = globalConfig.value) == null ? void 0 : _a.autoInsertSpace) != null ? _c : false;
    });
    const shouldAddSpace = (0,external_Vue_.computed)(() => {
      var _a;
      const defaultSlot = (_a = slots.default) == null ? void 0 : _a.call(slots);
      if (autoInsertSpace.value && (defaultSlot == null ? void 0 : defaultSlot.length) === 1) {
        const slot = defaultSlot[0];
        if ((slot == null ? void 0 : slot.type) === external_Vue_.Text) {
          const text = slot.children;
          return /^\p{Unified_Ideograph}{2}$/u.test(text.trim());
        }
      }
      return false;
    });
    const buttonStyle = useButtonCustomStyle(props);
    const handleClick = (evt) => {
      if (props.nativeType === "reset") {
        form == null ? void 0 : form.resetFields();
      }
      emit("click", evt);
    };
    expose({
      ref: _ref,
      size: _size,
      type: _type,
      disabled: _disabled,
      shouldAddSpace
    });
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("button", {
        ref_key: "_ref",
        ref: _ref,
        class: (0,external_Vue_.normalizeClass)([
          (0,external_Vue_.unref)(ns).b(),
          (0,external_Vue_.unref)(ns).m((0,external_Vue_.unref)(_type)),
          (0,external_Vue_.unref)(ns).m((0,external_Vue_.unref)(_size)),
          (0,external_Vue_.unref)(ns).is("disabled", (0,external_Vue_.unref)(_disabled)),
          (0,external_Vue_.unref)(ns).is("loading", _ctx.loading),
          (0,external_Vue_.unref)(ns).is("plain", _ctx.plain),
          (0,external_Vue_.unref)(ns).is("round", _ctx.round),
          (0,external_Vue_.unref)(ns).is("circle", _ctx.circle),
          (0,external_Vue_.unref)(ns).is("text", _ctx.text),
          (0,external_Vue_.unref)(ns).is("link", _ctx.link),
          (0,external_Vue_.unref)(ns).is("has-bg", _ctx.bg)
        ]),
        "aria-disabled": (0,external_Vue_.unref)(_disabled) || _ctx.loading,
        disabled: (0,external_Vue_.unref)(_disabled) || _ctx.loading,
        autofocus: _ctx.autofocus,
        type: _ctx.nativeType,
        style: (0,external_Vue_.normalizeStyle)((0,external_Vue_.unref)(buttonStyle)),
        onClick: handleClick
      }, [
        _ctx.loading ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, { key: 0 }, [
          _ctx.$slots.loading ? (0,external_Vue_.renderSlot)(_ctx.$slots, "loading", { key: 0 }) : ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.unref)(components_icon/* ElIcon */.gn), {
            key: 1,
            class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).is("loading"))
          }, {
            default: (0,external_Vue_.withCtx)(() => [
              ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.resolveDynamicComponent)(_ctx.loadingIcon)))
            ]),
            _: 1
          }, 8, ["class"]))
        ], 64)) : _ctx.icon || _ctx.$slots.icon ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.unref)(components_icon/* ElIcon */.gn), { key: 1 }, {
          default: (0,external_Vue_.withCtx)(() => [
            _ctx.icon ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.resolveDynamicComponent)(_ctx.icon), { key: 0 })) : (0,external_Vue_.renderSlot)(_ctx.$slots, "icon", { key: 1 })
          ]),
          _: 3
        })) : (0,external_Vue_.createCommentVNode)("v-if", true),
        _ctx.$slots.default ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("span", {
          key: 2,
          class: (0,external_Vue_.normalizeClass)({ [(0,external_Vue_.unref)(ns).em("text", "expand")]: (0,external_Vue_.unref)(shouldAddSpace) })
        }, [
          (0,external_Vue_.renderSlot)(_ctx.$slots, "default")
        ], 2)) : (0,external_Vue_.createCommentVNode)("v-if", true)
      ], 14, button2_hoisted_1);
    };
  }
});
var Button = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(button2_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/button/src/button.vue"]]);


//# sourceMappingURL=button2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/button/src/button-group.mjs


const buttonGroupProps = {
  size: buttonProps.size,
  type: buttonProps.type
};


//# sourceMappingURL=button-group.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/button/src/button-group2.mjs








const button_group2_default_ = {
  name: "ElButtonGroup"
};
const button_group2_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...button_group2_default_,
  props: buttonGroupProps,
  setup(__props) {
    const props = __props;
    (0,external_Vue_.provide)(buttonGroupContextKey, (0,external_Vue_.reactive)({
      size: (0,external_Vue_.toRef)(props, "size"),
      type: (0,external_Vue_.toRef)(props, "type")
    }));
    const ns = (0,use_namespace/* useNamespace */.s)("button");
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
        class: (0,external_Vue_.normalizeClass)(`${(0,external_Vue_.unref)(ns).b("group")}`)
      }, [
        (0,external_Vue_.renderSlot)(_ctx.$slots, "default")
      ], 2);
    };
  }
});
var ButtonGroup = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(button_group2_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/button/src/button-group.vue"]]);


//# sourceMappingURL=button-group2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/button/index.mjs






const ElButton = (0,install/* withInstall */.nz)(Button, {
  ButtonGroup: ButtonGroup
});
const ElButtonGroup = (0,install/* withNoopInstall */.dp)(ButtonGroup);


//# sourceMappingURL=index.mjs.map

// EXTERNAL MODULE: ./node_modules/dayjs/dayjs.min.js
var dayjs_min = __webpack_require__(27484);
// EXTERNAL MODULE: ./node_modules/dayjs/plugin/localeData.js
var localeData = __webpack_require__(96036);
;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/time-picker/src/utils.mjs





const buildTimeList = (value, bound) => {
  return [
    value > 0 ? value - 1 : void 0,
    value,
    value < bound ? value + 1 : void 0
  ];
};
const rangeArr = (n) => Array.from(Array.from({ length: n }).keys());
const extractDateFormat = (format) => {
  return format.replace(/\W?m{1,2}|\W?ZZ/g, "").replace(/\W?h{1,2}|\W?s{1,3}|\W?a/gi, "").trim();
};
const extractTimeFormat = (format) => {
  return format.replace(/\W?D{1,2}|\W?Do|\W?d{1,4}|\W?M{1,4}|\W?Y{2,4}/g, "").trim();
};
const dateEquals = function(a, b) {
  const aIsDate = (0,shared_esm_bundler/* isDate */.J_)(a);
  const bIsDate = (0,shared_esm_bundler/* isDate */.J_)(b);
  if (aIsDate && bIsDate) {
    return a.getTime() === b.getTime();
  }
  if (!aIsDate && !bIsDate) {
    return a === b;
  }
  return false;
};
const valueEquals = function(a, b) {
  const aIsArray = (0,shared_esm_bundler/* isArray */.kJ)(a);
  const bIsArray = (0,shared_esm_bundler/* isArray */.kJ)(b);
  if (aIsArray && bIsArray) {
    if (a.length !== b.length) {
      return false;
    }
    return a.every((item, index) => dateEquals(item, b[index]));
  }
  if (!aIsArray && !bIsArray) {
    return dateEquals(a, b);
  }
  return false;
};
const parseDate = function(date, format, lang) {
  const day = (0,types/* isEmpty */.xb)(format) || format === "x" ? dayjs_min(date).locale(lang) : dayjs_min(date, format).locale(lang);
  return day.isValid() ? day : void 0;
};
const formatter = function(date, format, lang) {
  if ((0,types/* isEmpty */.xb)(format))
    return date;
  if (format === "x")
    return +date;
  return dayjs_min(date).locale(lang).format(format);
};
const makeList = (total, method) => {
  var _a;
  const arr = [];
  const disabledArr = method == null ? void 0 : method();
  for (let i = 0; i < total; i++) {
    arr.push((_a = disabledArr == null ? void 0 : disabledArr.includes(i)) != null ? _a : false);
  }
  return arr;
};


//# sourceMappingURL=utils.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/calendar/src/date-table.mjs






const getPrevMonthLastDays = (date, count) => {
  const lastDay = date.subtract(1, "month").endOf("month").date();
  return rangeArr(count).map((_, index) => lastDay - (count - index - 1));
};
const getMonthDays = (date) => {
  const days = date.daysInMonth();
  return rangeArr(days).map((_, index) => index + 1);
};
const toNestedArr = (days) => rangeArr(days.length / 7).map((index) => {
  const start = index * 7;
  return days.slice(start, start + 7);
});
const dateTableProps = (0,runtime/* buildProps */.o8)({
  selectedDay: {
    type: (0,runtime/* definePropType */.Cq)(Object)
  },
  range: {
    type: (0,runtime/* definePropType */.Cq)(Array)
  },
  date: {
    type: (0,runtime/* definePropType */.Cq)(Object),
    required: true
  },
  hideHeader: {
    type: Boolean
  }
});
const dateTableEmits = {
  pick: (value) => (0,shared_esm_bundler/* isObject */.Kn)(value)
};


//# sourceMappingURL=date-table.mjs.map

// EXTERNAL MODULE: ./node_modules/lodash-es/get.js
var get = __webpack_require__(16423);
;// CONCATENATED MODULE: ./node_modules/element-plus/es/locale/lang/en.mjs
var English = {
  name: "en",
  el: {
    colorpicker: {
      confirm: "OK",
      clear: "Clear",
      defaultLabel: "color picker",
      description: "current color is {color}. press enter to select a new color."
    },
    datepicker: {
      now: "Now",
      today: "Today",
      cancel: "Cancel",
      clear: "Clear",
      confirm: "OK",
      dateTablePrompt: "Use the arrow keys and enter to select the day of the month",
      monthTablePrompt: "Use the arrow keys and enter to select the month",
      yearTablePrompt: "Use the arrow keys and enter to select the year",
      selectedDate: "Selected date",
      selectDate: "Select date",
      selectTime: "Select time",
      startDate: "Start Date",
      startTime: "Start Time",
      endDate: "End Date",
      endTime: "End Time",
      prevYear: "Previous Year",
      nextYear: "Next Year",
      prevMonth: "Previous Month",
      nextMonth: "Next Month",
      year: "",
      month1: "January",
      month2: "February",
      month3: "March",
      month4: "April",
      month5: "May",
      month6: "June",
      month7: "July",
      month8: "August",
      month9: "September",
      month10: "October",
      month11: "November",
      month12: "December",
      week: "week",
      weeks: {
        sun: "Sun",
        mon: "Mon",
        tue: "Tue",
        wed: "Wed",
        thu: "Thu",
        fri: "Fri",
        sat: "Sat"
      },
      weeksFull: {
        sun: "Sunday",
        mon: "Monday",
        tue: "Tuesday",
        wed: "Wednesday",
        thu: "Thursday",
        fri: "Friday",
        sat: "Saturday"
      },
      months: {
        jan: "Jan",
        feb: "Feb",
        mar: "Mar",
        apr: "Apr",
        may: "May",
        jun: "Jun",
        jul: "Jul",
        aug: "Aug",
        sep: "Sep",
        oct: "Oct",
        nov: "Nov",
        dec: "Dec"
      }
    },
    inputNumber: {
      decrease: "decrease number",
      increase: "increase number"
    },
    select: {
      loading: "Loading",
      noMatch: "No matching data",
      noData: "No data",
      placeholder: "Select"
    },
    dropdown: {
      toggleDropdown: "Toggle Dropdown"
    },
    cascader: {
      noMatch: "No matching data",
      loading: "Loading",
      placeholder: "Select",
      noData: "No data"
    },
    pagination: {
      goto: "Go to",
      pagesize: "/page",
      total: "Total {total}",
      pageClassifier: "",
      deprecationWarning: "Deprecated usages detected, please refer to the el-pagination documentation for more details"
    },
    dialog: {
      close: "Close this dialog"
    },
    drawer: {
      close: "Close this dialog"
    },
    messagebox: {
      title: "Message",
      confirm: "OK",
      cancel: "Cancel",
      error: "Illegal input",
      close: "Close this dialog"
    },
    upload: {
      deleteTip: "press delete to remove",
      delete: "Delete",
      preview: "Preview",
      continue: "Continue"
    },
    slider: {
      defaultLabel: "slider between {min} and {max}",
      defaultRangeStartLabel: "pick start value",
      defaultRangeEndLabel: "pick end value"
    },
    table: {
      emptyText: "No Data",
      confirmFilter: "Confirm",
      resetFilter: "Reset",
      clearFilter: "All",
      sumText: "Sum"
    },
    tree: {
      emptyText: "No Data"
    },
    transfer: {
      noMatch: "No matching data",
      noData: "No data",
      titles: ["List 1", "List 2"],
      filterPlaceholder: "Enter keyword",
      noCheckedFormat: "{total} items",
      hasCheckedFormat: "{checked}/{total} checked"
    },
    image: {
      error: "FAILED"
    },
    pageHeader: {
      title: "Back"
    },
    popconfirm: {
      confirmButtonText: "Yes",
      cancelButtonText: "No"
    }
  }
};


//# sourceMappingURL=en.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/hooks/use-locale/index.mjs





const buildTranslator = (locale) => (path, option) => translate(path, option, (0,external_Vue_.unref)(locale));
const translate = (path, option, locale) => (0,get/* default */.Z)(locale, path, path).replace(/\{(\w+)\}/g, (_, key) => {
  var _a;
  return `${(_a = option == null ? void 0 : option[key]) != null ? _a : `{${key}}`}`;
});
const buildLocaleContext = (locale) => {
  const lang = (0,external_Vue_.computed)(() => (0,external_Vue_.unref)(locale).name);
  const localeRef = (0,external_Vue_.isRef)(locale) ? locale : (0,external_Vue_.ref)(locale);
  return {
    lang,
    locale: localeRef,
    t: buildTranslator(locale)
  };
};
const useLocale = () => {
  const locale = (0,use_global_config/* useGlobalConfig */.W)("locale");
  return buildLocaleContext((0,external_Vue_.computed)(() => locale.value || English));
};


//# sourceMappingURL=index.mjs.map

// EXTERNAL MODULE: ./node_modules/element-plus/es/constants/date.mjs
var date = __webpack_require__(6503);
;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/calendar/src/date-table2.mjs













const date_table2_hoisted_1 = { key: 0 };
const date_table2_hoisted_2 = ["onClick"];
const date_table2_default_ = {
  name: "DateTable"
};
const date_table2_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...date_table2_default_,
  props: dateTableProps,
  emits: dateTableEmits,
  setup(__props, { expose, emit }) {
    const props = __props;
    dayjs_min.extend(localeData);
    const { t, lang } = useLocale();
    const nsTable = (0,use_namespace/* useNamespace */.s)("calendar-table");
    const nsDay = (0,use_namespace/* useNamespace */.s)("calendar-day");
    const now = dayjs_min().locale(lang.value);
    const firstDayOfWeek = now.$locale().weekStart || 0;
    const isInRange = (0,external_Vue_.computed)(() => !!props.range && !!props.range.length);
    const rows = (0,external_Vue_.computed)(() => {
      let days = [];
      if (isInRange.value) {
        const [start, end] = props.range;
        const currentMonthRange = rangeArr(end.date() - start.date() + 1).map((index) => ({
          text: start.date() + index,
          type: "current"
        }));
        let remaining = currentMonthRange.length % 7;
        remaining = remaining === 0 ? 0 : 7 - remaining;
        const nextMonthRange = rangeArr(remaining).map((_, index) => ({
          text: index + 1,
          type: "next"
        }));
        days = currentMonthRange.concat(nextMonthRange);
      } else {
        const firstDay = props.date.startOf("month").day();
        const prevMonthDays = getPrevMonthLastDays(props.date, firstDay - firstDayOfWeek).map((day) => ({
          text: day,
          type: "prev"
        }));
        const currentMonthDays = getMonthDays(props.date).map((day) => ({
          text: day,
          type: "current"
        }));
        days = [...prevMonthDays, ...currentMonthDays];
        const remaining = 7 - (days.length % 7 || 7);
        const nextMonthDays = rangeArr(remaining).map((_, index) => ({
          text: index + 1,
          type: "next"
        }));
        days = days.concat(nextMonthDays);
      }
      return toNestedArr(days);
    });
    const weekDays = (0,external_Vue_.computed)(() => {
      const start = firstDayOfWeek;
      if (start === 0) {
        return date/* WEEK_DAYS.map */.p.map((_) => t(`el.datepicker.weeks.${_}`));
      } else {
        return date/* WEEK_DAYS.slice */.p.slice(start).concat(date/* WEEK_DAYS.slice */.p.slice(0, start)).map((_) => t(`el.datepicker.weeks.${_}`));
      }
    });
    const getFormattedDate = (day, type) => {
      switch (type) {
        case "prev":
          return props.date.startOf("month").subtract(1, "month").date(day);
        case "next":
          return props.date.startOf("month").add(1, "month").date(day);
        case "current":
          return props.date.date(day);
      }
    };
    const getCellClass = ({ text, type }) => {
      const classes = [type];
      if (type === "current") {
        const date = getFormattedDate(text, type);
        if (date.isSame(props.selectedDay, "day")) {
          classes.push(nsDay.is("selected"));
        }
        if (date.isSame(now, "day")) {
          classes.push(nsDay.is("today"));
        }
      }
      return classes;
    };
    const handlePickDay = ({ text, type }) => {
      const date = getFormattedDate(text, type);
      emit("pick", date);
    };
    const getSlotData = ({ text, type }) => {
      const day = getFormattedDate(text, type);
      return {
        isSelected: day.isSame(props.selectedDay),
        type: `${type}-month`,
        day: day.format("YYYY-MM-DD"),
        date: day.toDate()
      };
    };
    expose({
      getFormattedDate
    });
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("table", {
        class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(nsTable).b(), (0,external_Vue_.unref)(nsTable).is("range", (0,external_Vue_.unref)(isInRange))]),
        cellspacing: "0",
        cellpadding: "0"
      }, [
        !_ctx.hideHeader ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("thead", date_table2_hoisted_1, [
          ((0,external_Vue_.openBlock)(true), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, null, (0,external_Vue_.renderList)((0,external_Vue_.unref)(weekDays), (day) => {
            return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("th", { key: day }, (0,external_Vue_.toDisplayString)(day), 1);
          }), 128))
        ])) : (0,external_Vue_.createCommentVNode)("v-if", true),
        (0,external_Vue_.createElementVNode)("tbody", null, [
          ((0,external_Vue_.openBlock)(true), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, null, (0,external_Vue_.renderList)((0,external_Vue_.unref)(rows), (row, index) => {
            return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("tr", {
              key: index,
              class: (0,external_Vue_.normalizeClass)({
                [(0,external_Vue_.unref)(nsTable).e("row")]: true,
                [(0,external_Vue_.unref)(nsTable).em("row", "hide-border")]: index === 0 && _ctx.hideHeader
              })
            }, [
              ((0,external_Vue_.openBlock)(true), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, null, (0,external_Vue_.renderList)(row, (cell, key) => {
                return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("td", {
                  key,
                  class: (0,external_Vue_.normalizeClass)(getCellClass(cell)),
                  onClick: ($event) => handlePickDay(cell)
                }, [
                  (0,external_Vue_.createElementVNode)("div", {
                    class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(nsDay).b())
                  }, [
                    (0,external_Vue_.renderSlot)(_ctx.$slots, "dateCell", {
                      data: getSlotData(cell)
                    }, () => [
                      (0,external_Vue_.createElementVNode)("span", null, (0,external_Vue_.toDisplayString)(cell.text), 1)
                    ])
                  ], 2)
                ], 10, date_table2_hoisted_2);
              }), 128))
            ], 2);
          }), 128))
        ])
      ], 2);
    };
  }
});
var DateTable = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(date_table2_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/calendar/src/date-table.vue"]]);


//# sourceMappingURL=date-table2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/calendar/src/calendar.mjs






const isValidRange = (range) => (0,shared_esm_bundler/* isArray */.kJ)(range) && range.length === 2 && range.every((item) => (0,shared_esm_bundler/* isDate */.J_)(item));
const calendarProps = (0,runtime/* buildProps */.o8)({
  modelValue: {
    type: Date
  },
  range: {
    type: (0,runtime/* definePropType */.Cq)(Array),
    validator: isValidRange
  }
});
const calendarEmits = {
  [constants_event/* UPDATE_MODEL_EVENT */.f_]: (value) => (0,shared_esm_bundler/* isDate */.J_)(value),
  [constants_event/* INPUT_EVENT */.e_]: (value) => (0,shared_esm_bundler/* isDate */.J_)(value)
};


//# sourceMappingURL=calendar.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/calendar/src/calendar2.mjs














const calendar2_default_ = {
  name: "ElCalendar"
};
const calendar2_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...calendar2_default_,
  props: calendarProps,
  emits: calendarEmits,
  setup(__props, { expose, emit }) {
    const props = __props;
    const COMPONENT_NAME = "ElCalendar";
    const ns = (0,use_namespace/* useNamespace */.s)("calendar");
    const { t, lang } = useLocale();
    const selectedDay = (0,external_Vue_.ref)();
    const now = dayjs_min().locale(lang.value);
    const realSelectedDay = (0,external_Vue_.computed)({
      get() {
        if (!props.modelValue)
          return selectedDay.value;
        return date.value;
      },
      set(val) {
        if (!val)
          return;
        selectedDay.value = val;
        const result = val.toDate();
        emit(constants_event/* INPUT_EVENT */.e_, result);
        emit(constants_event/* UPDATE_MODEL_EVENT */.f_, result);
      }
    });
    const validatedRange = (0,external_Vue_.computed)(() => {
      if (!props.range)
        return [];
      const rangeArrDayjs = props.range.map((_) => dayjs_min(_).locale(lang.value));
      const [startDayjs, endDayjs] = rangeArrDayjs;
      if (startDayjs.isAfter(endDayjs)) {
        (0,error/* debugWarn */.N)(COMPONENT_NAME, "end time should be greater than start time");
        return [];
      }
      if (startDayjs.isSame(endDayjs, "month")) {
        return calculateValidatedDateRange(startDayjs, endDayjs);
      } else {
        if (startDayjs.add(1, "month").month() !== endDayjs.month()) {
          (0,error/* debugWarn */.N)(COMPONENT_NAME, "start time and end time interval must not exceed two months");
          return [];
        }
        return calculateValidatedDateRange(startDayjs, endDayjs);
      }
    });
    const date = (0,external_Vue_.computed)(() => {
      if (!props.modelValue) {
        if (realSelectedDay.value) {
          return realSelectedDay.value;
        } else if (validatedRange.value.length) {
          return validatedRange.value[0][0];
        }
        return now;
      } else {
        return dayjs_min(props.modelValue).locale(lang.value);
      }
    });
    const prevMonthDayjs = (0,external_Vue_.computed)(() => date.value.subtract(1, "month").date(1));
    const nextMonthDayjs = (0,external_Vue_.computed)(() => date.value.add(1, "month").date(1));
    const prevYearDayjs = (0,external_Vue_.computed)(() => date.value.subtract(1, "year").date(1));
    const nextYearDayjs = (0,external_Vue_.computed)(() => date.value.add(1, "year").date(1));
    const i18nDate = (0,external_Vue_.computed)(() => {
      const pickedMonth = `el.datepicker.month${date.value.format("M")}`;
      return `${date.value.year()} ${t("el.datepicker.year")} ${t(pickedMonth)}`;
    });
    const calculateValidatedDateRange = (startDayjs, endDayjs) => {
      const firstDay = startDayjs.startOf("week");
      const lastDay = endDayjs.endOf("week");
      const firstMonth = firstDay.get("month");
      const lastMonth = lastDay.get("month");
      if (firstMonth === lastMonth) {
        return [[firstDay, lastDay]];
      } else if (firstMonth + 1 === lastMonth) {
        const firstMonthLastDay = firstDay.endOf("month");
        const lastMonthFirstDay = lastDay.startOf("month");
        const isSameWeek = firstMonthLastDay.isSame(lastMonthFirstDay, "week");
        const lastMonthStartDay = isSameWeek ? lastMonthFirstDay.add(1, "week") : lastMonthFirstDay;
        return [
          [firstDay, firstMonthLastDay],
          [lastMonthStartDay.startOf("week"), lastDay]
        ];
      } else if (firstMonth + 2 === lastMonth || (firstMonth + 1) % 11 === lastMonth) {
        const firstMonthLastDay = firstDay.endOf("month");
        const secondMonthFirstDay = firstDay.add(1, "month").startOf("month");
        const secondMonthStartDay = firstMonthLastDay.isSame(secondMonthFirstDay, "week") ? secondMonthFirstDay.add(1, "week") : secondMonthFirstDay;
        const secondMonthLastDay = secondMonthStartDay.endOf("month");
        const lastMonthFirstDay = lastDay.startOf("month");
        const lastMonthStartDay = secondMonthLastDay.isSame(lastMonthFirstDay, "week") ? lastMonthFirstDay.add(1, "week") : lastMonthFirstDay;
        return [
          [firstDay, firstMonthLastDay],
          [secondMonthStartDay.startOf("week"), secondMonthLastDay],
          [lastMonthStartDay.startOf("week"), lastDay]
        ];
      } else {
        (0,error/* debugWarn */.N)(COMPONENT_NAME, "start time and end time interval must not exceed two months");
        return [];
      }
    };
    const pickDay = (day) => {
      realSelectedDay.value = day;
    };
    const selectDate = (type) => {
      let day;
      if (type === "prev-month") {
        day = prevMonthDayjs.value;
      } else if (type === "next-month") {
        day = nextMonthDayjs.value;
      } else if (type === "prev-year") {
        day = prevYearDayjs.value;
      } else if (type === "next-year") {
        day = nextYearDayjs.value;
      } else {
        day = now;
      }
      if (day.isSame(date.value, "day"))
        return;
      pickDay(day);
    };
    expose({
      selectedDay: realSelectedDay,
      pickDay,
      selectDate,
      calculateValidatedDateRange
    });
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
        class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).b())
      }, [
        (0,external_Vue_.createElementVNode)("div", {
          class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("header"))
        }, [
          (0,external_Vue_.renderSlot)(_ctx.$slots, "header", { date: (0,external_Vue_.unref)(i18nDate) }, () => [
            (0,external_Vue_.createElementVNode)("div", {
              class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("title"))
            }, (0,external_Vue_.toDisplayString)((0,external_Vue_.unref)(i18nDate)), 3),
            (0,external_Vue_.unref)(validatedRange).length === 0 ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
              key: 0,
              class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("button-group"))
            }, [
              (0,external_Vue_.createVNode)((0,external_Vue_.unref)(ElButtonGroup), null, {
                default: (0,external_Vue_.withCtx)(() => [
                  (0,external_Vue_.createVNode)((0,external_Vue_.unref)(ElButton), {
                    size: "small",
                    onClick: _cache[0] || (_cache[0] = ($event) => selectDate("prev-month"))
                  }, {
                    default: (0,external_Vue_.withCtx)(() => [
                      (0,external_Vue_.createTextVNode)((0,external_Vue_.toDisplayString)((0,external_Vue_.unref)(t)("el.datepicker.prevMonth")), 1)
                    ]),
                    _: 1
                  }),
                  (0,external_Vue_.createVNode)((0,external_Vue_.unref)(ElButton), {
                    size: "small",
                    onClick: _cache[1] || (_cache[1] = ($event) => selectDate("today"))
                  }, {
                    default: (0,external_Vue_.withCtx)(() => [
                      (0,external_Vue_.createTextVNode)((0,external_Vue_.toDisplayString)((0,external_Vue_.unref)(t)("el.datepicker.today")), 1)
                    ]),
                    _: 1
                  }),
                  (0,external_Vue_.createVNode)((0,external_Vue_.unref)(ElButton), {
                    size: "small",
                    onClick: _cache[2] || (_cache[2] = ($event) => selectDate("next-month"))
                  }, {
                    default: (0,external_Vue_.withCtx)(() => [
                      (0,external_Vue_.createTextVNode)((0,external_Vue_.toDisplayString)((0,external_Vue_.unref)(t)("el.datepicker.nextMonth")), 1)
                    ]),
                    _: 1
                  })
                ]),
                _: 1
              })
            ], 2)) : (0,external_Vue_.createCommentVNode)("v-if", true)
          ])
        ], 2),
        (0,external_Vue_.unref)(validatedRange).length === 0 ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
          key: 0,
          class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("body"))
        }, [
          (0,external_Vue_.createVNode)(DateTable, {
            date: (0,external_Vue_.unref)(date),
            "selected-day": (0,external_Vue_.unref)(realSelectedDay),
            onPick: pickDay
          }, (0,external_Vue_.createSlots)({ _: 2 }, [
            _ctx.$slots.dateCell ? {
              name: "dateCell",
              fn: (0,external_Vue_.withCtx)((data) => [
                (0,external_Vue_.renderSlot)(_ctx.$slots, "dateCell", (0,external_Vue_.normalizeProps)((0,external_Vue_.guardReactiveProps)(data)))
              ])
            } : void 0
          ]), 1032, ["date", "selected-day"])
        ], 2)) : ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
          key: 1,
          class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("body"))
        }, [
          ((0,external_Vue_.openBlock)(true), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, null, (0,external_Vue_.renderList)((0,external_Vue_.unref)(validatedRange), (range_, index) => {
            return (0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(DateTable, {
              key: index,
              date: range_[0],
              "selected-day": (0,external_Vue_.unref)(realSelectedDay),
              range: range_,
              "hide-header": index !== 0,
              onPick: pickDay
            }, (0,external_Vue_.createSlots)({ _: 2 }, [
              _ctx.$slots.dateCell ? {
                name: "dateCell",
                fn: (0,external_Vue_.withCtx)((data) => [
                  (0,external_Vue_.renderSlot)(_ctx.$slots, "dateCell", (0,external_Vue_.normalizeProps)((0,external_Vue_.guardReactiveProps)(data)))
                ])
              } : void 0
            ]), 1032, ["date", "selected-day", "range", "hide-header"]);
          }), 128))
        ], 2))
      ], 2);
    };
  }
});
var Calendar = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(calendar2_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/calendar/src/calendar.vue"]]);


//# sourceMappingURL=calendar2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/calendar/index.mjs





const ElCalendar = (0,install/* withInstall */.nz)(Calendar);


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/card/src/card.mjs



const cardProps = (0,runtime/* buildProps */.o8)({
  header: {
    type: String,
    default: ""
  },
  bodyStyle: {
    type: (0,runtime/* definePropType */.Cq)([String, Object, Array]),
    default: ""
  },
  shadow: {
    type: String,
    values: ["always", "hover", "never"],
    default: "always"
  }
});


//# sourceMappingURL=card.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/card/src/card2.mjs






const card2_default_ = {
  name: "ElCard"
};
const card2_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...card2_default_,
  props: cardProps,
  setup(__props) {
    const ns = (0,use_namespace/* useNamespace */.s)("card");
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
        class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(ns).b(), (0,external_Vue_.unref)(ns).is(`${_ctx.shadow}-shadow`)])
      }, [
        _ctx.$slots.header || _ctx.header ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
          key: 0,
          class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("header"))
        }, [
          (0,external_Vue_.renderSlot)(_ctx.$slots, "header", {}, () => [
            (0,external_Vue_.createTextVNode)((0,external_Vue_.toDisplayString)(_ctx.header), 1)
          ])
        ], 2)) : (0,external_Vue_.createCommentVNode)("v-if", true),
        (0,external_Vue_.createElementVNode)("div", {
          class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("body")),
          style: (0,external_Vue_.normalizeStyle)(_ctx.bodyStyle)
        }, [
          (0,external_Vue_.renderSlot)(_ctx.$slots, "default")
        ], 6)
      ], 2);
    };
  }
});
var Card = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(card2_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/card/src/card.vue"]]);


//# sourceMappingURL=card2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/card/index.mjs





const ElCard = (0,install/* withInstall */.nz)(Card);


//# sourceMappingURL=index.mjs.map

// EXTERNAL MODULE: ./node_modules/lodash-es/throttle.js
var throttle = __webpack_require__(111);
;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/carousel/src/carousel.mjs




const carouselProps = (0,runtime/* buildProps */.o8)({
  initialIndex: {
    type: Number,
    default: 0
  },
  height: {
    type: String,
    default: ""
  },
  trigger: {
    type: String,
    values: ["hover", "click"],
    default: "hover"
  },
  autoplay: {
    type: Boolean,
    default: true
  },
  interval: {
    type: Number,
    default: 3e3
  },
  indicatorPosition: {
    type: String,
    values: ["", "none", "outside"],
    default: ""
  },
  indicator: {
    type: Boolean,
    default: true
  },
  arrow: {
    type: String,
    values: ["always", "hover", "never"],
    default: "hover"
  },
  type: {
    type: String,
    values: ["", "card"],
    default: ""
  },
  loop: {
    type: Boolean,
    default: true
  },
  direction: {
    type: String,
    values: ["horizontal", "vertical"],
    default: "horizontal"
  },
  pauseOnHover: {
    type: Boolean,
    default: true
  }
});
const carouselEmits = {
  change: (current, prev) => [current, prev].every(shared/* isNumber */.hj)
};


//# sourceMappingURL=carousel.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/tokens/carousel.mjs
const carouselContextKey = Symbol("carouselContextKey");


//# sourceMappingURL=carousel.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/carousel/src/carousel2.mjs















const carousel2_hoisted_1 = ["onMouseenter", "onMouseleave"];
const carousel2_hoisted_2 = ["onMouseenter", "onClick"];
const carousel2_hoisted_3 = { key: 0 };
const carousel2_default_ = {
  name: "ElCarousel"
};
const carousel2_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...carousel2_default_,
  props: carouselProps,
  emits: carouselEmits,
  setup(__props, { expose, emit }) {
    const props = __props;
    const ns = (0,use_namespace/* useNamespace */.s)("carousel");
    const COMPONENT_NAME = "ElCarousel";
    const THROTTLE_TIME = 300;
    const activeIndex = (0,external_Vue_.ref)(-1);
    const timer = (0,external_Vue_.ref)(null);
    const hover = (0,external_Vue_.ref)(false);
    const root = (0,external_Vue_.ref)();
    const items = (0,external_Vue_.ref)([]);
    const arrowDisplay = (0,external_Vue_.computed)(() => props.arrow !== "never" && !(0,external_Vue_.unref)(isVertical));
    const hasLabel = (0,external_Vue_.computed)(() => {
      return items.value.some((item) => item.props.label.toString().length > 0);
    });
    const carouselClasses = (0,external_Vue_.computed)(() => {
      const classes = [ns.b(), ns.m(props.direction)];
      if ((0,external_Vue_.unref)(isCardType)) {
        classes.push(ns.m("card"));
      }
      return classes;
    });
    const indicatorsClasses = (0,external_Vue_.computed)(() => {
      const classes = [ns.e("indicators"), ns.em("indicators", props.direction)];
      if (hasLabel.value) {
        classes.push(ns.em("indicators", "labels"));
      }
      if (props.indicatorPosition === "outside" || (0,external_Vue_.unref)(isCardType)) {
        classes.push(ns.em("indicators", "outside"));
      }
      return classes;
    });
    const isCardType = (0,external_Vue_.computed)(() => props.type === "card");
    const isVertical = (0,external_Vue_.computed)(() => props.direction === "vertical");
    const throttledArrowClick = (0,throttle/* default */.Z)((index) => {
      setActiveItem(index);
    }, THROTTLE_TIME, { trailing: true });
    const throttledIndicatorHover = (0,throttle/* default */.Z)((index) => {
      handleIndicatorHover(index);
    }, THROTTLE_TIME);
    function pauseTimer() {
      if (timer.value) {
        clearInterval(timer.value);
        timer.value = null;
      }
    }
    function startTimer() {
      if (props.interval <= 0 || !props.autoplay || timer.value)
        return;
      timer.value = setInterval(() => playSlides(), props.interval);
    }
    const playSlides = () => {
      if (activeIndex.value < items.value.length - 1) {
        activeIndex.value = activeIndex.value + 1;
      } else if (props.loop) {
        activeIndex.value = 0;
      }
    };
    function setActiveItem(index) {
      if ((0,shared_esm_bundler/* isString */.HD)(index)) {
        const filteredItems = items.value.filter((item) => item.props.name === index);
        if (filteredItems.length > 0) {
          index = items.value.indexOf(filteredItems[0]);
        }
      }
      index = Number(index);
      if (Number.isNaN(index) || index !== Math.floor(index)) {
        (0,error/* debugWarn */.N)(COMPONENT_NAME, "index must be integer.");
        return;
      }
      const itemCount = items.value.length;
      const oldIndex = activeIndex.value;
      if (index < 0) {
        activeIndex.value = props.loop ? itemCount - 1 : 0;
      } else if (index >= itemCount) {
        activeIndex.value = props.loop ? 0 : itemCount - 1;
      } else {
        activeIndex.value = index;
      }
      if (oldIndex === activeIndex.value) {
        resetItemPosition(oldIndex);
      }
    }
    function resetItemPosition(oldIndex) {
      items.value.forEach((item, index) => {
        item.translateItem(index, activeIndex.value, oldIndex);
      });
    }
    function addItem(item) {
      items.value.push(item);
    }
    function removeItem(uid) {
      const index = items.value.findIndex((item) => item.uid === uid);
      if (index !== -1) {
        items.value.splice(index, 1);
        if (activeIndex.value === index)
          next();
      }
    }
    function itemInStage(item, index) {
      var _a, _b, _c, _d;
      const _items = (0,external_Vue_.unref)(items);
      const itemCount = _items.length;
      if (itemCount === 0 || !item.states.inStage)
        return false;
      const nextItemIndex = index + 1;
      const prevItemIndex = index - 1;
      const lastItemIndex = itemCount - 1;
      const isLastItemActive = _items[lastItemIndex].states.active;
      const isFirstItemActive = _items[0].states.active;
      const isNextItemActive = (_b = (_a = _items[nextItemIndex]) == null ? void 0 : _a.states) == null ? void 0 : _b.active;
      const isPrevItemActive = (_d = (_c = _items[prevItemIndex]) == null ? void 0 : _c.states) == null ? void 0 : _d.active;
      if (index === lastItemIndex && isFirstItemActive || isNextItemActive) {
        return "left";
      } else if (index === 0 && isLastItemActive || isPrevItemActive) {
        return "right";
      }
      return false;
    }
    function handleMouseEnter() {
      hover.value = true;
      if (props.pauseOnHover) {
        pauseTimer();
      }
    }
    function handleMouseLeave() {
      hover.value = false;
      startTimer();
    }
    function handleButtonEnter(arrow) {
      if ((0,external_Vue_.unref)(isVertical))
        return;
      items.value.forEach((item, index) => {
        if (arrow === itemInStage(item, index)) {
          item.states.hover = true;
        }
      });
    }
    function handleButtonLeave() {
      if ((0,external_Vue_.unref)(isVertical))
        return;
      items.value.forEach((item) => {
        item.states.hover = false;
      });
    }
    function handleIndicatorClick(index) {
      activeIndex.value = index;
    }
    function handleIndicatorHover(index) {
      if (props.trigger === "hover" && index !== activeIndex.value) {
        activeIndex.value = index;
      }
    }
    function prev() {
      setActiveItem(activeIndex.value - 1);
    }
    function next() {
      setActiveItem(activeIndex.value + 1);
    }
    (0,external_Vue_.watch)(() => activeIndex.value, (current, prev2) => {
      resetItemPosition(prev2);
      if (prev2 > -1) {
        emit("change", current, prev2);
      }
    });
    (0,external_Vue_.watch)(() => props.autoplay, (autoplay) => {
      autoplay ? startTimer() : pauseTimer();
    });
    (0,external_Vue_.watch)(() => props.loop, () => {
      setActiveItem(activeIndex.value);
    });
    const resizeObserver = (0,external_Vue_.shallowRef)();
    (0,external_Vue_.onMounted)(async () => {
      await (0,external_Vue_.nextTick)();
      resizeObserver.value = (0,core/* useResizeObserver */.yU7)(root.value, () => {
        resetItemPosition();
      });
      if (props.initialIndex < items.value.length && props.initialIndex >= 0) {
        activeIndex.value = props.initialIndex;
      }
      startTimer();
    });
    (0,external_Vue_.onBeforeUnmount)(() => {
      pauseTimer();
      if (root.value && resizeObserver.value)
        resizeObserver.value.stop();
    });
    (0,external_Vue_.provide)(carouselContextKey, {
      root,
      isCardType,
      isVertical,
      items,
      loop: props.loop,
      addItem,
      removeItem,
      setActiveItem
    });
    expose({
      setActiveItem,
      prev,
      next
    });
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
        ref_key: "root",
        ref: root,
        class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(carouselClasses)),
        onMouseenter: (0,external_Vue_.withModifiers)(handleMouseEnter, ["stop"]),
        onMouseleave: (0,external_Vue_.withModifiers)(handleMouseLeave, ["stop"])
      }, [
        (0,external_Vue_.createElementVNode)("div", {
          class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("container")),
          style: (0,external_Vue_.normalizeStyle)({ height: _ctx.height })
        }, [
          (0,external_Vue_.unref)(arrowDisplay) ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(external_Vue_.Transition, {
            key: 0,
            name: "carousel-arrow-left",
            persisted: ""
          }, {
            default: (0,external_Vue_.withCtx)(() => [
              (0,external_Vue_.withDirectives)((0,external_Vue_.createElementVNode)("button", {
                type: "button",
                class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(ns).e("arrow"), (0,external_Vue_.unref)(ns).em("arrow", "left")]),
                onMouseenter: _cache[0] || (_cache[0] = ($event) => handleButtonEnter("left")),
                onMouseleave: handleButtonLeave,
                onClick: _cache[1] || (_cache[1] = (0,external_Vue_.withModifiers)(($event) => (0,external_Vue_.unref)(throttledArrowClick)(activeIndex.value - 1), ["stop"]))
              }, [
                (0,external_Vue_.createVNode)((0,external_Vue_.unref)(components_icon/* ElIcon */.gn), null, {
                  default: (0,external_Vue_.withCtx)(() => [
                    (0,external_Vue_.createVNode)((0,external_Vue_.unref)(dist/* ArrowLeft */.XdH))
                  ]),
                  _: 1
                })
              ], 34), [
                [
                  external_Vue_.vShow,
                  (_ctx.arrow === "always" || hover.value) && (props.loop || activeIndex.value > 0)
                ]
              ])
            ]),
            _: 1
          })) : (0,external_Vue_.createCommentVNode)("v-if", true),
          (0,external_Vue_.unref)(arrowDisplay) ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(external_Vue_.Transition, {
            key: 1,
            name: "carousel-arrow-right",
            persisted: ""
          }, {
            default: (0,external_Vue_.withCtx)(() => [
              (0,external_Vue_.withDirectives)((0,external_Vue_.createElementVNode)("button", {
                type: "button",
                class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(ns).e("arrow"), (0,external_Vue_.unref)(ns).em("arrow", "right")]),
                onMouseenter: _cache[2] || (_cache[2] = ($event) => handleButtonEnter("right")),
                onMouseleave: handleButtonLeave,
                onClick: _cache[3] || (_cache[3] = (0,external_Vue_.withModifiers)(($event) => (0,external_Vue_.unref)(throttledArrowClick)(activeIndex.value + 1), ["stop"]))
              }, [
                (0,external_Vue_.createVNode)((0,external_Vue_.unref)(components_icon/* ElIcon */.gn), null, {
                  default: (0,external_Vue_.withCtx)(() => [
                    (0,external_Vue_.createVNode)((0,external_Vue_.unref)(dist/* ArrowRight */.olP))
                  ]),
                  _: 1
                })
              ], 34), [
                [
                  external_Vue_.vShow,
                  (_ctx.arrow === "always" || hover.value) && (props.loop || activeIndex.value < items.value.length - 1)
                ]
              ])
            ]),
            _: 1
          })) : (0,external_Vue_.createCommentVNode)("v-if", true),
          (0,external_Vue_.renderSlot)(_ctx.$slots, "default")
        ], 6),
        _ctx.indicatorPosition !== "none" ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("ul", {
          key: 0,
          class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(indicatorsClasses))
        }, [
          ((0,external_Vue_.openBlock)(true), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, null, (0,external_Vue_.renderList)(items.value, (item, index) => {
            return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("li", {
              key: index,
              class: (0,external_Vue_.normalizeClass)([
                (0,external_Vue_.unref)(ns).e("indicator"),
                (0,external_Vue_.unref)(ns).em("indicator", _ctx.direction),
                (0,external_Vue_.unref)(ns).is("active", index === activeIndex.value)
              ]),
              onMouseenter: ($event) => (0,external_Vue_.unref)(throttledIndicatorHover)(index),
              onClick: (0,external_Vue_.withModifiers)(($event) => handleIndicatorClick(index), ["stop"])
            }, [
              (0,external_Vue_.createElementVNode)("button", {
                class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("button"))
              }, [
                (0,external_Vue_.unref)(hasLabel) ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("span", carousel2_hoisted_3, (0,external_Vue_.toDisplayString)(item.props.label), 1)) : (0,external_Vue_.createCommentVNode)("v-if", true)
              ], 2)
            ], 42, carousel2_hoisted_2);
          }), 128))
        ], 2)) : (0,external_Vue_.createCommentVNode)("v-if", true)
      ], 42, carousel2_hoisted_1);
    };
  }
});
var Carousel = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(carousel2_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/carousel/src/carousel.vue"]]);


//# sourceMappingURL=carousel2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/carousel/src/carousel-item.mjs



const carouselItemProps = (0,runtime/* buildProps */.o8)({
  name: { type: String, default: "" },
  label: {
    type: [String, Number],
    default: ""
  }
});


//# sourceMappingURL=carousel-item.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/carousel/src/carousel-item2.mjs











const carousel_item2_default_ = {
  name: "ElCarouselItem"
};
const carousel_item2_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...carousel_item2_default_,
  props: carouselItemProps,
  setup(__props) {
    const props = __props;
    const ns = (0,use_namespace/* useNamespace */.s)("carousel");
    const COMPONENT_NAME = "ElCarouselItem";
    const carouselContext = (0,external_Vue_.inject)(carouselContextKey);
    const instance = (0,external_Vue_.getCurrentInstance)();
    if (!carouselContext) {
      (0,error/* debugWarn */.N)(COMPONENT_NAME, "usage: <el-carousel></el-carousel-item></el-carousel>");
    }
    if (!instance) {
      (0,error/* debugWarn */.N)(COMPONENT_NAME, "compositional hook can only be invoked inside setups");
    }
    const CARD_SCALE = 0.83;
    const hover = (0,external_Vue_.ref)(false);
    const translate = (0,external_Vue_.ref)(0);
    const scale = (0,external_Vue_.ref)(1);
    const active = (0,external_Vue_.ref)(false);
    const ready = (0,external_Vue_.ref)(false);
    const inStage = (0,external_Vue_.ref)(false);
    const animating = (0,external_Vue_.ref)(false);
    const { isCardType, isVertical } = carouselContext;
    const itemStyle = (0,external_Vue_.computed)(() => {
      const translateType = `translate${(0,external_Vue_.unref)(isVertical) ? "Y" : "X"}`;
      const _translate = `${translateType}(${(0,external_Vue_.unref)(translate)}px)`;
      const _scale = `scale(${(0,external_Vue_.unref)(scale)})`;
      const transform = [_translate, _scale].join(" ");
      return {
        transform
      };
    });
    function processIndex(index, activeIndex, length) {
      const lastItemIndex = length - 1;
      const prevItemIndex = activeIndex - 1;
      const nextItemIndex = activeIndex + 1;
      const halfItemIndex = length / 2;
      if (activeIndex === 0 && index === lastItemIndex) {
        return -1;
      } else if (activeIndex === lastItemIndex && index === 0) {
        return length;
      } else if (index < prevItemIndex && activeIndex - index >= halfItemIndex) {
        return length + 1;
      } else if (index > nextItemIndex && index - activeIndex >= halfItemIndex) {
        return -2;
      }
      return index;
    }
    function calcCardTranslate(index, activeIndex) {
      var _a;
      const parentWidth = ((_a = carouselContext.root.value) == null ? void 0 : _a.offsetWidth) || 0;
      if (inStage.value) {
        return parentWidth * ((2 - CARD_SCALE) * (index - activeIndex) + 1) / 4;
      } else if (index < activeIndex) {
        return -(1 + CARD_SCALE) * parentWidth / 4;
      } else {
        return (3 + CARD_SCALE) * parentWidth / 4;
      }
    }
    function calcTranslate(index, activeIndex, isVertical2) {
      const rootEl = carouselContext.root.value;
      if (!rootEl)
        return 0;
      const distance = (isVertical2 ? rootEl.offsetHeight : rootEl.offsetWidth) || 0;
      return distance * (index - activeIndex);
    }
    const translateItem = (index, activeIndex, oldIndex) => {
      var _a;
      const _isCardType = (0,external_Vue_.unref)(isCardType);
      const carouselItemLength = (_a = carouselContext.items.value.length) != null ? _a : Number.NaN;
      const isActive = index === activeIndex;
      if (!_isCardType && !(0,types/* isUndefined */.o8)(oldIndex)) {
        animating.value = isActive || index === oldIndex;
      }
      if (!isActive && carouselItemLength > 2 && carouselContext.loop) {
        index = processIndex(index, activeIndex, carouselItemLength);
      }
      const _isVertical = (0,external_Vue_.unref)(isVertical);
      active.value = isActive;
      if (_isCardType) {
        if (_isVertical) {
          (0,error/* debugWarn */.N)("Carousel", "vertical direction is not supported for card mode");
        }
        inStage.value = Math.round(Math.abs(index - activeIndex)) <= 1;
        translate.value = calcCardTranslate(index, activeIndex);
        scale.value = (0,external_Vue_.unref)(active) ? 1 : CARD_SCALE;
      } else {
        translate.value = calcTranslate(index, activeIndex, _isVertical);
      }
      ready.value = true;
    };
    function handleItemClick() {
      if (carouselContext && (0,external_Vue_.unref)(isCardType)) {
        const index = carouselContext.items.value.findIndex(({ uid }) => uid === instance.uid);
        carouselContext.setActiveItem(index);
      }
    }
    (0,external_Vue_.onMounted)(() => {
      carouselContext.addItem({
        props,
        states: (0,external_Vue_.reactive)({
          hover,
          translate,
          scale,
          active,
          ready,
          inStage,
          animating
        }),
        uid: instance.uid,
        translateItem
      });
    });
    (0,external_Vue_.onUnmounted)(() => {
      carouselContext.removeItem(instance.uid);
    });
    return (_ctx, _cache) => {
      return (0,external_Vue_.withDirectives)(((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
        class: (0,external_Vue_.normalizeClass)([
          (0,external_Vue_.unref)(ns).e("item"),
          (0,external_Vue_.unref)(ns).is("active", active.value),
          (0,external_Vue_.unref)(ns).is("in-stage", inStage.value),
          (0,external_Vue_.unref)(ns).is("hover", hover.value),
          (0,external_Vue_.unref)(ns).is("animating", animating.value),
          { [(0,external_Vue_.unref)(ns).em("item", "card")]: (0,external_Vue_.unref)(isCardType) }
        ]),
        style: (0,external_Vue_.normalizeStyle)((0,external_Vue_.unref)(itemStyle)),
        onClick: handleItemClick
      }, [
        (0,external_Vue_.unref)(isCardType) ? (0,external_Vue_.withDirectives)(((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
          key: 0,
          class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("mask"))
        }, null, 2)), [
          [external_Vue_.vShow, !active.value]
        ]) : (0,external_Vue_.createCommentVNode)("v-if", true),
        (0,external_Vue_.renderSlot)(_ctx.$slots, "default")
      ], 6)), [
        [external_Vue_.vShow, ready.value]
      ]);
    };
  }
});
var CarouselItem = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(carousel_item2_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/carousel/src/carousel-item.vue"]]);


//# sourceMappingURL=carousel-item2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/carousel/index.mjs







const ElCarousel = (0,install/* withInstall */.nz)(Carousel, {
  CarouselItem: CarouselItem
});
const ElCarouselItem = (0,install/* withNoopInstall */.dp)(CarouselItem);


//# sourceMappingURL=index.mjs.map

// EXTERNAL MODULE: ./node_modules/lodash-es/isEqual.js + 7 modules
var isEqual = __webpack_require__(38964);
// EXTERNAL MODULE: ./node_modules/lodash-es/flattenDeep.js
var flattenDeep = __webpack_require__(99215);
// EXTERNAL MODULE: ./node_modules/element-plus/es/components/checkbox/index.mjs + 4 modules
var components_checkbox = __webpack_require__(26270);
;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/radio/src/radio.mjs









const radioPropsBase = (0,runtime/* buildProps */.o8)({
  size: use_common_props/* useSizeProp */.Pp,
  disabled: Boolean,
  label: {
    type: [String, Number, Boolean],
    default: ""
  }
});
const radioProps = (0,runtime/* buildProps */.o8)({
  ...radioPropsBase,
  modelValue: {
    type: [String, Number, Boolean],
    default: ""
  },
  name: {
    type: String,
    default: ""
  },
  border: Boolean
});
const radioEmits = {
  [constants_event/* UPDATE_MODEL_EVENT */.f_]: (val) => (0,shared_esm_bundler/* isString */.HD)(val) || (0,shared/* isNumber */.hj)(val) || (0,shared/* isBoolean */.jn)(val),
  [constants_event/* CHANGE_EVENT */.O7]: (val) => (0,shared_esm_bundler/* isString */.HD)(val) || (0,shared/* isNumber */.hj)(val) || (0,shared/* isBoolean */.jn)(val)
};


//# sourceMappingURL=radio.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/tokens/radio.mjs
const radioGroupKey = Symbol("radioGroupKey");


//# sourceMappingURL=radio.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/radio/src/use-radio.mjs








const useRadio = (props, emit) => {
  const radioRef = (0,external_Vue_.ref)();
  const radioGroup = (0,external_Vue_.inject)(radioGroupKey, void 0);
  const isGroup = (0,external_Vue_.computed)(() => !!radioGroup);
  const modelValue = (0,external_Vue_.computed)({
    get() {
      return isGroup.value ? radioGroup.modelValue : props.modelValue;
    },
    set(val) {
      if (isGroup.value) {
        radioGroup.changeEvent(val);
      } else {
        emit && emit(constants_event/* UPDATE_MODEL_EVENT */.f_, val);
      }
      radioRef.value.checked = props.modelValue === props.label;
    }
  });
  const size = (0,use_common_props/* useSize */.tH)((0,external_Vue_.computed)(() => radioGroup == null ? void 0 : radioGroup.size));
  const disabled = (0,use_common_props/* useDisabled */.B4)((0,external_Vue_.computed)(() => radioGroup == null ? void 0 : radioGroup.disabled));
  const focus = (0,external_Vue_.ref)(false);
  const tabIndex = (0,external_Vue_.computed)(() => {
    return disabled.value || isGroup.value && modelValue.value !== props.label ? -1 : 0;
  });
  return {
    radioRef,
    isGroup,
    radioGroup,
    focus,
    size,
    disabled,
    tabIndex,
    modelValue
  };
};


//# sourceMappingURL=use-radio.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/radio/src/radio2.mjs








const radio2_hoisted_1 = ["value", "name", "disabled"];
const radio2_default_ = {
  name: "ElRadio",
  inheritAttrs: false
};
const radio2_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...radio2_default_,
  props: radioProps,
  emits: radioEmits,
  setup(__props, { emit }) {
    const props = __props;
    const rawAttrs = (0,external_Vue_.useAttrs)();
    const containerStyle = (0,external_Vue_.computed)(() => rawAttrs.style);
    const inputAttrs = (0,use_attrs/* useAttrs */.l)({ excludeListeners: true });
    const labelListeners = (0,use_attrs/* useAttrs */.l)({
      excludeKeys: (0,external_Vue_.computed)(() => {
        return Object.keys(inputAttrs.value);
      })
    });
    const ns = (0,use_namespace/* useNamespace */.s)("radio");
    const { radioRef, radioGroup, focus, size, disabled, modelValue } = useRadio(props, emit);
    function handleChange() {
      (0,external_Vue_.nextTick)(() => emit("change", modelValue.value));
    }
    return (_ctx, _cache) => {
      var _a;
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("label", (0,external_Vue_.mergeProps)({
        class: [
          (0,external_Vue_.unref)(ns).b(),
          (0,external_Vue_.unref)(ns).is("disabled", (0,external_Vue_.unref)(disabled)),
          (0,external_Vue_.unref)(ns).is("focus", (0,external_Vue_.unref)(focus)),
          (0,external_Vue_.unref)(ns).is("bordered", _ctx.border),
          (0,external_Vue_.unref)(ns).is("checked", (0,external_Vue_.unref)(modelValue) === _ctx.label),
          (0,external_Vue_.unref)(ns).m((0,external_Vue_.unref)(size)),
          (0,external_Vue_.unref)(rawAttrs).class
        ],
        style: (0,external_Vue_.unref)(containerStyle)
      }, (0,external_Vue_.unref)(labelListeners)), [
        (0,external_Vue_.createElementVNode)("span", {
          class: (0,external_Vue_.normalizeClass)([
            (0,external_Vue_.unref)(ns).e("input"),
            (0,external_Vue_.unref)(ns).is("disabled", (0,external_Vue_.unref)(disabled)),
            (0,external_Vue_.unref)(ns).is("checked", (0,external_Vue_.unref)(modelValue) === _ctx.label)
          ])
        }, [
          (0,external_Vue_.withDirectives)((0,external_Vue_.createElementVNode)("input", (0,external_Vue_.mergeProps)({
            ref_key: "radioRef",
            ref: radioRef,
            "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => (0,external_Vue_.isRef)(modelValue) ? modelValue.value = $event : null),
            class: (0,external_Vue_.unref)(ns).e("original"),
            value: _ctx.label,
            name: _ctx.name || ((_a = (0,external_Vue_.unref)(radioGroup)) == null ? void 0 : _a.name),
            disabled: (0,external_Vue_.unref)(disabled),
            type: "radio"
          }, (0,external_Vue_.unref)(inputAttrs), {
            onFocus: _cache[1] || (_cache[1] = ($event) => focus.value = true),
            onBlur: _cache[2] || (_cache[2] = ($event) => focus.value = false),
            onChange: handleChange
          }), null, 16, radio2_hoisted_1), [
            [external_Vue_.vModelRadio, (0,external_Vue_.unref)(modelValue)]
          ]),
          (0,external_Vue_.createElementVNode)("span", {
            class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("inner"))
          }, null, 2)
        ], 2),
        (0,external_Vue_.createElementVNode)("span", {
          class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("label")),
          onKeydown: _cache[3] || (_cache[3] = (0,external_Vue_.withModifiers)(() => {
          }, ["stop"]))
        }, [
          (0,external_Vue_.renderSlot)(_ctx.$slots, "default", {}, () => [
            (0,external_Vue_.createTextVNode)((0,external_Vue_.toDisplayString)(_ctx.label), 1)
          ])
        ], 34)
      ], 16);
    };
  }
});
var Radio = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(radio2_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/radio/src/radio.vue"]]);


//# sourceMappingURL=radio2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/radio/src/radio-button.mjs




const radioButtonProps = (0,runtime/* buildProps */.o8)({
  ...radioPropsBase,
  name: {
    type: String,
    default: ""
  }
});


//# sourceMappingURL=radio-button.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/radio/src/radio-button2.mjs







const radio_button2_hoisted_1 = ["value", "name", "disabled"];
const radio_button2_default_ = {
  name: "ElRadioButton"
};
const radio_button2_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...radio_button2_default_,
  props: radioButtonProps,
  setup(__props) {
    const props = __props;
    const ns = (0,use_namespace/* useNamespace */.s)("radio");
    const { radioRef, focus, size, disabled, modelValue, radioGroup } = useRadio(props);
    const activeStyle = (0,external_Vue_.computed)(() => {
      return {
        backgroundColor: (radioGroup == null ? void 0 : radioGroup.fill) || "",
        borderColor: (radioGroup == null ? void 0 : radioGroup.fill) || "",
        boxShadow: (radioGroup == null ? void 0 : radioGroup.fill) ? `-1px 0 0 0 ${radioGroup.fill}` : "",
        color: (radioGroup == null ? void 0 : radioGroup.textColor) || ""
      };
    });
    return (_ctx, _cache) => {
      var _a;
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("label", {
        class: (0,external_Vue_.normalizeClass)([
          (0,external_Vue_.unref)(ns).b("button"),
          (0,external_Vue_.unref)(ns).is("active", (0,external_Vue_.unref)(modelValue) === _ctx.label),
          (0,external_Vue_.unref)(ns).is("disabled", (0,external_Vue_.unref)(disabled)),
          (0,external_Vue_.unref)(ns).is("focus", (0,external_Vue_.unref)(focus)),
          (0,external_Vue_.unref)(ns).bm("button", (0,external_Vue_.unref)(size))
        ])
      }, [
        (0,external_Vue_.withDirectives)((0,external_Vue_.createElementVNode)("input", {
          ref_key: "radioRef",
          ref: radioRef,
          "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => (0,external_Vue_.isRef)(modelValue) ? modelValue.value = $event : null),
          class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).be("button", "original-radio")),
          value: _ctx.label,
          type: "radio",
          name: _ctx.name || ((_a = (0,external_Vue_.unref)(radioGroup)) == null ? void 0 : _a.name),
          disabled: (0,external_Vue_.unref)(disabled),
          onFocus: _cache[1] || (_cache[1] = ($event) => focus.value = true),
          onBlur: _cache[2] || (_cache[2] = ($event) => focus.value = false)
        }, null, 42, radio_button2_hoisted_1), [
          [external_Vue_.vModelRadio, (0,external_Vue_.unref)(modelValue)]
        ]),
        (0,external_Vue_.createElementVNode)("span", {
          class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).be("button", "inner")),
          style: (0,external_Vue_.normalizeStyle)((0,external_Vue_.unref)(modelValue) === _ctx.label ? (0,external_Vue_.unref)(activeStyle) : {}),
          onKeydown: _cache[3] || (_cache[3] = (0,external_Vue_.withModifiers)(() => {
          }, ["stop"]))
        }, [
          (0,external_Vue_.renderSlot)(_ctx.$slots, "default", {}, () => [
            (0,external_Vue_.createTextVNode)((0,external_Vue_.toDisplayString)(_ctx.label), 1)
          ])
        ], 38)
      ], 2);
    };
  }
});
var RadioButton = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(radio_button2_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/radio/src/radio-button.vue"]]);


//# sourceMappingURL=radio-button2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/radio/src/radio-group.mjs






const radioGroupProps = (0,runtime/* buildProps */.o8)({
  id: {
    type: String,
    default: void 0
  },
  size: use_common_props/* useSizeProp */.Pp,
  disabled: Boolean,
  modelValue: {
    type: [String, Number, Boolean],
    default: ""
  },
  fill: {
    type: String,
    default: ""
  },
  label: {
    type: String,
    default: void 0
  },
  textColor: {
    type: String,
    default: ""
  },
  name: {
    type: String,
    default: void 0
  }
});
const radioGroupEmits = radioEmits;


//# sourceMappingURL=radio-group.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/radio/src/radio-group2.mjs














const radio_group2_hoisted_1 = ["id", "aria-label", "aria-labelledby"];
const radio_group2_default_ = {
  name: "ElRadioGroup"
};
const radio_group2_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...radio_group2_default_,
  props: radioGroupProps,
  emits: radioGroupEmits,
  setup(__props, { emit }) {
    const props = __props;
    const ns = (0,use_namespace/* useNamespace */.s)("radio");
    const radioId = (0,use_id/* useId */.M)();
    const radioGroupRef = (0,external_Vue_.ref)();
    const { formItem } = (0,use_form_item/* useFormItem */.A)();
    const { inputId: groupId, isLabeledByFormItem } = (0,use_form_item/* useFormItemInputId */.p)(props, {
      formItemContext: formItem
    });
    const changeEvent = (value) => {
      emit(constants_event/* UPDATE_MODEL_EVENT */.f_, value);
      (0,external_Vue_.nextTick)(() => emit("change", value));
    };
    (0,external_Vue_.onMounted)(() => {
      const radios = radioGroupRef.value.querySelectorAll("[type=radio]");
      const firstLabel = radios[0];
      if (!Array.from(radios).some((radio) => radio.checked) && firstLabel) {
        firstLabel.tabIndex = 0;
      }
    });
    const name = (0,external_Vue_.computed)(() => {
      return props.name || radioId.value;
    });
    (0,external_Vue_.provide)(radioGroupKey, (0,external_Vue_.reactive)({
      ...(0,external_Vue_.toRefs)(props),
      changeEvent,
      name
    }));
    (0,external_Vue_.watch)(() => props.modelValue, () => formItem == null ? void 0 : formItem.validate("change").catch((err) => (0,error/* debugWarn */.N)(err)));
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
        id: (0,external_Vue_.unref)(groupId),
        ref_key: "radioGroupRef",
        ref: radioGroupRef,
        class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).b("group")),
        role: "radiogroup",
        "aria-label": !(0,external_Vue_.unref)(isLabeledByFormItem) ? _ctx.label || "radio-group" : void 0,
        "aria-labelledby": (0,external_Vue_.unref)(isLabeledByFormItem) ? (0,external_Vue_.unref)(formItem).labelId : void 0
      }, [
        (0,external_Vue_.renderSlot)(_ctx.$slots, "default")
      ], 10, radio_group2_hoisted_1);
    };
  }
});
var RadioGroup = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(radio_group2_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/radio/src/radio-group.vue"]]);


//# sourceMappingURL=radio-group2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/radio/index.mjs









const ElRadio = (0,install/* withInstall */.nz)(Radio, {
  RadioButton: RadioButton,
  RadioGroup: RadioGroup
});
const ElRadioGroup = (0,install/* withNoopInstall */.dp)(RadioGroup);
const ElRadioButton = (0,install/* withNoopInstall */.dp)(RadioButton);


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/cascader-panel/src/node-content.mjs




var NodeContent = (0,external_Vue_.defineComponent)({
  name: "NodeContent",
  setup() {
    const ns = (0,use_namespace/* useNamespace */.s)("cascader-node");
    return {
      ns
    };
  },
  render() {
    const { ns } = this;
    const { node, panel } = this.$parent;
    const { data, label } = node;
    const { renderLabelFn } = panel;
    return (0,external_Vue_.h)("span", { class: ns.e("label") }, renderLabelFn ? renderLabelFn({ node, data }) : label);
  }
});


//# sourceMappingURL=node-content.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/cascader-panel/src/types.mjs
var ExpandTrigger = /* @__PURE__ */ ((ExpandTrigger2) => {
  ExpandTrigger2["CLICK"] = "click";
  ExpandTrigger2["HOVER"] = "hover";
  return ExpandTrigger2;
})(ExpandTrigger || {});
const CASCADER_PANEL_INJECTION_KEY = Symbol();


//# sourceMappingURL=types.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/cascader-panel/src/node2.mjs











const node2_sfc_main = (0,external_Vue_.defineComponent)({
  name: "ElCascaderNode",
  components: {
    ElCheckbox: components_checkbox/* ElCheckbox */.Xb,
    ElRadio: ElRadio,
    NodeContent: NodeContent,
    ElIcon: components_icon/* ElIcon */.gn,
    Check: dist/* Check */.JrY,
    Loading: dist/* Loading */.gbz,
    ArrowRight: dist/* ArrowRight */.olP
  },
  props: {
    node: {
      type: Object,
      required: true
    },
    menuId: String
  },
  emits: ["expand"],
  setup(props, { emit }) {
    const panel = (0,external_Vue_.inject)(CASCADER_PANEL_INJECTION_KEY);
    const ns = (0,use_namespace/* useNamespace */.s)("cascader-node");
    const isHoverMenu = (0,external_Vue_.computed)(() => panel.isHoverMenu);
    const multiple = (0,external_Vue_.computed)(() => panel.config.multiple);
    const checkStrictly = (0,external_Vue_.computed)(() => panel.config.checkStrictly);
    const checkedNodeId = (0,external_Vue_.computed)(() => {
      var _a;
      return (_a = panel.checkedNodes[0]) == null ? void 0 : _a.uid;
    });
    const isDisabled = (0,external_Vue_.computed)(() => props.node.isDisabled);
    const isLeaf = (0,external_Vue_.computed)(() => props.node.isLeaf);
    const expandable = (0,external_Vue_.computed)(() => checkStrictly.value && !isLeaf.value || !isDisabled.value);
    const inExpandingPath = (0,external_Vue_.computed)(() => isInPath(panel.expandingNode));
    const inCheckedPath = (0,external_Vue_.computed)(() => checkStrictly.value && panel.checkedNodes.some(isInPath));
    const isInPath = (node) => {
      var _a;
      const { level, uid } = props.node;
      return ((_a = node == null ? void 0 : node.pathNodes[level - 1]) == null ? void 0 : _a.uid) === uid;
    };
    const doExpand = () => {
      if (inExpandingPath.value)
        return;
      panel.expandNode(props.node);
    };
    const doCheck = (checked) => {
      const { node } = props;
      if (checked === node.checked)
        return;
      panel.handleCheckChange(node, checked);
    };
    const doLoad = () => {
      panel.lazyLoad(props.node, () => {
        if (!isLeaf.value)
          doExpand();
      });
    };
    const handleHoverExpand = (e) => {
      if (!isHoverMenu.value)
        return;
      handleExpand();
      !isLeaf.value && emit("expand", e);
    };
    const handleExpand = () => {
      const { node } = props;
      if (!expandable.value || node.loading)
        return;
      node.loaded ? doExpand() : doLoad();
    };
    const handleClick = () => {
      if (isHoverMenu.value && !isLeaf.value)
        return;
      if (isLeaf.value && !isDisabled.value && !checkStrictly.value && !multiple.value) {
        handleCheck(true);
      } else {
        handleExpand();
      }
    };
    const handleSelectCheck = (checked) => {
      if (checkStrictly.value) {
        doCheck(checked);
        if (props.node.loaded) {
          doExpand();
        }
      } else {
        handleCheck(checked);
      }
    };
    const handleCheck = (checked) => {
      if (!props.node.loaded) {
        doLoad();
      } else {
        doCheck(checked);
        !checkStrictly.value && doExpand();
      }
    };
    return {
      panel,
      isHoverMenu,
      multiple,
      checkStrictly,
      checkedNodeId,
      isDisabled,
      isLeaf,
      expandable,
      inExpandingPath,
      inCheckedPath,
      ns,
      handleHoverExpand,
      handleExpand,
      handleClick,
      handleCheck,
      handleSelectCheck
    };
  }
});
const node2_hoisted_1 = ["id", "aria-haspopup", "aria-owns", "aria-expanded", "tabindex"];
const node2_hoisted_2 = /* @__PURE__ */ (0,external_Vue_.createElementVNode)("span", null, null, -1);
function node2_sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_el_checkbox = (0,external_Vue_.resolveComponent)("el-checkbox");
  const _component_el_radio = (0,external_Vue_.resolveComponent)("el-radio");
  const _component_check = (0,external_Vue_.resolveComponent)("check");
  const _component_el_icon = (0,external_Vue_.resolveComponent)("el-icon");
  const _component_node_content = (0,external_Vue_.resolveComponent)("node-content");
  const _component_loading = (0,external_Vue_.resolveComponent)("loading");
  const _component_arrow_right = (0,external_Vue_.resolveComponent)("arrow-right");
  return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("li", {
    id: `${_ctx.menuId}-${_ctx.node.uid}`,
    role: "menuitem",
    "aria-haspopup": !_ctx.isLeaf,
    "aria-owns": _ctx.isLeaf ? null : _ctx.menuId,
    "aria-expanded": _ctx.inExpandingPath,
    tabindex: _ctx.expandable ? -1 : void 0,
    class: (0,external_Vue_.normalizeClass)([
      _ctx.ns.b(),
      _ctx.ns.is("selectable", _ctx.checkStrictly),
      _ctx.ns.is("active", _ctx.node.checked),
      _ctx.ns.is("disabled", !_ctx.expandable),
      _ctx.inExpandingPath && "in-active-path",
      _ctx.inCheckedPath && "in-checked-path"
    ]),
    onMouseenter: _cache[2] || (_cache[2] = (...args) => _ctx.handleHoverExpand && _ctx.handleHoverExpand(...args)),
    onFocus: _cache[3] || (_cache[3] = (...args) => _ctx.handleHoverExpand && _ctx.handleHoverExpand(...args)),
    onClick: _cache[4] || (_cache[4] = (...args) => _ctx.handleClick && _ctx.handleClick(...args))
  }, [
    (0,external_Vue_.createCommentVNode)(" prefix "),
    _ctx.multiple ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(_component_el_checkbox, {
      key: 0,
      "model-value": _ctx.node.checked,
      indeterminate: _ctx.node.indeterminate,
      disabled: _ctx.isDisabled,
      onClick: _cache[0] || (_cache[0] = (0,external_Vue_.withModifiers)(() => {
      }, ["stop"])),
      "onUpdate:modelValue": _ctx.handleSelectCheck
    }, null, 8, ["model-value", "indeterminate", "disabled", "onUpdate:modelValue"])) : _ctx.checkStrictly ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(_component_el_radio, {
      key: 1,
      "model-value": _ctx.checkedNodeId,
      label: _ctx.node.uid,
      disabled: _ctx.isDisabled,
      "onUpdate:modelValue": _ctx.handleSelectCheck,
      onClick: _cache[1] || (_cache[1] = (0,external_Vue_.withModifiers)(() => {
      }, ["stop"]))
    }, {
      default: (0,external_Vue_.withCtx)(() => [
        (0,external_Vue_.createCommentVNode)("\n        Add an empty element to avoid render label,\n        do not use empty fragment here for https://github.com/vuejs/vue-next/pull/2485\n      "),
        node2_hoisted_2
      ]),
      _: 1
    }, 8, ["model-value", "label", "disabled", "onUpdate:modelValue"])) : _ctx.isLeaf && _ctx.node.checked ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(_component_el_icon, {
      key: 2,
      class: (0,external_Vue_.normalizeClass)(_ctx.ns.e("prefix"))
    }, {
      default: (0,external_Vue_.withCtx)(() => [
        (0,external_Vue_.createVNode)(_component_check)
      ]),
      _: 1
    }, 8, ["class"])) : (0,external_Vue_.createCommentVNode)("v-if", true),
    (0,external_Vue_.createCommentVNode)(" content "),
    (0,external_Vue_.createVNode)(_component_node_content),
    (0,external_Vue_.createCommentVNode)(" postfix "),
    !_ctx.isLeaf ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, { key: 3 }, [
      _ctx.node.loading ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(_component_el_icon, {
        key: 0,
        class: (0,external_Vue_.normalizeClass)([_ctx.ns.is("loading"), _ctx.ns.e("postfix")])
      }, {
        default: (0,external_Vue_.withCtx)(() => [
          (0,external_Vue_.createVNode)(_component_loading)
        ]),
        _: 1
      }, 8, ["class"])) : ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(_component_el_icon, {
        key: 1,
        class: (0,external_Vue_.normalizeClass)(["arrow-right", _ctx.ns.e("postfix")])
      }, {
        default: (0,external_Vue_.withCtx)(() => [
          (0,external_Vue_.createVNode)(_component_arrow_right)
        ]),
        _: 1
      }, 8, ["class"]))
    ], 64)) : (0,external_Vue_.createCommentVNode)("v-if", true)
  ], 42, node2_hoisted_1);
}
var ElCascaderNode = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(node2_sfc_main, [["render", node2_sfc_render], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/cascader-panel/src/node.vue"]]);


//# sourceMappingURL=node2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/cascader-panel/src/menu.mjs













const menu_sfc_main = (0,external_Vue_.defineComponent)({
  name: "ElCascaderMenu",
  components: {
    Loading: dist/* Loading */.gbz,
    ElIcon: components_icon/* ElIcon */.gn,
    ElScrollbar: ElScrollbar,
    ElCascaderNode: ElCascaderNode
  },
  props: {
    nodes: {
      type: Array,
      required: true
    },
    index: {
      type: Number,
      required: true
    }
  },
  setup(props) {
    const instance = (0,external_Vue_.getCurrentInstance)();
    const ns = (0,use_namespace/* useNamespace */.s)("cascader-menu");
    const { t } = useLocale();
    const id = rand_generateId();
    let activeNode = null;
    let hoverTimer = null;
    const panel = (0,external_Vue_.inject)(CASCADER_PANEL_INJECTION_KEY);
    const hoverZone = (0,external_Vue_.ref)(null);
    const isEmpty = (0,external_Vue_.computed)(() => !props.nodes.length);
    const isLoading = (0,external_Vue_.computed)(() => !panel.initialLoaded);
    const menuId = (0,external_Vue_.computed)(() => `cascader-menu-${id}-${props.index}`);
    const handleExpand = (e) => {
      activeNode = e.target;
    };
    const handleMouseMove = (e) => {
      if (!panel.isHoverMenu || !activeNode || !hoverZone.value)
        return;
      if (activeNode.contains(e.target)) {
        clearHoverTimer();
        const el = instance.vnode.el;
        const { left } = el.getBoundingClientRect();
        const { offsetWidth, offsetHeight } = el;
        const startX = e.clientX - left;
        const top = activeNode.offsetTop;
        const bottom = top + activeNode.offsetHeight;
        hoverZone.value.innerHTML = `
          <path style="pointer-events: auto;" fill="transparent" d="M${startX} ${top} L${offsetWidth} 0 V${top} Z" />
          <path style="pointer-events: auto;" fill="transparent" d="M${startX} ${bottom} L${offsetWidth} ${offsetHeight} V${bottom} Z" />
        `;
      } else if (!hoverTimer) {
        hoverTimer = window.setTimeout(clearHoverZone, panel.config.hoverThreshold);
      }
    };
    const clearHoverTimer = () => {
      if (!hoverTimer)
        return;
      clearTimeout(hoverTimer);
      hoverTimer = null;
    };
    const clearHoverZone = () => {
      if (!hoverZone.value)
        return;
      hoverZone.value.innerHTML = "";
      clearHoverTimer();
    };
    return {
      ns,
      panel,
      hoverZone,
      isEmpty,
      isLoading,
      menuId,
      t,
      handleExpand,
      handleMouseMove,
      clearHoverZone
    };
  }
});
function menu_sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_el_cascader_node = (0,external_Vue_.resolveComponent)("el-cascader-node");
  const _component_loading = (0,external_Vue_.resolveComponent)("loading");
  const _component_el_icon = (0,external_Vue_.resolveComponent)("el-icon");
  const _component_el_scrollbar = (0,external_Vue_.resolveComponent)("el-scrollbar");
  return (0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(_component_el_scrollbar, {
    key: _ctx.menuId,
    tag: "ul",
    role: "menu",
    class: (0,external_Vue_.normalizeClass)(_ctx.ns.b()),
    "wrap-class": _ctx.ns.e("wrap"),
    "view-class": [_ctx.ns.e("list"), _ctx.ns.is("empty", _ctx.isEmpty)],
    onMousemove: _ctx.handleMouseMove,
    onMouseleave: _ctx.clearHoverZone
  }, {
    default: (0,external_Vue_.withCtx)(() => {
      var _a;
      return [
        ((0,external_Vue_.openBlock)(true), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, null, (0,external_Vue_.renderList)(_ctx.nodes, (node) => {
          return (0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(_component_el_cascader_node, {
            key: node.uid,
            node,
            "menu-id": _ctx.menuId,
            onExpand: _ctx.handleExpand
          }, null, 8, ["node", "menu-id", "onExpand"]);
        }), 128)),
        _ctx.isLoading ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
          key: 0,
          class: (0,external_Vue_.normalizeClass)(_ctx.ns.e("empty-text"))
        }, [
          (0,external_Vue_.createVNode)(_component_el_icon, {
            size: "14",
            class: (0,external_Vue_.normalizeClass)(_ctx.ns.is("loading"))
          }, {
            default: (0,external_Vue_.withCtx)(() => [
              (0,external_Vue_.createVNode)(_component_loading)
            ]),
            _: 1
          }, 8, ["class"]),
          (0,external_Vue_.createTextVNode)(" " + (0,external_Vue_.toDisplayString)(_ctx.t("el.cascader.loading")), 1)
        ], 2)) : _ctx.isEmpty ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
          key: 1,
          class: (0,external_Vue_.normalizeClass)(_ctx.ns.e("empty-text"))
        }, (0,external_Vue_.toDisplayString)(_ctx.t("el.cascader.noData")), 3)) : ((_a = _ctx.panel) == null ? void 0 : _a.isHoverMenu) ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("svg", {
          key: 2,
          ref: "hoverZone",
          class: (0,external_Vue_.normalizeClass)(_ctx.ns.e("hover-zone"))
        }, null, 2)) : (0,external_Vue_.createCommentVNode)("v-if", true)
      ];
    }),
    _: 1
  }, 8, ["class", "wrap-class", "view-class", "onMousemove", "onMouseleave"]);
}
var ElCascaderMenu = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(menu_sfc_main, [["render", menu_sfc_render], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/cascader-panel/src/menu.vue"]]);


//# sourceMappingURL=menu.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/cascader-panel/src/node.mjs




var node_ExpandTrigger = /* @__PURE__ */ ((ExpandTrigger2) => {
  ExpandTrigger2["CLICK"] = "click";
  ExpandTrigger2["HOVER"] = "hover";
  return ExpandTrigger2;
})(node_ExpandTrigger || {});
let uid = 0;
const calculatePathNodes = (node) => {
  const nodes = [node];
  let { parent } = node;
  while (parent) {
    nodes.unshift(parent);
    parent = parent.parent;
  }
  return nodes;
};
class Node {
  constructor(data, config, parent, root = false) {
    this.data = data;
    this.config = config;
    this.parent = parent;
    this.root = root;
    this.uid = uid++;
    this.checked = false;
    this.indeterminate = false;
    this.loading = false;
    const { value: valueKey, label: labelKey, children: childrenKey } = config;
    const childrenData = data[childrenKey];
    const pathNodes = calculatePathNodes(this);
    this.level = root ? 0 : parent ? parent.level + 1 : 1;
    this.value = data[valueKey];
    this.label = data[labelKey];
    this.pathNodes = pathNodes;
    this.pathValues = pathNodes.map((node) => node.value);
    this.pathLabels = pathNodes.map((node) => node.label);
    this.childrenData = childrenData;
    this.children = (childrenData || []).map((child) => new Node(child, config, this));
    this.loaded = !config.lazy || this.isLeaf || !(0,types/* isEmpty */.xb)(childrenData);
  }
  get isDisabled() {
    const { data, parent, config } = this;
    const { disabled, checkStrictly } = config;
    const isDisabled = (0,shared_esm_bundler/* isFunction */.mf)(disabled) ? disabled(data, this) : !!data[disabled];
    return isDisabled || !checkStrictly && (parent == null ? void 0 : parent.isDisabled);
  }
  get isLeaf() {
    const { data, config, childrenData, loaded } = this;
    const { lazy, leaf } = config;
    const isLeaf = (0,shared_esm_bundler/* isFunction */.mf)(leaf) ? leaf(data, this) : data[leaf];
    return (0,types/* isUndefined */.o8)(isLeaf) ? lazy && !loaded ? false : !(Array.isArray(childrenData) && childrenData.length) : !!isLeaf;
  }
  get valueByOption() {
    return this.config.emitPath ? this.pathValues : this.value;
  }
  appendChild(childData) {
    const { childrenData, children } = this;
    const node = new Node(childData, this.config, this);
    if (Array.isArray(childrenData)) {
      childrenData.push(childData);
    } else {
      this.childrenData = [childData];
    }
    children.push(node);
    return node;
  }
  calcText(allLevels, separator) {
    const text = allLevels ? this.pathLabels.join(separator) : this.label;
    this.text = text;
    return text;
  }
  broadcast(event, ...args) {
    const handlerName = `onParent${(0,shared_esm_bundler/* capitalize */.kC)(event)}`;
    this.children.forEach((child) => {
      if (child) {
        child.broadcast(event, ...args);
        child[handlerName] && child[handlerName](...args);
      }
    });
  }
  emit(event, ...args) {
    const { parent } = this;
    const handlerName = `onChild${(0,shared_esm_bundler/* capitalize */.kC)(event)}`;
    if (parent) {
      parent[handlerName] && parent[handlerName](...args);
      parent.emit(event, ...args);
    }
  }
  onParentCheck(checked) {
    if (!this.isDisabled) {
      this.setCheckState(checked);
    }
  }
  onChildCheck() {
    const { children } = this;
    const validChildren = children.filter((child) => !child.isDisabled);
    const checked = validChildren.length ? validChildren.every((child) => child.checked) : false;
    this.setCheckState(checked);
  }
  setCheckState(checked) {
    const totalNum = this.children.length;
    const checkedNum = this.children.reduce((c, p) => {
      const num = p.checked ? 1 : p.indeterminate ? 0.5 : 0;
      return c + num;
    }, 0);
    this.checked = this.loaded && this.children.filter((child) => !child.isDisabled).every((child) => child.loaded && child.checked) && checked;
    this.indeterminate = this.loaded && checkedNum !== totalNum && checkedNum > 0;
  }
  doCheck(checked) {
    if (this.checked === checked)
      return;
    const { checkStrictly, multiple } = this.config;
    if (checkStrictly || !multiple) {
      this.checked = checked;
    } else {
      this.broadcast("check", checked);
      this.setCheckState(checked);
      this.emit("check");
    }
  }
}


//# sourceMappingURL=node.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/cascader-panel/src/store.mjs



const flatNodes = (nodes, leafOnly) => {
  return nodes.reduce((res, node) => {
    if (node.isLeaf) {
      res.push(node);
    } else {
      !leafOnly && res.push(node);
      res = res.concat(flatNodes(node.children, leafOnly));
    }
    return res;
  }, []);
};
class Store {
  constructor(data, config) {
    this.config = config;
    const nodes = (data || []).map((nodeData) => new Node(nodeData, this.config));
    this.nodes = nodes;
    this.allNodes = flatNodes(nodes, false);
    this.leafNodes = flatNodes(nodes, true);
  }
  getNodes() {
    return this.nodes;
  }
  getFlattedNodes(leafOnly) {
    return leafOnly ? this.leafNodes : this.allNodes;
  }
  appendNode(nodeData, parentNode) {
    const node = parentNode ? parentNode.appendChild(nodeData) : new Node(nodeData, this.config);
    if (!parentNode)
      this.nodes.push(node);
    this.allNodes.push(node);
    node.isLeaf && this.leafNodes.push(node);
  }
  appendNodes(nodeDataList, parentNode) {
    nodeDataList.forEach((nodeData) => this.appendNode(nodeData, parentNode));
  }
  getNodeByValue(value, leafOnly = false) {
    if (!value && value !== 0)
      return null;
    const node = this.getFlattedNodes(leafOnly).find((node2) => (0,isEqual/* default */.Z)(node2.value, value) || (0,isEqual/* default */.Z)(node2.pathValues, value));
    return node || null;
  }
  getSameNode(node) {
    if (!node)
      return null;
    const node_ = this.getFlattedNodes(false).find(({ value, level }) => (0,isEqual/* default */.Z)(node.value, value) && node.level === level);
    return node_ || null;
  }
}


//# sourceMappingURL=store.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/cascader-panel/src/config.mjs




const CommonProps = {
  modelValue: [Number, String, Array],
  options: {
    type: Array,
    default: () => []
  },
  props: {
    type: Object,
    default: () => ({})
  }
};
const DefaultProps = {
  expandTrigger: node_ExpandTrigger.CLICK,
  multiple: false,
  checkStrictly: false,
  emitPath: true,
  lazy: false,
  lazyLoad: shared_esm_bundler/* NOOP */.dG,
  value: "value",
  label: "label",
  children: "children",
  leaf: "leaf",
  disabled: "disabled",
  hoverThreshold: 500
};
const useCascaderConfig = (props) => {
  return (0,external_Vue_.computed)(() => ({
    ...DefaultProps,
    ...props.props
  }));
};


//# sourceMappingURL=config.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/utils/dom/aria.mjs
const FOCUSABLE_ELEMENT_SELECTORS = `a[href],button:not([disabled]),button:not([hidden]),:not([tabindex="-1"]),input:not([disabled]),input:not([type="hidden"]),select:not([disabled]),textarea:not([disabled])`;
const isVisible = (element) => {
  if (false)
    {}
  const computed = getComputedStyle(element);
  return computed.position === "fixed" ? false : element.offsetParent !== null;
};
const aria_obtainAllFocusableElements = (element) => {
  return Array.from(element.querySelectorAll(FOCUSABLE_ELEMENT_SELECTORS)).filter((item) => isFocusable(item) && isVisible(item));
};
const isFocusable = (element) => {
  if (element.tabIndex > 0 || element.tabIndex === 0 && element.getAttribute("tabIndex") !== null) {
    return true;
  }
  if (element.disabled) {
    return false;
  }
  switch (element.nodeName) {
    case "A": {
      return !!element.href && element.rel !== "ignore";
    }
    case "INPUT": {
      return !(element.type === "hidden" || element.type === "file");
    }
    case "BUTTON":
    case "SELECT":
    case "TEXTAREA": {
      return true;
    }
    default: {
      return false;
    }
  }
};
const attemptFocus = (element) => {
  var _a;
  if (!isFocusable(element)) {
    return false;
  }
  (_a = element.focus) == null ? void 0 : _a.call(element);
  return document.activeElement === element;
};
const triggerEvent = function(elm, name, ...opts) {
  let eventName;
  if (name.includes("mouse") || name.includes("click")) {
    eventName = "MouseEvents";
  } else if (name.includes("key")) {
    eventName = "KeyboardEvent";
  } else {
    eventName = "HTMLEvents";
  }
  const evt = document.createEvent(eventName);
  evt.initEvent(name, ...opts);
  elm.dispatchEvent(evt);
  return elm;
};
const isLeaf = (el) => !el.getAttribute("aria-owns");
const getSibling = (el, distance, elClass) => {
  const { parentNode } = el;
  if (!parentNode)
    return null;
  const siblings = parentNode.querySelectorAll(elClass);
  const index = Array.prototype.indexOf.call(siblings, el);
  return siblings[index + distance] || null;
};
const focusNode = (el) => {
  if (!el)
    return;
  el.focus();
  !isLeaf(el) && el.click();
};


//# sourceMappingURL=aria.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/cascader-panel/src/utils.mjs



const getMenuIndex = (el) => {
  if (!el)
    return 0;
  const pieces = el.id.split("-");
  return Number(pieces[pieces.length - 2]);
};
const checkNode = (el) => {
  if (!el)
    return;
  const input = el.querySelector("input");
  if (input) {
    input.click();
  } else if (isLeaf(el)) {
    el.click();
  }
};
const sortByOriginalOrder = (oldNodes, newNodes) => {
  const newNodesCopy = newNodes.slice(0);
  const newIds = newNodesCopy.map((node) => node.uid);
  const res = oldNodes.reduce((acc, item) => {
    const index = newIds.indexOf(item.uid);
    if (index > -1) {
      acc.push(item);
      newNodesCopy.splice(index, 1);
      newIds.splice(index, 1);
    }
    return acc;
  }, []);
  res.push(...newNodesCopy);
  return res;
};


//# sourceMappingURL=utils.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/utils/arrays.mjs


const unique = (arr) => [...new Set(arr)];
const castArray = (arr) => {
  if (!arr && arr !== 0)
    return [];
  return Array.isArray(arr) ? arr : [arr];
};


//# sourceMappingURL=arrays.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/cascader-panel/src/index.mjs





















const src_sfc_main = (0,external_Vue_.defineComponent)({
  name: "ElCascaderPanel",
  components: {
    ElCascaderMenu: ElCascaderMenu
  },
  props: {
    ...CommonProps,
    border: {
      type: Boolean,
      default: true
    },
    renderLabel: Function
  },
  emits: [constants_event/* UPDATE_MODEL_EVENT */.f_, constants_event/* CHANGE_EVENT */.O7, "close", "expand-change"],
  setup(props, { emit, slots }) {
    let manualChecked = false;
    const ns = (0,use_namespace/* useNamespace */.s)("cascader");
    const config = useCascaderConfig(props);
    let store = null;
    const initialLoaded = (0,external_Vue_.ref)(true);
    const menuList = (0,external_Vue_.ref)([]);
    const checkedValue = (0,external_Vue_.ref)(null);
    const menus = (0,external_Vue_.ref)([]);
    const expandingNode = (0,external_Vue_.ref)(null);
    const checkedNodes = (0,external_Vue_.ref)([]);
    const isHoverMenu = (0,external_Vue_.computed)(() => config.value.expandTrigger === node_ExpandTrigger.HOVER);
    const renderLabelFn = (0,external_Vue_.computed)(() => props.renderLabel || slots.default);
    const initStore = () => {
      const { options } = props;
      const cfg = config.value;
      manualChecked = false;
      store = new Store(options, cfg);
      menus.value = [store.getNodes()];
      if (cfg.lazy && (0,types/* isEmpty */.xb)(props.options)) {
        initialLoaded.value = false;
        lazyLoad(void 0, (list) => {
          if (list) {
            store = new Store(list, cfg);
            menus.value = [store.getNodes()];
          }
          initialLoaded.value = true;
          syncCheckedValue(false, true);
        });
      } else {
        syncCheckedValue(false, true);
      }
    };
    const lazyLoad = (node, cb) => {
      const cfg = config.value;
      node = node || new Node({}, cfg, void 0, true);
      node.loading = true;
      const resolve = (dataList) => {
        const _node = node;
        const parent = _node.root ? null : _node;
        dataList && (store == null ? void 0 : store.appendNodes(dataList, parent));
        _node.loading = false;
        _node.loaded = true;
        _node.childrenData = _node.childrenData || [];
        cb && cb(dataList);
      };
      cfg.lazyLoad(node, resolve);
    };
    const expandNode = (node, silent) => {
      var _a;
      const { level } = node;
      const newMenus = menus.value.slice(0, level);
      let newExpandingNode;
      if (node.isLeaf) {
        newExpandingNode = node.pathNodes[level - 2];
      } else {
        newExpandingNode = node;
        newMenus.push(node.children);
      }
      if (((_a = expandingNode.value) == null ? void 0 : _a.uid) !== (newExpandingNode == null ? void 0 : newExpandingNode.uid)) {
        expandingNode.value = node;
        menus.value = newMenus;
        !silent && emit("expand-change", (node == null ? void 0 : node.pathValues) || []);
      }
    };
    const handleCheckChange = (node, checked, emitClose = true) => {
      const { checkStrictly, multiple } = config.value;
      const oldNode = checkedNodes.value[0];
      manualChecked = true;
      !multiple && (oldNode == null ? void 0 : oldNode.doCheck(false));
      node.doCheck(checked);
      calculateCheckedValue();
      emitClose && !multiple && !checkStrictly && emit("close");
      !emitClose && !multiple && !checkStrictly && expandParentNode(node);
    };
    const expandParentNode = (node) => {
      if (!node)
        return;
      node = node.parent;
      expandParentNode(node);
      node && expandNode(node);
    };
    const getFlattedNodes = (leafOnly) => {
      return store == null ? void 0 : store.getFlattedNodes(leafOnly);
    };
    const getCheckedNodes = (leafOnly) => {
      var _a;
      return (_a = getFlattedNodes(leafOnly)) == null ? void 0 : _a.filter((node) => node.checked !== false);
    };
    const clearCheckedNodes = () => {
      checkedNodes.value.forEach((node) => node.doCheck(false));
      calculateCheckedValue();
    };
    const calculateCheckedValue = () => {
      var _a;
      const { checkStrictly, multiple } = config.value;
      const oldNodes = checkedNodes.value;
      const newNodes = getCheckedNodes(!checkStrictly);
      const nodes = sortByOriginalOrder(oldNodes, newNodes);
      const values = nodes.map((node) => node.valueByOption);
      checkedNodes.value = nodes;
      checkedValue.value = multiple ? values : (_a = values[0]) != null ? _a : null;
    };
    const syncCheckedValue = (loaded = false, forced = false) => {
      const { modelValue } = props;
      const { lazy, multiple, checkStrictly } = config.value;
      const leafOnly = !checkStrictly;
      if (!initialLoaded.value || manualChecked || !forced && (0,isEqual/* default */.Z)(modelValue, checkedValue.value))
        return;
      if (lazy && !loaded) {
        const values = unique((0,flattenDeep/* default */.Z)(castArray(modelValue)));
        const nodes = values.map((val) => store == null ? void 0 : store.getNodeByValue(val)).filter((node) => !!node && !node.loaded && !node.loading);
        if (nodes.length) {
          nodes.forEach((node) => {
            lazyLoad(node, () => syncCheckedValue(false, forced));
          });
        } else {
          syncCheckedValue(true, forced);
        }
      } else {
        const values = multiple ? castArray(modelValue) : [modelValue];
        const nodes = unique(values.map((val) => store == null ? void 0 : store.getNodeByValue(val, leafOnly)));
        syncMenuState(nodes, false);
        checkedValue.value = modelValue;
      }
    };
    const syncMenuState = (newCheckedNodes, reserveExpandingState = true) => {
      const { checkStrictly } = config.value;
      const oldNodes = checkedNodes.value;
      const newNodes = newCheckedNodes.filter((node) => !!node && (checkStrictly || node.isLeaf));
      const oldExpandingNode = store == null ? void 0 : store.getSameNode(expandingNode.value);
      const newExpandingNode = reserveExpandingState && oldExpandingNode || newNodes[0];
      if (newExpandingNode) {
        newExpandingNode.pathNodes.forEach((node) => expandNode(node, true));
      } else {
        expandingNode.value = null;
      }
      oldNodes.forEach((node) => node.doCheck(false));
      newNodes.forEach((node) => node.doCheck(true));
      checkedNodes.value = newNodes;
      (0,external_Vue_.nextTick)(scrollToExpandingNode);
    };
    const scrollToExpandingNode = () => {
      if (!shared/* isClient */.C5)
        return;
      menuList.value.forEach((menu) => {
        const menuElement = menu == null ? void 0 : menu.$el;
        if (menuElement) {
          const container = menuElement.querySelector(`.${ns.namespace.value}-scrollbar__wrap`);
          const activeNode = menuElement.querySelector(`.${ns.b("node")}.${ns.is("active")}`) || menuElement.querySelector(`.${ns.b("node")}.in-active-path`);
          scrollIntoView(container, activeNode);
        }
      });
    };
    const handleKeyDown = (e) => {
      const target = e.target;
      const { code } = e;
      switch (code) {
        case aria_EVENT_CODE.up:
        case aria_EVENT_CODE.down: {
          e.preventDefault();
          const distance = code === aria_EVENT_CODE.up ? -1 : 1;
          focusNode(getSibling(target, distance, `.${ns.b("node")}[tabindex="-1"]`));
          break;
        }
        case aria_EVENT_CODE.left: {
          e.preventDefault();
          const preMenu = menuList.value[getMenuIndex(target) - 1];
          const expandedNode = preMenu == null ? void 0 : preMenu.$el.querySelector(`.${ns.b("node")}[aria-expanded="true"]`);
          focusNode(expandedNode);
          break;
        }
        case aria_EVENT_CODE.right: {
          e.preventDefault();
          const nextMenu = menuList.value[getMenuIndex(target) + 1];
          const firstNode = nextMenu == null ? void 0 : nextMenu.$el.querySelector(`.${ns.b("node")}[tabindex="-1"]`);
          focusNode(firstNode);
          break;
        }
        case aria_EVENT_CODE.enter:
          checkNode(target);
          break;
      }
    };
    (0,external_Vue_.provide)(CASCADER_PANEL_INJECTION_KEY, (0,external_Vue_.reactive)({
      config,
      expandingNode,
      checkedNodes,
      isHoverMenu,
      initialLoaded,
      renderLabelFn,
      lazyLoad,
      expandNode,
      handleCheckChange
    }));
    (0,external_Vue_.watch)([config, () => props.options], initStore, {
      deep: true,
      immediate: true
    });
    (0,external_Vue_.watch)(() => props.modelValue, () => {
      manualChecked = false;
      syncCheckedValue();
    });
    (0,external_Vue_.watch)(checkedValue, (val) => {
      if (!(0,isEqual/* default */.Z)(val, props.modelValue)) {
        emit(constants_event/* UPDATE_MODEL_EVENT */.f_, val);
        emit(constants_event/* CHANGE_EVENT */.O7, val);
      }
    });
    (0,external_Vue_.onBeforeUpdate)(() => menuList.value = []);
    (0,external_Vue_.onMounted)(() => !(0,types/* isEmpty */.xb)(props.modelValue) && syncCheckedValue());
    return {
      ns,
      menuList,
      menus,
      checkedNodes,
      handleKeyDown,
      handleCheckChange,
      getFlattedNodes,
      getCheckedNodes,
      clearCheckedNodes,
      calculateCheckedValue,
      scrollToExpandingNode
    };
  }
});
function src_sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_el_cascader_menu = (0,external_Vue_.resolveComponent)("el-cascader-menu");
  return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
    class: (0,external_Vue_.normalizeClass)([_ctx.ns.b("panel"), _ctx.ns.is("bordered", _ctx.border)]),
    onKeydown: _cache[0] || (_cache[0] = (...args) => _ctx.handleKeyDown && _ctx.handleKeyDown(...args))
  }, [
    ((0,external_Vue_.openBlock)(true), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, null, (0,external_Vue_.renderList)(_ctx.menus, (menu, index) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(_component_el_cascader_menu, {
        key: index,
        ref_for: true,
        ref: (item) => _ctx.menuList[index] = item,
        index,
        nodes: [...menu]
      }, null, 8, ["index", "nodes"]);
    }), 128))
  ], 34);
}
var CascaderPanel = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(src_sfc_main, [["render", src_sfc_render], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/cascader-panel/src/index.vue"]]);


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/cascader-panel/index.mjs




CascaderPanel.install = (app) => {
  app.component(CascaderPanel.name, CascaderPanel);
};
const _CascaderPanel = CascaderPanel;
const ElCascaderPanel = _CascaderPanel;


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/tag/src/tag.mjs





const tagProps = (0,runtime/* buildProps */.o8)({
  closable: Boolean,
  type: {
    type: String,
    values: ["success", "info", "warning", "danger", ""],
    default: ""
  },
  hit: Boolean,
  disableTransitions: Boolean,
  color: {
    type: String,
    default: ""
  },
  size: {
    type: String,
    values: constants_size/* componentSizes */.k,
    default: ""
  },
  effect: {
    type: String,
    values: ["dark", "light", "plain"],
    default: "light"
  },
  round: Boolean
});
const tagEmits = {
  close: (evt) => evt instanceof MouseEvent,
  click: (evt) => evt instanceof MouseEvent
};


//# sourceMappingURL=tag.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/tag/src/tag2.mjs









const tag2_default_ = {
  name: "ElTag"
};
const tag2_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...tag2_default_,
  props: tagProps,
  emits: tagEmits,
  setup(__props, { emit }) {
    const props = __props;
    const tagSize = (0,use_common_props/* useSize */.tH)();
    const ns = (0,use_namespace/* useNamespace */.s)("tag");
    const classes = (0,external_Vue_.computed)(() => {
      const { type, hit, effect, closable, round } = props;
      return [
        ns.b(),
        ns.is("closable", closable),
        ns.m(type),
        ns.m(tagSize.value),
        ns.m(effect),
        ns.is("hit", hit),
        ns.is("round", round)
      ];
    });
    const handleClose = (event) => {
      emit("close", event);
    };
    const handleClick = (event) => {
      emit("click", event);
    };
    return (_ctx, _cache) => {
      return _ctx.disableTransitions ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("span", {
        key: 0,
        class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(classes)),
        style: (0,external_Vue_.normalizeStyle)({ backgroundColor: _ctx.color }),
        onClick: handleClick
      }, [
        (0,external_Vue_.createElementVNode)("span", {
          class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("content"))
        }, [
          (0,external_Vue_.renderSlot)(_ctx.$slots, "default")
        ], 2),
        _ctx.closable ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.unref)(components_icon/* ElIcon */.gn), {
          key: 0,
          class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("close")),
          onClick: (0,external_Vue_.withModifiers)(handleClose, ["stop"])
        }, {
          default: (0,external_Vue_.withCtx)(() => [
            (0,external_Vue_.createVNode)((0,external_Vue_.unref)(dist/* Close */.x8P))
          ]),
          _: 1
        }, 8, ["class", "onClick"])) : (0,external_Vue_.createCommentVNode)("v-if", true)
      ], 6)) : ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(external_Vue_.Transition, {
        key: 1,
        name: `${(0,external_Vue_.unref)(ns).namespace.value}-zoom-in-center`,
        appear: ""
      }, {
        default: (0,external_Vue_.withCtx)(() => [
          (0,external_Vue_.createElementVNode)("span", {
            class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(classes)),
            style: (0,external_Vue_.normalizeStyle)({ backgroundColor: _ctx.color }),
            onClick: handleClick
          }, [
            (0,external_Vue_.createElementVNode)("span", {
              class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("content"))
            }, [
              (0,external_Vue_.renderSlot)(_ctx.$slots, "default")
            ], 2),
            _ctx.closable ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.unref)(components_icon/* ElIcon */.gn), {
              key: 0,
              class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("close")),
              onClick: (0,external_Vue_.withModifiers)(handleClose, ["stop"])
            }, {
              default: (0,external_Vue_.withCtx)(() => [
                (0,external_Vue_.createVNode)((0,external_Vue_.unref)(dist/* Close */.x8P))
              ]),
              _: 1
            }, 8, ["class", "onClick"])) : (0,external_Vue_.createCommentVNode)("v-if", true)
          ], 6)
        ]),
        _: 3
      }, 8, ["name"]));
    };
  }
});
var Tag = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(tag2_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/tag/src/tag.vue"]]);


//# sourceMappingURL=tag2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/tag/index.mjs





const ElTag = (0,install/* withInstall */.nz)(Tag);


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/directives/click-outside/index.mjs




const nodeList = /* @__PURE__ */ new Map();
let startClick;
if (shared/* isClient */.C5) {
  document.addEventListener("mousedown", (e) => startClick = e);
  document.addEventListener("mouseup", (e) => {
    for (const handlers of nodeList.values()) {
      for (const { documentHandler } of handlers) {
        documentHandler(e, startClick);
      }
    }
  });
}
function createDocumentHandler(el, binding) {
  let excludes = [];
  if (Array.isArray(binding.arg)) {
    excludes = binding.arg;
  } else if ((0,types/* isElement */.kK)(binding.arg)) {
    excludes.push(binding.arg);
  }
  return function(mouseup, mousedown) {
    const popperRef = binding.instance.popperRef;
    const mouseUpTarget = mouseup.target;
    const mouseDownTarget = mousedown == null ? void 0 : mousedown.target;
    const isBound = !binding || !binding.instance;
    const isTargetExists = !mouseUpTarget || !mouseDownTarget;
    const isContainedByEl = el.contains(mouseUpTarget) || el.contains(mouseDownTarget);
    const isSelf = el === mouseUpTarget;
    const isTargetExcluded = excludes.length && excludes.some((item) => item == null ? void 0 : item.contains(mouseUpTarget)) || excludes.length && excludes.includes(mouseDownTarget);
    const isContainedByPopper = popperRef && (popperRef.contains(mouseUpTarget) || popperRef.contains(mouseDownTarget));
    if (isBound || isTargetExists || isContainedByEl || isSelf || isTargetExcluded || isContainedByPopper) {
      return;
    }
    binding.value(mouseup, mousedown);
  };
}
const ClickOutside = {
  beforeMount(el, binding) {
    if (!nodeList.has(el)) {
      nodeList.set(el, []);
    }
    nodeList.get(el).push({
      documentHandler: createDocumentHandler(el, binding),
      bindingFn: binding.value
    });
  },
  updated(el, binding) {
    if (!nodeList.has(el)) {
      nodeList.set(el, []);
    }
    const handlers = nodeList.get(el);
    const oldHandlerIndex = handlers.findIndex((item) => item.bindingFn === binding.oldValue);
    const newHandler = {
      documentHandler: createDocumentHandler(el, binding),
      bindingFn: binding.value
    };
    if (oldHandlerIndex >= 0) {
      handlers.splice(oldHandlerIndex, 1, newHandler);
    } else {
      handlers.push(newHandler);
    }
  },
  unmounted(el) {
    nodeList.delete(el);
  }
};


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/utils/vue/validator.mjs




const isValidComponentSize = (val) => ["", ...constants_size/* componentSizes */.k].includes(val);
const isValidDatePickType = (val) => [...datePickTypes].includes(val);


//# sourceMappingURL=validator.mjs.map

// EXTERNAL MODULE: ./node_modules/element-plus/es/utils/i18n.mjs
var i18n = __webpack_require__(62746);
;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/cascader/src/index.mjs
































const DEFAULT_INPUT_HEIGHT = 40;
const INPUT_HEIGHT_MAP = {
  large: 36,
  default: 32,
  small: 28
};
const popperOptions = {
  modifiers: [
    {
      name: "arrowPosition",
      enabled: true,
      phase: "main",
      fn: ({ state }) => {
        const { modifiersData, placement } = state;
        if (["right", "left", "bottom", "top"].includes(placement))
          return;
        modifiersData.arrow.x = 35;
      },
      requires: ["arrow"]
    }
  ]
};
const COMPONENT_NAME = "ElCascader";
const cascader_src_sfc_main = (0,external_Vue_.defineComponent)({
  name: COMPONENT_NAME,
  components: {
    ElCascaderPanel: _CascaderPanel,
    ElInput: components_input/* ElInput */.EZ,
    ElTooltip: ElTooltip,
    ElScrollbar: ElScrollbar,
    ElTag: ElTag,
    ElIcon: components_icon/* ElIcon */.gn,
    CircleClose: dist/* CircleClose */.K41,
    Check: dist/* Check */.JrY,
    ArrowDown: dist/* ArrowDown */.K5e
  },
  directives: {
    Clickoutside: ClickOutside
  },
  props: {
    ...CommonProps,
    size: {
      type: String,
      validator: isValidComponentSize
    },
    placeholder: {
      type: String
    },
    disabled: Boolean,
    clearable: Boolean,
    filterable: Boolean,
    filterMethod: {
      type: Function,
      default: (node, keyword) => node.text.includes(keyword)
    },
    separator: {
      type: String,
      default: " / "
    },
    showAllLevels: {
      type: Boolean,
      default: true
    },
    collapseTags: Boolean,
    collapseTagsTooltip: {
      type: Boolean,
      default: false
    },
    debounce: {
      type: Number,
      default: 300
    },
    beforeFilter: {
      type: Function,
      default: () => true
    },
    popperClass: {
      type: String,
      default: ""
    },
    teleported: useTooltipContentProps.teleported,
    tagType: { ...tagProps.type, default: "info" }
  },
  emits: [
    constants_event/* UPDATE_MODEL_EVENT */.f_,
    constants_event/* CHANGE_EVENT */.O7,
    "focus",
    "blur",
    "visible-change",
    "expand-change",
    "remove-tag"
  ],
  setup(props, { emit }) {
    let inputInitialHeight = 0;
    let pressDeleteCount = 0;
    const nsCascader = (0,use_namespace/* useNamespace */.s)("cascader");
    const nsInput = (0,use_namespace/* useNamespace */.s)("input");
    const { t } = useLocale();
    const elForm = (0,external_Vue_.inject)(tokens_form/* formContextKey */.H, {});
    const elFormItem = (0,external_Vue_.inject)(tokens_form/* formItemContextKey */.K, {});
    const tooltipRef = (0,external_Vue_.ref)(null);
    const input = (0,external_Vue_.ref)(null);
    const tagWrapper = (0,external_Vue_.ref)(null);
    const panel = (0,external_Vue_.ref)(null);
    const suggestionPanel = (0,external_Vue_.ref)(null);
    const popperVisible = (0,external_Vue_.ref)(false);
    const inputHover = (0,external_Vue_.ref)(false);
    const filtering = (0,external_Vue_.ref)(false);
    const inputValue = (0,external_Vue_.ref)("");
    const searchInputValue = (0,external_Vue_.ref)("");
    const presentTags = (0,external_Vue_.ref)([]);
    const allPresentTags = (0,external_Vue_.ref)([]);
    const suggestions = (0,external_Vue_.ref)([]);
    const isOnComposition = (0,external_Vue_.ref)(false);
    const isDisabled = (0,external_Vue_.computed)(() => props.disabled || elForm.disabled);
    const inputPlaceholder = (0,external_Vue_.computed)(() => props.placeholder || t("el.cascader.placeholder"));
    const realSize = (0,use_common_props/* useSize */.tH)();
    const tagSize = (0,external_Vue_.computed)(() => ["small"].includes(realSize.value) ? "small" : "default");
    const multiple = (0,external_Vue_.computed)(() => !!props.props.multiple);
    const readonly = (0,external_Vue_.computed)(() => !props.filterable || multiple.value);
    const searchKeyword = (0,external_Vue_.computed)(() => multiple.value ? searchInputValue.value : inputValue.value);
    const checkedNodes = (0,external_Vue_.computed)(() => {
      var _a;
      return ((_a = panel.value) == null ? void 0 : _a.checkedNodes) || [];
    });
    const clearBtnVisible = (0,external_Vue_.computed)(() => {
      if (!props.clearable || isDisabled.value || filtering.value || !inputHover.value)
        return false;
      return !!checkedNodes.value.length;
    });
    const presentText = (0,external_Vue_.computed)(() => {
      const { showAllLevels, separator } = props;
      const nodes = checkedNodes.value;
      return nodes.length ? multiple.value ? " " : nodes[0].calcText(showAllLevels, separator) : "";
    });
    const checkedValue = (0,external_Vue_.computed)({
      get() {
        return props.modelValue;
      },
      set(val) {
        var _a;
        emit(constants_event/* UPDATE_MODEL_EVENT */.f_, val);
        emit(constants_event/* CHANGE_EVENT */.O7, val);
        (_a = elFormItem.validate) == null ? void 0 : _a.call(elFormItem, "change").catch((err) => (0,error/* debugWarn */.N)(err));
      }
    });
    const popperPaneRef = (0,external_Vue_.computed)(() => {
      var _a, _b;
      return (_b = (_a = tooltipRef.value) == null ? void 0 : _a.popperRef) == null ? void 0 : _b.contentRef;
    });
    const togglePopperVisible = (visible) => {
      var _a, _b, _c;
      if (isDisabled.value)
        return;
      visible = visible != null ? visible : !popperVisible.value;
      if (visible !== popperVisible.value) {
        popperVisible.value = visible;
        (_b = (_a = input.value) == null ? void 0 : _a.input) == null ? void 0 : _b.setAttribute("aria-expanded", `${visible}`);
        if (visible) {
          updatePopperPosition();
          (0,external_Vue_.nextTick)((_c = panel.value) == null ? void 0 : _c.scrollToExpandingNode);
        } else if (props.filterable) {
          const { value } = presentText;
          inputValue.value = value;
          searchInputValue.value = value;
        }
        emit("visible-change", visible);
      }
    };
    const updatePopperPosition = () => {
      (0,external_Vue_.nextTick)(() => {
        var _a;
        (_a = tooltipRef.value) == null ? void 0 : _a.updatePopper();
      });
    };
    const hideSuggestionPanel = () => {
      filtering.value = false;
    };
    const genTag = (node) => {
      const { showAllLevels, separator } = props;
      return {
        node,
        key: node.uid,
        text: node.calcText(showAllLevels, separator),
        hitState: false,
        closable: !isDisabled.value && !node.isDisabled,
        isCollapseTag: false
      };
    };
    const deleteTag = (tag) => {
      var _a;
      const node = tag.node;
      node.doCheck(false);
      (_a = panel.value) == null ? void 0 : _a.calculateCheckedValue();
      emit("remove-tag", node.valueByOption);
    };
    const calculatePresentTags = () => {
      if (!multiple.value)
        return;
      const nodes = checkedNodes.value;
      const tags = [];
      const allTags = [];
      nodes.forEach((node) => allTags.push(genTag(node)));
      allPresentTags.value = allTags;
      if (nodes.length) {
        const [first, ...rest] = nodes;
        const restCount = rest.length;
        tags.push(genTag(first));
        if (restCount) {
          if (props.collapseTags) {
            tags.push({
              key: -1,
              text: `+ ${restCount}`,
              closable: false,
              isCollapseTag: true
            });
          } else {
            rest.forEach((node) => tags.push(genTag(node)));
          }
        }
      }
      presentTags.value = tags;
    };
    const calculateSuggestions = () => {
      var _a, _b;
      const { filterMethod, showAllLevels, separator } = props;
      const res = (_b = (_a = panel.value) == null ? void 0 : _a.getFlattedNodes(!props.props.checkStrictly)) == null ? void 0 : _b.filter((node) => {
        if (node.isDisabled)
          return false;
        node.calcText(showAllLevels, separator);
        return filterMethod(node, searchKeyword.value);
      });
      if (multiple.value) {
        presentTags.value.forEach((tag) => {
          tag.hitState = false;
        });
        allPresentTags.value.forEach((tag) => {
          tag.hitState = false;
        });
      }
      filtering.value = true;
      suggestions.value = res;
      updatePopperPosition();
    };
    const focusFirstNode = () => {
      var _a;
      let firstNode;
      if (filtering.value && suggestionPanel.value) {
        firstNode = suggestionPanel.value.$el.querySelector(`.${nsCascader.e("suggestion-item")}`);
      } else {
        firstNode = (_a = panel.value) == null ? void 0 : _a.$el.querySelector(`.${nsCascader.b("node")}[tabindex="-1"]`);
      }
      if (firstNode) {
        firstNode.focus();
        !filtering.value && firstNode.click();
      }
    };
    const updateStyle = () => {
      var _a, _b;
      const inputInner = (_a = input.value) == null ? void 0 : _a.input;
      const tagWrapperEl = tagWrapper.value;
      const suggestionPanelEl = (_b = suggestionPanel.value) == null ? void 0 : _b.$el;
      if (!shared/* isClient */.C5 || !inputInner)
        return;
      if (suggestionPanelEl) {
        const suggestionList = suggestionPanelEl.querySelector(`.${nsCascader.e("suggestion-list")}`);
        suggestionList.style.minWidth = `${inputInner.offsetWidth}px`;
      }
      if (tagWrapperEl) {
        const { offsetHeight } = tagWrapperEl;
        const height = presentTags.value.length > 0 ? `${Math.max(offsetHeight + 6, inputInitialHeight)}px` : `${inputInitialHeight}px`;
        inputInner.style.height = height;
        updatePopperPosition();
      }
    };
    const getCheckedNodes = (leafOnly) => {
      var _a;
      return (_a = panel.value) == null ? void 0 : _a.getCheckedNodes(leafOnly);
    };
    const handleExpandChange = (value) => {
      updatePopperPosition();
      emit("expand-change", value);
    };
    const handleComposition = (event) => {
      var _a;
      const text = (_a = event.target) == null ? void 0 : _a.value;
      if (event.type === "compositionend") {
        isOnComposition.value = false;
        (0,external_Vue_.nextTick)(() => handleInput(text));
      } else {
        const lastCharacter = text[text.length - 1] || "";
        isOnComposition.value = !(0,i18n/* isKorean */.w)(lastCharacter);
      }
    };
    const handleKeyDown = (e) => {
      if (isOnComposition.value)
        return;
      switch (e.code) {
        case aria_EVENT_CODE.enter:
          togglePopperVisible();
          break;
        case aria_EVENT_CODE.down:
          togglePopperVisible(true);
          (0,external_Vue_.nextTick)(focusFirstNode);
          e.preventDefault();
          break;
        case aria_EVENT_CODE.esc:
          if (popperVisible.value === true) {
            e.preventDefault();
            e.stopPropagation();
            togglePopperVisible(false);
          }
          break;
        case aria_EVENT_CODE.tab:
          togglePopperVisible(false);
          break;
      }
    };
    const handleClear = () => {
      var _a;
      (_a = panel.value) == null ? void 0 : _a.clearCheckedNodes();
      togglePopperVisible(false);
    };
    const handleSuggestionClick = (node) => {
      var _a, _b;
      const { checked } = node;
      if (multiple.value) {
        (_a = panel.value) == null ? void 0 : _a.handleCheckChange(node, !checked, false);
      } else {
        !checked && ((_b = panel.value) == null ? void 0 : _b.handleCheckChange(node, true, false));
        togglePopperVisible(false);
      }
    };
    const handleSuggestionKeyDown = (e) => {
      const target = e.target;
      const { code } = e;
      switch (code) {
        case aria_EVENT_CODE.up:
        case aria_EVENT_CODE.down: {
          const distance = code === aria_EVENT_CODE.up ? -1 : 1;
          focusNode(getSibling(target, distance, `.${nsCascader.e("suggestion-item")}[tabindex="-1"]`));
          break;
        }
        case aria_EVENT_CODE.enter:
          target.click();
          break;
      }
    };
    const handleDelete = () => {
      const tags = presentTags.value;
      const lastTag = tags[tags.length - 1];
      pressDeleteCount = searchInputValue.value ? 0 : pressDeleteCount + 1;
      if (!lastTag || !pressDeleteCount)
        return;
      if (lastTag.hitState) {
        deleteTag(lastTag);
      } else {
        lastTag.hitState = true;
      }
    };
    const handleFilter = (0,debounce/* default */.Z)(() => {
      const { value } = searchKeyword;
      if (!value)
        return;
      const passed = props.beforeFilter(value);
      if ((0,shared_esm_bundler/* isPromise */.tI)(passed)) {
        passed.then(calculateSuggestions).catch(() => {
        });
      } else if (passed !== false) {
        calculateSuggestions();
      } else {
        hideSuggestionPanel();
      }
    }, props.debounce);
    const handleInput = (val, e) => {
      !popperVisible.value && togglePopperVisible(true);
      if (e == null ? void 0 : e.isComposing)
        return;
      val ? handleFilter() : hideSuggestionPanel();
    };
    (0,external_Vue_.watch)(filtering, updatePopperPosition);
    (0,external_Vue_.watch)([checkedNodes, isDisabled], calculatePresentTags);
    (0,external_Vue_.watch)(presentTags, () => {
      (0,external_Vue_.nextTick)(() => updateStyle());
    });
    (0,external_Vue_.watch)(presentText, (val) => inputValue.value = val, { immediate: true });
    (0,external_Vue_.onMounted)(() => {
      var _a;
      const inputEl = (_a = input.value) == null ? void 0 : _a.$el;
      inputInitialHeight = (inputEl == null ? void 0 : inputEl.offsetHeight) || INPUT_HEIGHT_MAP[realSize.value] || DEFAULT_INPUT_HEIGHT;
      (0,core/* useResizeObserver */.yU7)(inputEl, updateStyle);
    });
    return {
      popperOptions,
      tooltipRef,
      popperPaneRef,
      input,
      tagWrapper,
      panel,
      suggestionPanel,
      popperVisible,
      inputHover,
      inputPlaceholder,
      filtering,
      presentText,
      checkedValue,
      inputValue,
      searchInputValue,
      presentTags,
      allPresentTags,
      suggestions,
      isDisabled,
      isOnComposition,
      realSize,
      tagSize,
      multiple,
      readonly,
      clearBtnVisible,
      nsCascader,
      nsInput,
      t,
      togglePopperVisible,
      hideSuggestionPanel,
      deleteTag,
      focusFirstNode,
      getCheckedNodes,
      handleExpandChange,
      handleKeyDown,
      handleComposition,
      handleClear,
      handleSuggestionClick,
      handleSuggestionKeyDown,
      handleDelete,
      handleInput
    };
  }
});
const src_hoisted_1 = { key: 0 };
const src_hoisted_2 = { class: "el-cascader__collapse-tags" };
const src_hoisted_3 = ["placeholder"];
const _hoisted_4 = ["onClick"];
function cascader_src_sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_circle_close = (0,external_Vue_.resolveComponent)("circle-close");
  const _component_el_icon = (0,external_Vue_.resolveComponent)("el-icon");
  const _component_arrow_down = (0,external_Vue_.resolveComponent)("arrow-down");
  const _component_el_input = (0,external_Vue_.resolveComponent)("el-input");
  const _component_el_tag = (0,external_Vue_.resolveComponent)("el-tag");
  const _component_el_tooltip = (0,external_Vue_.resolveComponent)("el-tooltip");
  const _component_el_cascader_panel = (0,external_Vue_.resolveComponent)("el-cascader-panel");
  const _component_check = (0,external_Vue_.resolveComponent)("check");
  const _component_el_scrollbar = (0,external_Vue_.resolveComponent)("el-scrollbar");
  const _directive_clickoutside = (0,external_Vue_.resolveDirective)("clickoutside");
  return (0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(_component_el_tooltip, {
    ref: "tooltipRef",
    visible: _ctx.popperVisible,
    "onUpdate:visible": _cache[17] || (_cache[17] = ($event) => _ctx.popperVisible = $event),
    teleported: _ctx.teleported,
    "popper-class": [_ctx.nsCascader.e("dropdown"), _ctx.popperClass],
    "popper-options": _ctx.popperOptions,
    "fallback-placements": [
      "bottom-start",
      "bottom",
      "top-start",
      "top",
      "right",
      "left"
    ],
    "stop-popper-mouse-event": false,
    "gpu-acceleration": false,
    placement: "bottom-start",
    transition: `${_ctx.nsCascader.namespace.value}-zoom-in-top`,
    effect: "light",
    pure: "",
    persistent: "",
    onHide: _ctx.hideSuggestionPanel
  }, {
    default: (0,external_Vue_.withCtx)(() => [
      (0,external_Vue_.withDirectives)(((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
        class: (0,external_Vue_.normalizeClass)([
          _ctx.nsCascader.b(),
          _ctx.nsCascader.m(_ctx.realSize),
          _ctx.nsCascader.is("disabled", _ctx.isDisabled),
          _ctx.$attrs.class
        ]),
        style: (0,external_Vue_.normalizeStyle)(_ctx.$attrs.style),
        onClick: _cache[11] || (_cache[11] = () => _ctx.togglePopperVisible(_ctx.readonly ? void 0 : true)),
        onKeydown: _cache[12] || (_cache[12] = (...args) => _ctx.handleKeyDown && _ctx.handleKeyDown(...args)),
        onMouseenter: _cache[13] || (_cache[13] = ($event) => _ctx.inputHover = true),
        onMouseleave: _cache[14] || (_cache[14] = ($event) => _ctx.inputHover = false)
      }, [
        (0,external_Vue_.createVNode)(_component_el_input, {
          ref: "input",
          modelValue: _ctx.inputValue,
          "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => _ctx.inputValue = $event),
          placeholder: _ctx.searchInputValue ? "" : _ctx.inputPlaceholder,
          readonly: _ctx.readonly,
          disabled: _ctx.isDisabled,
          "validate-event": false,
          size: _ctx.realSize,
          class: (0,external_Vue_.normalizeClass)(_ctx.nsCascader.is("focus", _ctx.popperVisible)),
          onCompositionstart: _ctx.handleComposition,
          onCompositionupdate: _ctx.handleComposition,
          onCompositionend: _ctx.handleComposition,
          onFocus: _cache[2] || (_cache[2] = (e) => _ctx.$emit("focus", e)),
          onBlur: _cache[3] || (_cache[3] = (e) => _ctx.$emit("blur", e)),
          onInput: _ctx.handleInput
        }, {
          suffix: (0,external_Vue_.withCtx)(() => [
            _ctx.clearBtnVisible ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(_component_el_icon, {
              key: "clear",
              class: (0,external_Vue_.normalizeClass)([_ctx.nsInput.e("icon"), "icon-circle-close"]),
              onClick: (0,external_Vue_.withModifiers)(_ctx.handleClear, ["stop"])
            }, {
              default: (0,external_Vue_.withCtx)(() => [
                (0,external_Vue_.createVNode)(_component_circle_close)
              ]),
              _: 1
            }, 8, ["class", "onClick"])) : ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(_component_el_icon, {
              key: "arrow-down",
              class: (0,external_Vue_.normalizeClass)([
                _ctx.nsInput.e("icon"),
                "icon-arrow-down",
                _ctx.nsCascader.is("reverse", _ctx.popperVisible)
              ]),
              onClick: _cache[0] || (_cache[0] = (0,external_Vue_.withModifiers)(($event) => _ctx.togglePopperVisible(), ["stop"]))
            }, {
              default: (0,external_Vue_.withCtx)(() => [
                (0,external_Vue_.createVNode)(_component_arrow_down)
              ]),
              _: 1
            }, 8, ["class"]))
          ]),
          _: 1
        }, 8, ["modelValue", "placeholder", "readonly", "disabled", "size", "class", "onCompositionstart", "onCompositionupdate", "onCompositionend", "onInput"]),
        _ctx.multiple ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
          key: 0,
          ref: "tagWrapper",
          class: (0,external_Vue_.normalizeClass)(_ctx.nsCascader.e("tags"))
        }, [
          ((0,external_Vue_.openBlock)(true), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, null, (0,external_Vue_.renderList)(_ctx.presentTags, (tag) => {
            return (0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(_component_el_tag, {
              key: tag.key,
              type: _ctx.tagType,
              size: _ctx.tagSize,
              hit: tag.hitState,
              closable: tag.closable,
              "disable-transitions": "",
              onClose: ($event) => _ctx.deleteTag(tag)
            }, {
              default: (0,external_Vue_.withCtx)(() => [
                tag.isCollapseTag === false ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("span", src_hoisted_1, (0,external_Vue_.toDisplayString)(tag.text), 1)) : ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(_component_el_tooltip, {
                  key: 1,
                  teleported: false,
                  disabled: _ctx.popperVisible || !_ctx.collapseTagsTooltip,
                  "fallback-placements": ["bottom", "top", "right", "left"],
                  placement: "bottom",
                  effect: "light"
                }, {
                  default: (0,external_Vue_.withCtx)(() => [
                    (0,external_Vue_.createElementVNode)("span", null, (0,external_Vue_.toDisplayString)(tag.text), 1)
                  ]),
                  content: (0,external_Vue_.withCtx)(() => [
                    (0,external_Vue_.createElementVNode)("div", src_hoisted_2, [
                      ((0,external_Vue_.openBlock)(true), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, null, (0,external_Vue_.renderList)(_ctx.allPresentTags, (tag2, idx) => {
                        return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
                          key: idx,
                          class: "el-cascader__collapse-tag"
                        }, [
                          ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(_component_el_tag, {
                            key: tag2.key,
                            class: "in-tooltip",
                            type: _ctx.tagType,
                            size: _ctx.tagSize,
                            hit: tag2.hitState,
                            closable: tag2.closable,
                            "disable-transitions": "",
                            onClose: ($event) => _ctx.deleteTag(tag2)
                          }, {
                            default: (0,external_Vue_.withCtx)(() => [
                              (0,external_Vue_.createElementVNode)("span", null, (0,external_Vue_.toDisplayString)(tag2.text), 1)
                            ]),
                            _: 2
                          }, 1032, ["type", "size", "hit", "closable", "onClose"]))
                        ]);
                      }), 128))
                    ])
                  ]),
                  _: 2
                }, 1032, ["disabled"]))
              ]),
              _: 2
            }, 1032, ["type", "size", "hit", "closable", "onClose"]);
          }), 128)),
          _ctx.filterable && !_ctx.isDisabled ? (0,external_Vue_.withDirectives)(((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("input", {
            key: 0,
            "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => _ctx.searchInputValue = $event),
            type: "text",
            class: (0,external_Vue_.normalizeClass)(_ctx.nsCascader.e("search-input")),
            placeholder: _ctx.presentText ? "" : _ctx.inputPlaceholder,
            onInput: _cache[5] || (_cache[5] = (e) => _ctx.handleInput(_ctx.searchInputValue, e)),
            onClick: _cache[6] || (_cache[6] = (0,external_Vue_.withModifiers)(($event) => _ctx.togglePopperVisible(true), ["stop"])),
            onKeydown: _cache[7] || (_cache[7] = (0,external_Vue_.withKeys)((...args) => _ctx.handleDelete && _ctx.handleDelete(...args), ["delete"])),
            onCompositionstart: _cache[8] || (_cache[8] = (...args) => _ctx.handleComposition && _ctx.handleComposition(...args)),
            onCompositionupdate: _cache[9] || (_cache[9] = (...args) => _ctx.handleComposition && _ctx.handleComposition(...args)),
            onCompositionend: _cache[10] || (_cache[10] = (...args) => _ctx.handleComposition && _ctx.handleComposition(...args))
          }, null, 42, src_hoisted_3)), [
            [external_Vue_.vModelText, _ctx.searchInputValue]
          ]) : (0,external_Vue_.createCommentVNode)("v-if", true)
        ], 2)) : (0,external_Vue_.createCommentVNode)("v-if", true)
      ], 38)), [
        [_directive_clickoutside, () => _ctx.togglePopperVisible(false), _ctx.popperPaneRef]
      ])
    ]),
    content: (0,external_Vue_.withCtx)(() => [
      (0,external_Vue_.withDirectives)((0,external_Vue_.createVNode)(_component_el_cascader_panel, {
        ref: "panel",
        modelValue: _ctx.checkedValue,
        "onUpdate:modelValue": _cache[15] || (_cache[15] = ($event) => _ctx.checkedValue = $event),
        options: _ctx.options,
        props: _ctx.props,
        border: false,
        "render-label": _ctx.$slots.default,
        onExpandChange: _ctx.handleExpandChange,
        onClose: _cache[16] || (_cache[16] = ($event) => _ctx.$nextTick(() => _ctx.togglePopperVisible(false)))
      }, null, 8, ["modelValue", "options", "props", "render-label", "onExpandChange"]), [
        [external_Vue_.vShow, !_ctx.filtering]
      ]),
      _ctx.filterable ? (0,external_Vue_.withDirectives)(((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(_component_el_scrollbar, {
        key: 0,
        ref: "suggestionPanel",
        tag: "ul",
        class: (0,external_Vue_.normalizeClass)(_ctx.nsCascader.e("suggestion-panel")),
        "view-class": _ctx.nsCascader.e("suggestion-list"),
        onKeydown: _ctx.handleSuggestionKeyDown
      }, {
        default: (0,external_Vue_.withCtx)(() => [
          _ctx.suggestions.length ? ((0,external_Vue_.openBlock)(true), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, { key: 0 }, (0,external_Vue_.renderList)(_ctx.suggestions, (item) => {
            return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("li", {
              key: item.uid,
              class: (0,external_Vue_.normalizeClass)([
                _ctx.nsCascader.e("suggestion-item"),
                _ctx.nsCascader.is("checked", item.checked)
              ]),
              tabindex: -1,
              onClick: ($event) => _ctx.handleSuggestionClick(item)
            }, [
              (0,external_Vue_.createElementVNode)("span", null, (0,external_Vue_.toDisplayString)(item.text), 1),
              item.checked ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(_component_el_icon, { key: 0 }, {
                default: (0,external_Vue_.withCtx)(() => [
                  (0,external_Vue_.createVNode)(_component_check)
                ]),
                _: 1
              })) : (0,external_Vue_.createCommentVNode)("v-if", true)
            ], 10, _hoisted_4);
          }), 128)) : (0,external_Vue_.renderSlot)(_ctx.$slots, "empty", { key: 1 }, () => [
            (0,external_Vue_.createElementVNode)("li", {
              class: (0,external_Vue_.normalizeClass)(_ctx.nsCascader.e("empty-text"))
            }, (0,external_Vue_.toDisplayString)(_ctx.t("el.cascader.noMatch")), 3)
          ])
        ]),
        _: 3
      }, 8, ["class", "view-class", "onKeydown"])), [
        [external_Vue_.vShow, _ctx.filtering]
      ]) : (0,external_Vue_.createCommentVNode)("v-if", true)
    ]),
    _: 3
  }, 8, ["visible", "teleported", "popper-class", "popper-options", "transition", "onHide"]);
}
var Cascader = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(cascader_src_sfc_main, [["render", cascader_src_sfc_render], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/cascader/src/index.vue"]]);


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/cascader/index.mjs


Cascader.install = (app) => {
  app.component(Cascader.name, Cascader);
};
const _Cascader = Cascader;
const ElCascader = _Cascader;


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/check-tag/src/check-tag.mjs






const checkTagProps = (0,runtime/* buildProps */.o8)({
  checked: {
    type: Boolean,
    default: false
  }
});
const checkTagEmits = {
  "update:checked": (value) => (0,shared/* isBoolean */.jn)(value),
  [constants_event/* CHANGE_EVENT */.O7]: (value) => (0,shared/* isBoolean */.jn)(value)
};


//# sourceMappingURL=check-tag.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/check-tag/src/check-tag2.mjs








const check_tag2_default_ = {
  name: "ElCheckTag"
};
const check_tag2_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...check_tag2_default_,
  props: checkTagProps,
  emits: checkTagEmits,
  setup(__props, { emit }) {
    const props = __props;
    const ns = (0,use_namespace/* useNamespace */.s)("check-tag");
    const handleChange = () => {
      const checked = !props.checked;
      emit(constants_event/* CHANGE_EVENT */.O7, checked);
      emit("update:checked", checked);
    };
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("span", {
        class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(ns).b(), (0,external_Vue_.unref)(ns).is("checked", _ctx.checked)]),
        onClick: handleChange
      }, [
        (0,external_Vue_.renderSlot)(_ctx.$slots, "default")
      ], 2);
    };
  }
});
var CheckTag = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(check_tag2_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/check-tag/src/check-tag.vue"]]);


//# sourceMappingURL=check-tag2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/check-tag/index.mjs





const ElCheckTag = (0,install/* withInstall */.nz)(CheckTag);


//# sourceMappingURL=index.mjs.map

// EXTERNAL MODULE: ./node_modules/element-plus/es/utils/typescript.mjs
var typescript = __webpack_require__(25450);
;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/col/src/col.mjs




const colProps = (0,runtime/* buildProps */.o8)({
  tag: {
    type: String,
    default: "div"
  },
  span: {
    type: Number,
    default: 24
  },
  offset: {
    type: Number,
    default: 0
  },
  pull: {
    type: Number,
    default: 0
  },
  push: {
    type: Number,
    default: 0
  },
  xs: {
    type: (0,runtime/* definePropType */.Cq)([Number, Object]),
    default: () => (0,typescript/* mutable */.N)({})
  },
  sm: {
    type: (0,runtime/* definePropType */.Cq)([Number, Object]),
    default: () => (0,typescript/* mutable */.N)({})
  },
  md: {
    type: (0,runtime/* definePropType */.Cq)([Number, Object]),
    default: () => (0,typescript/* mutable */.N)({})
  },
  lg: {
    type: (0,runtime/* definePropType */.Cq)([Number, Object]),
    default: () => (0,typescript/* mutable */.N)({})
  },
  xl: {
    type: (0,runtime/* definePropType */.Cq)([Number, Object]),
    default: () => (0,typescript/* mutable */.N)({})
  }
});


//# sourceMappingURL=col.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/tokens/row.mjs
const rowContextKey = Symbol("rowContextKey");


//# sourceMappingURL=row.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/col/src/col2.mjs











const col2_default_ = {
  name: "ElCol"
};
const col2_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...col2_default_,
  props: colProps,
  setup(__props) {
    const props = __props;
    const { gutter } = (0,external_Vue_.inject)(rowContextKey, { gutter: (0,external_Vue_.computed)(() => 0) });
    const ns = (0,use_namespace/* useNamespace */.s)("col");
    const style = (0,external_Vue_.computed)(() => {
      const styles = {};
      if (gutter.value) {
        styles.paddingLeft = styles.paddingRight = `${gutter.value / 2}px`;
      }
      return styles;
    });
    const classes = (0,external_Vue_.computed)(() => {
      const classes2 = [];
      const pos = ["span", "offset", "pull", "push"];
      pos.forEach((prop) => {
        const size = props[prop];
        if ((0,shared/* isNumber */.hj)(size)) {
          if (prop === "span")
            classes2.push(ns.b(`${props[prop]}`));
          else if (size > 0)
            classes2.push(ns.b(`${prop}-${props[prop]}`));
        }
      });
      const sizes = ["xs", "sm", "md", "lg", "xl"];
      sizes.forEach((size) => {
        if ((0,shared/* isNumber */.hj)(props[size])) {
          classes2.push(ns.b(`${size}-${props[size]}`));
        } else if ((0,shared_esm_bundler/* isObject */.Kn)(props[size])) {
          Object.entries(props[size]).forEach(([prop, sizeProp]) => {
            classes2.push(prop !== "span" ? ns.b(`${size}-${prop}-${sizeProp}`) : ns.b(`${size}-${sizeProp}`));
          });
        }
      });
      if (gutter.value) {
        classes2.push(ns.is("guttered"));
      }
      return classes2;
    });
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.resolveDynamicComponent)(_ctx.tag), {
        class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(ns).b(), (0,external_Vue_.unref)(classes)]),
        style: (0,external_Vue_.normalizeStyle)((0,external_Vue_.unref)(style))
      }, {
        default: (0,external_Vue_.withCtx)(() => [
          (0,external_Vue_.renderSlot)(_ctx.$slots, "default")
        ]),
        _: 3
      }, 8, ["class", "style"]);
    };
  }
});
var Col = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(col2_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/col/src/col.vue"]]);


//# sourceMappingURL=col2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/col/index.mjs





const ElCol = (0,install/* withInstall */.nz)(Col);


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/collapse/src/collapse.mjs







const emitChangeFn = (value) => typeof (0,shared/* isNumber */.hj)(value);
const collapseProps = (0,runtime/* buildProps */.o8)({
  accordion: Boolean,
  modelValue: {
    type: (0,runtime/* definePropType */.Cq)([Array, String, Number]),
    default: () => (0,typescript/* mutable */.N)([])
  }
});
const collapseEmits = {
  [constants_event/* UPDATE_MODEL_EVENT */.f_]: emitChangeFn,
  [constants_event/* CHANGE_EVENT */.O7]: emitChangeFn
};


//# sourceMappingURL=collapse.mjs.map

// EXTERNAL MODULE: ./node_modules/lodash-es/castArray.js
var lodash_es_castArray = __webpack_require__(62006);
;// CONCATENATED MODULE: ./node_modules/element-plus/es/tokens/collapse.mjs
const collapseContextKey = Symbol("collapseContextKey");


//# sourceMappingURL=collapse.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/collapse/src/collapse2.mjs












const collapse2_default_ = {
  name: "ElCollapse"
};
const collapse2_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...collapse2_default_,
  props: collapseProps,
  emits: collapseEmits,
  setup(__props, { expose, emit }) {
    const props = __props;
    const ns = (0,use_namespace/* useNamespace */.s)("collapse");
    const activeNames = (0,external_Vue_.ref)((0,lodash_es_castArray/* default */.Z)(props.modelValue));
    const setActiveNames = (_activeNames) => {
      activeNames.value = _activeNames;
      const value = props.accordion ? activeNames.value[0] : activeNames.value;
      emit(constants_event/* UPDATE_MODEL_EVENT */.f_, value);
      emit(constants_event/* CHANGE_EVENT */.O7, value);
    };
    const handleItemClick = (name) => {
      if (props.accordion) {
        setActiveNames([
          (activeNames.value[0] || activeNames.value[0] === 0) && activeNames.value[0] === name ? "" : name
        ]);
      } else {
        const _activeNames = [...activeNames.value];
        const index = _activeNames.indexOf(name);
        if (index > -1) {
          _activeNames.splice(index, 1);
        } else {
          _activeNames.push(name);
        }
        setActiveNames(_activeNames);
      }
    };
    (0,external_Vue_.watch)(() => props.modelValue, () => activeNames.value = (0,lodash_es_castArray/* default */.Z)(props.modelValue), { deep: true });
    (0,external_Vue_.provide)(collapseContextKey, {
      activeNames,
      handleItemClick
    });
    expose({
      activeNames,
      setActiveNames
    });
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
        class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).b()),
        role: "tablist",
        "aria-multiselectable": "true"
      }, [
        (0,external_Vue_.renderSlot)(_ctx.$slots, "default")
      ], 2);
    };
  }
});
var Collapse = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(collapse2_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/collapse/src/collapse.vue"]]);


//# sourceMappingURL=collapse2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/collapse-transition/src/collapse-transition.mjs





const collapse_transition_default_ = {
  name: "ElCollapseTransition"
};
const collapse_transition_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...collapse_transition_default_,
  setup(__props) {
    const ns = (0,use_namespace/* useNamespace */.s)("collapse-transition");
    const on = {
      beforeEnter(el) {
        if (!el.dataset)
          el.dataset = {};
        el.dataset.oldPaddingTop = el.style.paddingTop;
        el.dataset.oldPaddingBottom = el.style.paddingBottom;
        el.style.maxHeight = 0;
        el.style.paddingTop = 0;
        el.style.paddingBottom = 0;
      },
      enter(el) {
        el.dataset.oldOverflow = el.style.overflow;
        if (el.scrollHeight !== 0) {
          el.style.maxHeight = `${el.scrollHeight}px`;
          el.style.paddingTop = el.dataset.oldPaddingTop;
          el.style.paddingBottom = el.dataset.oldPaddingBottom;
        } else {
          el.style.maxHeight = 0;
          el.style.paddingTop = el.dataset.oldPaddingTop;
          el.style.paddingBottom = el.dataset.oldPaddingBottom;
        }
        el.style.overflow = "hidden";
      },
      afterEnter(el) {
        el.style.maxHeight = "";
        el.style.overflow = el.dataset.oldOverflow;
      },
      beforeLeave(el) {
        if (!el.dataset)
          el.dataset = {};
        el.dataset.oldPaddingTop = el.style.paddingTop;
        el.dataset.oldPaddingBottom = el.style.paddingBottom;
        el.dataset.oldOverflow = el.style.overflow;
        el.style.maxHeight = `${el.scrollHeight}px`;
        el.style.overflow = "hidden";
      },
      leave(el) {
        if (el.scrollHeight !== 0) {
          el.style.maxHeight = 0;
          el.style.paddingTop = 0;
          el.style.paddingBottom = 0;
        }
      },
      afterLeave(el) {
        el.style.maxHeight = "";
        el.style.overflow = el.dataset.oldOverflow;
        el.style.paddingTop = el.dataset.oldPaddingTop;
        el.style.paddingBottom = el.dataset.oldPaddingBottom;
      }
    };
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(external_Vue_.Transition, (0,external_Vue_.mergeProps)({
        name: (0,external_Vue_.unref)(ns).b()
      }, (0,external_Vue_.toHandlers)(on)), {
        default: (0,external_Vue_.withCtx)(() => [
          (0,external_Vue_.renderSlot)(_ctx.$slots, "default")
        ]),
        _: 3
      }, 16, ["name"]);
    };
  }
});
var CollapseTransition = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(collapse_transition_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/collapse-transition/src/collapse-transition.vue"]]);


//# sourceMappingURL=collapse-transition.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/collapse-transition/index.mjs


CollapseTransition.install = (app) => {
  app.component(CollapseTransition.name, CollapseTransition);
};
const _CollapseTransition = CollapseTransition;
const ElCollapseTransition = _CollapseTransition;


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/collapse/src/collapse-item.mjs




const collapseItemProps = (0,runtime/* buildProps */.o8)({
  title: {
    type: String,
    default: ""
  },
  name: {
    type: (0,runtime/* definePropType */.Cq)([String, Number]),
    default: () => rand_generateId()
  },
  disabled: Boolean
});


//# sourceMappingURL=collapse-item.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/collapse/src/collapse-item2.mjs













const collapse_item2_hoisted_1 = ["aria-expanded", "aria-controls", "aria-describedby"];
const collapse_item2_hoisted_2 = ["id", "tabindex", "onKeypress"];
const collapse_item2_hoisted_3 = ["id", "aria-hidden", "aria-labelledby"];
const collapse_item2_default_ = {
  name: "ElCollapseItem"
};
const collapse_item2_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...collapse_item2_default_,
  props: collapseItemProps,
  setup(__props, { expose }) {
    const props = __props;
    const collapse = (0,external_Vue_.inject)(collapseContextKey);
    const ns = (0,use_namespace/* useNamespace */.s)("collapse");
    const focusing = (0,external_Vue_.ref)(false);
    const isClick = (0,external_Vue_.ref)(false);
    const id = (0,external_Vue_.ref)(rand_generateId());
    const isActive = (0,external_Vue_.computed)(() => collapse == null ? void 0 : collapse.activeNames.value.includes(props.name));
    const handleFocus = () => {
      setTimeout(() => {
        if (!isClick.value) {
          focusing.value = true;
        } else {
          isClick.value = false;
        }
      }, 50);
    };
    const handleHeaderClick = () => {
      if (props.disabled)
        return;
      collapse == null ? void 0 : collapse.handleItemClick(props.name);
      focusing.value = false;
      isClick.value = true;
    };
    const handleEnterClick = () => {
      collapse == null ? void 0 : collapse.handleItemClick(props.name);
    };
    expose({
      isActive
    });
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
        class: (0,external_Vue_.normalizeClass)([
          (0,external_Vue_.unref)(ns).b("item"),
          (0,external_Vue_.unref)(ns).is("active", (0,external_Vue_.unref)(isActive)),
          (0,external_Vue_.unref)(ns).is("disabled", _ctx.disabled)
        ])
      }, [
        (0,external_Vue_.createElementVNode)("div", {
          role: "tab",
          "aria-expanded": (0,external_Vue_.unref)(isActive),
          "aria-controls": (0,external_Vue_.unref)(ns).b(`content-${id.value}`),
          "aria-describedby": (0,external_Vue_.unref)(ns).b(`content-${id.value}`)
        }, [
          (0,external_Vue_.createElementVNode)("div", {
            id: (0,external_Vue_.unref)(ns).b(`head-${id.value}`),
            class: (0,external_Vue_.normalizeClass)([
              (0,external_Vue_.unref)(ns).be("item", "header"),
              (0,external_Vue_.unref)(ns).is("active", (0,external_Vue_.unref)(isActive)),
              { focusing: focusing.value && !_ctx.disabled }
            ]),
            role: "button",
            tabindex: _ctx.disabled ? -1 : 0,
            onClick: handleHeaderClick,
            onKeypress: (0,external_Vue_.withKeys)((0,external_Vue_.withModifiers)(handleEnterClick, ["stop", "prevent"]), ["space", "enter"]),
            onFocus: handleFocus,
            onBlur: _cache[0] || (_cache[0] = ($event) => focusing.value = false)
          }, [
            (0,external_Vue_.renderSlot)(_ctx.$slots, "title", {}, () => [
              (0,external_Vue_.createTextVNode)((0,external_Vue_.toDisplayString)(_ctx.title), 1)
            ]),
            (0,external_Vue_.createVNode)((0,external_Vue_.unref)(components_icon/* ElIcon */.gn), {
              class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(ns).be("item", "arrow"), (0,external_Vue_.unref)(ns).is("active", (0,external_Vue_.unref)(isActive))])
            }, {
              default: (0,external_Vue_.withCtx)(() => [
                (0,external_Vue_.createVNode)((0,external_Vue_.unref)(dist/* ArrowRight */.olP))
              ]),
              _: 1
            }, 8, ["class"])
          ], 42, collapse_item2_hoisted_2)
        ], 8, collapse_item2_hoisted_1),
        (0,external_Vue_.createVNode)((0,external_Vue_.unref)(_CollapseTransition), null, {
          default: (0,external_Vue_.withCtx)(() => [
            (0,external_Vue_.withDirectives)((0,external_Vue_.createElementVNode)("div", {
              id: (0,external_Vue_.unref)(ns).b(`content-${id.value}`),
              class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).be("item", "wrap")),
              role: "tabpanel",
              "aria-hidden": !(0,external_Vue_.unref)(isActive),
              "aria-labelledby": (0,external_Vue_.unref)(ns).b(`head-${id.value}`)
            }, [
              (0,external_Vue_.createElementVNode)("div", {
                class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).be("item", "content"))
              }, [
                (0,external_Vue_.renderSlot)(_ctx.$slots, "default")
              ], 2)
            ], 10, collapse_item2_hoisted_3), [
              [external_Vue_.vShow, (0,external_Vue_.unref)(isActive)]
            ])
          ]),
          _: 3
        })
      ], 2);
    };
  }
});
var CollapseItem = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(collapse_item2_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/collapse/src/collapse-item.vue"]]);


//# sourceMappingURL=collapse-item2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/collapse/index.mjs







const ElCollapse = (0,install/* withInstall */.nz)(Collapse, {
  CollapseItem: CollapseItem
});
const ElCollapseItem = (0,install/* withNoopInstall */.dp)(CollapseItem);


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/color-picker/src/draggable.mjs




let isDragging = false;
function draggable(element, options) {
  if (!shared/* isClient */.C5)
    return;
  const moveFn = function(event) {
    var _a;
    (_a = options.drag) == null ? void 0 : _a.call(options, event);
  };
  const upFn = function(event) {
    var _a;
    off(document, "mousemove", moveFn);
    off(document, "mouseup", upFn);
    off(document, "touchmove", moveFn);
    off(document, "touchend", upFn);
    document.onselectstart = null;
    document.ondragstart = null;
    isDragging = false;
    (_a = options.end) == null ? void 0 : _a.call(options, event);
  };
  const downFn = function(event) {
    var _a;
    if (isDragging)
      return;
    event.preventDefault();
    document.onselectstart = () => false;
    document.ondragstart = () => false;
    event_on(document, "mousemove", moveFn);
    event_on(document, "mouseup", upFn);
    event_on(document, "touchmove", moveFn);
    event_on(document, "touchend", upFn);
    isDragging = true;
    (_a = options.start) == null ? void 0 : _a.call(options, event);
  };
  event_on(element, "mousedown", downFn);
  event_on(element, "touchstart", downFn);
}


//# sourceMappingURL=draggable.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/utils/dom/position.mjs


const isInContainer = (el, container) => {
  if (!shared/* isClient */.C5 || !el || !container)
    return false;
  const elRect = el.getBoundingClientRect();
  let containerRect;
  if (container instanceof Element) {
    containerRect = container.getBoundingClientRect();
  } else {
    containerRect = {
      top: 0,
      right: window.innerWidth,
      bottom: window.innerHeight,
      left: 0
    };
  }
  return elRect.top < containerRect.bottom && elRect.bottom > containerRect.top && elRect.right > containerRect.left && elRect.left < containerRect.right;
};
const getOffsetTop = (el) => {
  let offset = 0;
  let parent = el;
  while (parent) {
    offset += parent.offsetTop;
    parent = parent.offsetParent;
  }
  return offset;
};
const getOffsetTopDistance = (el, containerEl) => {
  return Math.abs(getOffsetTop(el) - getOffsetTop(containerEl));
};
const getClientXY = (event) => {
  let clientX;
  let clientY;
  if (event.type === "touchend") {
    clientY = event.changedTouches[0].clientY;
    clientX = event.changedTouches[0].clientX;
  } else if (event.type.startsWith("touch")) {
    clientY = event.touches[0].clientY;
    clientX = event.touches[0].clientX;
  } else {
    clientY = event.clientY;
    clientX = event.clientX;
  }
  return {
    clientX,
    clientY
  };
};


//# sourceMappingURL=position.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/color-picker/src/components/alpha-slider.mjs






const alpha_slider_sfc_main = (0,external_Vue_.defineComponent)({
  name: "ElColorAlphaSlider",
  props: {
    color: {
      type: Object,
      required: true
    },
    vertical: {
      type: Boolean,
      default: false
    }
  },
  setup(props) {
    const instance = (0,external_Vue_.getCurrentInstance)();
    const thumb = (0,external_Vue_.shallowRef)(null);
    const bar = (0,external_Vue_.shallowRef)(null);
    const thumbLeft = (0,external_Vue_.ref)(0);
    const thumbTop = (0,external_Vue_.ref)(0);
    const background = (0,external_Vue_.ref)(null);
    (0,external_Vue_.watch)(() => props.color.get("alpha"), () => {
      update();
    });
    (0,external_Vue_.watch)(() => props.color.value, () => {
      update();
    });
    function getThumbLeft() {
      if (props.vertical)
        return 0;
      const el = instance.vnode.el;
      const alpha = props.color.get("alpha");
      if (!el)
        return 0;
      return Math.round(alpha * (el.offsetWidth - thumb.value.offsetWidth / 2) / 100);
    }
    function getThumbTop() {
      const el = instance.vnode.el;
      if (!props.vertical)
        return 0;
      const alpha = props.color.get("alpha");
      if (!el)
        return 0;
      return Math.round(alpha * (el.offsetHeight - thumb.value.offsetHeight / 2) / 100);
    }
    function getBackground() {
      if (props.color && props.color.value) {
        const { r, g, b } = props.color.toRgb();
        return `linear-gradient(to right, rgba(${r}, ${g}, ${b}, 0) 0%, rgba(${r}, ${g}, ${b}, 1) 100%)`;
      }
      return null;
    }
    function handleClick(event) {
      const target = event.target;
      if (target !== thumb.value) {
        handleDrag(event);
      }
    }
    function handleDrag(event) {
      const el = instance.vnode.el;
      const rect = el.getBoundingClientRect();
      const { clientX, clientY } = getClientXY(event);
      if (!props.vertical) {
        let left = clientX - rect.left;
        left = Math.max(thumb.value.offsetWidth / 2, left);
        left = Math.min(left, rect.width - thumb.value.offsetWidth / 2);
        props.color.set("alpha", Math.round((left - thumb.value.offsetWidth / 2) / (rect.width - thumb.value.offsetWidth) * 100));
      } else {
        let top = clientY - rect.top;
        top = Math.max(thumb.value.offsetHeight / 2, top);
        top = Math.min(top, rect.height - thumb.value.offsetHeight / 2);
        props.color.set("alpha", Math.round((top - thumb.value.offsetHeight / 2) / (rect.height - thumb.value.offsetHeight) * 100));
      }
    }
    function update() {
      thumbLeft.value = getThumbLeft();
      thumbTop.value = getThumbTop();
      background.value = getBackground();
    }
    (0,external_Vue_.onMounted)(() => {
      const dragConfig = {
        drag: (event) => {
          handleDrag(event);
        },
        end: (event) => {
          handleDrag(event);
        }
      };
      draggable(bar.value, dragConfig);
      draggable(thumb.value, dragConfig);
      update();
    });
    return {
      thumb,
      bar,
      thumbLeft,
      thumbTop,
      background,
      handleClick,
      update
    };
  }
});
function alpha_slider_sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
    class: (0,external_Vue_.normalizeClass)(["el-color-alpha-slider", { "is-vertical": _ctx.vertical }])
  }, [
    (0,external_Vue_.createElementVNode)("div", {
      ref: "bar",
      class: "el-color-alpha-slider__bar",
      style: (0,external_Vue_.normalizeStyle)({
        background: _ctx.background
      }),
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.handleClick && _ctx.handleClick(...args))
    }, null, 4),
    (0,external_Vue_.createElementVNode)("div", {
      ref: "thumb",
      class: "el-color-alpha-slider__thumb",
      style: (0,external_Vue_.normalizeStyle)({
        left: _ctx.thumbLeft + "px",
        top: _ctx.thumbTop + "px"
      })
    }, null, 4)
  ], 2);
}
var AlphaSlider = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(alpha_slider_sfc_main, [["render", alpha_slider_sfc_render], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/color-picker/src/components/alpha-slider.vue"]]);


//# sourceMappingURL=alpha-slider.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/color-picker/src/components/hue-slider.mjs






const hue_slider_sfc_main = (0,external_Vue_.defineComponent)({
  name: "ElColorHueSlider",
  props: {
    color: {
      type: Object,
      required: true
    },
    vertical: Boolean
  },
  setup(props) {
    const instance = (0,external_Vue_.getCurrentInstance)();
    const thumb = (0,external_Vue_.ref)(null);
    const bar = (0,external_Vue_.ref)(null);
    const thumbLeft = (0,external_Vue_.ref)(0);
    const thumbTop = (0,external_Vue_.ref)(0);
    const hueValue = (0,external_Vue_.computed)(() => {
      return props.color.get("hue");
    });
    (0,external_Vue_.watch)(() => hueValue.value, () => {
      update();
    });
    function handleClick(event) {
      const target = event.target;
      if (target !== thumb.value) {
        handleDrag(event);
      }
    }
    function handleDrag(event) {
      const el = instance.vnode.el;
      const rect = el.getBoundingClientRect();
      const { clientX, clientY } = getClientXY(event);
      let hue;
      if (!props.vertical) {
        let left = clientX - rect.left;
        left = Math.min(left, rect.width - thumb.value.offsetWidth / 2);
        left = Math.max(thumb.value.offsetWidth / 2, left);
        hue = Math.round((left - thumb.value.offsetWidth / 2) / (rect.width - thumb.value.offsetWidth) * 360);
      } else {
        let top = clientY - rect.top;
        top = Math.min(top, rect.height - thumb.value.offsetHeight / 2);
        top = Math.max(thumb.value.offsetHeight / 2, top);
        hue = Math.round((top - thumb.value.offsetHeight / 2) / (rect.height - thumb.value.offsetHeight) * 360);
      }
      props.color.set("hue", hue);
    }
    function getThumbLeft() {
      const el = instance.vnode.el;
      if (props.vertical)
        return 0;
      const hue = props.color.get("hue");
      if (!el)
        return 0;
      return Math.round(hue * (el.offsetWidth - thumb.value.offsetWidth / 2) / 360);
    }
    function getThumbTop() {
      const el = instance.vnode.el;
      if (!props.vertical)
        return 0;
      const hue = props.color.get("hue");
      if (!el)
        return 0;
      return Math.round(hue * (el.offsetHeight - thumb.value.offsetHeight / 2) / 360);
    }
    function update() {
      thumbLeft.value = getThumbLeft();
      thumbTop.value = getThumbTop();
    }
    (0,external_Vue_.onMounted)(() => {
      const dragConfig = {
        drag: (event) => {
          handleDrag(event);
        },
        end: (event) => {
          handleDrag(event);
        }
      };
      draggable(bar.value, dragConfig);
      draggable(thumb.value, dragConfig);
      update();
    });
    return {
      bar,
      thumb,
      thumbLeft,
      thumbTop,
      hueValue,
      handleClick,
      update
    };
  }
});
function hue_slider_sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
    class: (0,external_Vue_.normalizeClass)(["el-color-hue-slider", { "is-vertical": _ctx.vertical }])
  }, [
    (0,external_Vue_.createElementVNode)("div", {
      ref: "bar",
      class: "el-color-hue-slider__bar",
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.handleClick && _ctx.handleClick(...args))
    }, null, 512),
    (0,external_Vue_.createElementVNode)("div", {
      ref: "thumb",
      class: "el-color-hue-slider__thumb",
      style: (0,external_Vue_.normalizeStyle)({
        left: _ctx.thumbLeft + "px",
        top: _ctx.thumbTop + "px"
      })
    }, null, 4)
  ], 2);
}
var HueSlider = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(hue_slider_sfc_main, [["render", hue_slider_sfc_render], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/color-picker/src/components/hue-slider.vue"]]);


//# sourceMappingURL=hue-slider.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/color-picker/src/useOption.mjs


const OPTIONS_KEY = Symbol();
const useOptions = () => {
  return (0,external_Vue_.inject)(OPTIONS_KEY);
};


//# sourceMappingURL=useOption.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/color-picker/src/color.mjs



const hsv2hsl = function(hue, sat, val) {
  return [
    hue,
    sat * val / ((hue = (2 - sat) * val) < 1 ? hue : 2 - hue) || 0,
    hue / 2
  ];
};
const isOnePointZero = function(n) {
  return typeof n === "string" && n.includes(".") && Number.parseFloat(n) === 1;
};
const isPercentage = function(n) {
  return typeof n === "string" && n.includes("%");
};
const bound01 = function(value, max) {
  if (isOnePointZero(value))
    value = "100%";
  const processPercent = isPercentage(value);
  value = Math.min(max, Math.max(0, Number.parseFloat(`${value}`)));
  if (processPercent) {
    value = Number.parseInt(`${value * max}`, 10) / 100;
  }
  if (Math.abs(value - max) < 1e-6) {
    return 1;
  }
  return value % max / Number.parseFloat(max);
};
const INT_HEX_MAP = { 10: "A", 11: "B", 12: "C", 13: "D", 14: "E", 15: "F" };
const hexOne = function(value) {
  value = Math.min(Math.round(value), 255);
  const high = Math.floor(value / 16);
  const low = value % 16;
  return `${INT_HEX_MAP[high] || high}${INT_HEX_MAP[low] || low}`;
};
const toHex = function({ r, g, b }) {
  if (Number.isNaN(+r) || Number.isNaN(+g) || Number.isNaN(+b))
    return "";
  return `#${hexOne(r)}${hexOne(g)}${hexOne(b)}`;
};
const HEX_INT_MAP = { A: 10, B: 11, C: 12, D: 13, E: 14, F: 15 };
const parseHexChannel = function(hex) {
  if (hex.length === 2) {
    return (HEX_INT_MAP[hex[0].toUpperCase()] || +hex[0]) * 16 + (HEX_INT_MAP[hex[1].toUpperCase()] || +hex[1]);
  }
  return HEX_INT_MAP[hex[1].toUpperCase()] || +hex[1];
};
const hsl2hsv = function(hue, sat, light) {
  sat = sat / 100;
  light = light / 100;
  let smin = sat;
  const lmin = Math.max(light, 0.01);
  light *= 2;
  sat *= light <= 1 ? light : 2 - light;
  smin *= lmin <= 1 ? lmin : 2 - lmin;
  const v = (light + sat) / 2;
  const sv = light === 0 ? 2 * smin / (lmin + smin) : 2 * sat / (light + sat);
  return {
    h: hue,
    s: sv * 100,
    v: v * 100
  };
};
const rgb2hsv = function(r, g, b) {
  r = bound01(r, 255);
  g = bound01(g, 255);
  b = bound01(b, 255);
  const max = Math.max(r, g, b);
  const min = Math.min(r, g, b);
  let h;
  const v = max;
  const d = max - min;
  const s = max === 0 ? 0 : d / max;
  if (max === min) {
    h = 0;
  } else {
    switch (max) {
      case r: {
        h = (g - b) / d + (g < b ? 6 : 0);
        break;
      }
      case g: {
        h = (b - r) / d + 2;
        break;
      }
      case b: {
        h = (r - g) / d + 4;
        break;
      }
    }
    h /= 6;
  }
  return { h: h * 360, s: s * 100, v: v * 100 };
};
const hsv2rgb = function(h, s, v) {
  h = bound01(h, 360) * 6;
  s = bound01(s, 100);
  v = bound01(v, 100);
  const i = Math.floor(h);
  const f = h - i;
  const p = v * (1 - s);
  const q = v * (1 - f * s);
  const t = v * (1 - (1 - f) * s);
  const mod = i % 6;
  const r = [v, q, p, p, t, v][mod];
  const g = [t, v, v, q, p, p][mod];
  const b = [p, p, t, v, v, q][mod];
  return {
    r: Math.round(r * 255),
    g: Math.round(g * 255),
    b: Math.round(b * 255)
  };
};
class Color {
  constructor(options) {
    this._hue = 0;
    this._saturation = 100;
    this._value = 100;
    this._alpha = 100;
    this.enableAlpha = false;
    this.format = "hex";
    this.value = "";
    options = options || {};
    for (const option in options) {
      if ((0,shared_esm_bundler/* hasOwn */.RI)(options, option)) {
        this[option] = options[option];
      }
    }
    if (options.value) {
      this.fromString(options.value);
    } else {
      this.doOnChange();
    }
  }
  set(prop, value) {
    if (arguments.length === 1 && typeof prop === "object") {
      for (const p in prop) {
        if ((0,shared_esm_bundler/* hasOwn */.RI)(prop, p)) {
          this.set(p, prop[p]);
        }
      }
      return;
    }
    this[`_${prop}`] = value;
    this.doOnChange();
  }
  get(prop) {
    if (prop === "alpha") {
      return Math.floor(this[`_${prop}`]);
    }
    return this[`_${prop}`];
  }
  toRgb() {
    return hsv2rgb(this._hue, this._saturation, this._value);
  }
  fromString(value) {
    if (!value) {
      this._hue = 0;
      this._saturation = 100;
      this._value = 100;
      this.doOnChange();
      return;
    }
    const fromHSV = (h, s, v) => {
      this._hue = Math.max(0, Math.min(360, h));
      this._saturation = Math.max(0, Math.min(100, s));
      this._value = Math.max(0, Math.min(100, v));
      this.doOnChange();
    };
    if (value.includes("hsl")) {
      const parts = value.replace(/hsla|hsl|\(|\)/gm, "").split(/\s|,/g).filter((val) => val !== "").map((val, index) => index > 2 ? Number.parseFloat(val) : Number.parseInt(val, 10));
      if (parts.length === 4) {
        this._alpha = Number.parseFloat(parts[3]) * 100;
      } else if (parts.length === 3) {
        this._alpha = 100;
      }
      if (parts.length >= 3) {
        const { h, s, v } = hsl2hsv(parts[0], parts[1], parts[2]);
        fromHSV(h, s, v);
      }
    } else if (value.includes("hsv")) {
      const parts = value.replace(/hsva|hsv|\(|\)/gm, "").split(/\s|,/g).filter((val) => val !== "").map((val, index) => index > 2 ? Number.parseFloat(val) : Number.parseInt(val, 10));
      if (parts.length === 4) {
        this._alpha = Number.parseFloat(parts[3]) * 100;
      } else if (parts.length === 3) {
        this._alpha = 100;
      }
      if (parts.length >= 3) {
        fromHSV(parts[0], parts[1], parts[2]);
      }
    } else if (value.includes("rgb")) {
      const parts = value.replace(/rgba|rgb|\(|\)/gm, "").split(/\s|,/g).filter((val) => val !== "").map((val, index) => index > 2 ? Number.parseFloat(val) : Number.parseInt(val, 10));
      if (parts.length === 4) {
        this._alpha = Number.parseFloat(parts[3]) * 100;
      } else if (parts.length === 3) {
        this._alpha = 100;
      }
      if (parts.length >= 3) {
        const { h, s, v } = rgb2hsv(parts[0], parts[1], parts[2]);
        fromHSV(h, s, v);
      }
    } else if (value.includes("#")) {
      const hex = value.replace("#", "").trim();
      if (!/^[0-9a-fA-F]{3}$|^[0-9a-fA-F]{6}$|^[0-9a-fA-F]{8}$/.test(hex))
        return;
      let r, g, b;
      if (hex.length === 3) {
        r = parseHexChannel(hex[0] + hex[0]);
        g = parseHexChannel(hex[1] + hex[1]);
        b = parseHexChannel(hex[2] + hex[2]);
      } else if (hex.length === 6 || hex.length === 8) {
        r = parseHexChannel(hex.slice(0, 2));
        g = parseHexChannel(hex.slice(2, 4));
        b = parseHexChannel(hex.slice(4, 6));
      }
      if (hex.length === 8) {
        this._alpha = parseHexChannel(hex.slice(6)) / 255 * 100;
      } else if (hex.length === 3 || hex.length === 6) {
        this._alpha = 100;
      }
      const { h, s, v } = rgb2hsv(r, g, b);
      fromHSV(h, s, v);
    }
  }
  compare(color) {
    return Math.abs(color._hue - this._hue) < 2 && Math.abs(color._saturation - this._saturation) < 1 && Math.abs(color._value - this._value) < 1 && Math.abs(color._alpha - this._alpha) < 1;
  }
  doOnChange() {
    const { _hue, _saturation, _value, _alpha, format } = this;
    if (this.enableAlpha) {
      switch (format) {
        case "hsl": {
          const hsl = hsv2hsl(_hue, _saturation / 100, _value / 100);
          this.value = `hsla(${_hue}, ${Math.round(hsl[1] * 100)}%, ${Math.round(hsl[2] * 100)}%, ${this.get("alpha") / 100})`;
          break;
        }
        case "hsv": {
          this.value = `hsva(${_hue}, ${Math.round(_saturation)}%, ${Math.round(_value)}%, ${this.get("alpha") / 100})`;
          break;
        }
        case "hex": {
          this.value = `${toHex(hsv2rgb(_hue, _saturation, _value))}${hexOne(_alpha * 255 / 100)}`;
          break;
        }
        default: {
          const { r, g, b } = hsv2rgb(_hue, _saturation, _value);
          this.value = `rgba(${r}, ${g}, ${b}, ${this.get("alpha") / 100})`;
        }
      }
    } else {
      switch (format) {
        case "hsl": {
          const hsl = hsv2hsl(_hue, _saturation / 100, _value / 100);
          this.value = `hsl(${_hue}, ${Math.round(hsl[1] * 100)}%, ${Math.round(hsl[2] * 100)}%)`;
          break;
        }
        case "hsv": {
          this.value = `hsv(${_hue}, ${Math.round(_saturation)}%, ${Math.round(_value)}%)`;
          break;
        }
        case "rgb": {
          const { r, g, b } = hsv2rgb(_hue, _saturation, _value);
          this.value = `rgb(${r}, ${g}, ${b})`;
          break;
        }
        default: {
          this.value = toHex(hsv2rgb(_hue, _saturation, _value));
        }
      }
    }
  }
}


//# sourceMappingURL=color.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/color-picker/src/components/predefine.mjs





const predefine_sfc_main = (0,external_Vue_.defineComponent)({
  props: {
    colors: { type: Array, required: true },
    color: {
      type: Object,
      required: true
    }
  },
  setup(props) {
    const { currentColor } = useOptions();
    const rgbaColors = (0,external_Vue_.ref)(parseColors(props.colors, props.color));
    (0,external_Vue_.watch)(() => currentColor.value, (val) => {
      const color = new Color();
      color.fromString(val);
      rgbaColors.value.forEach((item) => {
        item.selected = color.compare(item);
      });
    });
    (0,external_Vue_.watchEffect)(() => {
      rgbaColors.value = parseColors(props.colors, props.color);
    });
    function handleSelect(index) {
      props.color.fromString(props.colors[index]);
    }
    function parseColors(colors, color) {
      return colors.map((value) => {
        const c = new Color();
        c.enableAlpha = true;
        c.format = "rgba";
        c.fromString(value);
        c.selected = c.value === color.value;
        return c;
      });
    }
    return {
      rgbaColors,
      handleSelect
    };
  }
});
const predefine_hoisted_1 = { class: "el-color-predefine" };
const predefine_hoisted_2 = { class: "el-color-predefine__colors" };
const predefine_hoisted_3 = ["onClick"];
function predefine_sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", predefine_hoisted_1, [
    (0,external_Vue_.createElementVNode)("div", predefine_hoisted_2, [
      ((0,external_Vue_.openBlock)(true), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, null, (0,external_Vue_.renderList)(_ctx.rgbaColors, (item, index) => {
        return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
          key: _ctx.colors[index],
          class: (0,external_Vue_.normalizeClass)(["el-color-predefine__color-selector", { selected: item.selected, "is-alpha": item._alpha < 100 }]),
          onClick: ($event) => _ctx.handleSelect(index)
        }, [
          (0,external_Vue_.createElementVNode)("div", {
            style: (0,external_Vue_.normalizeStyle)({ backgroundColor: item.value })
          }, null, 4)
        ], 10, predefine_hoisted_3);
      }), 128))
    ])
  ]);
}
var Predefine = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(predefine_sfc_main, [["render", predefine_sfc_render], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/color-picker/src/components/predefine.vue"]]);


//# sourceMappingURL=predefine.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/color-picker/src/components/sv-panel.mjs






const sv_panel_sfc_main = (0,external_Vue_.defineComponent)({
  name: "ElSlPanel",
  props: {
    color: {
      type: Object,
      required: true
    }
  },
  setup(props) {
    const instance = (0,external_Vue_.getCurrentInstance)();
    const cursorTop = (0,external_Vue_.ref)(0);
    const cursorLeft = (0,external_Vue_.ref)(0);
    const background = (0,external_Vue_.ref)("hsl(0, 100%, 50%)");
    const colorValue = (0,external_Vue_.computed)(() => {
      const hue = props.color.get("hue");
      const value = props.color.get("value");
      return { hue, value };
    });
    function update() {
      const saturation = props.color.get("saturation");
      const value = props.color.get("value");
      const el = instance.vnode.el;
      const { clientWidth: width, clientHeight: height } = el;
      cursorLeft.value = saturation * width / 100;
      cursorTop.value = (100 - value) * height / 100;
      background.value = `hsl(${props.color.get("hue")}, 100%, 50%)`;
    }
    function handleDrag(event) {
      const el = instance.vnode.el;
      const rect = el.getBoundingClientRect();
      const { clientX, clientY } = getClientXY(event);
      let left = clientX - rect.left;
      let top = clientY - rect.top;
      left = Math.max(0, left);
      left = Math.min(left, rect.width);
      top = Math.max(0, top);
      top = Math.min(top, rect.height);
      cursorLeft.value = left;
      cursorTop.value = top;
      props.color.set({
        saturation: left / rect.width * 100,
        value: 100 - top / rect.height * 100
      });
    }
    (0,external_Vue_.watch)(() => colorValue.value, () => {
      update();
    });
    (0,external_Vue_.onMounted)(() => {
      draggable(instance.vnode.el, {
        drag: (event) => {
          handleDrag(event);
        },
        end: (event) => {
          handleDrag(event);
        }
      });
      update();
    });
    return {
      cursorTop,
      cursorLeft,
      background,
      colorValue,
      handleDrag,
      update
    };
  }
});
const sv_panel_hoisted_1 = /* @__PURE__ */ (0,external_Vue_.createElementVNode)("div", { class: "el-color-svpanel__white" }, null, -1);
const sv_panel_hoisted_2 = /* @__PURE__ */ (0,external_Vue_.createElementVNode)("div", { class: "el-color-svpanel__black" }, null, -1);
const sv_panel_hoisted_3 = /* @__PURE__ */ (0,external_Vue_.createElementVNode)("div", null, null, -1);
const sv_panel_hoisted_4 = [
  sv_panel_hoisted_3
];
function sv_panel_sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
    class: "el-color-svpanel",
    style: (0,external_Vue_.normalizeStyle)({
      backgroundColor: _ctx.background
    })
  }, [
    sv_panel_hoisted_1,
    sv_panel_hoisted_2,
    (0,external_Vue_.createElementVNode)("div", {
      class: "el-color-svpanel__cursor",
      style: (0,external_Vue_.normalizeStyle)({
        top: _ctx.cursorTop + "px",
        left: _ctx.cursorLeft + "px"
      })
    }, sv_panel_hoisted_4, 4)
  ], 4);
}
var SvPanel = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(sv_panel_sfc_main, [["render", sv_panel_sfc_render], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/color-picker/src/components/sv-panel.vue"]]);


//# sourceMappingURL=sv-panel.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/color-picker/src/index.mjs





























const color_picker_src_sfc_main = (0,external_Vue_.defineComponent)({
  name: "ElColorPicker",
  components: {
    ElButton: ElButton,
    ElTooltip: ElTooltip,
    ElInput: components_input/* ElInput */.EZ,
    ElIcon: components_icon/* ElIcon */.gn,
    Close: dist/* Close */.x8P,
    ArrowDown: dist/* ArrowDown */.K5e,
    SvPanel: SvPanel,
    HueSlider: HueSlider,
    AlphaSlider: AlphaSlider,
    Predefine: Predefine
  },
  directives: {
    ClickOutside: ClickOutside
  },
  props: {
    modelValue: String,
    id: String,
    showAlpha: Boolean,
    colorFormat: String,
    disabled: Boolean,
    size: {
      type: String,
      validator: isValidComponentSize
    },
    popperClass: String,
    label: {
      type: String,
      default: void 0
    },
    tabindex: {
      type: [String, Number],
      default: 0
    },
    predefine: Array
  },
  emits: ["change", "active-change", constants_event/* UPDATE_MODEL_EVENT */.f_],
  setup(props, { emit }) {
    const { t } = useLocale();
    const ns = (0,use_namespace/* useNamespace */.s)("color");
    const elForm = (0,external_Vue_.inject)(tokens_form/* formContextKey */.H, {});
    const elFormItem = (0,external_Vue_.inject)(tokens_form/* formItemContextKey */.K, {});
    const { inputId: buttonId, isLabeledByFormItem } = (0,use_form_item/* useFormItemInputId */.p)(props, {
      formItemContext: elFormItem
    });
    const hue = (0,external_Vue_.ref)();
    const svPanel = (0,external_Vue_.ref)();
    const alpha = (0,external_Vue_.ref)();
    const popper = (0,external_Vue_.ref)(null);
    let shouldActiveChange = true;
    const color = (0,external_Vue_.reactive)(new Color({
      enableAlpha: props.showAlpha,
      format: props.colorFormat || "",
      value: props.modelValue
    }));
    const showPicker = (0,external_Vue_.ref)(false);
    const showPanelColor = (0,external_Vue_.ref)(false);
    const customInput = (0,external_Vue_.ref)("");
    const displayedColor = (0,external_Vue_.computed)(() => {
      if (!props.modelValue && !showPanelColor.value) {
        return "transparent";
      }
      return displayedRgb(color, props.showAlpha);
    });
    const colorSize = (0,use_common_props/* useSize */.tH)();
    const colorDisabled = (0,external_Vue_.computed)(() => {
      return !!(props.disabled || elForm.disabled);
    });
    const currentColor = (0,external_Vue_.computed)(() => {
      return !props.modelValue && !showPanelColor.value ? "" : color.value;
    });
    const buttonAriaLabel = (0,external_Vue_.computed)(() => {
      return !isLabeledByFormItem.value ? props.label || t("el.colorpicker.defaultLabel") : void 0;
    });
    const buttonAriaLabelledby = (0,external_Vue_.computed)(() => {
      return isLabeledByFormItem.value ? elFormItem.labelId : void 0;
    });
    (0,external_Vue_.watch)(() => props.modelValue, (newVal) => {
      if (!newVal) {
        showPanelColor.value = false;
      } else if (newVal && newVal !== color.value) {
        shouldActiveChange = false;
        color.fromString(newVal);
      }
    });
    (0,external_Vue_.watch)(() => currentColor.value, (val) => {
      customInput.value = val;
      shouldActiveChange && emit("active-change", val);
      shouldActiveChange = true;
    });
    (0,external_Vue_.watch)(() => color.value, () => {
      if (!props.modelValue && !showPanelColor.value) {
        showPanelColor.value = true;
      }
    });
    function displayedRgb(color2, showAlpha) {
      if (!(color2 instanceof Color)) {
        throw new TypeError("color should be instance of _color Class");
      }
      const { r, g, b } = color2.toRgb();
      return showAlpha ? `rgba(${r}, ${g}, ${b}, ${color2.get("alpha") / 100})` : `rgb(${r}, ${g}, ${b})`;
    }
    function setShowPicker(value) {
      showPicker.value = value;
    }
    const debounceSetShowPicker = (0,debounce/* default */.Z)(setShowPicker, 100);
    function hide() {
      debounceSetShowPicker(false);
      resetColor();
    }
    function resetColor() {
      (0,external_Vue_.nextTick)(() => {
        if (props.modelValue) {
          color.fromString(props.modelValue);
        } else {
          color.value = "";
          (0,external_Vue_.nextTick)(() => {
            showPanelColor.value = false;
          });
        }
      });
    }
    function handleTrigger() {
      if (colorDisabled.value)
        return;
      debounceSetShowPicker(!showPicker.value);
    }
    function handleConfirm() {
      color.fromString(customInput.value);
    }
    function confirmValue() {
      var _a;
      const value = color.value;
      emit(constants_event/* UPDATE_MODEL_EVENT */.f_, value);
      emit("change", value);
      (_a = elFormItem.validate) == null ? void 0 : _a.call(elFormItem, "change").catch((err) => (0,error/* debugWarn */.N)(err));
      debounceSetShowPicker(false);
      (0,external_Vue_.nextTick)(() => {
        const newColor = new Color({
          enableAlpha: props.showAlpha,
          format: props.colorFormat || "",
          value: props.modelValue
        });
        if (!color.compare(newColor)) {
          resetColor();
        }
      });
    }
    function clear() {
      var _a;
      debounceSetShowPicker(false);
      emit(constants_event/* UPDATE_MODEL_EVENT */.f_, null);
      emit("change", null);
      if (props.modelValue !== null) {
        (_a = elFormItem.validate) == null ? void 0 : _a.call(elFormItem, "change").catch((err) => (0,error/* debugWarn */.N)(err));
      }
      resetColor();
    }
    (0,external_Vue_.onMounted)(() => {
      if (props.modelValue) {
        customInput.value = currentColor.value;
      }
    });
    (0,external_Vue_.watch)(() => showPicker.value, () => {
      (0,external_Vue_.nextTick)(() => {
        var _a, _b, _c;
        (_a = hue.value) == null ? void 0 : _a.update();
        (_b = svPanel.value) == null ? void 0 : _b.update();
        (_c = alpha.value) == null ? void 0 : _c.update();
      });
    });
    (0,external_Vue_.provide)(OPTIONS_KEY, {
      currentColor
    });
    return {
      color,
      colorDisabled,
      colorSize,
      displayedColor,
      showPanelColor,
      showPicker,
      customInput,
      buttonId,
      buttonAriaLabel,
      buttonAriaLabelledby,
      handleConfirm,
      hide,
      handleTrigger,
      clear,
      confirmValue,
      t,
      ns,
      hue,
      svPanel,
      alpha,
      popper
    };
  }
});
const color_picker_src_hoisted_1 = ["id", "aria-label", "aria-labelledby", "aria-description", "tabindex"];
function color_picker_src_sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_hue_slider = (0,external_Vue_.resolveComponent)("hue-slider");
  const _component_sv_panel = (0,external_Vue_.resolveComponent)("sv-panel");
  const _component_alpha_slider = (0,external_Vue_.resolveComponent)("alpha-slider");
  const _component_predefine = (0,external_Vue_.resolveComponent)("predefine");
  const _component_el_input = (0,external_Vue_.resolveComponent)("el-input");
  const _component_el_button = (0,external_Vue_.resolveComponent)("el-button");
  const _component_arrow_down = (0,external_Vue_.resolveComponent)("arrow-down");
  const _component_el_icon = (0,external_Vue_.resolveComponent)("el-icon");
  const _component_close = (0,external_Vue_.resolveComponent)("close");
  const _component_el_tooltip = (0,external_Vue_.resolveComponent)("el-tooltip");
  const _directive_click_outside = (0,external_Vue_.resolveDirective)("click-outside");
  return (0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(_component_el_tooltip, {
    ref: "popper",
    visible: _ctx.showPicker,
    "onUpdate:visible": _cache[3] || (_cache[3] = ($event) => _ctx.showPicker = $event),
    "show-arrow": false,
    "fallback-placements": ["bottom", "top", "right", "left"],
    offset: 0,
    "gpu-acceleration": false,
    "popper-class": [_ctx.ns.be("picker", "panel"), _ctx.ns.b("dropdown"), _ctx.popperClass],
    "stop-popper-mouse-event": false,
    effect: "light",
    trigger: "click",
    transition: "el-zoom-in-top",
    persistent: ""
  }, {
    content: (0,external_Vue_.withCtx)(() => [
      (0,external_Vue_.withDirectives)(((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", null, [
        (0,external_Vue_.createElementVNode)("div", {
          class: (0,external_Vue_.normalizeClass)(_ctx.ns.be("dropdown", "main-wrapper"))
        }, [
          (0,external_Vue_.createVNode)(_component_hue_slider, {
            ref: "hue",
            class: "hue-slider",
            color: _ctx.color,
            vertical: ""
          }, null, 8, ["color"]),
          (0,external_Vue_.createVNode)(_component_sv_panel, {
            ref: "svPanel",
            color: _ctx.color
          }, null, 8, ["color"])
        ], 2),
        _ctx.showAlpha ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(_component_alpha_slider, {
          key: 0,
          ref: "alpha",
          color: _ctx.color
        }, null, 8, ["color"])) : (0,external_Vue_.createCommentVNode)("v-if", true),
        _ctx.predefine ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(_component_predefine, {
          key: 1,
          ref: "predefine",
          color: _ctx.color,
          colors: _ctx.predefine
        }, null, 8, ["color", "colors"])) : (0,external_Vue_.createCommentVNode)("v-if", true),
        (0,external_Vue_.createElementVNode)("div", {
          class: (0,external_Vue_.normalizeClass)(_ctx.ns.be("dropdown", "btns"))
        }, [
          (0,external_Vue_.createElementVNode)("span", {
            class: (0,external_Vue_.normalizeClass)(_ctx.ns.be("dropdown", "value"))
          }, [
            (0,external_Vue_.createVNode)(_component_el_input, {
              modelValue: _ctx.customInput,
              "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => _ctx.customInput = $event),
              "validate-event": false,
              size: "small",
              onKeyup: (0,external_Vue_.withKeys)(_ctx.handleConfirm, ["enter"]),
              onBlur: _ctx.handleConfirm
            }, null, 8, ["modelValue", "onKeyup", "onBlur"])
          ], 2),
          (0,external_Vue_.createVNode)(_component_el_button, {
            class: (0,external_Vue_.normalizeClass)(_ctx.ns.be("dropdown", "link-btn")),
            text: "",
            size: "small",
            onClick: _ctx.clear
          }, {
            default: (0,external_Vue_.withCtx)(() => [
              (0,external_Vue_.createTextVNode)((0,external_Vue_.toDisplayString)(_ctx.t("el.colorpicker.clear")), 1)
            ]),
            _: 1
          }, 8, ["class", "onClick"]),
          (0,external_Vue_.createVNode)(_component_el_button, {
            plain: "",
            size: "small",
            class: (0,external_Vue_.normalizeClass)(_ctx.ns.be("dropdown", "btn")),
            onClick: _ctx.confirmValue
          }, {
            default: (0,external_Vue_.withCtx)(() => [
              (0,external_Vue_.createTextVNode)((0,external_Vue_.toDisplayString)(_ctx.t("el.colorpicker.confirm")), 1)
            ]),
            _: 1
          }, 8, ["class", "onClick"])
        ], 2)
      ])), [
        [_directive_click_outside, _ctx.hide]
      ])
    ]),
    default: (0,external_Vue_.withCtx)(() => [
      (0,external_Vue_.createElementVNode)("div", {
        id: _ctx.buttonId,
        class: (0,external_Vue_.normalizeClass)([
          _ctx.ns.b("picker"),
          _ctx.ns.is("disabled", _ctx.colorDisabled),
          _ctx.ns.bm("picker", _ctx.colorSize)
        ]),
        role: "button",
        "aria-label": _ctx.buttonAriaLabel,
        "aria-labelledby": _ctx.buttonAriaLabelledby,
        "aria-description": _ctx.t("el.colorpicker.description", { color: _ctx.modelValue || "" }),
        tabindex: _ctx.tabindex,
        onKeydown: _cache[2] || (_cache[2] = (0,external_Vue_.withKeys)((...args) => _ctx.handleTrigger && _ctx.handleTrigger(...args), ["enter"]))
      }, [
        _ctx.colorDisabled ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
          key: 0,
          class: (0,external_Vue_.normalizeClass)(_ctx.ns.be("picker", "mask"))
        }, null, 2)) : (0,external_Vue_.createCommentVNode)("v-if", true),
        (0,external_Vue_.createElementVNode)("div", {
          class: (0,external_Vue_.normalizeClass)(_ctx.ns.be("picker", "trigger")),
          onClick: _cache[1] || (_cache[1] = (...args) => _ctx.handleTrigger && _ctx.handleTrigger(...args))
        }, [
          (0,external_Vue_.createElementVNode)("span", {
            class: (0,external_Vue_.normalizeClass)([_ctx.ns.be("picker", "color"), _ctx.ns.is("alpha", _ctx.showAlpha)])
          }, [
            (0,external_Vue_.createElementVNode)("span", {
              class: (0,external_Vue_.normalizeClass)(_ctx.ns.be("picker", "color-inner")),
              style: (0,external_Vue_.normalizeStyle)({
                backgroundColor: _ctx.displayedColor
              })
            }, [
              (0,external_Vue_.withDirectives)((0,external_Vue_.createVNode)(_component_el_icon, {
                class: (0,external_Vue_.normalizeClass)([_ctx.ns.be("picker", "icon"), _ctx.ns.is("icon-arrow-down")])
              }, {
                default: (0,external_Vue_.withCtx)(() => [
                  (0,external_Vue_.createVNode)(_component_arrow_down)
                ]),
                _: 1
              }, 8, ["class"]), [
                [external_Vue_.vShow, _ctx.modelValue || _ctx.showPanelColor]
              ]),
              !_ctx.modelValue && !_ctx.showPanelColor ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(_component_el_icon, {
                key: 0,
                class: (0,external_Vue_.normalizeClass)([_ctx.ns.be("picker", "empty"), _ctx.ns.is("icon-close")])
              }, {
                default: (0,external_Vue_.withCtx)(() => [
                  (0,external_Vue_.createVNode)(_component_close)
                ]),
                _: 1
              }, 8, ["class"])) : (0,external_Vue_.createCommentVNode)("v-if", true)
            ], 6)
          ], 2)
        ], 2)
      ], 42, color_picker_src_hoisted_1)
    ]),
    _: 1
  }, 8, ["visible", "popper-class"]);
}
var ColorPicker = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(color_picker_src_sfc_main, [["render", color_picker_src_sfc_render], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/color-picker/src/index.vue"]]);


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/color-picker/index.mjs


ColorPicker.install = (app) => {
  app.component(ColorPicker.name, ColorPicker);
};
const _ColorPicker = ColorPicker;
const ElColorPicker = _ColorPicker;


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/config-provider/src/config-provider.mjs







const messageConfig = {};
const configProviderProps = (0,runtime/* buildProps */.o8)({
  a11y: {
    type: Boolean,
    default: true
  },
  locale: {
    type: (0,runtime/* definePropType */.Cq)(Object)
  },
  size: use_common_props/* useSizeProp */.Pp,
  button: {
    type: (0,runtime/* definePropType */.Cq)(Object)
  },
  experimentalFeatures: {
    type: (0,runtime/* definePropType */.Cq)(Object)
  },
  keyboardNavigation: {
    type: Boolean,
    default: true
  },
  message: {
    type: (0,runtime/* definePropType */.Cq)(Object)
  },
  zIndex: Number,
  namespace: {
    type: String,
    default: "el"
  }
});
const ConfigProvider = (0,external_Vue_.defineComponent)({
  name: "ElConfigProvider",
  props: configProviderProps,
  setup(props, { slots }) {
    (0,external_Vue_.watch)(() => props.message, (val) => {
      Object.assign(messageConfig, val != null ? val : {});
    }, { immediate: true, deep: true });
    const config = (0,use_global_config/* provideGlobalConfig */.A)(props);
    return () => (0,external_Vue_.renderSlot)(slots, "default", { config: config == null ? void 0 : config.value });
  }
});


//# sourceMappingURL=config-provider.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/config-provider/index.mjs





const ElConfigProvider = (0,install/* withInstall */.nz)(ConfigProvider);


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/container/src/container.mjs





const container_default_ = {
  name: "ElContainer"
};
const container_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...container_default_,
  props: {
    direction: {
      type: String
    }
  },
  setup(__props) {
    const props = __props;
    const slots = (0,external_Vue_.useSlots)();
    const ns = (0,use_namespace/* useNamespace */.s)("container");
    const isVertical = (0,external_Vue_.computed)(() => {
      if (props.direction === "vertical") {
        return true;
      } else if (props.direction === "horizontal") {
        return false;
      }
      if (slots && slots.default) {
        const vNodes = slots.default();
        return vNodes.some((vNode) => {
          const tag = vNode.type.name;
          return tag === "ElHeader" || tag === "ElFooter";
        });
      } else {
        return false;
      }
    });
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("section", {
        class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(ns).b(), (0,external_Vue_.unref)(ns).is("vertical", (0,external_Vue_.unref)(isVertical))])
      }, [
        (0,external_Vue_.renderSlot)(_ctx.$slots, "default")
      ], 2);
    };
  }
});
var Container = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(container_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/container/src/container.vue"]]);


//# sourceMappingURL=container.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/container/src/aside.mjs





const aside_default_ = {
  name: "ElAside"
};
const aside_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...aside_default_,
  props: {
    width: {
      type: String,
      default: null
    }
  },
  setup(__props) {
    const props = __props;
    const ns = (0,use_namespace/* useNamespace */.s)("aside");
    const style = (0,external_Vue_.computed)(() => props.width ? ns.cssVarBlock({ width: props.width }) : {});
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("aside", {
        class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).b()),
        style: (0,external_Vue_.normalizeStyle)((0,external_Vue_.unref)(style))
      }, [
        (0,external_Vue_.renderSlot)(_ctx.$slots, "default")
      ], 6);
    };
  }
});
var Aside = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(aside_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/container/src/aside.vue"]]);


//# sourceMappingURL=aside.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/container/src/footer.mjs





const footer_default_ = {
  name: "ElFooter"
};
const footer_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...footer_default_,
  props: {
    height: {
      type: String,
      default: null
    }
  },
  setup(__props) {
    const props = __props;
    const ns = (0,use_namespace/* useNamespace */.s)("footer");
    const style = (0,external_Vue_.computed)(() => props.height ? ns.cssVarBlock({ height: props.height }) : {});
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("footer", {
        class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).b()),
        style: (0,external_Vue_.normalizeStyle)((0,external_Vue_.unref)(style))
      }, [
        (0,external_Vue_.renderSlot)(_ctx.$slots, "default")
      ], 6);
    };
  }
});
var Footer = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(footer_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/container/src/footer.vue"]]);


//# sourceMappingURL=footer.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/container/src/header.mjs





const header_default_ = {
  name: "ElHeader"
};
const header_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...header_default_,
  props: {
    height: {
      type: String,
      default: null
    }
  },
  setup(__props) {
    const props = __props;
    const ns = (0,use_namespace/* useNamespace */.s)("header");
    const style = (0,external_Vue_.computed)(() => {
      return props.height ? ns.cssVarBlock({
        height: props.height
      }) : {};
    });
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("header", {
        class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).b()),
        style: (0,external_Vue_.normalizeStyle)((0,external_Vue_.unref)(style))
      }, [
        (0,external_Vue_.renderSlot)(_ctx.$slots, "default")
      ], 6);
    };
  }
});
var Header = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(header_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/container/src/header.vue"]]);


//# sourceMappingURL=header.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/container/src/main.mjs





const main_default_ = {
  name: "ElMain"
};
const main_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...main_default_,
  setup(__props) {
    const ns = (0,use_namespace/* useNamespace */.s)("main");
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("main", {
        class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).b())
      }, [
        (0,external_Vue_.renderSlot)(_ctx.$slots, "default")
      ], 2);
    };
  }
});
var Main = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(main_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/container/src/main.vue"]]);


//# sourceMappingURL=main.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/container/index.mjs








const ElContainer = (0,install/* withInstall */.nz)(Container, {
  Aside: Aside,
  Footer: Footer,
  Header: Header,
  Main: Main
});
const ElAside = (0,install/* withNoopInstall */.dp)(Aside);
const ElFooter = (0,install/* withNoopInstall */.dp)(Footer);
const ElHeader = (0,install/* withNoopInstall */.dp)(Header);
const ElMain = (0,install/* withNoopInstall */.dp)(Main);


//# sourceMappingURL=index.mjs.map

// EXTERNAL MODULE: ./node_modules/dayjs/plugin/customParseFormat.js
var customParseFormat = __webpack_require__(10285);
// EXTERNAL MODULE: ./node_modules/dayjs/plugin/advancedFormat.js
var advancedFormat = __webpack_require__(28734);
// EXTERNAL MODULE: ./node_modules/dayjs/plugin/weekOfYear.js
var weekOfYear = __webpack_require__(55183);
// EXTERNAL MODULE: ./node_modules/dayjs/plugin/weekYear.js
var weekYear = __webpack_require__(172);
// EXTERNAL MODULE: ./node_modules/dayjs/plugin/dayOfYear.js
var dayOfYear = __webpack_require__(92997);
// EXTERNAL MODULE: ./node_modules/dayjs/plugin/isSameOrAfter.js
var isSameOrAfter = __webpack_require__(79212);
// EXTERNAL MODULE: ./node_modules/dayjs/plugin/isSameOrBefore.js
var isSameOrBefore = __webpack_require__(37412);
;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/date-picker/src/props/date-picker.mjs



const datePickerProps = (0,runtime/* buildProps */.o8)({
  type: {
    type: (0,runtime/* definePropType */.Cq)(String),
    default: "date"
  }
});


//# sourceMappingURL=date-picker.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/date-picker/src/props/shared.mjs






const selectionModes = ["date", "dates", "year", "month", "week", "range"];
const datePickerSharedProps = (0,runtime/* buildProps */.o8)({
  disabledDate: {
    type: (0,runtime/* definePropType */.Cq)(Function)
  },
  date: {
    type: (0,runtime/* definePropType */.Cq)(Object),
    required: true
  },
  minDate: {
    type: (0,runtime/* definePropType */.Cq)(Object)
  },
  maxDate: {
    type: (0,runtime/* definePropType */.Cq)(Object)
  },
  parsedValue: {
    type: (0,runtime/* definePropType */.Cq)([Object, Array])
  },
  rangeState: {
    type: (0,runtime/* definePropType */.Cq)(Object),
    default: () => ({
      endDate: null,
      selecting: false
    })
  }
});
const panelSharedProps = (0,runtime/* buildProps */.o8)({
  type: {
    type: (0,runtime/* definePropType */.Cq)(String),
    required: true,
    values: date/* datePickTypes */.P
  }
});
const panelRangeSharedProps = (0,runtime/* buildProps */.o8)({
  unlinkPanels: Boolean,
  parsedValue: {
    type: (0,runtime/* definePropType */.Cq)(Array)
  }
});
const selectionModeWithDefault = (mode) => {
  return {
    type: String,
    values: selectionModes,
    default: mode
  };
};
const rangePickerSharedEmits = {
  pick: (range) => (0,shared_esm_bundler/* isArray */.kJ)(range)
};


//# sourceMappingURL=shared.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/date-picker/src/props/panel-date-pick.mjs




const panelDatePickProps = (0,runtime/* buildProps */.o8)({
  ...panelSharedProps,
  parsedValue: {
    type: (0,runtime/* definePropType */.Cq)([Object, Array])
  },
  visible: {
    type: Boolean
  },
  format: {
    type: String,
    default: ""
  }
});


//# sourceMappingURL=panel-date-pick.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/date-picker/src/props/basic-date-table.mjs




const basicDateTableProps = (0,runtime/* buildProps */.o8)({
  ...datePickerSharedProps,
  cellClassName: {
    type: (0,runtime/* definePropType */.Cq)(Function)
  },
  showWeekNumber: Boolean,
  selectionMode: selectionModeWithDefault("date")
});


//# sourceMappingURL=basic-date-table.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/date-picker/src/utils.mjs




const utils_isValidRange = (range) => {
  if (!(0,shared_esm_bundler/* isArray */.kJ)(range))
    return false;
  const [left, right] = range;
  return dayjs_min.isDayjs(left) && dayjs_min.isDayjs(right) && left.isSameOrBefore(right);
};
const getDefaultValue = (defaultValue, { lang, unit, unlinkPanels }) => {
  let start;
  if ((0,shared_esm_bundler/* isArray */.kJ)(defaultValue)) {
    let [left, right] = defaultValue.map((d) => dayjs_min(d).locale(lang));
    if (!unlinkPanels) {
      right = left.add(1, unit);
    }
    return [left, right];
  } else if (defaultValue) {
    start = dayjs_min(defaultValue);
  } else {
    start = dayjs_min();
  }
  start = start.locale(lang);
  return [start, start.add(1, unit)];
};
const buildPickerTable = (dimension, rows, {
  columnIndexOffset,
  startDate,
  nextEndDate,
  now,
  unit,
  relativeDateGetter,
  setCellMetadata,
  setRowMetadata
}) => {
  for (let rowIndex = 0; rowIndex < dimension.row; rowIndex++) {
    const row = rows[rowIndex];
    for (let columnIndex = 0; columnIndex < dimension.column; columnIndex++) {
      let cell = row[columnIndex + columnIndexOffset];
      if (!cell) {
        cell = {
          row: rowIndex,
          column: columnIndex,
          type: "normal",
          inRange: false,
          start: false,
          end: false
        };
      }
      const index = rowIndex * dimension.column + columnIndex;
      const nextStartDate = relativeDateGetter(index);
      cell.dayjs = nextStartDate;
      cell.date = nextStartDate.toDate();
      cell.timestamp = nextStartDate.valueOf();
      cell.type = "normal";
      cell.inRange = !!(startDate && nextStartDate.isSameOrAfter(startDate, unit) && nextEndDate && nextStartDate.isSameOrBefore(nextEndDate, unit)) || !!(startDate && nextStartDate.isSameOrBefore(startDate, unit) && nextEndDate && nextStartDate.isSameOrAfter(nextEndDate, unit));
      if (startDate == null ? void 0 : startDate.isSameOrAfter(nextEndDate)) {
        cell.start = !!nextEndDate && nextStartDate.isSame(nextEndDate, unit);
        cell.end = startDate && nextStartDate.isSame(startDate, unit);
      } else {
        cell.start = !!startDate && nextStartDate.isSame(startDate, unit);
        cell.end = !!nextEndDate && nextStartDate.isSame(nextEndDate, unit);
      }
      const isToday = nextStartDate.isSame(now, unit);
      if (isToday) {
        cell.type = "today";
      }
      setCellMetadata == null ? void 0 : setCellMetadata(cell, { rowIndex, columnIndex });
      row[columnIndex + columnIndexOffset] = cell;
    }
    setRowMetadata == null ? void 0 : setRowMetadata(row);
  }
};


//# sourceMappingURL=utils.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/date-picker/src/props/basic-cell.mjs



const basicCellProps = (0,runtime/* buildProps */.o8)({
  cell: {
    type: (0,runtime/* definePropType */.Cq)(Object)
  }
});


//# sourceMappingURL=basic-cell.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/tokens/date-picker.mjs
const ROOT_PICKER_INJECTION_KEY = Symbol();


//# sourceMappingURL=date-picker.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/date-picker/src/date-picker-com/basic-cell-render.mjs







var ElDatePickerCell = (0,external_Vue_.defineComponent)({
  name: "ElDatePickerCell",
  props: basicCellProps,
  setup(props) {
    const ns = (0,use_namespace/* useNamespace */.s)("date-table-cell");
    const {
      slots
    } = (0,external_Vue_.inject)(ROOT_PICKER_INJECTION_KEY);
    return () => {
      const {
        cell
      } = props;
      if (slots.default) {
        const list = slots.default(cell).filter((item) => {
          return item.patchFlag !== -2 && item.type.toString() !== "Symbol(Comment)";
        });
        if (list.length) {
          return list;
        }
      }
      return (0,external_Vue_.createVNode)("div", {
        "class": ns.b()
      }, [(0,external_Vue_.createVNode)("span", {
        "class": ns.e("text")
      }, [cell == null ? void 0 : cell.text])]);
    };
  }
});


//# sourceMappingURL=basic-cell-render.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/date-picker/src/date-picker-com/basic-date-table.mjs












const basic_date_table_hoisted_1 = ["aria-label"];
const basic_date_table_hoisted_2 = {
  key: 0,
  scope: "col"
};
const basic_date_table_hoisted_3 = ["aria-label"];
const basic_date_table_hoisted_4 = ["aria-current", "aria-selected", "tabindex"];
const basic_date_table_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  __name: "basic-date-table",
  props: basicDateTableProps,
  emits: ["changerange", "pick", "select"],
  setup(__props, { expose, emit }) {
    const props = __props;
    const ns = (0,use_namespace/* useNamespace */.s)("date-table");
    const { t, lang } = useLocale();
    const tbodyRef = (0,external_Vue_.ref)();
    const currentCellRef = (0,external_Vue_.ref)();
    const lastRow = (0,external_Vue_.ref)();
    const lastColumn = (0,external_Vue_.ref)();
    const tableRows = (0,external_Vue_.ref)([[], [], [], [], [], []]);
    const firstDayOfWeek = props.date.$locale().weekStart || 7;
    const WEEKS_CONSTANT = props.date.locale("en").localeData().weekdaysShort().map((_) => _.toLowerCase());
    const offsetDay = (0,external_Vue_.computed)(() => {
      return firstDayOfWeek > 3 ? 7 - firstDayOfWeek : -firstDayOfWeek;
    });
    const startDate = (0,external_Vue_.computed)(() => {
      const startDayOfMonth = props.date.startOf("month");
      return startDayOfMonth.subtract(startDayOfMonth.day() || 7, "day");
    });
    const WEEKS = (0,external_Vue_.computed)(() => {
      return WEEKS_CONSTANT.concat(WEEKS_CONSTANT).slice(firstDayOfWeek, firstDayOfWeek + 7);
    });
    const hasCurrent = (0,external_Vue_.computed)(() => {
      return rows.value.flat().some((row) => {
        return row.isCurrent;
      });
    });
    const days = (0,external_Vue_.computed)(() => {
      const startOfMonth = props.date.startOf("month");
      const startOfMonthDay = startOfMonth.day() || 7;
      const dateCountOfMonth = startOfMonth.daysInMonth();
      const dateCountOfLastMonth = startOfMonth.subtract(1, "month").daysInMonth();
      return {
        startOfMonthDay,
        dateCountOfMonth,
        dateCountOfLastMonth
      };
    });
    const selectedDate = (0,external_Vue_.computed)(() => {
      return props.selectionMode === "dates" ? castArray(props.parsedValue) : [];
    });
    const setDateText = (cell, {
      count,
      rowIndex,
      columnIndex
    }) => {
      const { startOfMonthDay, dateCountOfMonth, dateCountOfLastMonth } = (0,external_Vue_.unref)(days);
      const offset = (0,external_Vue_.unref)(offsetDay);
      if (rowIndex >= 0 && rowIndex <= 1) {
        const numberOfDaysFromPreviousMonth = startOfMonthDay + offset < 0 ? 7 + startOfMonthDay + offset : startOfMonthDay + offset;
        if (columnIndex + rowIndex * 7 >= numberOfDaysFromPreviousMonth) {
          cell.text = count;
          return true;
        } else {
          cell.text = dateCountOfLastMonth - (numberOfDaysFromPreviousMonth - columnIndex % 7) + 1 + rowIndex * 7;
          cell.type = "prev-month";
        }
      } else {
        if (count <= dateCountOfMonth) {
          cell.text = count;
        } else {
          cell.text = count - dateCountOfMonth;
          cell.type = "next-month";
        }
        return true;
      }
      return false;
    };
    const setCellMetadata = (cell, {
      columnIndex,
      rowIndex
    }, count) => {
      const { disabledDate, cellClassName } = props;
      const _selectedDate = (0,external_Vue_.unref)(selectedDate);
      const shouldIncrement = setDateText(cell, { count, rowIndex, columnIndex });
      const cellDate = cell.dayjs.toDate();
      cell.selected = _selectedDate.find((d) => d.valueOf() === cell.dayjs.valueOf());
      cell.isSelected = !!cell.selected;
      cell.isCurrent = isCurrent(cell);
      cell.disabled = disabledDate == null ? void 0 : disabledDate(cellDate);
      cell.customClass = cellClassName == null ? void 0 : cellClassName(cellDate);
      return shouldIncrement;
    };
    const setRowMetadata = (row) => {
      if (props.selectionMode === "week") {
        const [start, end] = props.showWeekNumber ? [1, 7] : [0, 6];
        const isActive = isWeekActive(row[start + 1]);
        row[start].inRange = isActive;
        row[start].start = isActive;
        row[end].inRange = isActive;
        row[end].end = isActive;
      }
    };
    const rows = (0,external_Vue_.computed)(() => {
      const { minDate, maxDate, rangeState, showWeekNumber } = props;
      const offset = offsetDay.value;
      const rows_ = tableRows.value;
      const dateUnit = "day";
      let count = 1;
      if (showWeekNumber) {
        for (let rowIndex = 0; rowIndex < 6; rowIndex++) {
          if (!rows_[rowIndex][0]) {
            rows_[rowIndex][0] = {
              type: "week",
              text: startDate.value.add(rowIndex * 7 + 1, dateUnit).week()
            };
          }
        }
      }
      buildPickerTable({ row: 6, column: 7 }, rows_, {
        startDate: minDate,
        columnIndexOffset: showWeekNumber ? 1 : 0,
        nextEndDate: rangeState.endDate || maxDate || rangeState.selecting && minDate || null,
        now: dayjs_min().locale((0,external_Vue_.unref)(lang)).startOf(dateUnit),
        unit: dateUnit,
        relativeDateGetter: (idx) => startDate.value.add(idx - offset, dateUnit),
        setCellMetadata: (...args) => {
          if (setCellMetadata(...args, count)) {
            count += 1;
          }
        },
        setRowMetadata
      });
      return rows_;
    });
    (0,external_Vue_.watch)(() => props.date, async () => {
      var _a, _b;
      if ((_a = tbodyRef.value) == null ? void 0 : _a.contains(document.activeElement)) {
        await (0,external_Vue_.nextTick)();
        (_b = currentCellRef.value) == null ? void 0 : _b.focus();
      }
    });
    const focus = async () => {
      var _a;
      (_a = currentCellRef.value) == null ? void 0 : _a.focus();
    };
    const isNormalDay = (type = "") => {
      return ["normal", "today"].includes(type);
    };
    const isCurrent = (cell) => {
      return props.selectionMode === "date" && isNormalDay(cell.type) && cellMatchesDate(cell, props.parsedValue);
    };
    const cellMatchesDate = (cell, date) => {
      if (!date)
        return false;
      return dayjs_min(date).locale(lang.value).isSame(props.date.date(Number(cell.text)), "day");
    };
    const getCellClasses = (cell) => {
      const classes = [];
      if (isNormalDay(cell.type) && !cell.disabled) {
        classes.push("available");
        if (cell.type === "today") {
          classes.push("today");
        }
      } else {
        classes.push(cell.type);
      }
      if (isCurrent(cell)) {
        classes.push("current");
      }
      if (cell.inRange && (isNormalDay(cell.type) || props.selectionMode === "week")) {
        classes.push("in-range");
        if (cell.start) {
          classes.push("start-date");
        }
        if (cell.end) {
          classes.push("end-date");
        }
      }
      if (cell.disabled) {
        classes.push("disabled");
      }
      if (cell.selected) {
        classes.push("selected");
      }
      if (cell.customClass) {
        classes.push(cell.customClass);
      }
      return classes.join(" ");
    };
    const getDateOfCell = (row, column) => {
      const offsetFromStart = row * 7 + (column - (props.showWeekNumber ? 1 : 0)) - offsetDay.value;
      return startDate.value.add(offsetFromStart, "day");
    };
    const handleMouseMove = (event) => {
      var _a;
      if (!props.rangeState.selecting)
        return;
      let target = event.target;
      if (target.tagName === "SPAN") {
        target = (_a = target.parentNode) == null ? void 0 : _a.parentNode;
      }
      if (target.tagName === "DIV") {
        target = target.parentNode;
      }
      if (target.tagName !== "TD")
        return;
      const row = target.parentNode.rowIndex - 1;
      const column = target.cellIndex;
      if (rows.value[row][column].disabled)
        return;
      if (row !== lastRow.value || column !== lastColumn.value) {
        lastRow.value = row;
        lastColumn.value = column;
        emit("changerange", {
          selecting: true,
          endDate: getDateOfCell(row, column)
        });
      }
    };
    const isSelectedCell = (cell) => {
      return !hasCurrent.value && (cell == null ? void 0 : cell.text) === 1 && cell.type === "normal" || cell.isCurrent;
    };
    const handleFocus = (event) => {
      if (!hasCurrent.value && props.selectionMode === "date") {
        handlePickDate(event, true);
      }
    };
    const handlePickDate = (event, isKeyboardMovement = false) => {
      const target = event.target.closest("td");
      if (!target || target.tagName !== "TD")
        return;
      const row = target.parentNode.rowIndex - 1;
      const column = target.cellIndex;
      const cell = rows.value[row][column];
      if (cell.disabled || cell.type === "week")
        return;
      const newDate = getDateOfCell(row, column);
      if (props.selectionMode === "range") {
        if (!props.rangeState.selecting || !props.minDate) {
          emit("pick", { minDate: newDate, maxDate: null });
          emit("select", true);
        } else {
          if (newDate >= props.minDate) {
            emit("pick", { minDate: props.minDate, maxDate: newDate });
          } else {
            emit("pick", { minDate: newDate, maxDate: props.minDate });
          }
          emit("select", false);
        }
      } else if (props.selectionMode === "date") {
        emit("pick", newDate, isKeyboardMovement);
      } else if (props.selectionMode === "week") {
        const weekNumber = newDate.week();
        const value = `${newDate.year()}w${weekNumber}`;
        emit("pick", {
          year: newDate.year(),
          week: weekNumber,
          value,
          date: newDate.startOf("week")
        });
      } else if (props.selectionMode === "dates") {
        const newValue = cell.selected ? castArray(props.parsedValue).filter((d) => (d == null ? void 0 : d.valueOf()) !== newDate.valueOf()) : castArray(props.parsedValue).concat([newDate]);
        emit("pick", newValue);
      }
    };
    const isWeekActive = (cell) => {
      if (props.selectionMode !== "week")
        return false;
      let newDate = props.date.startOf("day");
      if (cell.type === "prev-month") {
        newDate = newDate.subtract(1, "month");
      }
      if (cell.type === "next-month") {
        newDate = newDate.add(1, "month");
      }
      newDate = newDate.date(Number.parseInt(cell.text, 10));
      if (props.parsedValue && !Array.isArray(props.parsedValue)) {
        const dayOffset = (props.parsedValue.day() - firstDayOfWeek + 7) % 7 - 1;
        const weekDate = props.parsedValue.subtract(dayOffset, "day");
        return weekDate.isSame(newDate, "day");
      }
      return false;
    };
    expose({
      focus
    });
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("table", {
        role: "grid",
        "aria-label": (0,external_Vue_.unref)(t)("el.datepicker.dateTablePrompt"),
        cellspacing: "0",
        cellpadding: "0",
        class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(ns).b(), { "is-week-mode": _ctx.selectionMode === "week" }]),
        onClick: handlePickDate,
        onMousemove: handleMouseMove
      }, [
        (0,external_Vue_.createElementVNode)("tbody", {
          ref_key: "tbodyRef",
          ref: tbodyRef
        }, [
          (0,external_Vue_.createElementVNode)("tr", null, [
            _ctx.showWeekNumber ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("th", basic_date_table_hoisted_2, (0,external_Vue_.toDisplayString)((0,external_Vue_.unref)(t)("el.datepicker.week")), 1)) : (0,external_Vue_.createCommentVNode)("v-if", true),
            ((0,external_Vue_.openBlock)(true), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, null, (0,external_Vue_.renderList)((0,external_Vue_.unref)(WEEKS), (week, key) => {
              return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("th", {
                key,
                scope: "col",
                "aria-label": (0,external_Vue_.unref)(t)("el.datepicker.weeksFull." + week)
              }, (0,external_Vue_.toDisplayString)((0,external_Vue_.unref)(t)("el.datepicker.weeks." + week)), 9, basic_date_table_hoisted_3);
            }), 128))
          ]),
          ((0,external_Vue_.openBlock)(true), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, null, (0,external_Vue_.renderList)((0,external_Vue_.unref)(rows), (row, rowKey) => {
            return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("tr", {
              key: rowKey,
              class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(ns).e("row"), { current: isWeekActive(row[1]) }])
            }, [
              ((0,external_Vue_.openBlock)(true), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, null, (0,external_Vue_.renderList)(row, (cell, columnKey) => {
                return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("td", {
                  key: `${rowKey}.${columnKey}`,
                  ref_for: true,
                  ref: (el) => {
                    isSelectedCell(cell) && (currentCellRef.value = el);
                  },
                  class: (0,external_Vue_.normalizeClass)(getCellClasses(cell)),
                  "aria-current": cell.isCurrent ? "date" : void 0,
                  "aria-selected": cell.isCurrent,
                  tabindex: isSelectedCell(cell) ? 0 : -1,
                  onFocus: handleFocus
                }, [
                  (0,external_Vue_.createVNode)((0,external_Vue_.unref)(ElDatePickerCell), { cell }, null, 8, ["cell"])
                ], 42, basic_date_table_hoisted_4);
              }), 128))
            ], 2);
          }), 128))
        ], 512)
      ], 42, basic_date_table_hoisted_1);
    };
  }
});
var basic_date_table_DateTable = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(basic_date_table_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/date-picker/src/date-picker-com/basic-date-table.vue"]]);


//# sourceMappingURL=basic-date-table.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/date-picker/src/props/basic-month-table.mjs




const basicMonthTableProps = (0,runtime/* buildProps */.o8)({
  ...datePickerSharedProps,
  selectionMode: selectionModeWithDefault("month")
});


//# sourceMappingURL=basic-month-table.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/date-picker/src/date-picker-com/basic-month-table.mjs













const basic_month_table_hoisted_1 = ["aria-label"];
const basic_month_table_hoisted_2 = ["aria-selected", "aria-label", "tabindex", "onKeydown"];
const basic_month_table_hoisted_3 = { class: "cell" };
const basic_month_table_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  __name: "basic-month-table",
  props: basicMonthTableProps,
  emits: ["changerange", "pick", "select"],
  setup(__props, { expose, emit }) {
    const props = __props;
    const datesInMonth = (year, month, lang2) => {
      const firstDay = dayjs_min().locale(lang2).startOf("month").month(month).year(year);
      const numOfDays = firstDay.daysInMonth();
      return rangeArr(numOfDays).map((n) => firstDay.add(n, "day").toDate());
    };
    const ns = (0,use_namespace/* useNamespace */.s)("month-table");
    const { t, lang } = useLocale();
    const tbodyRef = (0,external_Vue_.ref)();
    const currentCellRef = (0,external_Vue_.ref)();
    const months = (0,external_Vue_.ref)(props.date.locale("en").localeData().monthsShort().map((_) => _.toLowerCase()));
    const tableRows = (0,external_Vue_.ref)([
      [],
      [],
      []
    ]);
    const lastRow = (0,external_Vue_.ref)();
    const lastColumn = (0,external_Vue_.ref)();
    const rows = (0,external_Vue_.computed)(() => {
      var _a, _b;
      const rows2 = tableRows.value;
      const now = dayjs_min().locale(lang.value).startOf("month");
      for (let i = 0; i < 3; i++) {
        const row = rows2[i];
        for (let j = 0; j < 4; j++) {
          const cell = row[j] || (row[j] = {
            row: i,
            column: j,
            type: "normal",
            inRange: false,
            start: false,
            end: false,
            text: -1,
            disabled: false
          });
          cell.type = "normal";
          const index = i * 4 + j;
          const calTime = props.date.startOf("year").month(index);
          const calEndDate = props.rangeState.endDate || props.maxDate || props.rangeState.selecting && props.minDate || null;
          cell.inRange = !!(props.minDate && calTime.isSameOrAfter(props.minDate, "month") && calEndDate && calTime.isSameOrBefore(calEndDate, "month")) || !!(props.minDate && calTime.isSameOrBefore(props.minDate, "month") && calEndDate && calTime.isSameOrAfter(calEndDate, "month"));
          if ((_a = props.minDate) == null ? void 0 : _a.isSameOrAfter(calEndDate)) {
            cell.start = !!(calEndDate && calTime.isSame(calEndDate, "month"));
            cell.end = props.minDate && calTime.isSame(props.minDate, "month");
          } else {
            cell.start = !!(props.minDate && calTime.isSame(props.minDate, "month"));
            cell.end = !!(calEndDate && calTime.isSame(calEndDate, "month"));
          }
          const isToday = now.isSame(calTime);
          if (isToday) {
            cell.type = "today";
          }
          cell.text = index;
          cell.disabled = ((_b = props.disabledDate) == null ? void 0 : _b.call(props, calTime.toDate())) || false;
        }
      }
      return rows2;
    });
    const focus = () => {
      var _a;
      (_a = currentCellRef.value) == null ? void 0 : _a.focus();
    };
    const getCellStyle = (cell) => {
      const style = {};
      const year = props.date.year();
      const today = new Date();
      const month = cell.text;
      style.disabled = props.disabledDate ? datesInMonth(year, month, lang.value).every(props.disabledDate) : false;
      style.current = castArray(props.parsedValue).findIndex((date) => dayjs_min.isDayjs(date) && date.year() === year && date.month() === month) >= 0;
      style.today = today.getFullYear() === year && today.getMonth() === month;
      if (cell.inRange) {
        style["in-range"] = true;
        if (cell.start) {
          style["start-date"] = true;
        }
        if (cell.end) {
          style["end-date"] = true;
        }
      }
      return style;
    };
    const isSelectedCell = (cell) => {
      const year = props.date.year();
      const month = cell.text;
      return castArray(props.date).findIndex((date) => date.year() === year && date.month() === month) >= 0;
    };
    const handleMouseMove = (event) => {
      var _a;
      if (!props.rangeState.selecting)
        return;
      let target = event.target;
      if (target.tagName === "A") {
        target = (_a = target.parentNode) == null ? void 0 : _a.parentNode;
      }
      if (target.tagName === "DIV") {
        target = target.parentNode;
      }
      if (target.tagName !== "TD")
        return;
      const row = target.parentNode.rowIndex;
      const column = target.cellIndex;
      if (rows.value[row][column].disabled)
        return;
      if (row !== lastRow.value || column !== lastColumn.value) {
        lastRow.value = row;
        lastColumn.value = column;
        emit("changerange", {
          selecting: true,
          endDate: props.date.startOf("year").month(row * 4 + column)
        });
      }
    };
    const handleMonthTableClick = (event) => {
      var _a;
      const target = (_a = event.target) == null ? void 0 : _a.closest("td");
      if ((target == null ? void 0 : target.tagName) !== "TD")
        return;
      if ((0,dom_style/* hasClass */.pv)(target, "disabled"))
        return;
      const column = target.cellIndex;
      const row = target.parentNode.rowIndex;
      const month = row * 4 + column;
      const newDate = props.date.startOf("year").month(month);
      if (props.selectionMode === "range") {
        if (!props.rangeState.selecting) {
          emit("pick", { minDate: newDate, maxDate: null });
          emit("select", true);
        } else {
          if (props.minDate && newDate >= props.minDate) {
            emit("pick", { minDate: props.minDate, maxDate: newDate });
          } else {
            emit("pick", { minDate: newDate, maxDate: props.minDate });
          }
          emit("select", false);
        }
      } else {
        emit("pick", month);
      }
    };
    (0,external_Vue_.watch)(() => props.date, async () => {
      var _a, _b;
      if ((_a = tbodyRef.value) == null ? void 0 : _a.contains(document.activeElement)) {
        await (0,external_Vue_.nextTick)();
        (_b = currentCellRef.value) == null ? void 0 : _b.focus();
      }
    });
    expose({
      focus
    });
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("table", {
        role: "grid",
        "aria-label": (0,external_Vue_.unref)(t)("el.datepicker.monthTablePrompt"),
        class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).b()),
        onClick: handleMonthTableClick,
        onMousemove: handleMouseMove
      }, [
        (0,external_Vue_.createElementVNode)("tbody", {
          ref_key: "tbodyRef",
          ref: tbodyRef
        }, [
          ((0,external_Vue_.openBlock)(true), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, null, (0,external_Vue_.renderList)((0,external_Vue_.unref)(rows), (row, key) => {
            return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("tr", { key }, [
              ((0,external_Vue_.openBlock)(true), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, null, (0,external_Vue_.renderList)(row, (cell, key_) => {
                return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("td", {
                  key: key_,
                  ref_for: true,
                  ref: (el) => isSelectedCell(cell) && (currentCellRef.value = el),
                  class: (0,external_Vue_.normalizeClass)(getCellStyle(cell)),
                  "aria-selected": `${isSelectedCell(cell)}`,
                  "aria-label": (0,external_Vue_.unref)(t)(`el.datepicker.month${+cell.text + 1}`),
                  tabindex: isSelectedCell(cell) ? 0 : -1,
                  onKeydown: [
                    (0,external_Vue_.withKeys)((0,external_Vue_.withModifiers)(handleMonthTableClick, ["prevent", "stop"]), ["space"]),
                    (0,external_Vue_.withKeys)((0,external_Vue_.withModifiers)(handleMonthTableClick, ["prevent", "stop"]), ["enter"])
                  ]
                }, [
                  (0,external_Vue_.createElementVNode)("div", null, [
                    (0,external_Vue_.createElementVNode)("span", basic_month_table_hoisted_3, (0,external_Vue_.toDisplayString)((0,external_Vue_.unref)(t)("el.datepicker.months." + months.value[cell.text])), 1)
                  ])
                ], 42, basic_month_table_hoisted_2);
              }), 128))
            ]);
          }), 128))
        ], 512)
      ], 42, basic_month_table_hoisted_1);
    };
  }
});
var MonthTable = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(basic_month_table_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/date-picker/src/date-picker-com/basic-month-table.vue"]]);


//# sourceMappingURL=basic-month-table.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/date-picker/src/props/basic-year-table.mjs




const { date: basic_year_table_date, disabledDate, parsedValue } = datePickerSharedProps;
const basicYearTableProps = (0,runtime/* buildProps */.o8)({
  date: basic_year_table_date,
  disabledDate,
  parsedValue
});


//# sourceMappingURL=basic-year-table.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/date-picker/src/date-picker-com/basic-year-table.mjs













const basic_year_table_hoisted_1 = ["aria-label"];
const basic_year_table_hoisted_2 = ["aria-selected", "tabindex", "onKeydown"];
const basic_year_table_hoisted_3 = { class: "cell" };
const basic_year_table_hoisted_4 = { key: 1 };
const basic_year_table_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  __name: "basic-year-table",
  props: basicYearTableProps,
  emits: ["pick"],
  setup(__props, { expose, emit }) {
    const props = __props;
    const datesInYear = (year, lang2) => {
      const firstDay = dayjs_min(String(year)).locale(lang2).startOf("year");
      const lastDay = firstDay.endOf("year");
      const numOfDays = lastDay.dayOfYear();
      return rangeArr(numOfDays).map((n) => firstDay.add(n, "day").toDate());
    };
    const ns = (0,use_namespace/* useNamespace */.s)("year-table");
    const { t, lang } = useLocale();
    const tbodyRef = (0,external_Vue_.ref)();
    const currentCellRef = (0,external_Vue_.ref)();
    const startYear = (0,external_Vue_.computed)(() => {
      return Math.floor(props.date.year() / 10) * 10;
    });
    const focus = () => {
      var _a;
      (_a = currentCellRef.value) == null ? void 0 : _a.focus();
    };
    const getCellKls = (year) => {
      const kls = {};
      const today = dayjs_min().locale(lang.value);
      kls.disabled = props.disabledDate ? datesInYear(year, lang.value).every(props.disabledDate) : false;
      kls.current = castArray(props.parsedValue).findIndex((d) => d.year() === year) >= 0;
      kls.today = today.year() === year;
      return kls;
    };
    const isSelectedCell = (year) => {
      return year === startYear.value && props.date.year() < startYear.value && props.date.year() > startYear.value + 9 || castArray(props.date).findIndex((date) => date.year() === year) >= 0;
    };
    const handleYearTableClick = (event) => {
      const clickTarget = event.target;
      const target = clickTarget.closest("td");
      if (target) {
        if ((0,dom_style/* hasClass */.pv)(target.parentNode, "disabled"))
          return;
        const year = target.textContent || target.innerText;
        emit("pick", Number(year));
      }
    };
    (0,external_Vue_.watch)(() => props.date, async () => {
      var _a, _b;
      if ((_a = tbodyRef.value) == null ? void 0 : _a.contains(document.activeElement)) {
        await (0,external_Vue_.nextTick)();
        (_b = currentCellRef.value) == null ? void 0 : _b.focus();
      }
    });
    expose({
      focus
    });
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("table", {
        role: "grid",
        "aria-label": (0,external_Vue_.unref)(t)("el.datepicker.yearTablePrompt"),
        class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).b()),
        onClick: handleYearTableClick
      }, [
        (0,external_Vue_.createElementVNode)("tbody", {
          ref_key: "tbodyRef",
          ref: tbodyRef
        }, [
          ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, null, (0,external_Vue_.renderList)(3, (_, i) => {
            return (0,external_Vue_.createElementVNode)("tr", { key: i }, [
              ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, null, (0,external_Vue_.renderList)(4, (__, j) => {
                return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, {
                  key: i + "_" + j
                }, [
                  i * 4 + j < 10 ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("td", {
                    key: 0,
                    ref_for: true,
                    ref: (el) => isSelectedCell((0,external_Vue_.unref)(startYear) + i * 4 + j) && (currentCellRef.value = el),
                    class: (0,external_Vue_.normalizeClass)(["available", getCellKls((0,external_Vue_.unref)(startYear) + i * 4 + j)]),
                    "aria-selected": `${isSelectedCell((0,external_Vue_.unref)(startYear) + i * 4 + j)}`,
                    tabindex: isSelectedCell((0,external_Vue_.unref)(startYear) + i * 4 + j) ? 0 : -1,
                    onKeydown: [
                      (0,external_Vue_.withKeys)((0,external_Vue_.withModifiers)(handleYearTableClick, ["prevent", "stop"]), ["space"]),
                      (0,external_Vue_.withKeys)((0,external_Vue_.withModifiers)(handleYearTableClick, ["prevent", "stop"]), ["enter"])
                    ]
                  }, [
                    (0,external_Vue_.createElementVNode)("span", basic_year_table_hoisted_3, (0,external_Vue_.toDisplayString)((0,external_Vue_.unref)(startYear) + i * 4 + j), 1)
                  ], 42, basic_year_table_hoisted_2)) : ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("td", basic_year_table_hoisted_4))
                ], 64);
              }), 64))
            ]);
          }), 64))
        ], 512)
      ], 10, basic_year_table_hoisted_1);
    };
  }
});
var YearTable = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(basic_year_table_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/date-picker/src/date-picker-com/basic-year-table.vue"]]);


//# sourceMappingURL=basic-year-table.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/time-picker/src/props/shared.mjs



const disabledTimeListsProps = (0,runtime/* buildProps */.o8)({
  disabledHours: {
    type: (0,runtime/* definePropType */.Cq)(Function)
  },
  disabledMinutes: {
    type: (0,runtime/* definePropType */.Cq)(Function)
  },
  disabledSeconds: {
    type: (0,runtime/* definePropType */.Cq)(Function)
  }
});
const timePanelSharedProps = (0,runtime/* buildProps */.o8)({
  visible: Boolean,
  actualVisible: {
    type: Boolean,
    default: void 0
  },
  format: {
    type: String,
    default: ""
  }
});


//# sourceMappingURL=shared.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/time-picker/src/props/panel-time-picker.mjs




const panelTimePickerProps = (0,runtime/* buildProps */.o8)({
  ...timePanelSharedProps,
  datetimeRole: String,
  parsedValue: {
    type: (0,runtime/* definePropType */.Cq)(Object)
  }
});


//# sourceMappingURL=panel-time-picker.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/time-picker/src/composables/use-time-panel.mjs
const useTimePanel = ({
  getAvailableHours,
  getAvailableMinutes,
  getAvailableSeconds
}) => {
  const getAvailableTime = (date, role, first, compareDate) => {
    const availableTimeGetters = {
      hour: getAvailableHours,
      minute: getAvailableMinutes,
      second: getAvailableSeconds
    };
    let result = date;
    ["hour", "minute", "second"].forEach((type) => {
      if (availableTimeGetters[type]) {
        let availableTimeSlots;
        const method = availableTimeGetters[type];
        switch (type) {
          case "minute": {
            availableTimeSlots = method(result.hour(), role, compareDate);
            break;
          }
          case "second": {
            availableTimeSlots = method(result.hour(), result.minute(), role, compareDate);
            break;
          }
          default: {
            availableTimeSlots = method(role, compareDate);
            break;
          }
        }
        if ((availableTimeSlots == null ? void 0 : availableTimeSlots.length) && !availableTimeSlots.includes(result[type]())) {
          const pos = first ? 0 : availableTimeSlots.length - 1;
          result = result[type](availableTimeSlots[pos]);
        }
      }
    });
    return result;
  };
  const timePickerOptions = {};
  const onSetOption = ([key, val]) => {
    timePickerOptions[key] = val;
  };
  return {
    timePickerOptions,
    getAvailableTime,
    onSetOption
  };
};


//# sourceMappingURL=use-time-panel.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/time-picker/src/composables/use-time-picker.mjs



const makeAvailableArr = (disabledList) => {
  const trueOrNumber = (isDisabled, index) => isDisabled || index;
  const getNumber = (predicate) => predicate !== true;
  return disabledList.map(trueOrNumber).filter(getNumber);
};
const getTimeLists = (disabledHours, disabledMinutes, disabledSeconds) => {
  const getHoursList = (role, compare) => {
    return makeList(24, disabledHours && (() => disabledHours == null ? void 0 : disabledHours(role, compare)));
  };
  const getMinutesList = (hour, role, compare) => {
    return makeList(60, disabledMinutes && (() => disabledMinutes == null ? void 0 : disabledMinutes(hour, role, compare)));
  };
  const getSecondsList = (hour, minute, role, compare) => {
    return makeList(60, disabledSeconds && (() => disabledSeconds == null ? void 0 : disabledSeconds(hour, minute, role, compare)));
  };
  return {
    getHoursList,
    getMinutesList,
    getSecondsList
  };
};
const buildAvailableTimeSlotGetter = (disabledHours, disabledMinutes, disabledSeconds) => {
  const { getHoursList, getMinutesList, getSecondsList } = getTimeLists(disabledHours, disabledMinutes, disabledSeconds);
  const getAvailableHours = (role, compare) => {
    return makeAvailableArr(getHoursList(role, compare));
  };
  const getAvailableMinutes = (hour, role, compare) => {
    return makeAvailableArr(getMinutesList(hour, role, compare));
  };
  const getAvailableSeconds = (hour, minute, role, compare) => {
    return makeAvailableArr(getSecondsList(hour, minute, role, compare));
  };
  return {
    getAvailableHours,
    getAvailableMinutes,
    getAvailableSeconds
  };
};
const useOldValue = (props) => {
  const oldValue = (0,external_Vue_.ref)(props.parsedValue);
  (0,external_Vue_.watch)(() => props.visible, (val) => {
    if (!val) {
      oldValue.value = props.parsedValue;
    }
  });
  return oldValue;
};


//# sourceMappingURL=use-time-picker.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/time-picker/src/constants.mjs
const timeUnits = ["hours", "minutes", "seconds"];
const DEFAULT_FORMATS_TIME = "HH:mm:ss";
const DEFAULT_FORMATS_DATE = "YYYY-MM-DD";
const DEFAULT_FORMATS_DATEPICKER = {
  date: DEFAULT_FORMATS_DATE,
  dates: DEFAULT_FORMATS_DATE,
  week: "gggg[w]ww",
  year: "YYYY",
  month: "YYYY-MM",
  datetime: `${DEFAULT_FORMATS_DATE} ${DEFAULT_FORMATS_TIME}`,
  monthrange: "YYYY-MM",
  daterange: DEFAULT_FORMATS_DATE,
  datetimerange: `${DEFAULT_FORMATS_DATE} ${DEFAULT_FORMATS_TIME}`
};


//# sourceMappingURL=constants.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/time-picker/src/props/basic-time-spinner.mjs




const basicTimeSpinnerProps = (0,runtime/* buildProps */.o8)({
  role: {
    type: String,
    required: true
  },
  spinnerDate: {
    type: (0,runtime/* definePropType */.Cq)(Object),
    required: true
  },
  showSeconds: {
    type: Boolean,
    default: true
  },
  arrowControl: Boolean,
  amPmMode: {
    type: (0,runtime/* definePropType */.Cq)(String),
    default: ""
  },
  ...disabledTimeListsProps
});


//# sourceMappingURL=basic-time-spinner.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/directives/repeat-click/index.mjs



var vRepeatClick = {
  beforeMount(el, binding) {
    let interval = null;
    let startTime;
    const handler = () => binding.value && binding.value();
    const clear = () => {
      if (Date.now() - startTime < 100) {
        handler();
      }
      clearInterval(interval);
      interval = null;
    };
    event_on(el, "mousedown", (e) => {
      if (e.button !== 0)
        return;
      startTime = Date.now();
      once(document, "mouseup", clear);
      clearInterval(interval);
      interval = setInterval(handler, 100);
    });
  }
};


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/time-picker/src/time-picker-com/basic-time-spinner.mjs















const basic_time_spinner_hoisted_1 = ["onClick"];
const basic_time_spinner_hoisted_2 = ["onMouseenter"];
const basic_time_spinner_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  __name: "basic-time-spinner",
  props: basicTimeSpinnerProps,
  emits: ["change", "select-range", "set-option"],
  setup(__props, { emit }) {
    const props = __props;
    const ns = (0,use_namespace/* useNamespace */.s)("time");
    const { getHoursList, getMinutesList, getSecondsList } = getTimeLists(props.disabledHours, props.disabledMinutes, props.disabledSeconds);
    let isScrolling = false;
    const currentScrollbar = (0,external_Vue_.ref)();
    const listHoursRef = (0,external_Vue_.ref)();
    const listMinutesRef = (0,external_Vue_.ref)();
    const listSecondsRef = (0,external_Vue_.ref)();
    const listRefsMap = {
      hours: listHoursRef,
      minutes: listMinutesRef,
      seconds: listSecondsRef
    };
    const spinnerItems = (0,external_Vue_.computed)(() => {
      return props.showSeconds ? timeUnits : timeUnits.slice(0, 2);
    });
    const timePartials = (0,external_Vue_.computed)(() => {
      const { spinnerDate } = props;
      const hours = spinnerDate.hour();
      const minutes = spinnerDate.minute();
      const seconds = spinnerDate.second();
      return { hours, minutes, seconds };
    });
    const timeList = (0,external_Vue_.computed)(() => {
      const { hours, minutes } = (0,external_Vue_.unref)(timePartials);
      return {
        hours: getHoursList(props.role),
        minutes: getMinutesList(hours, props.role),
        seconds: getSecondsList(hours, minutes, props.role)
      };
    });
    const arrowControlTimeList = (0,external_Vue_.computed)(() => {
      const { hours, minutes, seconds } = (0,external_Vue_.unref)(timePartials);
      return {
        hours: buildTimeList(hours, 23),
        minutes: buildTimeList(minutes, 59),
        seconds: buildTimeList(seconds, 59)
      };
    });
    const debouncedResetScroll = (0,debounce/* default */.Z)((type) => {
      isScrolling = false;
      adjustCurrentSpinner(type);
    }, 200);
    const getAmPmFlag = (hour) => {
      const shouldShowAmPm = !!props.amPmMode;
      if (!shouldShowAmPm)
        return "";
      const isCapital = props.amPmMode === "A";
      let content = hour < 12 ? " am" : " pm";
      if (isCapital)
        content = content.toUpperCase();
      return content;
    };
    const emitSelectRange = (type) => {
      let range;
      switch (type) {
        case "hours":
          range = [0, 2];
          break;
        case "minutes":
          range = [3, 5];
          break;
        case "seconds":
          range = [6, 8];
          break;
      }
      const [left, right] = range;
      emit("select-range", left, right);
      currentScrollbar.value = type;
    };
    const adjustCurrentSpinner = (type) => {
      adjustSpinner(type, (0,external_Vue_.unref)(timePartials)[type]);
    };
    const adjustSpinners = () => {
      adjustCurrentSpinner("hours");
      adjustCurrentSpinner("minutes");
      adjustCurrentSpinner("seconds");
    };
    const getScrollbarElement = (el) => el.querySelector(`.${ns.namespace.value}-scrollbar__wrap`);
    const adjustSpinner = (type, value) => {
      if (props.arrowControl)
        return;
      const scrollbar = (0,external_Vue_.unref)(listRefsMap[type]);
      if (scrollbar && scrollbar.$el) {
        getScrollbarElement(scrollbar.$el).scrollTop = Math.max(0, value * typeItemHeight(type));
      }
    };
    const typeItemHeight = (type) => {
      const scrollbar = (0,external_Vue_.unref)(listRefsMap[type]);
      return (scrollbar == null ? void 0 : scrollbar.$el.querySelector("li").offsetHeight) || 0;
    };
    const onIncrement = () => {
      scrollDown(1);
    };
    const onDecrement = () => {
      scrollDown(-1);
    };
    const scrollDown = (step) => {
      if (!currentScrollbar.value) {
        emitSelectRange("hours");
      }
      const label = currentScrollbar.value;
      let now = (0,external_Vue_.unref)(timePartials)[label];
      const total = currentScrollbar.value === "hours" ? 24 : 60;
      now = (now + step + total) % total;
      modifyDateField(label, now);
      adjustSpinner(label, now);
      (0,external_Vue_.nextTick)(() => emitSelectRange(label));
    };
    const modifyDateField = (type, value) => {
      const list = (0,external_Vue_.unref)(timeList)[type];
      const isDisabled = list[value];
      if (isDisabled)
        return;
      const { hours, minutes, seconds } = (0,external_Vue_.unref)(timePartials);
      let changeTo;
      switch (type) {
        case "hours":
          changeTo = props.spinnerDate.hour(value).minute(minutes).second(seconds);
          break;
        case "minutes":
          changeTo = props.spinnerDate.hour(hours).minute(value).second(seconds);
          break;
        case "seconds":
          changeTo = props.spinnerDate.hour(hours).minute(minutes).second(value);
          break;
      }
      emit("change", changeTo);
    };
    const handleClick = (type, { value, disabled }) => {
      if (!disabled) {
        modifyDateField(type, value);
        emitSelectRange(type);
        adjustSpinner(type, value);
      }
    };
    const handleScroll = (type) => {
      isScrolling = true;
      debouncedResetScroll(type);
      const value = Math.min(Math.round((getScrollbarElement((0,external_Vue_.unref)(listRefsMap[type]).$el).scrollTop - (scrollBarHeight(type) * 0.5 - 10) / typeItemHeight(type) + 3) / typeItemHeight(type)), type === "hours" ? 23 : 59);
      modifyDateField(type, value);
    };
    const scrollBarHeight = (type) => {
      return (0,external_Vue_.unref)(listRefsMap[type]).$el.offsetHeight;
    };
    const bindScrollEvent = () => {
      const bindFunction = (type) => {
        const scrollbar = (0,external_Vue_.unref)(listRefsMap[type]);
        if (scrollbar && scrollbar.$el) {
          getScrollbarElement(scrollbar.$el).onscroll = () => {
            handleScroll(type);
          };
        }
      };
      bindFunction("hours");
      bindFunction("minutes");
      bindFunction("seconds");
    };
    (0,external_Vue_.onMounted)(() => {
      (0,external_Vue_.nextTick)(() => {
        !props.arrowControl && bindScrollEvent();
        adjustSpinners();
        if (props.role === "start")
          emitSelectRange("hours");
      });
    });
    const setRef = (scrollbar, type) => {
      listRefsMap[type].value = scrollbar;
    };
    emit("set-option", [`${props.role}_scrollDown`, scrollDown]);
    emit("set-option", [`${props.role}_emitSelectRange`, emitSelectRange]);
    (0,external_Vue_.watch)(() => props.spinnerDate, () => {
      if (isScrolling)
        return;
      adjustSpinners();
    });
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
        class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(ns).b("spinner"), { "has-seconds": _ctx.showSeconds }])
      }, [
        !_ctx.arrowControl ? ((0,external_Vue_.openBlock)(true), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, { key: 0 }, (0,external_Vue_.renderList)((0,external_Vue_.unref)(spinnerItems), (item) => {
          return (0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.unref)(ElScrollbar), {
            key: item,
            ref_for: true,
            ref: (scollbar) => setRef(scollbar, item),
            class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).be("spinner", "wrapper")),
            "wrap-style": "max-height: inherit;",
            "view-class": (0,external_Vue_.unref)(ns).be("spinner", "list"),
            noresize: "",
            tag: "ul",
            onMouseenter: ($event) => emitSelectRange(item),
            onMousemove: ($event) => adjustCurrentSpinner(item)
          }, {
            default: (0,external_Vue_.withCtx)(() => [
              ((0,external_Vue_.openBlock)(true), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, null, (0,external_Vue_.renderList)((0,external_Vue_.unref)(timeList)[item], (disabled, key) => {
                return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("li", {
                  key,
                  class: (0,external_Vue_.normalizeClass)([
                    (0,external_Vue_.unref)(ns).be("spinner", "item"),
                    (0,external_Vue_.unref)(ns).is("active", key === (0,external_Vue_.unref)(timePartials)[item]),
                    (0,external_Vue_.unref)(ns).is("disabled", disabled)
                  ]),
                  onClick: ($event) => handleClick(item, { value: key, disabled })
                }, [
                  item === "hours" ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, { key: 0 }, [
                    (0,external_Vue_.createTextVNode)((0,external_Vue_.toDisplayString)(("0" + (_ctx.amPmMode ? key % 12 || 12 : key)).slice(-2)) + (0,external_Vue_.toDisplayString)(getAmPmFlag(key)), 1)
                  ], 64)) : ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, { key: 1 }, [
                    (0,external_Vue_.createTextVNode)((0,external_Vue_.toDisplayString)(("0" + key).slice(-2)), 1)
                  ], 64))
                ], 10, basic_time_spinner_hoisted_1);
              }), 128))
            ]),
            _: 2
          }, 1032, ["class", "view-class", "onMouseenter", "onMousemove"]);
        }), 128)) : (0,external_Vue_.createCommentVNode)("v-if", true),
        _ctx.arrowControl ? ((0,external_Vue_.openBlock)(true), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, { key: 1 }, (0,external_Vue_.renderList)((0,external_Vue_.unref)(spinnerItems), (item) => {
          return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
            key: item,
            class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(ns).be("spinner", "wrapper"), (0,external_Vue_.unref)(ns).is("arrow")]),
            onMouseenter: ($event) => emitSelectRange(item)
          }, [
            (0,external_Vue_.withDirectives)(((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.unref)(components_icon/* ElIcon */.gn), {
              class: (0,external_Vue_.normalizeClass)(["arrow-up", (0,external_Vue_.unref)(ns).be("spinner", "arrow")])
            }, {
              default: (0,external_Vue_.withCtx)(() => [
                (0,external_Vue_.createVNode)((0,external_Vue_.unref)(dist/* ArrowUp */.a2Z))
              ]),
              _: 1
            }, 8, ["class"])), [
              [(0,external_Vue_.unref)(vRepeatClick), onDecrement]
            ]),
            (0,external_Vue_.withDirectives)(((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.unref)(components_icon/* ElIcon */.gn), {
              class: (0,external_Vue_.normalizeClass)(["arrow-down", (0,external_Vue_.unref)(ns).be("spinner", "arrow")])
            }, {
              default: (0,external_Vue_.withCtx)(() => [
                (0,external_Vue_.createVNode)((0,external_Vue_.unref)(dist/* ArrowDown */.K5e))
              ]),
              _: 1
            }, 8, ["class"])), [
              [(0,external_Vue_.unref)(vRepeatClick), onIncrement]
            ]),
            (0,external_Vue_.createElementVNode)("ul", {
              class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).be("spinner", "list"))
            }, [
              ((0,external_Vue_.openBlock)(true), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, null, (0,external_Vue_.renderList)((0,external_Vue_.unref)(arrowControlTimeList)[item], (time, key) => {
                return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("li", {
                  key,
                  class: (0,external_Vue_.normalizeClass)([
                    (0,external_Vue_.unref)(ns).be("spinner", "item"),
                    (0,external_Vue_.unref)(ns).is("active", time === (0,external_Vue_.unref)(timePartials)[item]),
                    (0,external_Vue_.unref)(ns).is("disabled", (0,external_Vue_.unref)(timeList)[item][time])
                  ])
                }, [
                  typeof time === "number" ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, { key: 0 }, [
                    item === "hours" ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, { key: 0 }, [
                      (0,external_Vue_.createTextVNode)((0,external_Vue_.toDisplayString)(("0" + (_ctx.amPmMode ? time % 12 || 12 : time)).slice(-2)) + (0,external_Vue_.toDisplayString)(getAmPmFlag(time)), 1)
                    ], 64)) : ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, { key: 1 }, [
                      (0,external_Vue_.createTextVNode)((0,external_Vue_.toDisplayString)(("0" + time).slice(-2)), 1)
                    ], 64))
                  ], 64)) : (0,external_Vue_.createCommentVNode)("v-if", true)
                ], 2);
              }), 128))
            ], 2)
          ], 42, basic_time_spinner_hoisted_2);
        }), 128)) : (0,external_Vue_.createCommentVNode)("v-if", true)
      ], 2);
    };
  }
});
var TimeSpinner = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(basic_time_spinner_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/time-picker/src/time-picker-com/basic-time-spinner.vue"]]);


//# sourceMappingURL=basic-time-spinner.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/time-picker/src/time-picker-com/panel-time-pick.mjs















const panel_time_pick_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  __name: "panel-time-pick",
  props: panelTimePickerProps,
  emits: ["pick", "select-range", "set-picker-option"],
  setup(__props, { emit }) {
    const props = __props;
    const pickerBase = (0,external_Vue_.inject)("EP_PICKER_BASE");
    const {
      arrowControl,
      disabledHours,
      disabledMinutes,
      disabledSeconds,
      defaultValue
    } = pickerBase.props;
    const { getAvailableHours, getAvailableMinutes, getAvailableSeconds } = buildAvailableTimeSlotGetter(disabledHours, disabledMinutes, disabledSeconds);
    const ns = (0,use_namespace/* useNamespace */.s)("time");
    const { t, lang } = useLocale();
    const selectionRange = (0,external_Vue_.ref)([0, 2]);
    const oldValue = useOldValue(props);
    const transitionName = (0,external_Vue_.computed)(() => {
      return (0,types/* isUndefined */.o8)(props.actualVisible) ? `${ns.namespace.value}-zoom-in-top` : "";
    });
    const showSeconds = (0,external_Vue_.computed)(() => {
      return props.format.includes("ss");
    });
    const amPmMode = (0,external_Vue_.computed)(() => {
      if (props.format.includes("A"))
        return "A";
      if (props.format.includes("a"))
        return "a";
      return "";
    });
    const isValidValue = (_date) => {
      const parsedDate = dayjs_min(_date).locale(lang.value);
      const result = getRangeAvailableTime(parsedDate);
      return parsedDate.isSame(result);
    };
    const handleCancel = () => {
      emit("pick", oldValue.value, false);
    };
    const handleConfirm = (visible = false, first = false) => {
      if (first)
        return;
      emit("pick", props.parsedValue, visible);
    };
    const handleChange = (_date) => {
      if (!props.visible) {
        return;
      }
      const result = getRangeAvailableTime(_date).millisecond(0);
      emit("pick", result, true);
    };
    const setSelectionRange = (start, end) => {
      emit("select-range", start, end);
      selectionRange.value = [start, end];
    };
    const changeSelectionRange = (step) => {
      const list = [0, 3].concat(showSeconds.value ? [6] : []);
      const mapping = ["hours", "minutes"].concat(showSeconds.value ? ["seconds"] : []);
      const index = list.indexOf(selectionRange.value[0]);
      const next = (index + step + list.length) % list.length;
      timePickerOptions["start_emitSelectRange"](mapping[next]);
    };
    const handleKeydown = (event) => {
      const code = event.code;
      const { left, right, up, down } = aria_EVENT_CODE;
      if ([left, right].includes(code)) {
        const step = code === left ? -1 : 1;
        changeSelectionRange(step);
        event.preventDefault();
        return;
      }
      if ([up, down].includes(code)) {
        const step = code === up ? -1 : 1;
        timePickerOptions["start_scrollDown"](step);
        event.preventDefault();
        return;
      }
    };
    const { timePickerOptions, onSetOption, getAvailableTime } = useTimePanel({
      getAvailableHours,
      getAvailableMinutes,
      getAvailableSeconds
    });
    const getRangeAvailableTime = (date) => {
      return getAvailableTime(date, props.datetimeRole || "", true);
    };
    const parseUserInput = (value) => {
      if (!value)
        return null;
      return dayjs_min(value, props.format).locale(lang.value);
    };
    const formatToString = (value) => {
      if (!value)
        return null;
      return value.format(props.format);
    };
    const getDefaultValue = () => {
      return dayjs_min(defaultValue).locale(lang.value);
    };
    emit("set-picker-option", ["isValidValue", isValidValue]);
    emit("set-picker-option", ["formatToString", formatToString]);
    emit("set-picker-option", ["parseUserInput", parseUserInput]);
    emit("set-picker-option", ["handleKeydownInput", handleKeydown]);
    emit("set-picker-option", ["getRangeAvailableTime", getRangeAvailableTime]);
    emit("set-picker-option", ["getDefaultValue", getDefaultValue]);
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(external_Vue_.Transition, { name: (0,external_Vue_.unref)(transitionName) }, {
        default: (0,external_Vue_.withCtx)(() => [
          _ctx.actualVisible || _ctx.visible ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
            key: 0,
            class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).b("panel"))
          }, [
            (0,external_Vue_.createElementVNode)("div", {
              class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(ns).be("panel", "content"), { "has-seconds": (0,external_Vue_.unref)(showSeconds) }])
            }, [
              (0,external_Vue_.createVNode)(TimeSpinner, {
                ref: "spinner",
                role: _ctx.datetimeRole || "start",
                "arrow-control": (0,external_Vue_.unref)(arrowControl),
                "show-seconds": (0,external_Vue_.unref)(showSeconds),
                "am-pm-mode": (0,external_Vue_.unref)(amPmMode),
                "spinner-date": _ctx.parsedValue,
                "disabled-hours": (0,external_Vue_.unref)(disabledHours),
                "disabled-minutes": (0,external_Vue_.unref)(disabledMinutes),
                "disabled-seconds": (0,external_Vue_.unref)(disabledSeconds),
                onChange: handleChange,
                onSetOption: (0,external_Vue_.unref)(onSetOption),
                onSelectRange: setSelectionRange
              }, null, 8, ["role", "arrow-control", "show-seconds", "am-pm-mode", "spinner-date", "disabled-hours", "disabled-minutes", "disabled-seconds", "onSetOption"])
            ], 2),
            (0,external_Vue_.createElementVNode)("div", {
              class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).be("panel", "footer"))
            }, [
              (0,external_Vue_.createElementVNode)("button", {
                type: "button",
                class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(ns).be("panel", "btn"), "cancel"]),
                onClick: handleCancel
              }, (0,external_Vue_.toDisplayString)((0,external_Vue_.unref)(t)("el.datepicker.cancel")), 3),
              (0,external_Vue_.createElementVNode)("button", {
                type: "button",
                class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(ns).be("panel", "btn"), "confirm"]),
                onClick: _cache[0] || (_cache[0] = ($event) => handleConfirm())
              }, (0,external_Vue_.toDisplayString)((0,external_Vue_.unref)(t)("el.datepicker.confirm")), 3)
            ], 2)
          ], 2)) : (0,external_Vue_.createCommentVNode)("v-if", true)
        ]),
        _: 1
      }, 8, ["name"]);
    };
  }
});
var TimePickPanel = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(panel_time_pick_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/time-picker/src/time-picker-com/panel-time-pick.vue"]]);


//# sourceMappingURL=panel-time-pick.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/date-picker/src/date-picker-com/panel-date-pick.mjs


























const panel_date_pick_hoisted_1 = ["onClick"];
const panel_date_pick_hoisted_2 = ["aria-label"];
const panel_date_pick_hoisted_3 = ["aria-label"];
const panel_date_pick_hoisted_4 = ["aria-label"];
const _hoisted_5 = ["aria-label"];
const panel_date_pick_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  __name: "panel-date-pick",
  props: panelDatePickProps,
  emits: ["pick", "set-picker-option", "panel-change"],
  setup(__props, { emit: contextEmit }) {
    const props = __props;
    const timeWithinRange = (_, __, ___) => true;
    const ppNs = (0,use_namespace/* useNamespace */.s)("picker-panel");
    const dpNs = (0,use_namespace/* useNamespace */.s)("date-picker");
    const attrs = (0,external_Vue_.useAttrs)();
    const slots = (0,external_Vue_.useSlots)();
    const { t, lang } = useLocale();
    const pickerBase = (0,external_Vue_.inject)("EP_PICKER_BASE");
    const popper = (0,external_Vue_.inject)(TOOLTIP_INJECTION_KEY);
    const { shortcuts, disabledDate, cellClassName, defaultTime, arrowControl } = pickerBase.props;
    const defaultValue = (0,external_Vue_.toRef)(pickerBase.props, "defaultValue");
    const currentViewRef = (0,external_Vue_.ref)();
    const innerDate = (0,external_Vue_.ref)(dayjs_min().locale(lang.value));
    const defaultTimeD = (0,external_Vue_.computed)(() => {
      return dayjs_min(defaultTime).locale(lang.value);
    });
    const month = (0,external_Vue_.computed)(() => {
      return innerDate.value.month();
    });
    const year = (0,external_Vue_.computed)(() => {
      return innerDate.value.year();
    });
    const selectableRange = (0,external_Vue_.ref)([]);
    const userInputDate = (0,external_Vue_.ref)(null);
    const userInputTime = (0,external_Vue_.ref)(null);
    const checkDateWithinRange = (date) => {
      return selectableRange.value.length > 0 ? timeWithinRange(date, selectableRange.value, props.format || "HH:mm:ss") : true;
    };
    const formatEmit = (emitDayjs) => {
      if (defaultTime && !visibleTime.value) {
        return defaultTimeD.value.year(emitDayjs.year()).month(emitDayjs.month()).date(emitDayjs.date());
      }
      if (showTime.value)
        return emitDayjs.millisecond(0);
      return emitDayjs.startOf("day");
    };
    const emit = (value, ...args) => {
      if (!value) {
        contextEmit("pick", value, ...args);
      } else if ((0,shared_esm_bundler/* isArray */.kJ)(value)) {
        const dates = value.map(formatEmit);
        contextEmit("pick", dates, ...args);
      } else {
        contextEmit("pick", formatEmit(value), ...args);
      }
      userInputDate.value = null;
      userInputTime.value = null;
    };
    const handleDatePick = (value, keepOpen) => {
      if (selectionMode.value === "date") {
        value = value;
        let newDate = props.parsedValue ? props.parsedValue.year(value.year()).month(value.month()).date(value.date()) : value;
        if (!checkDateWithinRange(newDate)) {
          newDate = selectableRange.value[0][0].year(value.year()).month(value.month()).date(value.date());
        }
        innerDate.value = newDate;
        emit(newDate, showTime.value || keepOpen);
      } else if (selectionMode.value === "week") {
        emit(value.date);
      } else if (selectionMode.value === "dates") {
        emit(value, true);
      }
    };
    const moveByMonth = (forward) => {
      const action = forward ? "add" : "subtract";
      innerDate.value = innerDate.value[action](1, "month");
      handlePanelChange("month");
    };
    const moveByYear = (forward) => {
      const currentDate = innerDate.value;
      const action = forward ? "add" : "subtract";
      innerDate.value = currentView.value === "year" ? currentDate[action](10, "year") : currentDate[action](1, "year");
      handlePanelChange("year");
    };
    const currentView = (0,external_Vue_.ref)("date");
    const yearLabel = (0,external_Vue_.computed)(() => {
      const yearTranslation = t("el.datepicker.year");
      if (currentView.value === "year") {
        const startYear = Math.floor(year.value / 10) * 10;
        if (yearTranslation) {
          return `${startYear} ${yearTranslation} - ${startYear + 9} ${yearTranslation}`;
        }
        return `${startYear} - ${startYear + 9}`;
      }
      return `${year.value} ${yearTranslation}`;
    });
    const handleShortcutClick = (shortcut) => {
      const shortcutValue = (0,shared_esm_bundler/* isFunction */.mf)(shortcut.value) ? shortcut.value() : shortcut.value;
      if (shortcutValue) {
        emit(dayjs_min(shortcutValue).locale(lang.value));
        return;
      }
      if (shortcut.onClick) {
        shortcut.onClick({
          attrs,
          slots,
          emit: contextEmit
        });
      }
    };
    const selectionMode = (0,external_Vue_.computed)(() => {
      const { type } = props;
      if (["week", "month", "year", "dates"].includes(type))
        return type;
      return "date";
    });
    const keyboardMode = (0,external_Vue_.computed)(() => {
      return selectionMode.value === "date" ? currentView.value : selectionMode.value;
    });
    const hasShortcuts = (0,external_Vue_.computed)(() => !!shortcuts.length);
    const handleMonthPick = async (month2) => {
      innerDate.value = innerDate.value.startOf("month").month(month2);
      if (selectionMode.value === "month") {
        emit(innerDate.value, false);
      } else {
        currentView.value = "date";
        if (["month", "year", "date", "week"].includes(selectionMode.value)) {
          emit(innerDate.value, true);
          await (0,external_Vue_.nextTick)();
          handleFocusPicker();
        }
      }
      handlePanelChange("month");
    };
    const handleYearPick = async (year2) => {
      if (selectionMode.value === "year") {
        innerDate.value = innerDate.value.startOf("year").year(year2);
        emit(innerDate.value, false);
      } else {
        innerDate.value = innerDate.value.year(year2);
        currentView.value = "month";
        if (["month", "year", "date", "week"].includes(selectionMode.value)) {
          emit(innerDate.value, true);
          await (0,external_Vue_.nextTick)();
          handleFocusPicker();
        }
      }
      handlePanelChange("year");
    };
    const showPicker = async (view) => {
      currentView.value = view;
      await (0,external_Vue_.nextTick)();
      handleFocusPicker();
    };
    const showTime = (0,external_Vue_.computed)(() => props.type === "datetime" || props.type === "datetimerange");
    const footerVisible = (0,external_Vue_.computed)(() => {
      return showTime.value || selectionMode.value === "dates";
    });
    const onConfirm = () => {
      if (selectionMode.value === "dates") {
        emit(props.parsedValue);
      } else {
        let result = props.parsedValue;
        if (!result) {
          const defaultTimeD2 = dayjs_min(defaultTime).locale(lang.value);
          const defaultValueD = getDefaultValue();
          result = defaultTimeD2.year(defaultValueD.year()).month(defaultValueD.month()).date(defaultValueD.date());
        }
        innerDate.value = result;
        emit(result);
      }
    };
    const changeToNow = () => {
      const now = dayjs_min().locale(lang.value);
      const nowDate = now.toDate();
      if ((!disabledDate || !disabledDate(nowDate)) && checkDateWithinRange(nowDate)) {
        innerDate.value = dayjs_min().locale(lang.value);
        emit(innerDate.value);
      }
    };
    const timeFormat = (0,external_Vue_.computed)(() => {
      return extractTimeFormat(props.format);
    });
    const dateFormat = (0,external_Vue_.computed)(() => {
      return extractDateFormat(props.format);
    });
    const visibleTime = (0,external_Vue_.computed)(() => {
      if (userInputTime.value)
        return userInputTime.value;
      if (!props.parsedValue && !defaultValue.value)
        return;
      return (props.parsedValue || innerDate.value).format(timeFormat.value);
    });
    const visibleDate = (0,external_Vue_.computed)(() => {
      if (userInputDate.value)
        return userInputDate.value;
      if (!props.parsedValue && !defaultValue.value)
        return;
      return (props.parsedValue || innerDate.value).format(dateFormat.value);
    });
    const timePickerVisible = (0,external_Vue_.ref)(false);
    const onTimePickerInputFocus = () => {
      timePickerVisible.value = true;
    };
    const handleTimePickClose = () => {
      timePickerVisible.value = false;
    };
    const getUnits = (date) => {
      return {
        hour: date.hour(),
        minute: date.minute(),
        second: date.second(),
        year: date.year(),
        month: date.month(),
        date: date.date()
      };
    };
    const handleTimePick = (value, visible, first) => {
      const { hour, minute, second } = getUnits(value);
      const newDate = props.parsedValue ? props.parsedValue.hour(hour).minute(minute).second(second) : value;
      innerDate.value = newDate;
      emit(innerDate.value, true);
      if (!first) {
        timePickerVisible.value = visible;
      }
    };
    const handleVisibleTimeChange = (value) => {
      const newDate = dayjs_min(value, timeFormat.value).locale(lang.value);
      if (newDate.isValid() && checkDateWithinRange(newDate)) {
        const { year: year2, month: month2, date } = getUnits(innerDate.value);
        innerDate.value = newDate.year(year2).month(month2).date(date);
        userInputTime.value = null;
        timePickerVisible.value = false;
        emit(innerDate.value, true);
      }
    };
    const handleVisibleDateChange = (value) => {
      const newDate = dayjs_min(value, dateFormat.value).locale(lang.value);
      if (newDate.isValid()) {
        if (disabledDate && disabledDate(newDate.toDate())) {
          return;
        }
        const { hour, minute, second } = getUnits(innerDate.value);
        innerDate.value = newDate.hour(hour).minute(minute).second(second);
        userInputDate.value = null;
        emit(innerDate.value, true);
      }
    };
    const isValidValue = (date) => {
      return dayjs_min.isDayjs(date) && date.isValid() && (disabledDate ? !disabledDate(date.toDate()) : true);
    };
    const formatToString = (value) => {
      if (selectionMode.value === "dates") {
        return value.map((_) => _.format(props.format));
      }
      return value.format(props.format);
    };
    const parseUserInput = (value) => {
      return dayjs_min(value, props.format).locale(lang.value);
    };
    const getDefaultValue = () => {
      const parseDate = dayjs_min(defaultValue.value).locale(lang.value);
      if (!defaultValue.value) {
        const defaultTimeDValue = defaultTimeD.value;
        return dayjs_min().hour(defaultTimeDValue.hour()).minute(defaultTimeDValue.minute()).second(defaultTimeDValue.second()).locale(lang.value);
      }
      return parseDate;
    };
    const handleFocusPicker = async () => {
      var _a;
      if (["week", "month", "year", "date"].includes(selectionMode.value)) {
        (_a = currentViewRef.value) == null ? void 0 : _a.focus();
        if (selectionMode.value === "week") {
          handleKeyControl(aria_EVENT_CODE.down);
        }
      }
    };
    const handleKeydownTable = (event) => {
      const { code } = event;
      const validCode = [
        aria_EVENT_CODE.up,
        aria_EVENT_CODE.down,
        aria_EVENT_CODE.left,
        aria_EVENT_CODE.right,
        aria_EVENT_CODE.home,
        aria_EVENT_CODE.end,
        aria_EVENT_CODE.pageUp,
        aria_EVENT_CODE.pageDown
      ];
      if (validCode.includes(code)) {
        handleKeyControl(code);
        event.stopPropagation();
        event.preventDefault();
      }
      if ([aria_EVENT_CODE.enter, aria_EVENT_CODE.space].includes(code) && userInputDate.value === null && userInputTime.value === null) {
        event.preventDefault();
        emit(innerDate.value, false);
      }
    };
    const handleKeyControl = (code) => {
      var _a;
      const { up, down, left, right, home, end, pageUp, pageDown } = aria_EVENT_CODE;
      const mapping = {
        year: {
          [up]: -4,
          [down]: 4,
          [left]: -1,
          [right]: 1,
          offset: (date, step) => date.setFullYear(date.getFullYear() + step)
        },
        month: {
          [up]: -4,
          [down]: 4,
          [left]: -1,
          [right]: 1,
          offset: (date, step) => date.setMonth(date.getMonth() + step)
        },
        week: {
          [up]: -1,
          [down]: 1,
          [left]: -1,
          [right]: 1,
          offset: (date, step) => date.setDate(date.getDate() + step * 7)
        },
        date: {
          [up]: -7,
          [down]: 7,
          [left]: -1,
          [right]: 1,
          [home]: (date) => -date.getDay(),
          [end]: (date) => -date.getDay() + 6,
          [pageUp]: (date) => -new Date(date.getFullYear(), date.getMonth(), 0).getDate(),
          [pageDown]: (date) => new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate(),
          offset: (date, step) => date.setDate(date.getDate() + step)
        }
      };
      const newDate = innerDate.value.toDate();
      while (Math.abs(innerDate.value.diff(newDate, "year", true)) < 1) {
        const map = mapping[keyboardMode.value];
        if (!map)
          return;
        map.offset(newDate, (0,shared_esm_bundler/* isFunction */.mf)(map[code]) ? map[code](newDate) : (_a = map[code]) != null ? _a : 0);
        if (disabledDate && disabledDate(newDate)) {
          break;
        }
        const result = dayjs_min(newDate).locale(lang.value);
        innerDate.value = result;
        contextEmit("pick", result, true);
        break;
      }
    };
    const handlePanelChange = (mode) => {
      contextEmit("panel-change", innerDate.value.toDate(), mode, currentView.value);
    };
    (0,external_Vue_.watch)(() => selectionMode.value, (val) => {
      if (["month", "year"].includes(val)) {
        currentView.value = val;
        return;
      }
      currentView.value = "date";
    }, { immediate: true });
    (0,external_Vue_.watch)(() => currentView.value, () => {
      popper == null ? void 0 : popper.updatePopper();
    });
    (0,external_Vue_.watch)(() => defaultValue.value, (val) => {
      if (val) {
        innerDate.value = getDefaultValue();
      }
    }, { immediate: true });
    (0,external_Vue_.watch)(() => props.parsedValue, (val) => {
      if (val) {
        if (selectionMode.value === "dates")
          return;
        if (Array.isArray(val))
          return;
        innerDate.value = val;
      } else {
        innerDate.value = getDefaultValue();
      }
    }, { immediate: true });
    contextEmit("set-picker-option", ["isValidValue", isValidValue]);
    contextEmit("set-picker-option", ["formatToString", formatToString]);
    contextEmit("set-picker-option", ["parseUserInput", parseUserInput]);
    contextEmit("set-picker-option", ["handleFocusPicker", handleFocusPicker]);
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
        class: (0,external_Vue_.normalizeClass)([
          (0,external_Vue_.unref)(ppNs).b(),
          (0,external_Vue_.unref)(dpNs).b(),
          {
            "has-sidebar": _ctx.$slots.sidebar || (0,external_Vue_.unref)(hasShortcuts),
            "has-time": (0,external_Vue_.unref)(showTime)
          }
        ])
      }, [
        (0,external_Vue_.createElementVNode)("div", {
          class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ppNs).e("body-wrapper"))
        }, [
          (0,external_Vue_.renderSlot)(_ctx.$slots, "sidebar", {
            class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ppNs).e("sidebar"))
          }),
          (0,external_Vue_.unref)(hasShortcuts) ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
            key: 0,
            class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ppNs).e("sidebar"))
          }, [
            ((0,external_Vue_.openBlock)(true), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, null, (0,external_Vue_.renderList)((0,external_Vue_.unref)(shortcuts), (shortcut, key) => {
              return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("button", {
                key,
                type: "button",
                class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ppNs).e("shortcut")),
                onClick: ($event) => handleShortcutClick(shortcut)
              }, (0,external_Vue_.toDisplayString)(shortcut.text), 11, panel_date_pick_hoisted_1);
            }), 128))
          ], 2)) : (0,external_Vue_.createCommentVNode)("v-if", true),
          (0,external_Vue_.createElementVNode)("div", {
            class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ppNs).e("body"))
          }, [
            (0,external_Vue_.unref)(showTime) ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
              key: 0,
              class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(dpNs).e("time-header"))
            }, [
              (0,external_Vue_.createElementVNode)("span", {
                class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(dpNs).e("editor-wrap"))
              }, [
                (0,external_Vue_.createVNode)((0,external_Vue_.unref)(components_input/* ElInput */.EZ), {
                  placeholder: (0,external_Vue_.unref)(t)("el.datepicker.selectDate"),
                  "model-value": (0,external_Vue_.unref)(visibleDate),
                  size: "small",
                  onInput: _cache[0] || (_cache[0] = (val) => userInputDate.value = val),
                  onChange: handleVisibleDateChange
                }, null, 8, ["placeholder", "model-value"])
              ], 2),
              (0,external_Vue_.withDirectives)(((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("span", {
                class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(dpNs).e("editor-wrap"))
              }, [
                (0,external_Vue_.createVNode)((0,external_Vue_.unref)(components_input/* ElInput */.EZ), {
                  placeholder: (0,external_Vue_.unref)(t)("el.datepicker.selectTime"),
                  "model-value": (0,external_Vue_.unref)(visibleTime),
                  size: "small",
                  onFocus: onTimePickerInputFocus,
                  onInput: _cache[1] || (_cache[1] = (val) => userInputTime.value = val),
                  onChange: handleVisibleTimeChange
                }, null, 8, ["placeholder", "model-value"]),
                (0,external_Vue_.createVNode)((0,external_Vue_.unref)(TimePickPanel), {
                  visible: timePickerVisible.value,
                  format: (0,external_Vue_.unref)(timeFormat),
                  "time-arrow-control": (0,external_Vue_.unref)(arrowControl),
                  "parsed-value": innerDate.value,
                  onPick: handleTimePick
                }, null, 8, ["visible", "format", "time-arrow-control", "parsed-value"])
              ], 2)), [
                [(0,external_Vue_.unref)(ClickOutside), handleTimePickClose]
              ])
            ], 2)) : (0,external_Vue_.createCommentVNode)("v-if", true),
            (0,external_Vue_.withDirectives)((0,external_Vue_.createElementVNode)("div", {
              class: (0,external_Vue_.normalizeClass)([
                (0,external_Vue_.unref)(dpNs).e("header"),
                (currentView.value === "year" || currentView.value === "month") && (0,external_Vue_.unref)(dpNs).e("header--bordered")
              ])
            }, [
              (0,external_Vue_.createElementVNode)("span", {
                class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(dpNs).e("prev-btn"))
              }, [
                (0,external_Vue_.createElementVNode)("button", {
                  type: "button",
                  "aria-label": (0,external_Vue_.unref)(t)(`el.datepicker.prevYear`),
                  class: (0,external_Vue_.normalizeClass)(["d-arrow-left", (0,external_Vue_.unref)(ppNs).e("icon-btn")]),
                  onClick: _cache[2] || (_cache[2] = ($event) => moveByYear(false))
                }, [
                  (0,external_Vue_.createVNode)((0,external_Vue_.unref)(components_icon/* ElIcon */.gn), null, {
                    default: (0,external_Vue_.withCtx)(() => [
                      (0,external_Vue_.createVNode)((0,external_Vue_.unref)(dist/* DArrowLeft */.BAP))
                    ]),
                    _: 1
                  })
                ], 10, panel_date_pick_hoisted_2),
                (0,external_Vue_.withDirectives)((0,external_Vue_.createElementVNode)("button", {
                  type: "button",
                  "aria-label": (0,external_Vue_.unref)(t)(`el.datepicker.prevMonth`),
                  class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(ppNs).e("icon-btn"), "arrow-left"]),
                  onClick: _cache[3] || (_cache[3] = ($event) => moveByMonth(false))
                }, [
                  (0,external_Vue_.createVNode)((0,external_Vue_.unref)(components_icon/* ElIcon */.gn), null, {
                    default: (0,external_Vue_.withCtx)(() => [
                      (0,external_Vue_.createVNode)((0,external_Vue_.unref)(dist/* ArrowLeft */.XdH))
                    ]),
                    _: 1
                  })
                ], 10, panel_date_pick_hoisted_3), [
                  [external_Vue_.vShow, currentView.value === "date"]
                ])
              ], 2),
              (0,external_Vue_.createElementVNode)("span", {
                role: "button",
                class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(dpNs).e("header-label")),
                "aria-live": "polite",
                tabindex: "0",
                onKeydown: _cache[4] || (_cache[4] = (0,external_Vue_.withKeys)(($event) => showPicker("year"), ["enter"])),
                onClick: _cache[5] || (_cache[5] = ($event) => showPicker("year"))
              }, (0,external_Vue_.toDisplayString)((0,external_Vue_.unref)(yearLabel)), 35),
              (0,external_Vue_.withDirectives)((0,external_Vue_.createElementVNode)("span", {
                role: "button",
                "aria-live": "polite",
                tabindex: "0",
                class: (0,external_Vue_.normalizeClass)([
                  (0,external_Vue_.unref)(dpNs).e("header-label"),
                  { active: currentView.value === "month" }
                ]),
                onKeydown: _cache[6] || (_cache[6] = (0,external_Vue_.withKeys)(($event) => showPicker("month"), ["enter"])),
                onClick: _cache[7] || (_cache[7] = ($event) => showPicker("month"))
              }, (0,external_Vue_.toDisplayString)((0,external_Vue_.unref)(t)(`el.datepicker.month${(0,external_Vue_.unref)(month) + 1}`)), 35), [
                [external_Vue_.vShow, currentView.value === "date"]
              ]),
              (0,external_Vue_.createElementVNode)("span", {
                class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(dpNs).e("next-btn"))
              }, [
                (0,external_Vue_.withDirectives)((0,external_Vue_.createElementVNode)("button", {
                  type: "button",
                  "aria-label": (0,external_Vue_.unref)(t)(`el.datepicker.nextMonth`),
                  class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(ppNs).e("icon-btn"), "arrow-right"]),
                  onClick: _cache[8] || (_cache[8] = ($event) => moveByMonth(true))
                }, [
                  (0,external_Vue_.createVNode)((0,external_Vue_.unref)(components_icon/* ElIcon */.gn), null, {
                    default: (0,external_Vue_.withCtx)(() => [
                      (0,external_Vue_.createVNode)((0,external_Vue_.unref)(dist/* ArrowRight */.olP))
                    ]),
                    _: 1
                  })
                ], 10, panel_date_pick_hoisted_4), [
                  [external_Vue_.vShow, currentView.value === "date"]
                ]),
                (0,external_Vue_.createElementVNode)("button", {
                  type: "button",
                  "aria-label": (0,external_Vue_.unref)(t)(`el.datepicker.nextYear`),
                  class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(ppNs).e("icon-btn"), "d-arrow-right"]),
                  onClick: _cache[9] || (_cache[9] = ($event) => moveByYear(true))
                }, [
                  (0,external_Vue_.createVNode)((0,external_Vue_.unref)(components_icon/* ElIcon */.gn), null, {
                    default: (0,external_Vue_.withCtx)(() => [
                      (0,external_Vue_.createVNode)((0,external_Vue_.unref)(dist/* DArrowRight */.tsQ))
                    ]),
                    _: 1
                  })
                ], 10, _hoisted_5)
              ], 2)
            ], 2), [
              [external_Vue_.vShow, currentView.value !== "time"]
            ]),
            (0,external_Vue_.createElementVNode)("div", {
              class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ppNs).e("content")),
              onKeydown: handleKeydownTable
            }, [
              currentView.value === "date" ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(basic_date_table_DateTable, {
                key: 0,
                ref_key: "currentViewRef",
                ref: currentViewRef,
                "selection-mode": (0,external_Vue_.unref)(selectionMode),
                date: innerDate.value,
                "parsed-value": _ctx.parsedValue,
                "disabled-date": (0,external_Vue_.unref)(disabledDate),
                "cell-class-name": (0,external_Vue_.unref)(cellClassName),
                onPick: handleDatePick
              }, null, 8, ["selection-mode", "date", "parsed-value", "disabled-date", "cell-class-name"])) : (0,external_Vue_.createCommentVNode)("v-if", true),
              currentView.value === "year" ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(YearTable, {
                key: 1,
                ref_key: "currentViewRef",
                ref: currentViewRef,
                date: innerDate.value,
                "disabled-date": (0,external_Vue_.unref)(disabledDate),
                "parsed-value": _ctx.parsedValue,
                onPick: handleYearPick
              }, null, 8, ["date", "disabled-date", "parsed-value"])) : (0,external_Vue_.createCommentVNode)("v-if", true),
              currentView.value === "month" ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(MonthTable, {
                key: 2,
                ref_key: "currentViewRef",
                ref: currentViewRef,
                date: innerDate.value,
                "parsed-value": _ctx.parsedValue,
                "disabled-date": (0,external_Vue_.unref)(disabledDate),
                onPick: handleMonthPick
              }, null, 8, ["date", "parsed-value", "disabled-date"])) : (0,external_Vue_.createCommentVNode)("v-if", true)
            ], 34)
          ], 2)
        ], 2),
        (0,external_Vue_.withDirectives)((0,external_Vue_.createElementVNode)("div", {
          class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ppNs).e("footer"))
        }, [
          (0,external_Vue_.withDirectives)((0,external_Vue_.createVNode)((0,external_Vue_.unref)(ElButton), {
            text: "",
            size: "small",
            class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ppNs).e("link-btn")),
            onClick: changeToNow
          }, {
            default: (0,external_Vue_.withCtx)(() => [
              (0,external_Vue_.createTextVNode)((0,external_Vue_.toDisplayString)((0,external_Vue_.unref)(t)("el.datepicker.now")), 1)
            ]),
            _: 1
          }, 8, ["class"]), [
            [external_Vue_.vShow, (0,external_Vue_.unref)(selectionMode) !== "dates"]
          ]),
          (0,external_Vue_.createVNode)((0,external_Vue_.unref)(ElButton), {
            plain: "",
            size: "small",
            class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ppNs).e("link-btn")),
            onClick: onConfirm
          }, {
            default: (0,external_Vue_.withCtx)(() => [
              (0,external_Vue_.createTextVNode)((0,external_Vue_.toDisplayString)((0,external_Vue_.unref)(t)("el.datepicker.confirm")), 1)
            ]),
            _: 1
          }, 8, ["class"])
        ], 2), [
          [external_Vue_.vShow, (0,external_Vue_.unref)(footerVisible) && currentView.value === "date"]
        ])
      ], 2);
    };
  }
});
var DatePickPanel = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(panel_date_pick_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/date-picker/src/date-picker-com/panel-date-pick.vue"]]);


//# sourceMappingURL=panel-date-pick.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/date-picker/src/props/panel-date-range.mjs




const panelDateRangeProps = (0,runtime/* buildProps */.o8)({
  ...panelSharedProps,
  ...panelRangeSharedProps
});


//# sourceMappingURL=panel-date-range.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/date-picker/src/composables/use-shortcut.mjs





const useShortcut = (lang) => {
  const { emit } = (0,external_Vue_.getCurrentInstance)();
  const attrs = (0,external_Vue_.useAttrs)();
  const slots = (0,external_Vue_.useSlots)();
  const handleShortcutClick = (shortcut) => {
    const shortcutValues = (0,shared_esm_bundler/* isFunction */.mf)(shortcut.value) ? shortcut.value() : shortcut.value;
    if (shortcutValues) {
      emit("pick", [
        dayjs_min(shortcutValues[0]).locale(lang.value),
        dayjs_min(shortcutValues[1]).locale(lang.value)
      ]);
      return;
    }
    if (shortcut.onClick) {
      shortcut.onClick({
        attrs,
        slots,
        emit
      });
    }
  };
  return handleShortcutClick;
};


//# sourceMappingURL=use-shortcut.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/date-picker/src/composables/use-range-picker.mjs











const useRangePicker = (props, {
  defaultValue,
  leftDate,
  rightDate,
  unit,
  onParsedValueChanged
}) => {
  const { emit } = (0,external_Vue_.getCurrentInstance)();
  const { pickerNs } = (0,external_Vue_.inject)(ROOT_PICKER_INJECTION_KEY);
  const drpNs = (0,use_namespace/* useNamespace */.s)("date-range-picker");
  const { t, lang } = useLocale();
  const handleShortcutClick = useShortcut(lang);
  const minDate = (0,external_Vue_.ref)();
  const maxDate = (0,external_Vue_.ref)();
  const rangeState = (0,external_Vue_.ref)({
    endDate: null,
    selecting: false
  });
  const handleChangeRange = (val) => {
    rangeState.value = val;
  };
  const handleRangeConfirm = (visible = false) => {
    const _minDate = (0,external_Vue_.unref)(minDate);
    const _maxDate = (0,external_Vue_.unref)(maxDate);
    if (utils_isValidRange([_minDate, _maxDate])) {
      emit("pick", [_minDate, _maxDate], visible);
    }
  };
  const onSelect = (selecting) => {
    rangeState.value.selecting = selecting;
    if (!selecting) {
      rangeState.value.endDate = null;
    }
  };
  const restoreDefault = () => {
    const [start, end] = getDefaultValue((0,external_Vue_.unref)(defaultValue), {
      lang: (0,external_Vue_.unref)(lang),
      unit,
      unlinkPanels: props.unlinkPanels
    });
    minDate.value = void 0;
    maxDate.value = void 0;
    leftDate.value = start;
    rightDate.value = end;
  };
  (0,external_Vue_.watch)(defaultValue, (val) => {
    if (val) {
      restoreDefault();
    }
  }, { immediate: true });
  (0,external_Vue_.watch)(() => props.parsedValue, (parsedValue) => {
    if ((0,shared_esm_bundler/* isArray */.kJ)(parsedValue) && parsedValue.length === 2) {
      const [start, end] = parsedValue;
      minDate.value = start;
      leftDate.value = start;
      maxDate.value = end;
      onParsedValueChanged((0,external_Vue_.unref)(minDate), (0,external_Vue_.unref)(maxDate));
    } else {
      restoreDefault();
    }
  }, { immediate: true });
  return {
    minDate,
    maxDate,
    rangeState,
    lang,
    ppNs: pickerNs,
    drpNs,
    handleChangeRange,
    handleRangeConfirm,
    handleShortcutClick,
    onSelect,
    t
  };
};


//# sourceMappingURL=use-range-picker.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/date-picker/src/date-picker-com/panel-date-range.mjs





















const panel_date_range_hoisted_1 = ["onClick"];
const panel_date_range_hoisted_2 = ["disabled"];
const panel_date_range_hoisted_3 = ["disabled"];
const panel_date_range_hoisted_4 = ["disabled"];
const panel_date_range_hoisted_5 = ["disabled"];
const panel_date_range_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  __name: "panel-date-range",
  props: panelDateRangeProps,
  emits: [
    "pick",
    "set-picker-option",
    "calendar-change",
    "panel-change"
  ],
  setup(__props, { emit }) {
    const props = __props;
    const unit = "month";
    const pickerBase = (0,external_Vue_.inject)("EP_PICKER_BASE");
    const {
      disabledDate,
      cellClassName,
      format,
      defaultTime,
      arrowControl,
      clearable
    } = pickerBase.props;
    const shortcuts = (0,external_Vue_.toRef)(pickerBase.props, "shortcuts");
    const defaultValue = (0,external_Vue_.toRef)(pickerBase.props, "defaultValue");
    const { lang } = useLocale();
    const leftDate = (0,external_Vue_.ref)(dayjs_min().locale(lang.value));
    const rightDate = (0,external_Vue_.ref)(dayjs_min().locale(lang.value).add(1, unit));
    const {
      minDate,
      maxDate,
      rangeState,
      ppNs,
      drpNs,
      handleChangeRange,
      handleRangeConfirm,
      handleShortcutClick,
      onSelect,
      t
    } = useRangePicker(props, {
      defaultValue,
      leftDate,
      rightDate,
      unit,
      onParsedValueChanged
    });
    const dateUserInput = (0,external_Vue_.ref)({
      min: null,
      max: null
    });
    const timeUserInput = (0,external_Vue_.ref)({
      min: null,
      max: null
    });
    const leftLabel = (0,external_Vue_.computed)(() => {
      return `${leftDate.value.year()} ${t("el.datepicker.year")} ${t(`el.datepicker.month${leftDate.value.month() + 1}`)}`;
    });
    const rightLabel = (0,external_Vue_.computed)(() => {
      return `${rightDate.value.year()} ${t("el.datepicker.year")} ${t(`el.datepicker.month${rightDate.value.month() + 1}`)}`;
    });
    const leftYear = (0,external_Vue_.computed)(() => {
      return leftDate.value.year();
    });
    const leftMonth = (0,external_Vue_.computed)(() => {
      return leftDate.value.month();
    });
    const rightYear = (0,external_Vue_.computed)(() => {
      return rightDate.value.year();
    });
    const rightMonth = (0,external_Vue_.computed)(() => {
      return rightDate.value.month();
    });
    const hasShortcuts = (0,external_Vue_.computed)(() => !!shortcuts.value.length);
    const minVisibleDate = (0,external_Vue_.computed)(() => {
      if (dateUserInput.value.min !== null)
        return dateUserInput.value.min;
      if (minDate.value)
        return minDate.value.format(dateFormat.value);
      return "";
    });
    const maxVisibleDate = (0,external_Vue_.computed)(() => {
      if (dateUserInput.value.max !== null)
        return dateUserInput.value.max;
      if (maxDate.value || minDate.value)
        return (maxDate.value || minDate.value).format(dateFormat.value);
      return "";
    });
    const minVisibleTime = (0,external_Vue_.computed)(() => {
      if (timeUserInput.value.min !== null)
        return timeUserInput.value.min;
      if (minDate.value)
        return minDate.value.format(timeFormat.value);
      return "";
    });
    const maxVisibleTime = (0,external_Vue_.computed)(() => {
      if (timeUserInput.value.max !== null)
        return timeUserInput.value.max;
      if (maxDate.value || minDate.value)
        return (maxDate.value || minDate.value).format(timeFormat.value);
      return "";
    });
    const timeFormat = (0,external_Vue_.computed)(() => {
      return extractTimeFormat(format);
    });
    const dateFormat = (0,external_Vue_.computed)(() => {
      return extractDateFormat(format);
    });
    const leftPrevYear = () => {
      leftDate.value = leftDate.value.subtract(1, "year");
      if (!props.unlinkPanels) {
        rightDate.value = leftDate.value.add(1, "month");
      }
      handlePanelChange("year");
    };
    const leftPrevMonth = () => {
      leftDate.value = leftDate.value.subtract(1, "month");
      if (!props.unlinkPanels) {
        rightDate.value = leftDate.value.add(1, "month");
      }
      handlePanelChange("month");
    };
    const rightNextYear = () => {
      if (!props.unlinkPanels) {
        leftDate.value = leftDate.value.add(1, "year");
        rightDate.value = leftDate.value.add(1, "month");
      } else {
        rightDate.value = rightDate.value.add(1, "year");
      }
      handlePanelChange("year");
    };
    const rightNextMonth = () => {
      if (!props.unlinkPanels) {
        leftDate.value = leftDate.value.add(1, "month");
        rightDate.value = leftDate.value.add(1, "month");
      } else {
        rightDate.value = rightDate.value.add(1, "month");
      }
      handlePanelChange("month");
    };
    const leftNextYear = () => {
      leftDate.value = leftDate.value.add(1, "year");
      handlePanelChange("year");
    };
    const leftNextMonth = () => {
      leftDate.value = leftDate.value.add(1, "month");
      handlePanelChange("month");
    };
    const rightPrevYear = () => {
      rightDate.value = rightDate.value.subtract(1, "year");
      handlePanelChange("year");
    };
    const rightPrevMonth = () => {
      rightDate.value = rightDate.value.subtract(1, "month");
      handlePanelChange("month");
    };
    const handlePanelChange = (mode) => {
      emit("panel-change", [leftDate.value.toDate(), rightDate.value.toDate()], mode);
    };
    const enableMonthArrow = (0,external_Vue_.computed)(() => {
      const nextMonth = (leftMonth.value + 1) % 12;
      const yearOffset = leftMonth.value + 1 >= 12 ? 1 : 0;
      return props.unlinkPanels && new Date(leftYear.value + yearOffset, nextMonth) < new Date(rightYear.value, rightMonth.value);
    });
    const enableYearArrow = (0,external_Vue_.computed)(() => {
      return props.unlinkPanels && rightYear.value * 12 + rightMonth.value - (leftYear.value * 12 + leftMonth.value + 1) >= 12;
    });
    const btnDisabled = (0,external_Vue_.computed)(() => {
      return !(minDate.value && maxDate.value && !rangeState.value.selecting && utils_isValidRange([minDate.value, maxDate.value]));
    });
    const showTime = (0,external_Vue_.computed)(() => props.type === "datetime" || props.type === "datetimerange");
    const formatEmit = (emitDayjs, index) => {
      if (!emitDayjs)
        return;
      if (defaultTime) {
        const defaultTimeD = dayjs_min(defaultTime[index] || defaultTime).locale(lang.value);
        return defaultTimeD.year(emitDayjs.year()).month(emitDayjs.month()).date(emitDayjs.date());
      }
      return emitDayjs;
    };
    const handleRangePick = (val, close = true) => {
      const min_ = val.minDate;
      const max_ = val.maxDate;
      const minDate_ = formatEmit(min_, 0);
      const maxDate_ = formatEmit(max_, 1);
      if (maxDate.value === maxDate_ && minDate.value === minDate_) {
        return;
      }
      emit("calendar-change", [min_.toDate(), max_ && max_.toDate()]);
      maxDate.value = maxDate_;
      minDate.value = minDate_;
      if (!close || showTime.value)
        return;
      handleRangeConfirm();
    };
    const minTimePickerVisible = (0,external_Vue_.ref)(false);
    const maxTimePickerVisible = (0,external_Vue_.ref)(false);
    const handleMinTimeClose = () => {
      minTimePickerVisible.value = false;
    };
    const handleMaxTimeClose = () => {
      maxTimePickerVisible.value = false;
    };
    const handleDateInput = (value, type) => {
      dateUserInput.value[type] = value;
      const parsedValueD = dayjs_min(value, dateFormat.value).locale(lang.value);
      if (parsedValueD.isValid()) {
        if (disabledDate && disabledDate(parsedValueD.toDate())) {
          return;
        }
        if (type === "min") {
          leftDate.value = parsedValueD;
          minDate.value = (minDate.value || leftDate.value).year(parsedValueD.year()).month(parsedValueD.month()).date(parsedValueD.date());
          if (!props.unlinkPanels) {
            rightDate.value = parsedValueD.add(1, "month");
            maxDate.value = minDate.value.add(1, "month");
          }
        } else {
          rightDate.value = parsedValueD;
          maxDate.value = (maxDate.value || rightDate.value).year(parsedValueD.year()).month(parsedValueD.month()).date(parsedValueD.date());
          if (!props.unlinkPanels) {
            leftDate.value = parsedValueD.subtract(1, "month");
            minDate.value = maxDate.value.subtract(1, "month");
          }
        }
      }
    };
    const handleDateChange = (_, type) => {
      dateUserInput.value[type] = null;
    };
    const handleTimeInput = (value, type) => {
      timeUserInput.value[type] = value;
      const parsedValueD = dayjs_min(value, timeFormat.value).locale(lang.value);
      if (parsedValueD.isValid()) {
        if (type === "min") {
          minTimePickerVisible.value = true;
          minDate.value = (minDate.value || leftDate.value).hour(parsedValueD.hour()).minute(parsedValueD.minute()).second(parsedValueD.second());
          if (!maxDate.value || maxDate.value.isBefore(minDate.value)) {
            maxDate.value = minDate.value;
          }
        } else {
          maxTimePickerVisible.value = true;
          maxDate.value = (maxDate.value || rightDate.value).hour(parsedValueD.hour()).minute(parsedValueD.minute()).second(parsedValueD.second());
          rightDate.value = maxDate.value;
          if (maxDate.value && maxDate.value.isBefore(minDate.value)) {
            minDate.value = maxDate.value;
          }
        }
      }
    };
    const handleTimeChange = (value, type) => {
      timeUserInput.value[type] = null;
      if (type === "min") {
        leftDate.value = minDate.value;
        minTimePickerVisible.value = false;
      } else {
        rightDate.value = maxDate.value;
        maxTimePickerVisible.value = false;
      }
    };
    const handleMinTimePick = (value, visible, first) => {
      if (timeUserInput.value.min)
        return;
      if (value) {
        leftDate.value = value;
        minDate.value = (minDate.value || leftDate.value).hour(value.hour()).minute(value.minute()).second(value.second());
      }
      if (!first) {
        minTimePickerVisible.value = visible;
      }
      if (!maxDate.value || maxDate.value.isBefore(minDate.value)) {
        maxDate.value = minDate.value;
        rightDate.value = value;
      }
    };
    const handleMaxTimePick = (value, visible, first) => {
      if (timeUserInput.value.max)
        return;
      if (value) {
        rightDate.value = value;
        maxDate.value = (maxDate.value || rightDate.value).hour(value.hour()).minute(value.minute()).second(value.second());
      }
      if (!first) {
        maxTimePickerVisible.value = visible;
      }
      if (maxDate.value && maxDate.value.isBefore(minDate.value)) {
        minDate.value = maxDate.value;
      }
    };
    const handleClear = () => {
      leftDate.value = getDefaultValue((0,external_Vue_.unref)(defaultValue), {
        lang: (0,external_Vue_.unref)(lang),
        unit: "month",
        unlinkPanels: props.unlinkPanels
      })[0];
      rightDate.value = leftDate.value.add(1, "month");
      emit("pick", null);
    };
    const formatToString = (value) => {
      return (0,shared_esm_bundler/* isArray */.kJ)(value) ? value.map((_) => _.format(format)) : value.format(format);
    };
    const parseUserInput = (value) => {
      return (0,shared_esm_bundler/* isArray */.kJ)(value) ? value.map((_) => dayjs_min(_, format).locale(lang.value)) : dayjs_min(value, format).locale(lang.value);
    };
    function onParsedValueChanged(minDate2, maxDate2) {
      if (props.unlinkPanels && maxDate2) {
        const minDateYear = (minDate2 == null ? void 0 : minDate2.year()) || 0;
        const minDateMonth = (minDate2 == null ? void 0 : minDate2.month()) || 0;
        const maxDateYear = maxDate2.year();
        const maxDateMonth = maxDate2.month();
        rightDate.value = minDateYear === maxDateYear && minDateMonth === maxDateMonth ? maxDate2.add(1, unit) : maxDate2;
      } else {
        rightDate.value = leftDate.value.add(1, unit);
        if (maxDate2) {
          rightDate.value = rightDate.value.hour(maxDate2.hour()).minute(maxDate2.minute()).second(maxDate2.second());
        }
      }
    }
    emit("set-picker-option", ["isValidValue", utils_isValidRange]);
    emit("set-picker-option", ["parseUserInput", parseUserInput]);
    emit("set-picker-option", ["formatToString", formatToString]);
    emit("set-picker-option", ["handleClear", handleClear]);
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
        class: (0,external_Vue_.normalizeClass)([
          (0,external_Vue_.unref)(ppNs).b(),
          (0,external_Vue_.unref)(drpNs).b(),
          {
            "has-sidebar": _ctx.$slots.sidebar || (0,external_Vue_.unref)(hasShortcuts),
            "has-time": (0,external_Vue_.unref)(showTime)
          }
        ])
      }, [
        (0,external_Vue_.createElementVNode)("div", {
          class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ppNs).e("body-wrapper"))
        }, [
          (0,external_Vue_.renderSlot)(_ctx.$slots, "sidebar", {
            class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ppNs).e("sidebar"))
          }),
          (0,external_Vue_.unref)(hasShortcuts) ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
            key: 0,
            class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ppNs).e("sidebar"))
          }, [
            ((0,external_Vue_.openBlock)(true), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, null, (0,external_Vue_.renderList)((0,external_Vue_.unref)(shortcuts), (shortcut, key) => {
              return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("button", {
                key,
                type: "button",
                class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ppNs).e("shortcut")),
                onClick: ($event) => (0,external_Vue_.unref)(handleShortcutClick)(shortcut)
              }, (0,external_Vue_.toDisplayString)(shortcut.text), 11, panel_date_range_hoisted_1);
            }), 128))
          ], 2)) : (0,external_Vue_.createCommentVNode)("v-if", true),
          (0,external_Vue_.createElementVNode)("div", {
            class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ppNs).e("body"))
          }, [
            (0,external_Vue_.unref)(showTime) ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
              key: 0,
              class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(drpNs).e("time-header"))
            }, [
              (0,external_Vue_.createElementVNode)("span", {
                class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(drpNs).e("editors-wrap"))
              }, [
                (0,external_Vue_.createElementVNode)("span", {
                  class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(drpNs).e("time-picker-wrap"))
                }, [
                  (0,external_Vue_.createVNode)((0,external_Vue_.unref)(components_input/* ElInput */.EZ), {
                    size: "small",
                    disabled: (0,external_Vue_.unref)(rangeState).selecting,
                    placeholder: (0,external_Vue_.unref)(t)("el.datepicker.startDate"),
                    class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(drpNs).e("editor")),
                    "model-value": (0,external_Vue_.unref)(minVisibleDate),
                    onInput: _cache[0] || (_cache[0] = (val) => handleDateInput(val, "min")),
                    onChange: _cache[1] || (_cache[1] = (val) => handleDateChange(val, "min"))
                  }, null, 8, ["disabled", "placeholder", "class", "model-value"])
                ], 2),
                (0,external_Vue_.withDirectives)(((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("span", {
                  class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(drpNs).e("time-picker-wrap"))
                }, [
                  (0,external_Vue_.createVNode)((0,external_Vue_.unref)(components_input/* ElInput */.EZ), {
                    size: "small",
                    class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(drpNs).e("editor")),
                    disabled: (0,external_Vue_.unref)(rangeState).selecting,
                    placeholder: (0,external_Vue_.unref)(t)("el.datepicker.startTime"),
                    "model-value": (0,external_Vue_.unref)(minVisibleTime),
                    onFocus: _cache[2] || (_cache[2] = ($event) => minTimePickerVisible.value = true),
                    onInput: _cache[3] || (_cache[3] = (val) => handleTimeInput(val, "min")),
                    onChange: _cache[4] || (_cache[4] = (val) => handleTimeChange(val, "min"))
                  }, null, 8, ["class", "disabled", "placeholder", "model-value"]),
                  (0,external_Vue_.createVNode)((0,external_Vue_.unref)(TimePickPanel), {
                    visible: minTimePickerVisible.value,
                    format: (0,external_Vue_.unref)(timeFormat),
                    "datetime-role": "start",
                    "time-arrow-control": (0,external_Vue_.unref)(arrowControl),
                    "parsed-value": leftDate.value,
                    onPick: handleMinTimePick
                  }, null, 8, ["visible", "format", "time-arrow-control", "parsed-value"])
                ], 2)), [
                  [(0,external_Vue_.unref)(ClickOutside), handleMinTimeClose]
                ])
              ], 2),
              (0,external_Vue_.createElementVNode)("span", null, [
                (0,external_Vue_.createVNode)((0,external_Vue_.unref)(components_icon/* ElIcon */.gn), null, {
                  default: (0,external_Vue_.withCtx)(() => [
                    (0,external_Vue_.createVNode)((0,external_Vue_.unref)(dist/* ArrowRight */.olP))
                  ]),
                  _: 1
                })
              ]),
              (0,external_Vue_.createElementVNode)("span", {
                class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(drpNs).e("editors-wrap"), "is-right"])
              }, [
                (0,external_Vue_.createElementVNode)("span", {
                  class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(drpNs).e("time-picker-wrap"))
                }, [
                  (0,external_Vue_.createVNode)((0,external_Vue_.unref)(components_input/* ElInput */.EZ), {
                    size: "small",
                    class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(drpNs).e("editor")),
                    disabled: (0,external_Vue_.unref)(rangeState).selecting,
                    placeholder: (0,external_Vue_.unref)(t)("el.datepicker.endDate"),
                    "model-value": (0,external_Vue_.unref)(maxVisibleDate),
                    readonly: !(0,external_Vue_.unref)(minDate),
                    onInput: _cache[5] || (_cache[5] = (val) => handleDateInput(val, "max")),
                    onChange: _cache[6] || (_cache[6] = (val) => handleDateChange(val, "max"))
                  }, null, 8, ["class", "disabled", "placeholder", "model-value", "readonly"])
                ], 2),
                (0,external_Vue_.withDirectives)(((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("span", {
                  class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(drpNs).e("time-picker-wrap"))
                }, [
                  (0,external_Vue_.createVNode)((0,external_Vue_.unref)(components_input/* ElInput */.EZ), {
                    size: "small",
                    class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(drpNs).e("editor")),
                    disabled: (0,external_Vue_.unref)(rangeState).selecting,
                    placeholder: (0,external_Vue_.unref)(t)("el.datepicker.endTime"),
                    "model-value": (0,external_Vue_.unref)(maxVisibleTime),
                    readonly: !(0,external_Vue_.unref)(minDate),
                    onFocus: _cache[7] || (_cache[7] = ($event) => (0,external_Vue_.unref)(minDate) && (maxTimePickerVisible.value = true)),
                    onInput: _cache[8] || (_cache[8] = (val) => handleTimeInput(val, "max")),
                    onChange: _cache[9] || (_cache[9] = (val) => handleTimeChange(val, "max"))
                  }, null, 8, ["class", "disabled", "placeholder", "model-value", "readonly"]),
                  (0,external_Vue_.createVNode)((0,external_Vue_.unref)(TimePickPanel), {
                    "datetime-role": "end",
                    visible: maxTimePickerVisible.value,
                    format: (0,external_Vue_.unref)(timeFormat),
                    "time-arrow-control": (0,external_Vue_.unref)(arrowControl),
                    "parsed-value": rightDate.value,
                    onPick: handleMaxTimePick
                  }, null, 8, ["visible", "format", "time-arrow-control", "parsed-value"])
                ], 2)), [
                  [(0,external_Vue_.unref)(ClickOutside), handleMaxTimeClose]
                ])
              ], 2)
            ], 2)) : (0,external_Vue_.createCommentVNode)("v-if", true),
            (0,external_Vue_.createElementVNode)("div", {
              class: (0,external_Vue_.normalizeClass)([[(0,external_Vue_.unref)(ppNs).e("content"), (0,external_Vue_.unref)(drpNs).e("content")], "is-left"])
            }, [
              (0,external_Vue_.createElementVNode)("div", {
                class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(drpNs).e("header"))
              }, [
                (0,external_Vue_.createElementVNode)("button", {
                  type: "button",
                  class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(ppNs).e("icon-btn"), "d-arrow-left"]),
                  onClick: leftPrevYear
                }, [
                  (0,external_Vue_.createVNode)((0,external_Vue_.unref)(components_icon/* ElIcon */.gn), null, {
                    default: (0,external_Vue_.withCtx)(() => [
                      (0,external_Vue_.createVNode)((0,external_Vue_.unref)(dist/* DArrowLeft */.BAP))
                    ]),
                    _: 1
                  })
                ], 2),
                (0,external_Vue_.createElementVNode)("button", {
                  type: "button",
                  class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(ppNs).e("icon-btn"), "arrow-left"]),
                  onClick: leftPrevMonth
                }, [
                  (0,external_Vue_.createVNode)((0,external_Vue_.unref)(components_icon/* ElIcon */.gn), null, {
                    default: (0,external_Vue_.withCtx)(() => [
                      (0,external_Vue_.createVNode)((0,external_Vue_.unref)(dist/* ArrowLeft */.XdH))
                    ]),
                    _: 1
                  })
                ], 2),
                _ctx.unlinkPanels ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("button", {
                  key: 0,
                  type: "button",
                  disabled: !(0,external_Vue_.unref)(enableYearArrow),
                  class: (0,external_Vue_.normalizeClass)([[(0,external_Vue_.unref)(ppNs).e("icon-btn"), { "is-disabled": !(0,external_Vue_.unref)(enableYearArrow) }], "d-arrow-right"]),
                  onClick: leftNextYear
                }, [
                  (0,external_Vue_.createVNode)((0,external_Vue_.unref)(components_icon/* ElIcon */.gn), null, {
                    default: (0,external_Vue_.withCtx)(() => [
                      (0,external_Vue_.createVNode)((0,external_Vue_.unref)(dist/* DArrowRight */.tsQ))
                    ]),
                    _: 1
                  })
                ], 10, panel_date_range_hoisted_2)) : (0,external_Vue_.createCommentVNode)("v-if", true),
                _ctx.unlinkPanels ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("button", {
                  key: 1,
                  type: "button",
                  disabled: !(0,external_Vue_.unref)(enableMonthArrow),
                  class: (0,external_Vue_.normalizeClass)([[
                    (0,external_Vue_.unref)(ppNs).e("icon-btn"),
                    { "is-disabled": !(0,external_Vue_.unref)(enableMonthArrow) }
                  ], "arrow-right"]),
                  onClick: leftNextMonth
                }, [
                  (0,external_Vue_.createVNode)((0,external_Vue_.unref)(components_icon/* ElIcon */.gn), null, {
                    default: (0,external_Vue_.withCtx)(() => [
                      (0,external_Vue_.createVNode)((0,external_Vue_.unref)(dist/* ArrowRight */.olP))
                    ]),
                    _: 1
                  })
                ], 10, panel_date_range_hoisted_3)) : (0,external_Vue_.createCommentVNode)("v-if", true),
                (0,external_Vue_.createElementVNode)("div", null, (0,external_Vue_.toDisplayString)((0,external_Vue_.unref)(leftLabel)), 1)
              ], 2),
              (0,external_Vue_.createVNode)(basic_date_table_DateTable, {
                "selection-mode": "range",
                date: leftDate.value,
                "min-date": (0,external_Vue_.unref)(minDate),
                "max-date": (0,external_Vue_.unref)(maxDate),
                "range-state": (0,external_Vue_.unref)(rangeState),
                "disabled-date": (0,external_Vue_.unref)(disabledDate),
                "cell-class-name": (0,external_Vue_.unref)(cellClassName),
                onChangerange: (0,external_Vue_.unref)(handleChangeRange),
                onPick: handleRangePick,
                onSelect: (0,external_Vue_.unref)(onSelect)
              }, null, 8, ["date", "min-date", "max-date", "range-state", "disabled-date", "cell-class-name", "onChangerange", "onSelect"])
            ], 2),
            (0,external_Vue_.createElementVNode)("div", {
              class: (0,external_Vue_.normalizeClass)([[(0,external_Vue_.unref)(ppNs).e("content"), (0,external_Vue_.unref)(drpNs).e("content")], "is-right"])
            }, [
              (0,external_Vue_.createElementVNode)("div", {
                class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(drpNs).e("header"))
              }, [
                _ctx.unlinkPanels ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("button", {
                  key: 0,
                  type: "button",
                  disabled: !(0,external_Vue_.unref)(enableYearArrow),
                  class: (0,external_Vue_.normalizeClass)([[(0,external_Vue_.unref)(ppNs).e("icon-btn"), { "is-disabled": !(0,external_Vue_.unref)(enableYearArrow) }], "d-arrow-left"]),
                  onClick: rightPrevYear
                }, [
                  (0,external_Vue_.createVNode)((0,external_Vue_.unref)(components_icon/* ElIcon */.gn), null, {
                    default: (0,external_Vue_.withCtx)(() => [
                      (0,external_Vue_.createVNode)((0,external_Vue_.unref)(dist/* DArrowLeft */.BAP))
                    ]),
                    _: 1
                  })
                ], 10, panel_date_range_hoisted_4)) : (0,external_Vue_.createCommentVNode)("v-if", true),
                _ctx.unlinkPanels ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("button", {
                  key: 1,
                  type: "button",
                  disabled: !(0,external_Vue_.unref)(enableMonthArrow),
                  class: (0,external_Vue_.normalizeClass)([[
                    (0,external_Vue_.unref)(ppNs).e("icon-btn"),
                    { "is-disabled": !(0,external_Vue_.unref)(enableMonthArrow) }
                  ], "arrow-left"]),
                  onClick: rightPrevMonth
                }, [
                  (0,external_Vue_.createVNode)((0,external_Vue_.unref)(components_icon/* ElIcon */.gn), null, {
                    default: (0,external_Vue_.withCtx)(() => [
                      (0,external_Vue_.createVNode)((0,external_Vue_.unref)(dist/* ArrowLeft */.XdH))
                    ]),
                    _: 1
                  })
                ], 10, panel_date_range_hoisted_5)) : (0,external_Vue_.createCommentVNode)("v-if", true),
                (0,external_Vue_.createElementVNode)("button", {
                  type: "button",
                  class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(ppNs).e("icon-btn"), "d-arrow-right"]),
                  onClick: rightNextYear
                }, [
                  (0,external_Vue_.createVNode)((0,external_Vue_.unref)(components_icon/* ElIcon */.gn), null, {
                    default: (0,external_Vue_.withCtx)(() => [
                      (0,external_Vue_.createVNode)((0,external_Vue_.unref)(dist/* DArrowRight */.tsQ))
                    ]),
                    _: 1
                  })
                ], 2),
                (0,external_Vue_.createElementVNode)("button", {
                  type: "button",
                  class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(ppNs).e("icon-btn"), "arrow-right"]),
                  onClick: rightNextMonth
                }, [
                  (0,external_Vue_.createVNode)((0,external_Vue_.unref)(components_icon/* ElIcon */.gn), null, {
                    default: (0,external_Vue_.withCtx)(() => [
                      (0,external_Vue_.createVNode)((0,external_Vue_.unref)(dist/* ArrowRight */.olP))
                    ]),
                    _: 1
                  })
                ], 2),
                (0,external_Vue_.createElementVNode)("div", null, (0,external_Vue_.toDisplayString)((0,external_Vue_.unref)(rightLabel)), 1)
              ], 2),
              (0,external_Vue_.createVNode)(basic_date_table_DateTable, {
                "selection-mode": "range",
                date: rightDate.value,
                "min-date": (0,external_Vue_.unref)(minDate),
                "max-date": (0,external_Vue_.unref)(maxDate),
                "range-state": (0,external_Vue_.unref)(rangeState),
                "disabled-date": (0,external_Vue_.unref)(disabledDate),
                "cell-class-name": (0,external_Vue_.unref)(cellClassName),
                onChangerange: (0,external_Vue_.unref)(handleChangeRange),
                onPick: handleRangePick,
                onSelect: (0,external_Vue_.unref)(onSelect)
              }, null, 8, ["date", "min-date", "max-date", "range-state", "disabled-date", "cell-class-name", "onChangerange", "onSelect"])
            ], 2)
          ], 2)
        ], 2),
        (0,external_Vue_.unref)(showTime) ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
          key: 0,
          class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ppNs).e("footer"))
        }, [
          (0,external_Vue_.unref)(clearable) ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.unref)(ElButton), {
            key: 0,
            text: "",
            size: "small",
            class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ppNs).e("link-btn")),
            onClick: handleClear
          }, {
            default: (0,external_Vue_.withCtx)(() => [
              (0,external_Vue_.createTextVNode)((0,external_Vue_.toDisplayString)((0,external_Vue_.unref)(t)("el.datepicker.clear")), 1)
            ]),
            _: 1
          }, 8, ["class"])) : (0,external_Vue_.createCommentVNode)("v-if", true),
          (0,external_Vue_.createVNode)((0,external_Vue_.unref)(ElButton), {
            plain: "",
            size: "small",
            class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ppNs).e("link-btn")),
            disabled: (0,external_Vue_.unref)(btnDisabled),
            onClick: _cache[10] || (_cache[10] = ($event) => (0,external_Vue_.unref)(handleRangeConfirm)(false))
          }, {
            default: (0,external_Vue_.withCtx)(() => [
              (0,external_Vue_.createTextVNode)((0,external_Vue_.toDisplayString)((0,external_Vue_.unref)(t)("el.datepicker.confirm")), 1)
            ]),
            _: 1
          }, 8, ["class", "disabled"])
        ], 2)) : (0,external_Vue_.createCommentVNode)("v-if", true)
      ], 2);
    };
  }
});
var DateRangePickPanel = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(panel_date_range_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/date-picker/src/date-picker-com/panel-date-range.vue"]]);


//# sourceMappingURL=panel-date-range.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/date-picker/src/props/panel-month-range.mjs




const panelMonthRangeProps = (0,runtime/* buildProps */.o8)({
  ...panelRangeSharedProps
});
const panelMonthRangeEmits = ["pick", "set-picker-option"];


//# sourceMappingURL=panel-month-range.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/date-picker/src/composables/use-month-range-header.mjs




const useMonthRangeHeader = ({
  unlinkPanels,
  leftDate,
  rightDate
}) => {
  const { t } = useLocale();
  const leftPrevYear = () => {
    leftDate.value = leftDate.value.subtract(1, "year");
    if (!unlinkPanels) {
      rightDate.value = rightDate.value.subtract(1, "year");
    }
  };
  const rightNextYear = () => {
    if (!unlinkPanels) {
      leftDate.value = leftDate.value.add(1, "year");
    }
    rightDate.value = rightDate.value.add(1, "year");
  };
  const leftNextYear = () => {
    leftDate.value = leftDate.value.add(1, "year");
  };
  const rightPrevYear = () => {
    rightDate.value = rightDate.value.subtract(1, "year");
  };
  const leftLabel = (0,external_Vue_.computed)(() => {
    return `${leftDate.value.year()} ${t("el.datepicker.year")}`;
  });
  const rightLabel = (0,external_Vue_.computed)(() => {
    return `${rightDate.value.year()} ${t("el.datepicker.year")}`;
  });
  const leftYear = (0,external_Vue_.computed)(() => {
    return leftDate.value.year();
  });
  const rightYear = (0,external_Vue_.computed)(() => {
    return rightDate.value.year() === leftDate.value.year() ? leftDate.value.year() + 1 : rightDate.value.year();
  });
  return {
    leftPrevYear,
    rightNextYear,
    leftNextYear,
    rightPrevYear,
    leftLabel,
    rightLabel,
    leftYear,
    rightYear
  };
};


//# sourceMappingURL=use-month-range-header.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/date-picker/src/date-picker-com/panel-month-range.mjs












const panel_month_range_hoisted_1 = ["onClick"];
const panel_month_range_hoisted_2 = ["disabled"];
const panel_month_range_hoisted_3 = ["disabled"];
const panel_month_range_default_ = {
  name: "DatePickerMonthRange"
};
const panel_month_range_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...panel_month_range_default_,
  props: panelMonthRangeProps,
  emits: panelMonthRangeEmits,
  setup(__props, { emit }) {
    const props = __props;
    const unit = "year";
    const { lang } = useLocale();
    const pickerBase = (0,external_Vue_.inject)("EP_PICKER_BASE");
    const { shortcuts, disabledDate, format } = pickerBase.props;
    const defaultValue = (0,external_Vue_.toRef)(pickerBase.props, "defaultValue");
    const leftDate = (0,external_Vue_.ref)(dayjs_min().locale(lang.value));
    const rightDate = (0,external_Vue_.ref)(dayjs_min().locale(lang.value).add(1, unit));
    const {
      minDate,
      maxDate,
      rangeState,
      ppNs,
      drpNs,
      handleChangeRange,
      handleRangeConfirm,
      handleShortcutClick,
      onSelect
    } = useRangePicker(props, {
      defaultValue,
      leftDate,
      rightDate,
      unit,
      onParsedValueChanged
    });
    const hasShortcuts = (0,external_Vue_.computed)(() => !!shortcuts.length);
    const {
      leftPrevYear,
      rightNextYear,
      leftNextYear,
      rightPrevYear,
      leftLabel,
      rightLabel,
      leftYear,
      rightYear
    } = useMonthRangeHeader({
      unlinkPanels: (0,external_Vue_.toRef)(props, "unlinkPanels"),
      leftDate,
      rightDate
    });
    const enableYearArrow = (0,external_Vue_.computed)(() => {
      return props.unlinkPanels && rightYear.value > leftYear.value + 1;
    });
    const handleRangePick = (val, close = true) => {
      const minDate_ = val.minDate;
      const maxDate_ = val.maxDate;
      if (maxDate.value === maxDate_ && minDate.value === minDate_) {
        return;
      }
      maxDate.value = maxDate_;
      minDate.value = minDate_;
      if (!close)
        return;
      handleRangeConfirm();
    };
    const formatToString = (days) => {
      return days.map((day) => day.format(format));
    };
    function onParsedValueChanged(minDate2, maxDate2) {
      if (props.unlinkPanels && maxDate2) {
        const minDateYear = (minDate2 == null ? void 0 : minDate2.year()) || 0;
        const maxDateYear = maxDate2.year();
        rightDate.value = minDateYear === maxDateYear ? maxDate2.add(1, unit) : maxDate2;
      } else {
        rightDate.value = leftDate.value.add(1, unit);
      }
    }
    emit("set-picker-option", ["formatToString", formatToString]);
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
        class: (0,external_Vue_.normalizeClass)([
          (0,external_Vue_.unref)(ppNs).b(),
          (0,external_Vue_.unref)(drpNs).b(),
          {
            "has-sidebar": Boolean(_ctx.$slots.sidebar) || (0,external_Vue_.unref)(hasShortcuts)
          }
        ])
      }, [
        (0,external_Vue_.createElementVNode)("div", {
          class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ppNs).e("body-wrapper"))
        }, [
          (0,external_Vue_.renderSlot)(_ctx.$slots, "sidebar", {
            class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ppNs).e("sidebar"))
          }),
          (0,external_Vue_.unref)(hasShortcuts) ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
            key: 0,
            class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ppNs).e("sidebar"))
          }, [
            ((0,external_Vue_.openBlock)(true), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, null, (0,external_Vue_.renderList)((0,external_Vue_.unref)(shortcuts), (shortcut, key) => {
              return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("button", {
                key,
                type: "button",
                class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ppNs).e("shortcut")),
                onClick: ($event) => (0,external_Vue_.unref)(handleShortcutClick)(shortcut)
              }, (0,external_Vue_.toDisplayString)(shortcut.text), 11, panel_month_range_hoisted_1);
            }), 128))
          ], 2)) : (0,external_Vue_.createCommentVNode)("v-if", true),
          (0,external_Vue_.createElementVNode)("div", {
            class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ppNs).e("body"))
          }, [
            (0,external_Vue_.createElementVNode)("div", {
              class: (0,external_Vue_.normalizeClass)([[(0,external_Vue_.unref)(ppNs).e("content"), (0,external_Vue_.unref)(drpNs).e("content")], "is-left"])
            }, [
              (0,external_Vue_.createElementVNode)("div", {
                class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(drpNs).e("header"))
              }, [
                (0,external_Vue_.createElementVNode)("button", {
                  type: "button",
                  class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(ppNs).e("icon-btn"), "d-arrow-left"]),
                  onClick: _cache[0] || (_cache[0] = (...args) => (0,external_Vue_.unref)(leftPrevYear) && (0,external_Vue_.unref)(leftPrevYear)(...args))
                }, [
                  (0,external_Vue_.createVNode)((0,external_Vue_.unref)(components_icon/* ElIcon */.gn), null, {
                    default: (0,external_Vue_.withCtx)(() => [
                      (0,external_Vue_.createVNode)((0,external_Vue_.unref)(dist/* DArrowLeft */.BAP))
                    ]),
                    _: 1
                  })
                ], 2),
                _ctx.unlinkPanels ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("button", {
                  key: 0,
                  type: "button",
                  disabled: !(0,external_Vue_.unref)(enableYearArrow),
                  class: (0,external_Vue_.normalizeClass)([[
                    (0,external_Vue_.unref)(ppNs).e("icon-btn"),
                    { [(0,external_Vue_.unref)(ppNs).is("disabled")]: !(0,external_Vue_.unref)(enableYearArrow) }
                  ], "d-arrow-right"]),
                  onClick: _cache[1] || (_cache[1] = (...args) => (0,external_Vue_.unref)(leftNextYear) && (0,external_Vue_.unref)(leftNextYear)(...args))
                }, [
                  (0,external_Vue_.createVNode)((0,external_Vue_.unref)(components_icon/* ElIcon */.gn), null, {
                    default: (0,external_Vue_.withCtx)(() => [
                      (0,external_Vue_.createVNode)((0,external_Vue_.unref)(dist/* DArrowRight */.tsQ))
                    ]),
                    _: 1
                  })
                ], 10, panel_month_range_hoisted_2)) : (0,external_Vue_.createCommentVNode)("v-if", true),
                (0,external_Vue_.createElementVNode)("div", null, (0,external_Vue_.toDisplayString)((0,external_Vue_.unref)(leftLabel)), 1)
              ], 2),
              (0,external_Vue_.createVNode)(MonthTable, {
                "selection-mode": "range",
                date: leftDate.value,
                "min-date": (0,external_Vue_.unref)(minDate),
                "max-date": (0,external_Vue_.unref)(maxDate),
                "range-state": (0,external_Vue_.unref)(rangeState),
                "disabled-date": (0,external_Vue_.unref)(disabledDate),
                onChangerange: (0,external_Vue_.unref)(handleChangeRange),
                onPick: handleRangePick,
                onSelect: (0,external_Vue_.unref)(onSelect)
              }, null, 8, ["date", "min-date", "max-date", "range-state", "disabled-date", "onChangerange", "onSelect"])
            ], 2),
            (0,external_Vue_.createElementVNode)("div", {
              class: (0,external_Vue_.normalizeClass)([[(0,external_Vue_.unref)(ppNs).e("content"), (0,external_Vue_.unref)(drpNs).e("content")], "is-right"])
            }, [
              (0,external_Vue_.createElementVNode)("div", {
                class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(drpNs).e("header"))
              }, [
                _ctx.unlinkPanels ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("button", {
                  key: 0,
                  type: "button",
                  disabled: !(0,external_Vue_.unref)(enableYearArrow),
                  class: (0,external_Vue_.normalizeClass)([[(0,external_Vue_.unref)(ppNs).e("icon-btn"), { "is-disabled": !(0,external_Vue_.unref)(enableYearArrow) }], "d-arrow-left"]),
                  onClick: _cache[2] || (_cache[2] = (...args) => (0,external_Vue_.unref)(rightPrevYear) && (0,external_Vue_.unref)(rightPrevYear)(...args))
                }, [
                  (0,external_Vue_.createVNode)((0,external_Vue_.unref)(components_icon/* ElIcon */.gn), null, {
                    default: (0,external_Vue_.withCtx)(() => [
                      (0,external_Vue_.createVNode)((0,external_Vue_.unref)(dist/* DArrowLeft */.BAP))
                    ]),
                    _: 1
                  })
                ], 10, panel_month_range_hoisted_3)) : (0,external_Vue_.createCommentVNode)("v-if", true),
                (0,external_Vue_.createElementVNode)("button", {
                  type: "button",
                  class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(ppNs).e("icon-btn"), "d-arrow-right"]),
                  onClick: _cache[3] || (_cache[3] = (...args) => (0,external_Vue_.unref)(rightNextYear) && (0,external_Vue_.unref)(rightNextYear)(...args))
                }, [
                  (0,external_Vue_.createVNode)((0,external_Vue_.unref)(components_icon/* ElIcon */.gn), null, {
                    default: (0,external_Vue_.withCtx)(() => [
                      (0,external_Vue_.createVNode)((0,external_Vue_.unref)(dist/* DArrowRight */.tsQ))
                    ]),
                    _: 1
                  })
                ], 2),
                (0,external_Vue_.createElementVNode)("div", null, (0,external_Vue_.toDisplayString)((0,external_Vue_.unref)(rightLabel)), 1)
              ], 2),
              (0,external_Vue_.createVNode)(MonthTable, {
                "selection-mode": "range",
                date: rightDate.value,
                "min-date": (0,external_Vue_.unref)(minDate),
                "max-date": (0,external_Vue_.unref)(maxDate),
                "range-state": (0,external_Vue_.unref)(rangeState),
                "disabled-date": (0,external_Vue_.unref)(disabledDate),
                onChangerange: (0,external_Vue_.unref)(handleChangeRange),
                onPick: handleRangePick,
                onSelect: (0,external_Vue_.unref)(onSelect)
              }, null, 8, ["date", "min-date", "max-date", "range-state", "disabled-date", "onChangerange", "onSelect"])
            ], 2)
          ], 2)
        ], 2)
      ], 2);
    };
  }
});
var MonthRangePickPanel = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(panel_month_range_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/date-picker/src/date-picker-com/panel-month-range.vue"]]);


//# sourceMappingURL=panel-month-range.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/date-picker/src/panel-utils.mjs




const getPanel = function(type) {
  switch (type) {
    case "daterange":
    case "datetimerange": {
      return DateRangePickPanel;
    }
    case "monthrange": {
      return MonthRangePickPanel;
    }
    default: {
      return DatePickPanel;
    }
  }
};


//# sourceMappingURL=panel-utils.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/time-picker/src/common/props.mjs







const timePickerDefaultProps = (0,runtime/* buildProps */.o8)({
  id: {
    type: (0,runtime/* definePropType */.Cq)([Array, String])
  },
  name: {
    type: (0,runtime/* definePropType */.Cq)([Array, String]),
    default: ""
  },
  popperClass: {
    type: String,
    default: ""
  },
  format: String,
  valueFormat: String,
  type: {
    type: String,
    default: ""
  },
  clearable: {
    type: Boolean,
    default: true
  },
  clearIcon: {
    type: (0,runtime/* definePropType */.Cq)([String, Object]),
    default: dist/* CircleClose */.K41
  },
  editable: {
    type: Boolean,
    default: true
  },
  prefixIcon: {
    type: (0,runtime/* definePropType */.Cq)([String, Object]),
    default: ""
  },
  size: use_common_props/* useSizeProp */.Pp,
  readonly: {
    type: Boolean,
    default: false
  },
  disabled: {
    type: Boolean,
    default: false
  },
  placeholder: {
    type: String,
    default: ""
  },
  popperOptions: {
    type: (0,runtime/* definePropType */.Cq)(Object),
    default: () => ({})
  },
  modelValue: {
    type: (0,runtime/* definePropType */.Cq)([Date, Array, String, Number]),
    default: ""
  },
  rangeSeparator: {
    type: String,
    default: "-"
  },
  startPlaceholder: String,
  endPlaceholder: String,
  defaultValue: {
    type: (0,runtime/* definePropType */.Cq)([Date, Array])
  },
  defaultTime: {
    type: (0,runtime/* definePropType */.Cq)([Date, Array])
  },
  isRange: {
    type: Boolean,
    default: false
  },
  ...disabledTimeListsProps,
  disabledDate: {
    type: Function
  },
  cellClassName: {
    type: Function
  },
  shortcuts: {
    type: Array,
    default: () => []
  },
  arrowControl: {
    type: Boolean,
    default: false
  },
  label: {
    type: String,
    default: void 0
  },
  tabindex: {
    type: (0,runtime/* definePropType */.Cq)([String, Number]),
    default: 0
  },
  validateEvent: {
    type: Boolean,
    default: true
  },
  unlinkPanels: Boolean
});


//# sourceMappingURL=props.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/time-picker/src/common/picker.mjs






















const picker_hoisted_1 = ["id", "name", "placeholder", "value", "disabled", "readonly"];
const picker_hoisted_2 = ["id", "name", "placeholder", "value", "disabled", "readonly"];
const picker_default_ = {
  name: "Picker"
};
const picker_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...picker_default_,
  props: timePickerDefaultProps,
  emits: [
    "update:modelValue",
    "change",
    "focus",
    "blur",
    "calendar-change",
    "panel-change",
    "visible-change",
    "keydown"
  ],
  setup(__props, { expose, emit }) {
    const props = __props;
    const { lang } = useLocale();
    const nsDate = (0,use_namespace/* useNamespace */.s)("date");
    const nsInput = (0,use_namespace/* useNamespace */.s)("input");
    const nsRange = (0,use_namespace/* useNamespace */.s)("range");
    const elForm = (0,external_Vue_.inject)(tokens_form/* formContextKey */.H, {});
    const elFormItem = (0,external_Vue_.inject)(tokens_form/* formItemContextKey */.K, {});
    const elPopperOptions = (0,external_Vue_.inject)("ElPopperOptions", {});
    const refPopper = (0,external_Vue_.ref)();
    const inputRef = (0,external_Vue_.ref)();
    const pickerVisible = (0,external_Vue_.ref)(false);
    const pickerActualVisible = (0,external_Vue_.ref)(false);
    const valueOnOpen = (0,external_Vue_.ref)(null);
    let hasJustTabExitedInput = false;
    let ignoreFocusEvent = false;
    (0,external_Vue_.watch)(pickerVisible, (val) => {
      if (!val) {
        userInput.value = null;
        (0,external_Vue_.nextTick)(() => {
          emitChange(props.modelValue);
        });
      } else {
        valueOnOpen.value = props.modelValue;
      }
    });
    const emitChange = (val, isClear) => {
      var _a;
      if (isClear || !valueEquals(val, valueOnOpen.value)) {
        emit("change", val);
        props.validateEvent && ((_a = elFormItem.validate) == null ? void 0 : _a.call(elFormItem, "change").catch((err) => (0,error/* debugWarn */.N)(err)));
      }
    };
    const emitInput = (input) => {
      if (!valueEquals(props.modelValue, input)) {
        let formatted;
        if ((0,shared_esm_bundler/* isArray */.kJ)(input)) {
          formatted = input.map((item) => formatter(item, props.valueFormat, lang.value));
        } else if (input) {
          formatted = formatter(input, props.valueFormat, lang.value);
        }
        emit("update:modelValue", input ? formatted : input, lang.value);
      }
    };
    const emitKeydown = (e) => {
      emit("keydown", e);
    };
    const refInput = (0,external_Vue_.computed)(() => {
      if (inputRef.value) {
        const _r = isRangeInput.value ? inputRef.value : inputRef.value.$el;
        return Array.from(_r.querySelectorAll("input"));
      }
      return [];
    });
    const setSelectionRange = (start, end, pos) => {
      const _inputs = refInput.value;
      if (!_inputs.length)
        return;
      if (!pos || pos === "min") {
        _inputs[0].setSelectionRange(start, end);
        _inputs[0].focus();
      } else if (pos === "max") {
        _inputs[1].setSelectionRange(start, end);
        _inputs[1].focus();
      }
    };
    const focusOnInputBox = () => {
      focus(true, true);
      (0,external_Vue_.nextTick)(() => {
        ignoreFocusEvent = false;
      });
    };
    const onPick = (date = "", visible = false) => {
      if (!visible) {
        focusOnInputBox();
      }
      pickerVisible.value = visible;
      let result;
      if ((0,shared_esm_bundler/* isArray */.kJ)(date)) {
        result = date.map((_) => _.toDate());
      } else {
        result = date ? date.toDate() : date;
      }
      userInput.value = null;
      emitInput(result);
    };
    const onBeforeShow = () => {
      pickerActualVisible.value = true;
    };
    const onShow = () => {
      emit("visible-change", true);
    };
    const onKeydownPopperContent = (event) => {
      if ((event == null ? void 0 : event.key) === aria_EVENT_CODE.esc) {
        focus(true, true);
      }
    };
    const onHide = () => {
      pickerActualVisible.value = false;
      ignoreFocusEvent = false;
      emit("visible-change", false);
    };
    const focus = (focusStartInput = true, isIgnoreFocusEvent = false) => {
      ignoreFocusEvent = isIgnoreFocusEvent;
      const [leftInput, rightInput] = (0,external_Vue_.unref)(refInput);
      let input = leftInput;
      if (!focusStartInput && isRangeInput.value) {
        input = rightInput;
      }
      if (input) {
        input.focus();
      }
    };
    const handleFocusInput = (e) => {
      if (props.readonly || pickerDisabled.value || pickerVisible.value || ignoreFocusEvent) {
        return;
      }
      pickerVisible.value = true;
      emit("focus", e);
    };
    let currentHandleBlurDeferCallback = void 0;
    const handleBlurInput = (e) => {
      const handleBlurDefer = async () => {
        setTimeout(() => {
          var _a, _b;
          if (currentHandleBlurDeferCallback === handleBlurDefer) {
            if (!(((_a = refPopper.value) == null ? void 0 : _a.isFocusInsideContent()) && !hasJustTabExitedInput) && refInput.value.filter((input) => {
              return input.contains(document.activeElement);
            }).length === 0) {
              handleChange();
              pickerVisible.value = false;
              emit("blur", e);
              props.validateEvent && ((_b = elFormItem.validate) == null ? void 0 : _b.call(elFormItem, "blur").catch((err) => (0,error/* debugWarn */.N)(err)));
            }
            hasJustTabExitedInput = false;
          }
        }, 0);
      };
      currentHandleBlurDeferCallback = handleBlurDefer;
      handleBlurDefer();
    };
    const pickerDisabled = (0,external_Vue_.computed)(() => {
      return props.disabled || elForm.disabled;
    });
    const parsedValue = (0,external_Vue_.computed)(() => {
      let dayOrDays;
      if (valueIsEmpty.value) {
        if (pickerOptions.value.getDefaultValue) {
          dayOrDays = pickerOptions.value.getDefaultValue();
        }
      } else {
        if ((0,shared_esm_bundler/* isArray */.kJ)(props.modelValue)) {
          dayOrDays = props.modelValue.map((d) => parseDate(d, props.valueFormat, lang.value));
        } else {
          dayOrDays = parseDate(props.modelValue, props.valueFormat, lang.value);
        }
      }
      if (pickerOptions.value.getRangeAvailableTime) {
        const availableResult = pickerOptions.value.getRangeAvailableTime(dayOrDays);
        if (!(0,isEqual/* default */.Z)(availableResult, dayOrDays)) {
          dayOrDays = availableResult;
          emitInput((0,shared_esm_bundler/* isArray */.kJ)(dayOrDays) ? dayOrDays.map((_) => _.toDate()) : dayOrDays.toDate());
        }
      }
      if ((0,shared_esm_bundler/* isArray */.kJ)(dayOrDays) && dayOrDays.some((day) => !day)) {
        dayOrDays = [];
      }
      return dayOrDays;
    });
    const displayValue = (0,external_Vue_.computed)(() => {
      if (!pickerOptions.value.panelReady)
        return "";
      const formattedValue = formatDayjsToString(parsedValue.value);
      if ((0,shared_esm_bundler/* isArray */.kJ)(userInput.value)) {
        return [
          userInput.value[0] || formattedValue && formattedValue[0] || "",
          userInput.value[1] || formattedValue && formattedValue[1] || ""
        ];
      } else if (userInput.value !== null) {
        return userInput.value;
      }
      if (!isTimePicker.value && valueIsEmpty.value)
        return "";
      if (!pickerVisible.value && valueIsEmpty.value)
        return "";
      if (formattedValue) {
        return isDatesPicker.value ? formattedValue.join(", ") : formattedValue;
      }
      return "";
    });
    const isTimeLikePicker = (0,external_Vue_.computed)(() => props.type.includes("time"));
    const isTimePicker = (0,external_Vue_.computed)(() => props.type.startsWith("time"));
    const isDatesPicker = (0,external_Vue_.computed)(() => props.type === "dates");
    const triggerIcon = (0,external_Vue_.computed)(() => props.prefixIcon || (isTimeLikePicker.value ? dist/* Clock */.SUY : dist/* Calendar */.faS));
    const showClose = (0,external_Vue_.ref)(false);
    const onClearIconClick = (event) => {
      if (props.readonly || pickerDisabled.value)
        return;
      if (showClose.value) {
        event.stopPropagation();
        focusOnInputBox();
        emitInput(null);
        emitChange(null, true);
        showClose.value = false;
        pickerVisible.value = false;
        pickerOptions.value.handleClear && pickerOptions.value.handleClear();
      }
    };
    const valueIsEmpty = (0,external_Vue_.computed)(() => {
      const { modelValue } = props;
      return !modelValue || (0,shared_esm_bundler/* isArray */.kJ)(modelValue) && !modelValue.filter(Boolean).length;
    });
    const onMouseDownInput = async (event) => {
      var _a;
      if (props.readonly || pickerDisabled.value)
        return;
      if (((_a = event.target) == null ? void 0 : _a.tagName) !== "INPUT" || refInput.value.includes(document.activeElement)) {
        pickerVisible.value = true;
      }
    };
    const onMouseEnter = () => {
      if (props.readonly || pickerDisabled.value)
        return;
      if (!valueIsEmpty.value && props.clearable) {
        showClose.value = true;
      }
    };
    const onMouseLeave = () => {
      showClose.value = false;
    };
    const onTouchStartInput = (event) => {
      var _a;
      if (((_a = event.touches[0].target) == null ? void 0 : _a.tagName) !== "INPUT" || refInput.value.includes(document.activeElement)) {
        pickerVisible.value = true;
      }
    };
    const isRangeInput = (0,external_Vue_.computed)(() => {
      return props.type.includes("range");
    });
    const pickerSize = (0,use_common_props/* useSize */.tH)();
    const popperEl = (0,external_Vue_.computed)(() => {
      var _a, _b;
      return (_b = (_a = (0,external_Vue_.unref)(refPopper)) == null ? void 0 : _a.popperRef) == null ? void 0 : _b.contentRef;
    });
    const actualInputRef = (0,external_Vue_.computed)(() => {
      var _a;
      if ((0,external_Vue_.unref)(isRangeInput)) {
        return (0,external_Vue_.unref)(inputRef);
      }
      return (_a = (0,external_Vue_.unref)(inputRef)) == null ? void 0 : _a.$el;
    });
    (0,core/* onClickOutside */.i9H)(actualInputRef, (e) => {
      const unrefedPopperEl = (0,external_Vue_.unref)(popperEl);
      const inputEl = (0,external_Vue_.unref)(actualInputRef);
      if (unrefedPopperEl && (e.target === unrefedPopperEl || e.composedPath().includes(unrefedPopperEl)) || e.target === inputEl || e.composedPath().includes(inputEl))
        return;
      pickerVisible.value = false;
    });
    const userInput = (0,external_Vue_.ref)(null);
    const handleChange = () => {
      if (userInput.value) {
        const value = parseUserInputToDayjs(displayValue.value);
        if (value) {
          if (isValidValue(value)) {
            emitInput((0,shared_esm_bundler/* isArray */.kJ)(value) ? value.map((_) => _.toDate()) : value.toDate());
            userInput.value = null;
          }
        }
      }
      if (userInput.value === "") {
        emitInput(null);
        emitChange(null);
        userInput.value = null;
      }
    };
    const parseUserInputToDayjs = (value) => {
      if (!value)
        return null;
      return pickerOptions.value.parseUserInput(value);
    };
    const formatDayjsToString = (value) => {
      if (!value)
        return null;
      return pickerOptions.value.formatToString(value);
    };
    const isValidValue = (value) => {
      return pickerOptions.value.isValidValue(value);
    };
    const handleKeydownInput = async (event) => {
      const { code } = event;
      emitKeydown(event);
      if (code === aria_EVENT_CODE.esc) {
        if (pickerVisible.value === true) {
          pickerVisible.value = false;
          event.preventDefault();
          event.stopPropagation();
        }
        return;
      }
      if (code === aria_EVENT_CODE.down) {
        if (pickerOptions.value.handleFocusPicker) {
          event.preventDefault();
          event.stopPropagation();
        }
        if (pickerVisible.value === false) {
          pickerVisible.value = true;
          await (0,external_Vue_.nextTick)();
        }
        if (pickerOptions.value.handleFocusPicker) {
          pickerOptions.value.handleFocusPicker();
          return;
        }
      }
      if (code === aria_EVENT_CODE.tab) {
        hasJustTabExitedInput = true;
        return;
      }
      if (code === aria_EVENT_CODE.enter || code === aria_EVENT_CODE.numpadEnter) {
        if (userInput.value === null || userInput.value === "" || isValidValue(parseUserInputToDayjs(displayValue.value))) {
          handleChange();
          pickerVisible.value = false;
        }
        event.stopPropagation();
        return;
      }
      if (userInput.value) {
        event.stopPropagation();
        return;
      }
      if (pickerOptions.value.handleKeydownInput) {
        pickerOptions.value.handleKeydownInput(event);
      }
    };
    const onUserInput = (e) => {
      userInput.value = e;
      if (!pickerVisible.value) {
        pickerVisible.value = true;
      }
    };
    const handleStartInput = (event) => {
      const target = event.target;
      if (userInput.value) {
        userInput.value = [target.value, userInput.value[1]];
      } else {
        userInput.value = [target.value, null];
      }
    };
    const handleEndInput = (event) => {
      const target = event.target;
      if (userInput.value) {
        userInput.value = [userInput.value[0], target.value];
      } else {
        userInput.value = [null, target.value];
      }
    };
    const handleStartChange = () => {
      var _a;
      const values = userInput.value;
      const value = parseUserInputToDayjs(values && values[0]);
      const parsedVal = (0,external_Vue_.unref)(parsedValue);
      if (value && value.isValid()) {
        userInput.value = [
          formatDayjsToString(value),
          ((_a = displayValue.value) == null ? void 0 : _a[1]) || null
        ];
        const newValue = [value, parsedVal && (parsedVal[1] || null)];
        if (isValidValue(newValue)) {
          emitInput(newValue);
          userInput.value = null;
        }
      }
    };
    const handleEndChange = () => {
      var _a;
      const values = (0,external_Vue_.unref)(userInput);
      const value = parseUserInputToDayjs(values && values[1]);
      const parsedVal = (0,external_Vue_.unref)(parsedValue);
      if (value && value.isValid()) {
        userInput.value = [
          ((_a = (0,external_Vue_.unref)(displayValue)) == null ? void 0 : _a[0]) || null,
          formatDayjsToString(value)
        ];
        const newValue = [parsedVal && parsedVal[0], value];
        if (isValidValue(newValue)) {
          emitInput(newValue);
          userInput.value = null;
        }
      }
    };
    const pickerOptions = (0,external_Vue_.ref)({});
    const onSetPickerOption = (e) => {
      pickerOptions.value[e[0]] = e[1];
      pickerOptions.value.panelReady = true;
    };
    const onCalendarChange = (e) => {
      emit("calendar-change", e);
    };
    const onPanelChange = (value, mode, view) => {
      emit("panel-change", value, mode, view);
    };
    (0,external_Vue_.provide)("EP_PICKER_BASE", {
      props
    });
    expose({
      focus,
      handleFocusInput,
      handleBlurInput,
      onPick
    });
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.unref)(ElTooltip), (0,external_Vue_.mergeProps)({
        ref_key: "refPopper",
        ref: refPopper,
        visible: pickerVisible.value,
        "onUpdate:visible": _cache[2] || (_cache[2] = ($event) => pickerVisible.value = $event),
        effect: "light",
        pure: "",
        trigger: "click"
      }, _ctx.$attrs, {
        role: "dialog",
        teleported: "",
        transition: `${(0,external_Vue_.unref)(nsDate).namespace.value}-zoom-in-top`,
        "popper-class": [`${(0,external_Vue_.unref)(nsDate).namespace.value}-picker__popper`, _ctx.popperClass],
        "popper-options": (0,external_Vue_.unref)(elPopperOptions),
        "fallback-placements": ["bottom", "top", "right", "left"],
        "gpu-acceleration": false,
        "stop-popper-mouse-event": false,
        "hide-after": 0,
        persistent: "",
        onBeforeShow,
        onShow,
        onHide
      }), {
        default: (0,external_Vue_.withCtx)(() => [
          !(0,external_Vue_.unref)(isRangeInput) ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.unref)(components_input/* ElInput */.EZ), {
            key: 0,
            id: _ctx.id,
            ref_key: "inputRef",
            ref: inputRef,
            "container-role": "combobox",
            "model-value": (0,external_Vue_.unref)(displayValue),
            name: _ctx.name,
            size: (0,external_Vue_.unref)(pickerSize),
            disabled: (0,external_Vue_.unref)(pickerDisabled),
            placeholder: _ctx.placeholder,
            class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(nsDate).b("editor"), (0,external_Vue_.unref)(nsDate).bm("editor", _ctx.type), _ctx.$attrs.class]),
            style: (0,external_Vue_.normalizeStyle)(_ctx.$attrs.style),
            readonly: !_ctx.editable || _ctx.readonly || (0,external_Vue_.unref)(isDatesPicker) || _ctx.type === "week",
            label: _ctx.label,
            tabindex: _ctx.tabindex,
            "validate-event": _ctx.validateEvent,
            onInput: onUserInput,
            onFocus: handleFocusInput,
            onBlur: handleBlurInput,
            onKeydown: handleKeydownInput,
            onChange: handleChange,
            onMousedown: onMouseDownInput,
            onMouseenter: onMouseEnter,
            onMouseleave: onMouseLeave,
            onTouchstart: onTouchStartInput,
            onClick: _cache[0] || (_cache[0] = (0,external_Vue_.withModifiers)(() => {
            }, ["stop"]))
          }, {
            prefix: (0,external_Vue_.withCtx)(() => [
              (0,external_Vue_.unref)(triggerIcon) ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.unref)(components_icon/* ElIcon */.gn), {
                key: 0,
                class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(nsInput).e("icon")),
                onMousedown: onMouseDownInput,
                onTouchstart: onTouchStartInput
              }, {
                default: (0,external_Vue_.withCtx)(() => [
                  ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.resolveDynamicComponent)((0,external_Vue_.unref)(triggerIcon))))
                ]),
                _: 1
              }, 8, ["class"])) : (0,external_Vue_.createCommentVNode)("v-if", true)
            ]),
            suffix: (0,external_Vue_.withCtx)(() => [
              showClose.value && _ctx.clearIcon ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.unref)(components_icon/* ElIcon */.gn), {
                key: 0,
                class: (0,external_Vue_.normalizeClass)(`${(0,external_Vue_.unref)(nsInput).e("icon")} clear-icon`),
                onClick: (0,external_Vue_.withModifiers)(onClearIconClick, ["stop"])
              }, {
                default: (0,external_Vue_.withCtx)(() => [
                  ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.resolveDynamicComponent)(_ctx.clearIcon)))
                ]),
                _: 1
              }, 8, ["class", "onClick"])) : (0,external_Vue_.createCommentVNode)("v-if", true)
            ]),
            _: 1
          }, 8, ["id", "model-value", "name", "size", "disabled", "placeholder", "class", "style", "readonly", "label", "tabindex", "validate-event", "onKeydown"])) : ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
            key: 1,
            ref_key: "inputRef",
            ref: inputRef,
            class: (0,external_Vue_.normalizeClass)([
              (0,external_Vue_.unref)(nsDate).b("editor"),
              (0,external_Vue_.unref)(nsDate).bm("editor", _ctx.type),
              (0,external_Vue_.unref)(nsInput).e("wrapper"),
              (0,external_Vue_.unref)(nsDate).is("disabled", (0,external_Vue_.unref)(pickerDisabled)),
              (0,external_Vue_.unref)(nsDate).is("active", pickerVisible.value),
              (0,external_Vue_.unref)(nsRange).b("editor"),
              (0,external_Vue_.unref)(pickerSize) ? (0,external_Vue_.unref)(nsRange).bm("editor", (0,external_Vue_.unref)(pickerSize)) : "",
              _ctx.$attrs.class
            ]),
            style: (0,external_Vue_.normalizeStyle)(_ctx.$attrs.style),
            onClick: handleFocusInput,
            onMousedown: onMouseDownInput,
            onMouseenter: onMouseEnter,
            onMouseleave: onMouseLeave,
            onTouchstart: onTouchStartInput,
            onKeydown: handleKeydownInput
          }, [
            (0,external_Vue_.unref)(triggerIcon) ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.unref)(components_icon/* ElIcon */.gn), {
              key: 0,
              class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(nsInput).e("icon"), (0,external_Vue_.unref)(nsRange).e("icon")]),
              onMousedown: onMouseDownInput,
              onTouchstart: onTouchStartInput
            }, {
              default: (0,external_Vue_.withCtx)(() => [
                ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.resolveDynamicComponent)((0,external_Vue_.unref)(triggerIcon))))
              ]),
              _: 1
            }, 8, ["class"])) : (0,external_Vue_.createCommentVNode)("v-if", true),
            (0,external_Vue_.createElementVNode)("input", {
              id: _ctx.id && _ctx.id[0],
              autocomplete: "off",
              name: _ctx.name && _ctx.name[0],
              placeholder: _ctx.startPlaceholder,
              value: (0,external_Vue_.unref)(displayValue) && (0,external_Vue_.unref)(displayValue)[0],
              disabled: (0,external_Vue_.unref)(pickerDisabled),
              readonly: !_ctx.editable || _ctx.readonly,
              class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(nsRange).b("input")),
              onInput: handleStartInput,
              onChange: handleStartChange,
              onFocus: handleFocusInput,
              onBlur: handleBlurInput
            }, null, 42, picker_hoisted_1),
            (0,external_Vue_.renderSlot)(_ctx.$slots, "range-separator", {}, () => [
              (0,external_Vue_.createElementVNode)("span", {
                class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(nsRange).b("separator"))
              }, (0,external_Vue_.toDisplayString)(_ctx.rangeSeparator), 3)
            ]),
            (0,external_Vue_.createElementVNode)("input", {
              id: _ctx.id && _ctx.id[1],
              autocomplete: "off",
              name: _ctx.name && _ctx.name[1],
              placeholder: _ctx.endPlaceholder,
              value: (0,external_Vue_.unref)(displayValue) && (0,external_Vue_.unref)(displayValue)[1],
              disabled: (0,external_Vue_.unref)(pickerDisabled),
              readonly: !_ctx.editable || _ctx.readonly,
              class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(nsRange).b("input")),
              onFocus: handleFocusInput,
              onBlur: handleBlurInput,
              onInput: handleEndInput,
              onChange: handleEndChange
            }, null, 42, picker_hoisted_2),
            _ctx.clearIcon ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.unref)(components_icon/* ElIcon */.gn), {
              key: 1,
              class: (0,external_Vue_.normalizeClass)([
                (0,external_Vue_.unref)(nsInput).e("icon"),
                (0,external_Vue_.unref)(nsRange).e("close-icon"),
                {
                  [(0,external_Vue_.unref)(nsRange).e("close-icon--hidden")]: !showClose.value
                }
              ]),
              onClick: onClearIconClick
            }, {
              default: (0,external_Vue_.withCtx)(() => [
                ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.resolveDynamicComponent)(_ctx.clearIcon)))
              ]),
              _: 1
            }, 8, ["class"])) : (0,external_Vue_.createCommentVNode)("v-if", true)
          ], 38))
        ]),
        content: (0,external_Vue_.withCtx)(() => [
          (0,external_Vue_.renderSlot)(_ctx.$slots, "default", {
            visible: pickerVisible.value,
            actualVisible: pickerActualVisible.value,
            parsedValue: (0,external_Vue_.unref)(parsedValue),
            format: _ctx.format,
            unlinkPanels: _ctx.unlinkPanels,
            type: _ctx.type,
            defaultValue: _ctx.defaultValue,
            onPick,
            onSelectRange: setSelectionRange,
            onSetPickerOption,
            onCalendarChange,
            onPanelChange,
            onKeydown: onKeydownPopperContent,
            onMousedown: _cache[1] || (_cache[1] = (0,external_Vue_.withModifiers)(() => {
            }, ["stop"]))
          })
        ]),
        _: 3
      }, 16, ["visible", "transition", "popper-class", "popper-options"]);
    };
  }
});
var CommonPicker = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(picker_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/time-picker/src/common/picker.vue"]]);


//# sourceMappingURL=picker.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/date-picker/src/date-picker.mjs





















dayjs_min.extend(localeData);
dayjs_min.extend(advancedFormat);
dayjs_min.extend(customParseFormat);
dayjs_min.extend(weekOfYear);
dayjs_min.extend(weekYear);
dayjs_min.extend(dayOfYear);
dayjs_min.extend(isSameOrAfter);
dayjs_min.extend(isSameOrBefore);
var DatePicker = (0,external_Vue_.defineComponent)({
  name: "ElDatePicker",
  install: null,
  props: {
    ...timePickerDefaultProps,
    ...datePickerProps
  },
  emits: ["update:modelValue"],
  setup(props, {
    expose,
    emit,
    slots
  }) {
    const ns = (0,use_namespace/* useNamespace */.s)("picker-panel");
    (0,external_Vue_.provide)("ElPopperOptions", (0,external_Vue_.reactive)((0,external_Vue_.toRef)(props, "popperOptions")));
    (0,external_Vue_.provide)(ROOT_PICKER_INJECTION_KEY, {
      slots,
      pickerNs: ns
    });
    const commonPicker = (0,external_Vue_.ref)();
    const refProps = {
      focus: (focusStartInput = true) => {
        var _a;
        (_a = commonPicker.value) == null ? void 0 : _a.focus(focusStartInput);
      }
    };
    expose(refProps);
    const onModelValueUpdated = (val) => {
      emit("update:modelValue", val);
    };
    return () => {
      var _a;
      const format = (_a = props.format) != null ? _a : DEFAULT_FORMATS_DATEPICKER[props.type] || DEFAULT_FORMATS_DATE;
      const Component = getPanel(props.type);
      return (0,external_Vue_.createVNode)(CommonPicker, (0,external_Vue_.mergeProps)(props, {
        "format": format,
        "type": props.type,
        "ref": commonPicker,
        "onUpdate:modelValue": onModelValueUpdated
      }), {
        default: (scopedProps) => (0,external_Vue_.createVNode)(Component, scopedProps, null),
        "range-separator": slots["range-separator"]
      });
    };
  }
});


//# sourceMappingURL=date-picker.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/date-picker/index.mjs


const _DatePicker = DatePicker;
_DatePicker.install = (app) => {
  app.component(_DatePicker.name, _DatePicker);
};
const ElDatePicker = _DatePicker;


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/descriptions/src/token.mjs
const elDescriptionsKey = "elDescriptions";


//# sourceMappingURL=token.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/utils/vue/vnode.mjs





const SCOPE = "utils/vue/vnode";
var PatchFlags = /* @__PURE__ */ ((PatchFlags2) => {
  PatchFlags2[PatchFlags2["TEXT"] = 1] = "TEXT";
  PatchFlags2[PatchFlags2["CLASS"] = 2] = "CLASS";
  PatchFlags2[PatchFlags2["STYLE"] = 4] = "STYLE";
  PatchFlags2[PatchFlags2["PROPS"] = 8] = "PROPS";
  PatchFlags2[PatchFlags2["FULL_PROPS"] = 16] = "FULL_PROPS";
  PatchFlags2[PatchFlags2["HYDRATE_EVENTS"] = 32] = "HYDRATE_EVENTS";
  PatchFlags2[PatchFlags2["STABLE_FRAGMENT"] = 64] = "STABLE_FRAGMENT";
  PatchFlags2[PatchFlags2["KEYED_FRAGMENT"] = 128] = "KEYED_FRAGMENT";
  PatchFlags2[PatchFlags2["UNKEYED_FRAGMENT"] = 256] = "UNKEYED_FRAGMENT";
  PatchFlags2[PatchFlags2["NEED_PATCH"] = 512] = "NEED_PATCH";
  PatchFlags2[PatchFlags2["DYNAMIC_SLOTS"] = 1024] = "DYNAMIC_SLOTS";
  PatchFlags2[PatchFlags2["HOISTED"] = -1] = "HOISTED";
  PatchFlags2[PatchFlags2["BAIL"] = -2] = "BAIL";
  return PatchFlags2;
})(PatchFlags || {});
function isFragment(node) {
  return (0,external_Vue_.isVNode)(node) && node.type === external_Vue_.Fragment;
}
function isText(node) {
  return isVNode(node) && node.type === Text;
}
function isComment(node) {
  return (0,external_Vue_.isVNode)(node) && node.type === external_Vue_.Comment;
}
const TEMPLATE = "template";
function isTemplate(node) {
  return isVNode(node) && node.type === TEMPLATE;
}
function isValidElementNode(node) {
  return (0,external_Vue_.isVNode)(node) && !isFragment(node) && !isComment(node);
}
function getChildren(node, depth) {
  if (isComment(node))
    return;
  if (isFragment(node) || isTemplate(node)) {
    return depth > 0 ? getFirstValidNode(node.children, depth - 1) : void 0;
  }
  return node;
}
const getFirstValidNode = (nodes, maxDepth = 3) => {
  if (Array.isArray(nodes)) {
    return getChildren(nodes[0], maxDepth);
  } else {
    return getChildren(nodes, maxDepth);
  }
};
function renderIf(condition, ...args) {
  return condition ? renderBlock(...args) : createCommentVNode("v-if", true);
}
function renderBlock(...args) {
  return openBlock(), createBlock(...args);
}
const getNormalizedProps = (node) => {
  if (!(0,external_Vue_.isVNode)(node)) {
    (0,error/* debugWarn */.N)(SCOPE, "[getNormalizedProps] must be a VNode");
    return {};
  }
  const raw = node.props || {};
  const type = ((0,external_Vue_.isVNode)(node.type) ? node.type.props : void 0) || {};
  const props = {};
  Object.keys(type).forEach((key) => {
    if ((0,shared_esm_bundler/* hasOwn */.RI)(type[key], "default")) {
      props[key] = type[key].default;
    }
  });
  Object.keys(raw).forEach((key) => {
    props[(0,shared_esm_bundler/* camelize */._A)(key)] = raw[key];
  });
  return props;
};
const ensureOnlyChild = (children) => {
  if (!(0,shared_esm_bundler/* isArray */.kJ)(children) || children.length > 1) {
    throw new Error("expect to receive a single Vue element child");
  }
  return children[0];
};


//# sourceMappingURL=vnode.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/descriptions/src/descriptions-cell.mjs








var DescriptionsCell = (0,external_Vue_.defineComponent)({
  name: "ElDescriptionsCell",
  props: {
    cell: {
      type: Object
    },
    tag: {
      type: String
    },
    type: {
      type: String
    }
  },
  setup() {
    const descriptions = (0,external_Vue_.inject)(elDescriptionsKey, {});
    return {
      descriptions
    };
  },
  render() {
    var _a, _b, _c, _d, _e, _f;
    const item = getNormalizedProps(this.cell);
    const { border, direction } = this.descriptions;
    const isVertical = direction === "vertical";
    const label = ((_c = (_b = (_a = this.cell) == null ? void 0 : _a.children) == null ? void 0 : _b.label) == null ? void 0 : _c.call(_b)) || item.label;
    const content = (_f = (_e = (_d = this.cell) == null ? void 0 : _d.children) == null ? void 0 : _e.default) == null ? void 0 : _f.call(_e);
    const span = item.span;
    const align = item.align ? `is-${item.align}` : "";
    const labelAlign = item.labelAlign ? `is-${item.labelAlign}` : align;
    const className = item.className;
    const labelClassName = item.labelClassName;
    const style = {
      width: (0,dom_style/* addUnit */.Nn)(item.width),
      minWidth: (0,dom_style/* addUnit */.Nn)(item.minWidth)
    };
    const ns = (0,use_namespace/* useNamespace */.s)("descriptions");
    switch (this.type) {
      case "label":
        return (0,external_Vue_.h)(this.tag, {
          style,
          class: [
            ns.e("cell"),
            ns.e("label"),
            ns.is("bordered-label", border),
            ns.is("vertical-label", isVertical),
            labelAlign,
            labelClassName
          ],
          colSpan: isVertical ? span : 1
        }, label);
      case "content":
        return (0,external_Vue_.h)(this.tag, {
          style,
          class: [
            ns.e("cell"),
            ns.e("content"),
            ns.is("bordered-content", border),
            ns.is("vertical-content", isVertical),
            align,
            className
          ],
          colSpan: isVertical ? span : span * 2 - 1
        }, content);
      default:
        return (0,external_Vue_.h)("td", {
          style,
          class: [ns.e("cell"), align],
          colSpan: span
        }, [
          (0,external_Vue_.h)("span", {
            class: [ns.e("label"), labelClassName]
          }, label),
          (0,external_Vue_.h)("span", {
            class: [ns.e("content"), className]
          }, content)
        ]);
    }
  }
});


//# sourceMappingURL=descriptions-cell.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/descriptions/src/descriptions-row.mjs





const descriptions_row_sfc_main = (0,external_Vue_.defineComponent)({
  name: "ElDescriptionsRow",
  components: {
    [DescriptionsCell.name]: DescriptionsCell
  },
  props: {
    row: {
      type: Array
    }
  },
  setup() {
    const descriptions = (0,external_Vue_.inject)(elDescriptionsKey, {});
    return {
      descriptions
    };
  }
});
const descriptions_row_hoisted_1 = { key: 1 };
function descriptions_row_sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_el_descriptions_cell = (0,external_Vue_.resolveComponent)("el-descriptions-cell");
  return _ctx.descriptions.direction === "vertical" ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, { key: 0 }, [
    (0,external_Vue_.createElementVNode)("tr", null, [
      ((0,external_Vue_.openBlock)(true), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, null, (0,external_Vue_.renderList)(_ctx.row, (cell, index) => {
        return (0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(_component_el_descriptions_cell, {
          key: `tr1-${index}`,
          cell,
          tag: "th",
          type: "label"
        }, null, 8, ["cell"]);
      }), 128))
    ]),
    (0,external_Vue_.createElementVNode)("tr", null, [
      ((0,external_Vue_.openBlock)(true), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, null, (0,external_Vue_.renderList)(_ctx.row, (cell, index) => {
        return (0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(_component_el_descriptions_cell, {
          key: `tr2-${index}`,
          cell,
          tag: "td",
          type: "content"
        }, null, 8, ["cell"]);
      }), 128))
    ])
  ], 64)) : ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("tr", descriptions_row_hoisted_1, [
    ((0,external_Vue_.openBlock)(true), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, null, (0,external_Vue_.renderList)(_ctx.row, (cell, index) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, {
        key: `tr3-${index}`
      }, [
        _ctx.descriptions.border ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, { key: 0 }, [
          (0,external_Vue_.createVNode)(_component_el_descriptions_cell, {
            cell,
            tag: "td",
            type: "label"
          }, null, 8, ["cell"]),
          (0,external_Vue_.createVNode)(_component_el_descriptions_cell, {
            cell,
            tag: "td",
            type: "content"
          }, null, 8, ["cell"])
        ], 64)) : ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(_component_el_descriptions_cell, {
          key: 1,
          cell,
          tag: "td",
          type: "both"
        }, null, 8, ["cell"]))
      ], 64);
    }), 128))
  ]));
}
var DescriptionsRow = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(descriptions_row_sfc_main, [["render", descriptions_row_sfc_render], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/descriptions/src/descriptions-row.vue"]]);


//# sourceMappingURL=descriptions-row.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/descriptions/src/index.mjs










const descriptions_src_sfc_main = (0,external_Vue_.defineComponent)({
  name: "ElDescriptions",
  components: {
    [DescriptionsRow.name]: DescriptionsRow
  },
  props: {
    border: {
      type: Boolean,
      default: false
    },
    column: {
      type: Number,
      default: 3
    },
    direction: {
      type: String,
      default: "horizontal"
    },
    size: {
      type: String,
      validator: isValidComponentSize
    },
    title: {
      type: String,
      default: ""
    },
    extra: {
      type: String,
      default: ""
    }
  },
  setup(props, { slots }) {
    (0,external_Vue_.provide)(elDescriptionsKey, props);
    const descriptionsSize = (0,use_common_props/* useSize */.tH)();
    const ns = (0,use_namespace/* useNamespace */.s)("descriptions");
    const descriptionKls = (0,external_Vue_.computed)(() => [
      ns.b(),
      ns.m(descriptionsSize.value)
    ]);
    const flattedChildren = (children) => {
      const temp = Array.isArray(children) ? children : [children];
      const res = [];
      temp.forEach((child) => {
        if (Array.isArray(child.children)) {
          res.push(...flattedChildren(child.children));
        } else {
          res.push(child);
        }
      });
      return res;
    };
    const filledNode = (node, span, count, isLast = false) => {
      if (!node.props) {
        node.props = {};
      }
      if (span > count) {
        node.props.span = count;
      }
      if (isLast) {
        node.props.span = span;
      }
      return node;
    };
    const getRows = () => {
      var _a;
      const children = flattedChildren((_a = slots.default) == null ? void 0 : _a.call(slots)).filter((node) => {
        var _a2;
        return ((_a2 = node == null ? void 0 : node.type) == null ? void 0 : _a2.name) === "ElDescriptionsItem";
      });
      const rows = [];
      let temp = [];
      let count = props.column;
      let totalSpan = 0;
      children.forEach((node, index) => {
        var _a2;
        const span = ((_a2 = node.props) == null ? void 0 : _a2.span) || 1;
        if (index < children.length - 1) {
          totalSpan += span > count ? count : span;
        }
        if (index === children.length - 1) {
          const lastSpan = props.column - totalSpan % props.column;
          temp.push(filledNode(node, lastSpan, count, true));
          rows.push(temp);
          return;
        }
        if (span < count) {
          count -= span;
          temp.push(node);
        } else {
          temp.push(filledNode(node, span, count));
          rows.push(temp);
          count = props.column;
          temp = [];
        }
      });
      return rows;
    };
    return {
      descriptionKls,
      getRows,
      ns
    };
  }
});
function descriptions_src_sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_el_descriptions_row = (0,external_Vue_.resolveComponent)("el-descriptions-row");
  return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
    class: (0,external_Vue_.normalizeClass)(_ctx.descriptionKls)
  }, [
    _ctx.title || _ctx.extra || _ctx.$slots.title || _ctx.$slots.extra ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
      key: 0,
      class: (0,external_Vue_.normalizeClass)(_ctx.ns.e("header"))
    }, [
      (0,external_Vue_.createElementVNode)("div", {
        class: (0,external_Vue_.normalizeClass)(_ctx.ns.e("title"))
      }, [
        (0,external_Vue_.renderSlot)(_ctx.$slots, "title", {}, () => [
          (0,external_Vue_.createTextVNode)((0,external_Vue_.toDisplayString)(_ctx.title), 1)
        ])
      ], 2),
      (0,external_Vue_.createElementVNode)("div", {
        class: (0,external_Vue_.normalizeClass)(_ctx.ns.e("extra"))
      }, [
        (0,external_Vue_.renderSlot)(_ctx.$slots, "extra", {}, () => [
          (0,external_Vue_.createTextVNode)((0,external_Vue_.toDisplayString)(_ctx.extra), 1)
        ])
      ], 2)
    ], 2)) : (0,external_Vue_.createCommentVNode)("v-if", true),
    (0,external_Vue_.createElementVNode)("div", {
      class: (0,external_Vue_.normalizeClass)(_ctx.ns.e("body"))
    }, [
      (0,external_Vue_.createElementVNode)("table", {
        class: (0,external_Vue_.normalizeClass)([_ctx.ns.e("table"), _ctx.ns.is("bordered", _ctx.border)])
      }, [
        (0,external_Vue_.createElementVNode)("tbody", null, [
          ((0,external_Vue_.openBlock)(true), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, null, (0,external_Vue_.renderList)(_ctx.getRows(), (row, index) => {
            return (0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(_component_el_descriptions_row, {
              key: index,
              row
            }, null, 8, ["row"]);
          }), 128))
        ])
      ], 2)
    ], 2)
  ], 2);
}
var Descriptions = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(descriptions_src_sfc_main, [["render", descriptions_src_sfc_render], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/descriptions/src/index.vue"]]);


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/descriptions/src/description-item.mjs


var DescriptionsItem = (0,external_Vue_.defineComponent)({
  name: "ElDescriptionsItem",
  props: {
    label: {
      type: String,
      default: ""
    },
    span: {
      type: Number,
      default: 1
    },
    width: {
      type: [String, Number],
      default: ""
    },
    minWidth: {
      type: [String, Number],
      default: ""
    },
    align: {
      type: String,
      default: "left"
    },
    labelAlign: {
      type: String,
      default: ""
    },
    className: {
      type: String,
      default: ""
    },
    labelClassName: {
      type: String,
      default: ""
    }
  }
});


//# sourceMappingURL=description-item.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/descriptions/index.mjs





const ElDescriptions = (0,install/* withInstall */.nz)(Descriptions, {
  DescriptionsItem: DescriptionsItem
});
const ElDescriptionsItem = (0,install/* withNoopInstall */.dp)(DescriptionsItem);


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/hooks/use-same-target/index.mjs


const useSameTarget = (handleClick) => {
  if (!handleClick) {
    return { onClick: shared_esm_bundler/* NOOP */.dG, onMousedown: shared_esm_bundler/* NOOP */.dG, onMouseup: shared_esm_bundler/* NOOP */.dG };
  }
  let mousedownTarget = false;
  let mouseupTarget = false;
  const onClick = (e) => {
    if (mousedownTarget && mouseupTarget) {
      handleClick(e);
    }
    mousedownTarget = mouseupTarget = false;
  };
  const onMousedown = (e) => {
    mousedownTarget = e.target === e.currentTarget;
  };
  const onMouseup = (e) => {
    mouseupTarget = e.target === e.currentTarget;
  };
  return { onClick, onMousedown, onMouseup };
};


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/overlay/src/overlay.mjs








const overlayProps = (0,runtime/* buildProps */.o8)({
  mask: {
    type: Boolean,
    default: true
  },
  customMaskEvent: {
    type: Boolean,
    default: false
  },
  overlayClass: {
    type: (0,runtime/* definePropType */.Cq)([
      String,
      Array,
      Object
    ])
  },
  zIndex: {
    type: (0,runtime/* definePropType */.Cq)([String, Number])
  }
});
const overlayEmits = {
  click: (evt) => evt instanceof MouseEvent
};
var Overlay = (0,external_Vue_.defineComponent)({
  name: "ElOverlay",
  props: overlayProps,
  emits: overlayEmits,
  setup(props, { slots, emit }) {
    const ns = (0,use_namespace/* useNamespace */.s)("overlay");
    const onMaskClick = (e) => {
      emit("click", e);
    };
    const { onClick, onMousedown, onMouseup } = useSameTarget(props.customMaskEvent ? void 0 : onMaskClick);
    return () => {
      return props.mask ? (0,external_Vue_.createVNode)("div", {
        class: [ns.b(), props.overlayClass],
        style: {
          zIndex: props.zIndex
        },
        onClick,
        onMousedown,
        onMouseup
      }, [(0,external_Vue_.renderSlot)(slots, "default")], PatchFlags.STYLE | PatchFlags.CLASS | PatchFlags.PROPS, ["onClick", "onMouseup", "onMousedown"]) : (0,external_Vue_.h)("div", {
        class: props.overlayClass,
        style: {
          zIndex: props.zIndex,
          position: "fixed",
          top: "0px",
          right: "0px",
          bottom: "0px",
          left: "0px"
        }
      }, [(0,external_Vue_.renderSlot)(slots, "default")]);
    };
  }
});


//# sourceMappingURL=overlay.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/overlay/index.mjs



const ElOverlay = Overlay;


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/dialog/src/dialog-content.mjs




const dialogContentProps = (0,runtime/* buildProps */.o8)({
  center: {
    type: Boolean,
    default: false
  },
  closeIcon: {
    type: icon/* iconPropType */.AA,
    default: ""
  },
  customClass: {
    type: String,
    default: ""
  },
  draggable: {
    type: Boolean,
    default: false
  },
  fullscreen: {
    type: Boolean,
    default: false
  },
  showClose: {
    type: Boolean,
    default: true
  },
  title: {
    type: String,
    default: ""
  }
});
const dialogContentEmits = {
  close: () => true
};


//# sourceMappingURL=dialog-content.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/tokens/dialog.mjs
const dialogInjectionKey = Symbol("dialogInjectionKey");


//# sourceMappingURL=dialog.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/utils/vue/refs.mjs



const composeRefs = (...refs) => {
  return (el) => {
    refs.forEach((ref) => {
      if ((0,shared_esm_bundler/* isFunction */.mf)(ref)) {
        ref(el);
      } else {
        ref.value = el;
      }
    });
  };
};


//# sourceMappingURL=refs.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/hooks/use-draggable/index.mjs




const useDraggable = (targetRef, dragRef, draggable) => {
  let transform = {
    offsetX: 0,
    offsetY: 0
  };
  const onMousedown = (e) => {
    const downX = e.clientX;
    const downY = e.clientY;
    const { offsetX, offsetY } = transform;
    const targetRect = targetRef.value.getBoundingClientRect();
    const targetLeft = targetRect.left;
    const targetTop = targetRect.top;
    const targetWidth = targetRect.width;
    const targetHeight = targetRect.height;
    const clientWidth = document.documentElement.clientWidth;
    const clientHeight = document.documentElement.clientHeight;
    const minLeft = -targetLeft + offsetX;
    const minTop = -targetTop + offsetY;
    const maxLeft = clientWidth - targetLeft - targetWidth + offsetX;
    const maxTop = clientHeight - targetTop - targetHeight + offsetY;
    const onMousemove = (e2) => {
      const moveX = Math.min(Math.max(offsetX + e2.clientX - downX, minLeft), maxLeft);
      const moveY = Math.min(Math.max(offsetY + e2.clientY - downY, minTop), maxTop);
      transform = {
        offsetX: moveX,
        offsetY: moveY
      };
      targetRef.value.style.transform = `translate(${(0,dom_style/* addUnit */.Nn)(moveX)}, ${(0,dom_style/* addUnit */.Nn)(moveY)})`;
    };
    const onMouseup = () => {
      document.removeEventListener("mousemove", onMousemove);
      document.removeEventListener("mouseup", onMouseup);
    };
    document.addEventListener("mousemove", onMousemove);
    document.addEventListener("mouseup", onMouseup);
  };
  const onDraggable = () => {
    if (dragRef.value && targetRef.value) {
      dragRef.value.addEventListener("mousedown", onMousedown);
    }
  };
  const offDraggable = () => {
    if (dragRef.value && targetRef.value) {
      dragRef.value.removeEventListener("mousedown", onMousedown);
    }
  };
  (0,external_Vue_.onMounted)(() => {
    (0,external_Vue_.watchEffect)(() => {
      if (draggable.value) {
        onDraggable();
      } else {
        offDraggable();
      }
    });
  });
  (0,external_Vue_.onBeforeUnmount)(() => {
    offDraggable();
  });
};


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/dialog/src/dialog-content2.mjs















const dialog_content2_hoisted_1 = ["aria-label"];
const dialog_content2_hoisted_2 = ["id"];
const dialog_content2_default_ = { name: "ElDialogContent" };
const dialog_content2_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...dialog_content2_default_,
  props: dialogContentProps,
  emits: dialogContentEmits,
  setup(__props) {
    const props = __props;
    const { t } = useLocale();
    const { Close } = icon/* CloseComponents */.NK;
    const { dialogRef, headerRef, bodyId, ns, style } = (0,external_Vue_.inject)(dialogInjectionKey);
    const { focusTrapRef } = (0,external_Vue_.inject)(FOCUS_TRAP_INJECTION_KEY);
    const composedDialogRef = composeRefs(focusTrapRef, dialogRef);
    const draggable = (0,external_Vue_.computed)(() => props.draggable);
    useDraggable(dialogRef, headerRef, draggable);
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
        ref: (0,external_Vue_.unref)(composedDialogRef),
        class: (0,external_Vue_.normalizeClass)([
          (0,external_Vue_.unref)(ns).b(),
          (0,external_Vue_.unref)(ns).is("fullscreen", _ctx.fullscreen),
          (0,external_Vue_.unref)(ns).is("draggable", (0,external_Vue_.unref)(draggable)),
          { [(0,external_Vue_.unref)(ns).m("center")]: _ctx.center },
          _ctx.customClass
        ]),
        style: (0,external_Vue_.normalizeStyle)((0,external_Vue_.unref)(style)),
        tabindex: "-1",
        onClick: _cache[1] || (_cache[1] = (0,external_Vue_.withModifiers)(() => {
        }, ["stop"]))
      }, [
        (0,external_Vue_.createElementVNode)("header", {
          ref_key: "headerRef",
          ref: headerRef,
          class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("header"))
        }, [
          (0,external_Vue_.renderSlot)(_ctx.$slots, "header", {}, () => [
            (0,external_Vue_.createElementVNode)("span", {
              role: "heading",
              class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("title"))
            }, (0,external_Vue_.toDisplayString)(_ctx.title), 3)
          ]),
          _ctx.showClose ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("button", {
            key: 0,
            "aria-label": (0,external_Vue_.unref)(t)("el.dialog.close"),
            class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("headerbtn")),
            type: "button",
            onClick: _cache[0] || (_cache[0] = ($event) => _ctx.$emit("close"))
          }, [
            (0,external_Vue_.createVNode)((0,external_Vue_.unref)(components_icon/* ElIcon */.gn), {
              class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("close"))
            }, {
              default: (0,external_Vue_.withCtx)(() => [
                ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.resolveDynamicComponent)(_ctx.closeIcon || (0,external_Vue_.unref)(Close))))
              ]),
              _: 1
            }, 8, ["class"])
          ], 10, dialog_content2_hoisted_1)) : (0,external_Vue_.createCommentVNode)("v-if", true)
        ], 2),
        (0,external_Vue_.createElementVNode)("div", {
          id: (0,external_Vue_.unref)(bodyId),
          class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("body"))
        }, [
          (0,external_Vue_.renderSlot)(_ctx.$slots, "default")
        ], 10, dialog_content2_hoisted_2),
        _ctx.$slots.footer ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("footer", {
          key: 0,
          class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("footer"))
        }, [
          (0,external_Vue_.renderSlot)(_ctx.$slots, "footer")
        ], 2)) : (0,external_Vue_.createCommentVNode)("v-if", true)
      ], 6);
    };
  }
});
var ElDialogContent = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(dialog_content2_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/dialog/src/dialog-content.vue"]]);


//# sourceMappingURL=dialog-content2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/dialog/src/dialog.mjs







const dialogProps = (0,runtime/* buildProps */.o8)({
  ...dialogContentProps,
  appendToBody: {
    type: Boolean,
    default: false
  },
  beforeClose: {
    type: (0,runtime/* definePropType */.Cq)(Function)
  },
  destroyOnClose: {
    type: Boolean,
    default: false
  },
  closeOnClickModal: {
    type: Boolean,
    default: true
  },
  closeOnPressEscape: {
    type: Boolean,
    default: true
  },
  lockScroll: {
    type: Boolean,
    default: true
  },
  modal: {
    type: Boolean,
    default: true
  },
  openDelay: {
    type: Number,
    default: 0
  },
  closeDelay: {
    type: Number,
    default: 0
  },
  top: {
    type: String
  },
  modelValue: {
    type: Boolean,
    required: true
  },
  modalClass: String,
  width: {
    type: [String, Number]
  },
  zIndex: {
    type: Number
  },
  trapFocus: {
    type: Boolean,
    default: false
  }
});
const dialogEmits = {
  open: () => true,
  opened: () => true,
  close: () => true,
  closed: () => true,
  [constants_event/* UPDATE_MODEL_EVENT */.f_]: (value) => (0,shared/* isBoolean */.jn)(value),
  openAutoFocus: () => true,
  closeAutoFocus: () => true
};


//# sourceMappingURL=dialog.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/hooks/use-lockscreen/index.mjs







const useLockscreen = (trigger) => {
  if (!(0,external_Vue_.isRef)(trigger)) {
    (0,error/* throwError */._)("[useLockscreen]", "You need to pass a ref param to this function");
  }
  if (!shared/* isClient */.C5 || (0,dom_style/* hasClass */.pv)(document.body, "el-popup-parent--hidden")) {
    return;
  }
  let scrollBarWidth = 0;
  let withoutHiddenClass = false;
  let bodyPaddingRight = "0";
  let computedBodyPaddingRight = 0;
  const cleanup = () => {
    (0,dom_style/* removeClass */.IV)(document.body, "el-popup-parent--hidden");
    if (withoutHiddenClass) {
      document.body.style.paddingRight = bodyPaddingRight;
    }
  };
  (0,external_Vue_.watch)(trigger, (val) => {
    if (!val) {
      cleanup();
      return;
    }
    withoutHiddenClass = !(0,dom_style/* hasClass */.pv)(document.body, "el-popup-parent--hidden");
    if (withoutHiddenClass) {
      bodyPaddingRight = document.body.style.paddingRight;
      computedBodyPaddingRight = Number.parseInt((0,dom_style/* getStyle */.C2)(document.body, "paddingRight"), 10);
    }
    scrollBarWidth = getScrollBarWidth();
    const bodyHasOverflow = document.documentElement.clientHeight < document.body.scrollHeight;
    const bodyOverflowY = (0,dom_style/* getStyle */.C2)(document.body, "overflowY");
    if (scrollBarWidth > 0 && (bodyHasOverflow || bodyOverflowY === "scroll") && withoutHiddenClass) {
      document.body.style.paddingRight = `${computedBodyPaddingRight + scrollBarWidth}px`;
    }
    (0,dom_style/* addClass */.cn)(document.body, "el-popup-parent--hidden");
  });
  (0,external_Vue_.onScopeDispose)(() => cleanup());
};


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/dialog/src/use-dialog.mjs













const useDialog = (props, targetRef) => {
  const instance = (0,external_Vue_.getCurrentInstance)();
  const emit = instance.emit;
  const { nextZIndex } = useZIndex();
  let lastPosition = "";
  const titleId = (0,use_id/* useId */.M)();
  const bodyId = (0,use_id/* useId */.M)();
  const visible = (0,external_Vue_.ref)(false);
  const closed = (0,external_Vue_.ref)(false);
  const rendered = (0,external_Vue_.ref)(false);
  const zIndex = (0,external_Vue_.ref)(props.zIndex || nextZIndex());
  let openTimer = void 0;
  let closeTimer = void 0;
  const namespace = (0,use_global_config/* useGlobalConfig */.W)("namespace", use_namespace/* defaultNamespace */.t);
  const style = (0,external_Vue_.computed)(() => {
    const style2 = {};
    const varPrefix = `--${namespace.value}-dialog`;
    if (!props.fullscreen) {
      if (props.top) {
        style2[`${varPrefix}-margin-top`] = props.top;
      }
      if (props.width) {
        style2[`${varPrefix}-width`] = (0,dom_style/* addUnit */.Nn)(props.width);
      }
    }
    return style2;
  });
  function afterEnter() {
    emit("opened");
  }
  function afterLeave() {
    emit("closed");
    emit(constants_event/* UPDATE_MODEL_EVENT */.f_, false);
    if (props.destroyOnClose) {
      rendered.value = false;
    }
  }
  function beforeLeave() {
    emit("close");
  }
  function open() {
    closeTimer == null ? void 0 : closeTimer();
    openTimer == null ? void 0 : openTimer();
    if (props.openDelay && props.openDelay > 0) {
      ;
      ({ stop: openTimer } = (0,shared/* useTimeoutFn */.eM)(() => doOpen(), props.openDelay));
    } else {
      doOpen();
    }
  }
  function close() {
    openTimer == null ? void 0 : openTimer();
    closeTimer == null ? void 0 : closeTimer();
    if (props.closeDelay && props.closeDelay > 0) {
      ;
      ({ stop: closeTimer } = (0,shared/* useTimeoutFn */.eM)(() => doClose(), props.closeDelay));
    } else {
      doClose();
    }
  }
  function handleClose() {
    function hide(shouldCancel) {
      if (shouldCancel)
        return;
      closed.value = true;
      visible.value = false;
    }
    if (props.beforeClose) {
      props.beforeClose(hide);
    } else {
      close();
    }
  }
  function onModalClick() {
    if (props.closeOnClickModal) {
      handleClose();
    }
  }
  function doOpen() {
    if (!shared/* isClient */.C5)
      return;
    visible.value = true;
  }
  function doClose() {
    visible.value = false;
  }
  function onOpenAutoFocus() {
    emit("openAutoFocus");
  }
  function onCloseAutoFocus() {
    emit("closeAutoFocus");
  }
  if (props.lockScroll) {
    useLockscreen(visible);
  }
  function onCloseRequested() {
    if (props.closeOnPressEscape) {
      handleClose();
    }
  }
  (0,external_Vue_.watch)(() => props.modelValue, (val) => {
    if (val) {
      closed.value = false;
      open();
      rendered.value = true;
      emit("open");
      zIndex.value = props.zIndex ? zIndex.value++ : nextZIndex();
      (0,external_Vue_.nextTick)(() => {
        if (targetRef.value) {
          targetRef.value.scrollTop = 0;
        }
      });
    } else {
      if (visible.value) {
        close();
      }
    }
  });
  (0,external_Vue_.watch)(() => props.fullscreen, (val) => {
    if (!targetRef.value)
      return;
    if (val) {
      lastPosition = targetRef.value.style.transform;
      targetRef.value.style.transform = "";
    } else {
      targetRef.value.style.transform = lastPosition;
    }
  });
  (0,external_Vue_.onMounted)(() => {
    if (props.modelValue) {
      visible.value = true;
      rendered.value = true;
      open();
    }
  });
  return {
    afterEnter,
    afterLeave,
    beforeLeave,
    handleClose,
    onModalClick,
    close,
    doClose,
    onOpenAutoFocus,
    onCloseAutoFocus,
    onCloseRequested,
    titleId,
    bodyId,
    closed,
    style,
    rendered,
    visible,
    zIndex
  };
};


//# sourceMappingURL=use-dialog.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/dialog/src/dialog2.mjs















const dialog2_hoisted_1 = ["aria-label", "aria-labelledby", "aria-describedby"];
const dialog2_default_ = {
  name: "ElDialog"
};
const dialog2_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...dialog2_default_,
  props: dialogProps,
  emits: dialogEmits,
  setup(__props, { expose }) {
    const props = __props;
    const slots = (0,external_Vue_.useSlots)();
    useDeprecated({
      scope: "el-dialog",
      from: "the title slot",
      replacement: "the header slot",
      version: "3.0.0",
      ref: "https://element-plus.org/en-US/component/dialog.html#slots"
    }, (0,external_Vue_.computed)(() => !!slots.title));
    const ns = (0,use_namespace/* useNamespace */.s)("dialog");
    const dialogRef = (0,external_Vue_.ref)();
    const headerRef = (0,external_Vue_.ref)();
    const dialogContentRef = (0,external_Vue_.ref)();
    const {
      visible,
      titleId,
      bodyId,
      style,
      rendered,
      zIndex,
      afterEnter,
      afterLeave,
      beforeLeave,
      handleClose,
      onModalClick,
      onOpenAutoFocus,
      onCloseAutoFocus,
      onCloseRequested
    } = useDialog(props, dialogRef);
    (0,external_Vue_.provide)(dialogInjectionKey, {
      dialogRef,
      headerRef,
      bodyId,
      ns,
      rendered,
      style
    });
    const overlayEvent = useSameTarget(onModalClick);
    const draggable = (0,external_Vue_.computed)(() => props.draggable && !props.fullscreen);
    expose({
      visible,
      dialogContentRef
    });
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(external_Vue_.Teleport, {
        to: "body",
        disabled: !_ctx.appendToBody
      }, [
        (0,external_Vue_.createVNode)(external_Vue_.Transition, {
          name: "dialog-fade",
          onAfterEnter: (0,external_Vue_.unref)(afterEnter),
          onAfterLeave: (0,external_Vue_.unref)(afterLeave),
          onBeforeLeave: (0,external_Vue_.unref)(beforeLeave),
          persisted: ""
        }, {
          default: (0,external_Vue_.withCtx)(() => [
            (0,external_Vue_.withDirectives)((0,external_Vue_.createVNode)((0,external_Vue_.unref)(ElOverlay), {
              "custom-mask-event": "",
              mask: _ctx.modal,
              "overlay-class": _ctx.modalClass,
              "z-index": (0,external_Vue_.unref)(zIndex)
            }, {
              default: (0,external_Vue_.withCtx)(() => [
                (0,external_Vue_.createElementVNode)("div", {
                  role: "dialog",
                  "aria-modal": "true",
                  "aria-label": _ctx.title || void 0,
                  "aria-labelledby": !_ctx.title ? (0,external_Vue_.unref)(titleId) : void 0,
                  "aria-describedby": (0,external_Vue_.unref)(bodyId),
                  class: (0,external_Vue_.normalizeClass)(`${(0,external_Vue_.unref)(ns).namespace.value}-overlay-dialog`),
                  onClick: _cache[0] || (_cache[0] = (...args) => (0,external_Vue_.unref)(overlayEvent).onClick && (0,external_Vue_.unref)(overlayEvent).onClick(...args)),
                  onMousedown: _cache[1] || (_cache[1] = (...args) => (0,external_Vue_.unref)(overlayEvent).onMousedown && (0,external_Vue_.unref)(overlayEvent).onMousedown(...args)),
                  onMouseup: _cache[2] || (_cache[2] = (...args) => (0,external_Vue_.unref)(overlayEvent).onMouseup && (0,external_Vue_.unref)(overlayEvent).onMouseup(...args))
                }, [
                  (0,external_Vue_.createVNode)((0,external_Vue_.unref)(ElFocusTrap), {
                    loop: "",
                    trapped: (0,external_Vue_.unref)(visible),
                    "focus-start-el": "container",
                    onFocusAfterTrapped: (0,external_Vue_.unref)(onOpenAutoFocus),
                    onFocusAfterReleased: (0,external_Vue_.unref)(onCloseAutoFocus),
                    onReleaseRequested: (0,external_Vue_.unref)(onCloseRequested)
                  }, {
                    default: (0,external_Vue_.withCtx)(() => [
                      (0,external_Vue_.unref)(rendered) ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(ElDialogContent, {
                        key: 0,
                        ref_key: "dialogContentRef",
                        ref: dialogContentRef,
                        "custom-class": _ctx.customClass,
                        center: _ctx.center,
                        "close-icon": _ctx.closeIcon,
                        draggable: (0,external_Vue_.unref)(draggable),
                        fullscreen: _ctx.fullscreen,
                        "show-close": _ctx.showClose,
                        style: (0,external_Vue_.normalizeStyle)((0,external_Vue_.unref)(style)),
                        title: _ctx.title,
                        onClose: (0,external_Vue_.unref)(handleClose)
                      }, (0,external_Vue_.createSlots)({
                        header: (0,external_Vue_.withCtx)(() => [
                          !_ctx.$slots.title ? (0,external_Vue_.renderSlot)(_ctx.$slots, "header", {
                            key: 0,
                            close: (0,external_Vue_.unref)(handleClose),
                            titleId: (0,external_Vue_.unref)(titleId),
                            titleClass: (0,external_Vue_.unref)(ns).e("title")
                          }) : (0,external_Vue_.renderSlot)(_ctx.$slots, "title", { key: 1 })
                        ]),
                        default: (0,external_Vue_.withCtx)(() => [
                          (0,external_Vue_.renderSlot)(_ctx.$slots, "default")
                        ]),
                        _: 2
                      }, [
                        _ctx.$slots.footer ? {
                          name: "footer",
                          fn: (0,external_Vue_.withCtx)(() => [
                            (0,external_Vue_.renderSlot)(_ctx.$slots, "footer")
                          ])
                        } : void 0
                      ]), 1032, ["custom-class", "center", "close-icon", "draggable", "fullscreen", "show-close", "style", "title", "onClose"])) : (0,external_Vue_.createCommentVNode)("v-if", true)
                    ]),
                    _: 3
                  }, 8, ["trapped", "onFocusAfterTrapped", "onFocusAfterReleased", "onReleaseRequested"])
                ], 42, dialog2_hoisted_1)
              ]),
              _: 3
            }, 8, ["mask", "overlay-class", "z-index"]), [
              [external_Vue_.vShow, (0,external_Vue_.unref)(visible)]
            ])
          ]),
          _: 3
        }, 8, ["onAfterEnter", "onAfterLeave", "onBeforeLeave"])
      ], 8, ["disabled"]);
    };
  }
});
var Dialog = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(dialog2_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/dialog/src/dialog.vue"]]);


//# sourceMappingURL=dialog2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/dialog/index.mjs






const ElDialog = (0,install/* withInstall */.nz)(Dialog);


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/divider/src/divider.mjs



const dividerProps = (0,runtime/* buildProps */.o8)({
  direction: {
    type: String,
    values: ["horizontal", "vertical"],
    default: "horizontal"
  },
  contentPosition: {
    type: String,
    values: ["left", "center", "right"],
    default: "center"
  },
  borderStyle: {
    type: (0,runtime/* definePropType */.Cq)(String),
    default: "solid"
  }
});


//# sourceMappingURL=divider.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/divider/src/divider2.mjs






const divider2_default_ = {
  name: "ElDivider"
};
const divider2_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...divider2_default_,
  props: dividerProps,
  setup(__props) {
    const props = __props;
    const ns = (0,use_namespace/* useNamespace */.s)("divider");
    const dividerStyle = (0,external_Vue_.computed)(() => {
      return ns.cssVar({
        "border-style": props.borderStyle
      });
    });
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
        class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(ns).b(), (0,external_Vue_.unref)(ns).m(_ctx.direction)]),
        style: (0,external_Vue_.normalizeStyle)((0,external_Vue_.unref)(dividerStyle)),
        role: "separator"
      }, [
        _ctx.$slots.default && _ctx.direction !== "vertical" ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
          key: 0,
          class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(ns).e("text"), (0,external_Vue_.unref)(ns).is(_ctx.contentPosition)])
        }, [
          (0,external_Vue_.renderSlot)(_ctx.$slots, "default")
        ], 2)) : (0,external_Vue_.createCommentVNode)("v-if", true)
      ], 6);
    };
  }
});
var Divider = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(divider2_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/divider/src/divider.vue"]]);


//# sourceMappingURL=divider2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/divider/index.mjs





const ElDivider = (0,install/* withInstall */.nz)(Divider);


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/drawer/src/drawer.mjs





const drawerProps = (0,runtime/* buildProps */.o8)({
  ...dialogProps,
  direction: {
    type: String,
    default: "rtl",
    values: ["ltr", "rtl", "ttb", "btt"]
  },
  size: {
    type: [String, Number],
    default: "30%"
  },
  withHeader: {
    type: Boolean,
    default: true
  },
  modalFade: {
    type: Boolean,
    default: true
  }
});
const drawerEmits = dialogEmits;


//# sourceMappingURL=drawer.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/drawer/src/drawer2.mjs

















const drawer2_sfc_main = (0,external_Vue_.defineComponent)({
  name: "ElDrawer",
  components: {
    ElOverlay: ElOverlay,
    ElFocusTrap: ElFocusTrap,
    ElIcon: components_icon/* ElIcon */.gn,
    Close: dist/* Close */.x8P
  },
  props: drawerProps,
  emits: drawerEmits,
  setup(props, { slots }) {
    useDeprecated({
      scope: "el-drawer",
      from: "the title slot",
      replacement: "the header slot",
      version: "3.0.0",
      ref: "https://element-plus.org/en-US/component/drawer.html#slots"
    }, (0,external_Vue_.computed)(() => !!slots.title));
    const drawerRef = (0,external_Vue_.ref)();
    const focusStartRef = (0,external_Vue_.ref)();
    const ns = (0,use_namespace/* useNamespace */.s)("drawer");
    const { t } = useLocale();
    const isHorizontal = (0,external_Vue_.computed)(() => props.direction === "rtl" || props.direction === "ltr");
    const drawerSize = (0,external_Vue_.computed)(() => (0,dom_style/* addUnit */.Nn)(props.size));
    return {
      ...useDialog(props, drawerRef),
      drawerRef,
      focusStartRef,
      isHorizontal,
      drawerSize,
      ns,
      t
    };
  }
});
const drawer2_hoisted_1 = ["aria-label", "aria-labelledby", "aria-describedby"];
const drawer2_hoisted_2 = ["id"];
const drawer2_hoisted_3 = ["aria-label"];
const drawer2_hoisted_4 = ["id"];
function drawer2_sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_close = (0,external_Vue_.resolveComponent)("close");
  const _component_el_icon = (0,external_Vue_.resolveComponent)("el-icon");
  const _component_el_focus_trap = (0,external_Vue_.resolveComponent)("el-focus-trap");
  const _component_el_overlay = (0,external_Vue_.resolveComponent)("el-overlay");
  return (0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(external_Vue_.Teleport, {
    to: "body",
    disabled: !_ctx.appendToBody
  }, [
    (0,external_Vue_.createVNode)(external_Vue_.Transition, {
      name: _ctx.ns.b("fade"),
      onAfterEnter: _ctx.afterEnter,
      onAfterLeave: _ctx.afterLeave,
      onBeforeLeave: _ctx.beforeLeave,
      persisted: ""
    }, {
      default: (0,external_Vue_.withCtx)(() => [
        (0,external_Vue_.withDirectives)((0,external_Vue_.createVNode)(_component_el_overlay, {
          mask: _ctx.modal,
          "overlay-class": _ctx.modalClass,
          "z-index": _ctx.zIndex,
          onClick: _ctx.onModalClick
        }, {
          default: (0,external_Vue_.withCtx)(() => [
            (0,external_Vue_.createVNode)(_component_el_focus_trap, {
              loop: "",
              trapped: _ctx.visible,
              "focus-trap-el": _ctx.drawerRef,
              "focus-start-el": _ctx.focusStartRef,
              onReleaseRequested: _ctx.onCloseRequested
            }, {
              default: (0,external_Vue_.withCtx)(() => [
                (0,external_Vue_.createElementVNode)("div", {
                  ref: "drawerRef",
                  "aria-modal": "true",
                  "aria-label": _ctx.title || void 0,
                  "aria-labelledby": !_ctx.title ? _ctx.titleId : void 0,
                  "aria-describedby": _ctx.bodyId,
                  class: (0,external_Vue_.normalizeClass)([_ctx.ns.b(), _ctx.direction, _ctx.visible && "open", _ctx.customClass]),
                  style: (0,external_Vue_.normalizeStyle)(_ctx.isHorizontal ? "width: " + _ctx.drawerSize : "height: " + _ctx.drawerSize),
                  role: "dialog",
                  onClick: _cache[1] || (_cache[1] = (0,external_Vue_.withModifiers)(() => {
                  }, ["stop"]))
                }, [
                  (0,external_Vue_.createElementVNode)("span", {
                    ref: "focusStartRef",
                    class: (0,external_Vue_.normalizeClass)(_ctx.ns.e("sr-focus")),
                    tabindex: "-1"
                  }, null, 2),
                  _ctx.withHeader ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("header", {
                    key: 0,
                    class: (0,external_Vue_.normalizeClass)(_ctx.ns.e("header"))
                  }, [
                    !_ctx.$slots.title ? (0,external_Vue_.renderSlot)(_ctx.$slots, "header", {
                      key: 0,
                      close: _ctx.handleClose,
                      titleId: _ctx.titleId,
                      titleClass: _ctx.ns.e("title")
                    }, () => [
                      !_ctx.$slots.title ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("span", {
                        key: 0,
                        id: _ctx.titleId,
                        role: "heading",
                        class: (0,external_Vue_.normalizeClass)(_ctx.ns.e("title"))
                      }, (0,external_Vue_.toDisplayString)(_ctx.title), 11, drawer2_hoisted_2)) : (0,external_Vue_.createCommentVNode)("v-if", true)
                    ]) : (0,external_Vue_.renderSlot)(_ctx.$slots, "title", { key: 1 }, () => [
                      (0,external_Vue_.createCommentVNode)(" DEPRECATED SLOT ")
                    ]),
                    _ctx.showClose ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("button", {
                      key: 2,
                      "aria-label": _ctx.t("el.drawer.close"),
                      class: (0,external_Vue_.normalizeClass)(_ctx.ns.e("close-btn")),
                      type: "button",
                      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.handleClose && _ctx.handleClose(...args))
                    }, [
                      (0,external_Vue_.createVNode)(_component_el_icon, {
                        class: (0,external_Vue_.normalizeClass)(_ctx.ns.e("close"))
                      }, {
                        default: (0,external_Vue_.withCtx)(() => [
                          (0,external_Vue_.createVNode)(_component_close)
                        ]),
                        _: 1
                      }, 8, ["class"])
                    ], 10, drawer2_hoisted_3)) : (0,external_Vue_.createCommentVNode)("v-if", true)
                  ], 2)) : (0,external_Vue_.createCommentVNode)("v-if", true),
                  _ctx.rendered ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
                    key: 1,
                    id: _ctx.bodyId,
                    class: (0,external_Vue_.normalizeClass)(_ctx.ns.e("body"))
                  }, [
                    (0,external_Vue_.renderSlot)(_ctx.$slots, "default")
                  ], 10, drawer2_hoisted_4)) : (0,external_Vue_.createCommentVNode)("v-if", true),
                  _ctx.$slots.footer ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
                    key: 2,
                    class: (0,external_Vue_.normalizeClass)(_ctx.ns.e("footer"))
                  }, [
                    (0,external_Vue_.renderSlot)(_ctx.$slots, "footer")
                  ], 2)) : (0,external_Vue_.createCommentVNode)("v-if", true)
                ], 14, drawer2_hoisted_1)
              ]),
              _: 3
            }, 8, ["trapped", "focus-trap-el", "focus-start-el", "onReleaseRequested"])
          ]),
          _: 3
        }, 8, ["mask", "overlay-class", "z-index", "onClick"]), [
          [external_Vue_.vShow, _ctx.visible]
        ])
      ]),
      _: 3
    }, 8, ["name", "onAfterEnter", "onAfterLeave", "onBeforeLeave"])
  ], 8, ["disabled"]);
}
var Drawer = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(drawer2_sfc_main, [["render", drawer2_sfc_render], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/drawer/src/drawer.vue"]]);


//# sourceMappingURL=drawer2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/drawer/index.mjs





const ElDrawer = (0,install/* withInstall */.nz)(Drawer);


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/collection/src/collection2.mjs



const collection2_sfc_main = {
  inheritAttrs: false
};
function collection2_sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return (0,external_Vue_.renderSlot)(_ctx.$slots, "default");
}
var Collection = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(collection2_sfc_main, [["render", collection2_sfc_render], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/collection/src/collection.vue"]]);


//# sourceMappingURL=collection2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/collection/src/collection-item.mjs



const collection_item_sfc_main = {
  name: "ElCollectionItem",
  inheritAttrs: false
};
function collection_item_sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return (0,external_Vue_.renderSlot)(_ctx.$slots, "default");
}
var CollectionItem = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(collection_item_sfc_main, [["render", collection_item_sfc_render], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/collection/src/collection-item.vue"]]);


//# sourceMappingURL=collection-item.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/collection/src/collection.mjs




const COLLECTION_ITEM_SIGN = `data-el-collection-item`;
const createCollectionWithScope = (name) => {
  const COLLECTION_NAME = `El${name}Collection`;
  const COLLECTION_ITEM_NAME = `${COLLECTION_NAME}Item`;
  const COLLECTION_INJECTION_KEY = Symbol(COLLECTION_NAME);
  const COLLECTION_ITEM_INJECTION_KEY = Symbol(COLLECTION_ITEM_NAME);
  const ElCollection = {
    ...Collection,
    name: COLLECTION_NAME,
    setup() {
      const collectionRef = (0,external_Vue_.ref)(null);
      const itemMap = /* @__PURE__ */ new Map();
      const getItems = () => {
        const collectionEl = (0,external_Vue_.unref)(collectionRef);
        if (!collectionEl)
          return [];
        const orderedNodes = Array.from(collectionEl.querySelectorAll(`[${COLLECTION_ITEM_SIGN}]`));
        const items = [...itemMap.values()];
        return items.sort((a, b) => orderedNodes.indexOf(a.ref) - orderedNodes.indexOf(b.ref));
      };
      (0,external_Vue_.provide)(COLLECTION_INJECTION_KEY, {
        itemMap,
        getItems,
        collectionRef
      });
    }
  };
  const ElCollectionItem = {
    ...CollectionItem,
    name: COLLECTION_ITEM_NAME,
    setup(_, { attrs }) {
      const collectionItemRef = (0,external_Vue_.ref)(null);
      const collectionInjection = (0,external_Vue_.inject)(COLLECTION_INJECTION_KEY, void 0);
      (0,external_Vue_.provide)(COLLECTION_ITEM_INJECTION_KEY, {
        collectionItemRef
      });
      (0,external_Vue_.onMounted)(() => {
        const collectionItemEl = (0,external_Vue_.unref)(collectionItemRef);
        if (collectionItemEl) {
          collectionInjection.itemMap.set(collectionItemEl, {
            ref: collectionItemEl,
            ...attrs
          });
        }
      });
      (0,external_Vue_.onBeforeUnmount)(() => {
        const collectionItemEl = (0,external_Vue_.unref)(collectionItemRef);
        collectionInjection.itemMap.delete(collectionItemEl);
      });
    }
  };
  return {
    COLLECTION_INJECTION_KEY,
    COLLECTION_ITEM_INJECTION_KEY,
    ElCollection,
    ElCollectionItem
  };
};


//# sourceMappingURL=collection.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/dropdown/src/dropdown.mjs










const dropdownProps = (0,runtime/* buildProps */.o8)({
  trigger: useTooltipTriggerProps.trigger,
  effect: {
    ...useTooltipContentProps.effect,
    default: "light"
  },
  type: {
    type: (0,runtime/* definePropType */.Cq)(String)
  },
  placement: {
    type: (0,runtime/* definePropType */.Cq)(String),
    default: "bottom"
  },
  popperOptions: {
    type: (0,runtime/* definePropType */.Cq)(Object),
    default: () => ({})
  },
  id: String,
  size: {
    type: String,
    default: ""
  },
  splitButton: Boolean,
  hideOnClick: {
    type: Boolean,
    default: true
  },
  loop: {
    type: Boolean,
    default: true
  },
  showTimeout: {
    type: Number,
    default: 150
  },
  hideTimeout: {
    type: Number,
    default: 150
  },
  tabindex: {
    type: (0,runtime/* definePropType */.Cq)([Number, String]),
    default: 0
  },
  maxHeight: {
    type: (0,runtime/* definePropType */.Cq)([Number, String]),
    default: ""
  },
  popperClass: {
    type: String,
    default: ""
  },
  disabled: {
    type: Boolean,
    default: false
  },
  role: {
    type: String,
    default: "menu"
  },
  buttonProps: {
    type: (0,runtime/* definePropType */.Cq)(Object)
  }
});
const dropdownItemProps = (0,runtime/* buildProps */.o8)({
  command: {
    type: [Object, String, Number],
    default: () => ({})
  },
  disabled: Boolean,
  divided: Boolean,
  textValue: String,
  icon: {
    type: icon/* iconPropType */.AA
  }
});
const dropdownMenuProps = (0,runtime/* buildProps */.o8)({
  onKeydown: { type: (0,runtime/* definePropType */.Cq)(Function) }
});
const FIRST_KEYS = [
  aria_EVENT_CODE.down,
  aria_EVENT_CODE.pageDown,
  aria_EVENT_CODE.home
];
const LAST_KEYS = [aria_EVENT_CODE.up, aria_EVENT_CODE.pageUp, aria_EVENT_CODE.end];
const FIRST_LAST_KEYS = [...FIRST_KEYS, ...LAST_KEYS];
const {
  ElCollection,
  ElCollectionItem,
  COLLECTION_INJECTION_KEY,
  COLLECTION_ITEM_INJECTION_KEY
} = createCollectionWithScope("Dropdown");


//# sourceMappingURL=dropdown.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/dropdown/src/tokens.mjs
const DROPDOWN_INJECTION_KEY = Symbol("elDropdown");


//# sourceMappingURL=tokens.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/roving-focus-group/src/roving-focus-group.mjs





const rovingFocusGroupProps = (0,runtime/* buildProps */.o8)({
  style: { type: (0,runtime/* definePropType */.Cq)([String, Array, Object]) },
  currentTabId: {
    type: (0,runtime/* definePropType */.Cq)(String)
  },
  defaultCurrentTabId: String,
  loop: Boolean,
  dir: {
    type: String,
    values: ["ltr", "rtl"],
    default: "ltr"
  },
  orientation: {
    type: (0,runtime/* definePropType */.Cq)(String)
  },
  onBlur: Function,
  onFocus: Function,
  onMousedown: Function
});
const {
  ElCollection: roving_focus_group_ElCollection,
  ElCollectionItem: roving_focus_group_ElCollectionItem,
  COLLECTION_INJECTION_KEY: roving_focus_group_COLLECTION_INJECTION_KEY,
  COLLECTION_ITEM_INJECTION_KEY: roving_focus_group_COLLECTION_ITEM_INJECTION_KEY
} = createCollectionWithScope("RovingFocusGroup");


//# sourceMappingURL=roving-focus-group.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/roving-focus-group/src/tokens.mjs
const ROVING_FOCUS_GROUP_INJECTION_KEY = Symbol("elRovingFocusGroup");
const ROVING_FOCUS_GROUP_ITEM_INJECTION_KEY = Symbol("elRovingFocusGroupItem");


//# sourceMappingURL=tokens.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/roving-focus-group/src/utils.mjs



const MAP_KEY_TO_FOCUS_INTENT = {
  ArrowLeft: "prev",
  ArrowUp: "prev",
  ArrowRight: "next",
  ArrowDown: "next",
  PageUp: "first",
  Home: "first",
  PageDown: "last",
  End: "last"
};
const getDirectionAwareKey = (key, dir) => {
  if (dir !== "rtl")
    return key;
  switch (key) {
    case aria_EVENT_CODE.right:
      return aria_EVENT_CODE.left;
    case aria_EVENT_CODE.left:
      return aria_EVENT_CODE.right;
    default:
      return key;
  }
};
const getFocusIntent = (event, orientation, dir) => {
  const key = getDirectionAwareKey(event.key, dir);
  if (orientation === "vertical" && [aria_EVENT_CODE.left, aria_EVENT_CODE.right].includes(key))
    return void 0;
  if (orientation === "horizontal" && [aria_EVENT_CODE.up, aria_EVENT_CODE.down].includes(key))
    return void 0;
  return MAP_KEY_TO_FOCUS_INTENT[key];
};
const reorderArray = (array, atIdx) => {
  return array.map((_, idx) => array[(idx + atIdx) % array.length]);
};
const focusFirst = (elements) => {
  const { activeElement: prevActive } = document;
  for (const element of elements) {
    if (element === prevActive)
      return;
    element.focus();
    if (prevActive !== document.activeElement)
      return;
  }
};


//# sourceMappingURL=utils.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/roving-focus-group/src/roving-focus-group-impl.mjs








const CURRENT_TAB_ID_CHANGE_EVT = "currentTabIdChange";
const ENTRY_FOCUS_EVT = "rovingFocusGroup.entryFocus";
const EVT_OPTS = { bubbles: false, cancelable: true };
const roving_focus_group_impl_sfc_main = (0,external_Vue_.defineComponent)({
  name: "ElRovingFocusGroupImpl",
  inheritAttrs: false,
  props: rovingFocusGroupProps,
  emits: [CURRENT_TAB_ID_CHANGE_EVT, "entryFocus"],
  setup(props, { emit }) {
    var _a;
    const currentTabbedId = (0,external_Vue_.ref)((_a = props.currentTabId || props.defaultCurrentTabId) != null ? _a : null);
    const isBackingOut = (0,external_Vue_.ref)(false);
    const isClickFocus = (0,external_Vue_.ref)(false);
    const rovingFocusGroupRef = (0,external_Vue_.ref)(null);
    const { getItems } = (0,external_Vue_.inject)(roving_focus_group_COLLECTION_INJECTION_KEY, void 0);
    const rovingFocusGroupRootStyle = (0,external_Vue_.computed)(() => {
      return [
        {
          outline: "none"
        },
        props.style
      ];
    });
    const onItemFocus = (tabbedId) => {
      emit(CURRENT_TAB_ID_CHANGE_EVT, tabbedId);
    };
    const onItemShiftTab = () => {
      isBackingOut.value = true;
    };
    const onMousedown = composeEventHandlers((e) => {
      var _a2;
      (_a2 = props.onMousedown) == null ? void 0 : _a2.call(props, e);
    }, () => {
      isClickFocus.value = true;
    });
    const onFocus = composeEventHandlers((e) => {
      var _a2;
      (_a2 = props.onFocus) == null ? void 0 : _a2.call(props, e);
    }, (e) => {
      const isKeyboardFocus = !(0,external_Vue_.unref)(isClickFocus);
      const { target, currentTarget } = e;
      if (target === currentTarget && isKeyboardFocus && !(0,external_Vue_.unref)(isBackingOut)) {
        const entryFocusEvt = new Event(ENTRY_FOCUS_EVT, EVT_OPTS);
        currentTarget == null ? void 0 : currentTarget.dispatchEvent(entryFocusEvt);
        if (!entryFocusEvt.defaultPrevented) {
          const items = getItems().filter((item) => item.focusable);
          const activeItem = items.find((item) => item.active);
          const currentItem = items.find((item) => item.id === (0,external_Vue_.unref)(currentTabbedId));
          const candidates = [activeItem, currentItem, ...items].filter(Boolean);
          const candidateNodes = candidates.map((item) => item.ref);
          focusFirst(candidateNodes);
        }
      }
      isClickFocus.value = false;
    });
    const onBlur = composeEventHandlers((e) => {
      var _a2;
      (_a2 = props.onBlur) == null ? void 0 : _a2.call(props, e);
    }, () => {
      isBackingOut.value = false;
    });
    const handleEntryFocus = (...args) => {
      emit("entryFocus", ...args);
    };
    (0,external_Vue_.provide)(ROVING_FOCUS_GROUP_INJECTION_KEY, {
      currentTabbedId: (0,external_Vue_.readonly)(currentTabbedId),
      loop: (0,external_Vue_.toRef)(props, "loop"),
      tabIndex: (0,external_Vue_.computed)(() => {
        return (0,external_Vue_.unref)(isBackingOut) ? -1 : 0;
      }),
      rovingFocusGroupRef,
      rovingFocusGroupRootStyle,
      orientation: (0,external_Vue_.toRef)(props, "orientation"),
      dir: (0,external_Vue_.toRef)(props, "dir"),
      onItemFocus,
      onItemShiftTab,
      onBlur,
      onFocus,
      onMousedown
    });
    (0,external_Vue_.watch)(() => props.currentTabId, (val) => {
      currentTabbedId.value = val != null ? val : null;
    });
    (0,external_Vue_.onMounted)(() => {
      const rovingFocusGroupEl = (0,external_Vue_.unref)(rovingFocusGroupRef);
      event_on(rovingFocusGroupEl, ENTRY_FOCUS_EVT, handleEntryFocus);
    });
    (0,external_Vue_.onBeforeUnmount)(() => {
      const rovingFocusGroupEl = (0,external_Vue_.unref)(rovingFocusGroupRef);
      off(rovingFocusGroupEl, ENTRY_FOCUS_EVT, handleEntryFocus);
    });
  }
});
function roving_focus_group_impl_sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return (0,external_Vue_.renderSlot)(_ctx.$slots, "default");
}
var ElRovingFocusGroupImpl = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(roving_focus_group_impl_sfc_main, [["render", roving_focus_group_impl_sfc_render], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/roving-focus-group/src/roving-focus-group-impl.vue"]]);


//# sourceMappingURL=roving-focus-group-impl.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/roving-focus-group/src/roving-focus-group2.mjs





const roving_focus_group2_sfc_main = (0,external_Vue_.defineComponent)({
  name: "ElRovingFocusGroup",
  components: {
    ElFocusGroupCollection: roving_focus_group_ElCollection,
    ElRovingFocusGroupImpl: ElRovingFocusGroupImpl
  }
});
function roving_focus_group2_sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_el_roving_focus_group_impl = (0,external_Vue_.resolveComponent)("el-roving-focus-group-impl");
  const _component_el_focus_group_collection = (0,external_Vue_.resolveComponent)("el-focus-group-collection");
  return (0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(_component_el_focus_group_collection, null, {
    default: (0,external_Vue_.withCtx)(() => [
      (0,external_Vue_.createVNode)(_component_el_roving_focus_group_impl, (0,external_Vue_.normalizeProps)((0,external_Vue_.guardReactiveProps)(_ctx.$attrs)), {
        default: (0,external_Vue_.withCtx)(() => [
          (0,external_Vue_.renderSlot)(_ctx.$slots, "default")
        ]),
        _: 3
      }, 16)
    ]),
    _: 3
  });
}
var ElRovingFocusGroup = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(roving_focus_group2_sfc_main, [["render", roving_focus_group2_sfc_render], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/roving-focus-group/src/roving-focus-group.vue"]]);


//# sourceMappingURL=roving-focus-group2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/dropdown/src/dropdown2.mjs























const { ButtonGroup: dropdown2_ElButtonGroup } = ElButton;
const dropdown2_sfc_main = (0,external_Vue_.defineComponent)({
  name: "ElDropdown",
  components: {
    ElButton: ElButton,
    ElButtonGroup: dropdown2_ElButtonGroup,
    ElScrollbar: ElScrollbar,
    ElDropdownCollection: ElCollection,
    ElTooltip: ElTooltip,
    ElRovingFocusGroup: ElRovingFocusGroup,
    ElOnlyChild: OnlyChild,
    ElIcon: components_icon/* ElIcon */.gn,
    ArrowDown: dist/* ArrowDown */.K5e
  },
  props: dropdownProps,
  emits: ["visible-change", "click", "command"],
  setup(props, { emit }) {
    const _instance = (0,external_Vue_.getCurrentInstance)();
    const ns = (0,use_namespace/* useNamespace */.s)("dropdown");
    const { t } = useLocale();
    const triggeringElementRef = (0,external_Vue_.ref)();
    const referenceElementRef = (0,external_Vue_.ref)();
    const popperRef = (0,external_Vue_.ref)(null);
    const contentRef = (0,external_Vue_.ref)(null);
    const scrollbar = (0,external_Vue_.ref)(null);
    const currentTabId = (0,external_Vue_.ref)(null);
    const isUsingKeyboard = (0,external_Vue_.ref)(false);
    const triggerKeys = [aria_EVENT_CODE.enter, aria_EVENT_CODE.space, aria_EVENT_CODE.down];
    const wrapStyle = (0,external_Vue_.computed)(() => ({
      maxHeight: (0,dom_style/* addUnit */.Nn)(props.maxHeight)
    }));
    const dropdownTriggerKls = (0,external_Vue_.computed)(() => [ns.m(dropdownSize.value)]);
    const defaultTriggerId = (0,use_id/* useId */.M)().value;
    const triggerId = (0,external_Vue_.computed)(() => {
      return props.id || defaultTriggerId;
    });
    function handleClick() {
      handleClose();
    }
    function handleClose() {
      var _a;
      (_a = popperRef.value) == null ? void 0 : _a.onClose();
    }
    function handleOpen() {
      var _a;
      (_a = popperRef.value) == null ? void 0 : _a.onOpen();
    }
    const dropdownSize = (0,use_common_props/* useSize */.tH)();
    function commandHandler(...args) {
      emit("command", ...args);
    }
    function onItemEnter() {
    }
    function onItemLeave() {
      const contentEl = (0,external_Vue_.unref)(contentRef);
      contentEl == null ? void 0 : contentEl.focus();
      currentTabId.value = null;
    }
    function handleCurrentTabIdChange(id) {
      currentTabId.value = id;
    }
    function handleEntryFocus(e) {
      if (!isUsingKeyboard.value) {
        e.preventDefault();
        e.stopImmediatePropagation();
      }
    }
    function handleShowTooltip(event) {
      if ((event == null ? void 0 : event.type) === "keydown") {
        contentRef.value.focus();
      }
      emit("visible-change", true);
    }
    function handleHideTooltip() {
      emit("visible-change", false);
    }
    (0,external_Vue_.provide)(DROPDOWN_INJECTION_KEY, {
      contentRef,
      role: (0,external_Vue_.computed)(() => props.role),
      triggerId,
      isUsingKeyboard,
      onItemEnter,
      onItemLeave
    });
    (0,external_Vue_.provide)("elDropdown", {
      instance: _instance,
      dropdownSize,
      handleClick,
      commandHandler,
      trigger: (0,external_Vue_.toRef)(props, "trigger"),
      hideOnClick: (0,external_Vue_.toRef)(props, "hideOnClick")
    });
    const onFocusAfterTrapped = (e) => {
      var _a, _b;
      e.preventDefault();
      (_b = (_a = contentRef.value) == null ? void 0 : _a.focus) == null ? void 0 : _b.call(_a, {
        preventScroll: true
      });
    };
    const handlerMainButtonClick = (event) => {
      emit("click", event);
    };
    return {
      t,
      ns,
      scrollbar,
      wrapStyle,
      dropdownTriggerKls,
      dropdownSize,
      triggerId,
      triggerKeys,
      currentTabId,
      handleCurrentTabIdChange,
      handlerMainButtonClick,
      handleEntryFocus,
      handleClose,
      handleOpen,
      handleShowTooltip,
      handleHideTooltip,
      onFocusAfterTrapped,
      popperRef,
      contentRef,
      triggeringElementRef,
      referenceElementRef
    };
  }
});
function dropdown2_sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  var _a;
  const _component_el_dropdown_collection = (0,external_Vue_.resolveComponent)("el-dropdown-collection");
  const _component_el_roving_focus_group = (0,external_Vue_.resolveComponent)("el-roving-focus-group");
  const _component_el_scrollbar = (0,external_Vue_.resolveComponent)("el-scrollbar");
  const _component_el_only_child = (0,external_Vue_.resolveComponent)("el-only-child");
  const _component_el_tooltip = (0,external_Vue_.resolveComponent)("el-tooltip");
  const _component_el_button = (0,external_Vue_.resolveComponent)("el-button");
  const _component_arrow_down = (0,external_Vue_.resolveComponent)("arrow-down");
  const _component_el_icon = (0,external_Vue_.resolveComponent)("el-icon");
  const _component_el_button_group = (0,external_Vue_.resolveComponent)("el-button-group");
  return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
    class: (0,external_Vue_.normalizeClass)([_ctx.ns.b(), _ctx.ns.is("disabled", _ctx.disabled)])
  }, [
    (0,external_Vue_.createVNode)(_component_el_tooltip, {
      ref: "popperRef",
      role: _ctx.role,
      effect: _ctx.effect,
      "fallback-placements": ["bottom", "top"],
      "popper-options": _ctx.popperOptions,
      "gpu-acceleration": false,
      "hide-after": _ctx.trigger === "hover" ? _ctx.hideTimeout : 0,
      "manual-mode": true,
      placement: _ctx.placement,
      "popper-class": [_ctx.ns.e("popper"), _ctx.popperClass],
      "reference-element": (_a = _ctx.referenceElementRef) == null ? void 0 : _a.$el,
      trigger: _ctx.trigger,
      "trigger-keys": _ctx.triggerKeys,
      "trigger-target-el": _ctx.contentRef,
      "show-after": _ctx.trigger === "hover" ? _ctx.showTimeout : 0,
      "stop-popper-mouse-event": false,
      "virtual-ref": _ctx.triggeringElementRef,
      "virtual-triggering": _ctx.splitButton,
      disabled: _ctx.disabled,
      transition: `${_ctx.ns.namespace.value}-zoom-in-top`,
      teleported: "",
      pure: "",
      persistent: "",
      onShow: _ctx.handleShowTooltip,
      onHide: _ctx.handleHideTooltip
    }, (0,external_Vue_.createSlots)({
      content: (0,external_Vue_.withCtx)(() => [
        (0,external_Vue_.createVNode)(_component_el_scrollbar, {
          ref: "scrollbar",
          "wrap-style": _ctx.wrapStyle,
          tag: "div",
          "view-class": _ctx.ns.e("list")
        }, {
          default: (0,external_Vue_.withCtx)(() => [
            (0,external_Vue_.createVNode)(_component_el_roving_focus_group, {
              loop: _ctx.loop,
              "current-tab-id": _ctx.currentTabId,
              orientation: "horizontal",
              onCurrentTabIdChange: _ctx.handleCurrentTabIdChange,
              onEntryFocus: _ctx.handleEntryFocus
            }, {
              default: (0,external_Vue_.withCtx)(() => [
                (0,external_Vue_.createVNode)(_component_el_dropdown_collection, null, {
                  default: (0,external_Vue_.withCtx)(() => [
                    (0,external_Vue_.renderSlot)(_ctx.$slots, "dropdown")
                  ]),
                  _: 3
                })
              ]),
              _: 3
            }, 8, ["loop", "current-tab-id", "onCurrentTabIdChange", "onEntryFocus"])
          ]),
          _: 3
        }, 8, ["wrap-style", "view-class"])
      ]),
      _: 2
    }, [
      !_ctx.splitButton ? {
        name: "default",
        fn: (0,external_Vue_.withCtx)(() => [
          (0,external_Vue_.createVNode)(_component_el_only_child, {
            id: _ctx.triggerId,
            role: "button",
            tabindex: _ctx.tabindex
          }, {
            default: (0,external_Vue_.withCtx)(() => [
              (0,external_Vue_.renderSlot)(_ctx.$slots, "default")
            ]),
            _: 3
          }, 8, ["id", "tabindex"])
        ])
      } : void 0
    ]), 1032, ["role", "effect", "popper-options", "hide-after", "placement", "popper-class", "reference-element", "trigger", "trigger-keys", "trigger-target-el", "show-after", "virtual-ref", "virtual-triggering", "disabled", "transition", "onShow", "onHide"]),
    _ctx.splitButton ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(_component_el_button_group, { key: 0 }, {
      default: (0,external_Vue_.withCtx)(() => [
        (0,external_Vue_.createVNode)(_component_el_button, (0,external_Vue_.mergeProps)({ ref: "referenceElementRef" }, _ctx.buttonProps, {
          size: _ctx.dropdownSize,
          type: _ctx.type,
          disabled: _ctx.disabled,
          tabindex: _ctx.tabindex,
          onClick: _ctx.handlerMainButtonClick
        }), {
          default: (0,external_Vue_.withCtx)(() => [
            (0,external_Vue_.renderSlot)(_ctx.$slots, "default")
          ]),
          _: 3
        }, 16, ["size", "type", "disabled", "tabindex", "onClick"]),
        (0,external_Vue_.createVNode)(_component_el_button, (0,external_Vue_.mergeProps)({
          id: _ctx.triggerId,
          ref: "triggeringElementRef"
        }, _ctx.buttonProps, {
          role: "button",
          size: _ctx.dropdownSize,
          type: _ctx.type,
          class: _ctx.ns.e("caret-button"),
          disabled: _ctx.disabled,
          tabindex: _ctx.tabindex,
          "aria-label": _ctx.t("el.dropdown.toggleDropdown")
        }), {
          default: (0,external_Vue_.withCtx)(() => [
            (0,external_Vue_.createVNode)(_component_el_icon, {
              class: (0,external_Vue_.normalizeClass)(_ctx.ns.e("icon"))
            }, {
              default: (0,external_Vue_.withCtx)(() => [
                (0,external_Vue_.createVNode)(_component_arrow_down)
              ]),
              _: 1
            }, 8, ["class"])
          ]),
          _: 1
        }, 16, ["id", "size", "type", "class", "disabled", "tabindex", "aria-label"])
      ]),
      _: 3
    })) : (0,external_Vue_.createCommentVNode)("v-if", true)
  ], 2);
}
var Dropdown = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(dropdown2_sfc_main, [["render", dropdown2_sfc_render], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/dropdown/src/dropdown.vue"]]);


//# sourceMappingURL=dropdown2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/dropdown/src/dropdown-item-impl.mjs


















const dropdown_item_impl_sfc_main = (0,external_Vue_.defineComponent)({
  name: "DropdownItemImpl",
  components: {
    ElIcon: components_icon/* ElIcon */.gn
  },
  props: dropdownItemProps,
  emits: ["pointermove", "pointerleave", "click", "clickimpl"],
  setup(_, { emit }) {
    const ns = (0,use_namespace/* useNamespace */.s)("dropdown");
    const { role: menuRole } = (0,external_Vue_.inject)(DROPDOWN_INJECTION_KEY, void 0);
    const { collectionItemRef: dropdownCollectionItemRef } = (0,external_Vue_.inject)(COLLECTION_ITEM_INJECTION_KEY, void 0);
    const { collectionItemRef: rovingFocusCollectionItemRef } = (0,external_Vue_.inject)(roving_focus_group_COLLECTION_ITEM_INJECTION_KEY, void 0);
    const {
      rovingFocusGroupItemRef,
      tabIndex,
      handleFocus,
      handleKeydown: handleItemKeydown,
      handleMousedown
    } = (0,external_Vue_.inject)(ROVING_FOCUS_GROUP_ITEM_INJECTION_KEY, void 0);
    const itemRef = composeRefs(dropdownCollectionItemRef, rovingFocusCollectionItemRef, rovingFocusGroupItemRef);
    const role = (0,external_Vue_.computed)(() => {
      if (menuRole.value === "menu") {
        return "menuitem";
      } else if (menuRole.value === "navigation") {
        return "link";
      }
      return "button";
    });
    const handleKeydown = composeEventHandlers((e) => {
      const { code } = e;
      if (code === aria_EVENT_CODE.enter || code === aria_EVENT_CODE.space) {
        e.preventDefault();
        e.stopImmediatePropagation();
        emit("clickimpl", e);
        return true;
      }
    }, handleItemKeydown);
    return {
      ns,
      itemRef,
      dataset: {
        [COLLECTION_ITEM_SIGN]: ""
      },
      role,
      tabIndex,
      handleFocus,
      handleKeydown,
      handleMousedown
    };
  }
});
const dropdown_item_impl_hoisted_1 = ["aria-disabled", "tabindex", "role"];
function dropdown_item_impl_sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_el_icon = (0,external_Vue_.resolveComponent)("el-icon");
  return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, null, [
    _ctx.divided ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("li", (0,external_Vue_.mergeProps)({
      key: 0,
      role: "separator",
      class: _ctx.ns.bem("menu", "item", "divided")
    }, _ctx.$attrs), null, 16)) : (0,external_Vue_.createCommentVNode)("v-if", true),
    (0,external_Vue_.createElementVNode)("li", (0,external_Vue_.mergeProps)({ ref: _ctx.itemRef }, { ..._ctx.dataset, ..._ctx.$attrs }, {
      "aria-disabled": _ctx.disabled,
      class: [_ctx.ns.be("menu", "item"), _ctx.ns.is("disabled", _ctx.disabled)],
      tabindex: _ctx.tabIndex,
      role: _ctx.role,
      onClick: _cache[0] || (_cache[0] = (e) => _ctx.$emit("clickimpl", e)),
      onFocus: _cache[1] || (_cache[1] = (...args) => _ctx.handleFocus && _ctx.handleFocus(...args)),
      onKeydown: _cache[2] || (_cache[2] = (...args) => _ctx.handleKeydown && _ctx.handleKeydown(...args)),
      onMousedown: _cache[3] || (_cache[3] = (...args) => _ctx.handleMousedown && _ctx.handleMousedown(...args)),
      onPointermove: _cache[4] || (_cache[4] = (e) => _ctx.$emit("pointermove", e)),
      onPointerleave: _cache[5] || (_cache[5] = (e) => _ctx.$emit("pointerleave", e))
    }), [
      _ctx.icon ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(_component_el_icon, { key: 0 }, {
        default: (0,external_Vue_.withCtx)(() => [
          ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.resolveDynamicComponent)(_ctx.icon)))
        ]),
        _: 1
      })) : (0,external_Vue_.createCommentVNode)("v-if", true),
      (0,external_Vue_.renderSlot)(_ctx.$slots, "default")
    ], 16, dropdown_item_impl_hoisted_1)
  ], 64);
}
var ElDropdownItemImpl = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(dropdown_item_impl_sfc_main, [["render", dropdown_item_impl_sfc_render], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/dropdown/src/dropdown-item-impl.vue"]]);


//# sourceMappingURL=dropdown-item-impl.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/dropdown/src/useDropdown.mjs










const useDropdown = () => {
  const elDropdown = (0,external_Vue_.inject)("elDropdown", {});
  const _elDropdownSize = (0,external_Vue_.computed)(() => elDropdown == null ? void 0 : elDropdown.dropdownSize);
  return {
    elDropdown,
    _elDropdownSize
  };
};
const initDropdownDomEvent = (dropdownChildren, triggerElm, _instance) => {
  const ns = useNamespace("dropdown");
  const menuItems = ref(null);
  const menuItemsArray = ref(null);
  const dropdownElm = ref(null);
  const listId = ref(`dropdown-menu-${generateId()}`);
  dropdownElm.value = dropdownChildren == null ? void 0 : dropdownChildren.subTree.el;
  function removeTabindex() {
    var _a;
    triggerElm.setAttribute("tabindex", "-1");
    (_a = menuItemsArray.value) == null ? void 0 : _a.forEach((item) => {
      item.setAttribute("tabindex", "-1");
    });
  }
  function resetTabindex(ele) {
    removeTabindex();
    ele == null ? void 0 : ele.setAttribute("tabindex", "0");
  }
  function handleTriggerKeyDown(ev) {
    const code = ev.code;
    if ([EVENT_CODE.up, EVENT_CODE.down].includes(code)) {
      removeTabindex();
      resetTabindex(menuItems.value[0]);
      menuItems.value[0].focus();
      ev.preventDefault();
      ev.stopPropagation();
    } else if (code === EVENT_CODE.enter) {
      _instance.handleClick();
    } else if ([EVENT_CODE.tab, EVENT_CODE.esc].includes(code)) {
      _instance.hide();
    }
  }
  function handleItemKeyDown(ev) {
    const code = ev.code;
    const target = ev.target;
    const currentIndex = menuItemsArray.value.indexOf(target);
    const max = menuItemsArray.value.length - 1;
    let nextIndex;
    if ([EVENT_CODE.up, EVENT_CODE.down].includes(code)) {
      if (code === EVENT_CODE.up) {
        nextIndex = currentIndex !== 0 ? currentIndex - 1 : 0;
      } else {
        nextIndex = currentIndex < max ? currentIndex + 1 : max;
      }
      removeTabindex();
      resetTabindex(menuItems.value[nextIndex]);
      menuItems.value[nextIndex].focus();
      ev.preventDefault();
      ev.stopPropagation();
    } else if (code === EVENT_CODE.enter) {
      triggerElmFocus();
      target.click();
      if (_instance.props.hideOnClick) {
        _instance.hide();
      }
    } else if ([EVENT_CODE.tab, EVENT_CODE.esc].includes(code)) {
      _instance.hide();
      triggerElmFocus();
    }
  }
  function initAria() {
    dropdownElm.value.setAttribute("id", listId.value);
    triggerElm.setAttribute("aria-haspopup", "list");
    triggerElm.setAttribute("aria-controls", listId.value);
    if (!_instance.props.splitButton) {
      triggerElm.setAttribute("role", "button");
      triggerElm.setAttribute("tabindex", _instance.props.tabindex);
      addClass(triggerElm, ns.b("selfdefine"));
    }
  }
  function initEvent() {
    on(triggerElm, "keydown", handleTriggerKeyDown);
    on(dropdownElm.value, "keydown", handleItemKeyDown, true);
  }
  function initDomOperation() {
    menuItems.value = dropdownElm.value.querySelectorAll("[tabindex='-1']");
    menuItemsArray.value = Array.from(menuItems.value);
    initEvent();
    initAria();
  }
  function triggerElmFocus() {
    triggerElm.focus();
  }
  initDomOperation();
};


//# sourceMappingURL=useDropdown.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/roving-focus-group/src/roving-focus-item.mjs












const roving_focus_item_sfc_main = (0,external_Vue_.defineComponent)({
  components: {
    ElRovingFocusCollectionItem: roving_focus_group_ElCollectionItem
  },
  props: {
    focusable: {
      type: Boolean,
      default: true
    },
    active: {
      type: Boolean,
      default: false
    }
  },
  emits: ["mousedown", "focus", "keydown"],
  setup(props, { emit }) {
    const { currentTabbedId, loop, onItemFocus, onItemShiftTab } = (0,external_Vue_.inject)(ROVING_FOCUS_GROUP_INJECTION_KEY, void 0);
    const { getItems } = (0,external_Vue_.inject)(roving_focus_group_COLLECTION_INJECTION_KEY, void 0);
    const id = (0,use_id/* useId */.M)();
    const rovingFocusGroupItemRef = (0,external_Vue_.ref)(null);
    const handleMousedown = composeEventHandlers((e) => {
      emit("mousedown", e);
    }, (e) => {
      if (!props.focusable) {
        e.preventDefault();
      } else {
        onItemFocus((0,external_Vue_.unref)(id));
      }
    });
    const handleFocus = composeEventHandlers((e) => {
      emit("focus", e);
    }, () => {
      onItemFocus((0,external_Vue_.unref)(id));
    });
    const handleKeydown = composeEventHandlers((e) => {
      emit("keydown", e);
    }, (e) => {
      const { key, shiftKey, target, currentTarget } = e;
      if (key === aria_EVENT_CODE.tab && shiftKey) {
        onItemShiftTab();
        return;
      }
      if (target !== currentTarget)
        return;
      const focusIntent = getFocusIntent(e);
      if (focusIntent) {
        e.preventDefault();
        const items = getItems().filter((item) => item.focusable);
        let elements = items.map((item) => item.ref);
        switch (focusIntent) {
          case "last": {
            elements.reverse();
            break;
          }
          case "prev":
          case "next": {
            if (focusIntent === "prev") {
              elements.reverse();
            }
            const currentIdx = elements.indexOf(currentTarget);
            elements = loop.value ? reorderArray(elements, currentIdx + 1) : elements.slice(currentIdx + 1);
            break;
          }
          default: {
            break;
          }
        }
        (0,external_Vue_.nextTick)(() => {
          focusFirst(elements);
        });
      }
    });
    const isCurrentTab = (0,external_Vue_.computed)(() => currentTabbedId.value === (0,external_Vue_.unref)(id));
    (0,external_Vue_.provide)(ROVING_FOCUS_GROUP_ITEM_INJECTION_KEY, {
      rovingFocusGroupItemRef,
      tabIndex: (0,external_Vue_.computed)(() => (0,external_Vue_.unref)(isCurrentTab) ? 0 : -1),
      handleMousedown,
      handleFocus,
      handleKeydown
    });
    return {
      id,
      handleKeydown,
      handleFocus,
      handleMousedown
    };
  }
});
function roving_focus_item_sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_el_roving_focus_collection_item = (0,external_Vue_.resolveComponent)("el-roving-focus-collection-item");
  return (0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(_component_el_roving_focus_collection_item, {
    id: _ctx.id,
    focusable: _ctx.focusable,
    active: _ctx.active
  }, {
    default: (0,external_Vue_.withCtx)(() => [
      (0,external_Vue_.renderSlot)(_ctx.$slots, "default")
    ]),
    _: 3
  }, 8, ["id", "focusable", "active"]);
}
var ElRovingFocusItem = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(roving_focus_item_sfc_main, [["render", roving_focus_item_sfc_render], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/roving-focus-group/src/roving-focus-item.vue"]]);


//# sourceMappingURL=roving-focus-item.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/dropdown/src/dropdown-item.mjs











const dropdown_item_sfc_main = (0,external_Vue_.defineComponent)({
  name: "ElDropdownItem",
  components: {
    ElDropdownCollectionItem: ElCollectionItem,
    ElRovingFocusItem: ElRovingFocusItem,
    ElDropdownItemImpl: ElDropdownItemImpl
  },
  inheritAttrs: false,
  props: dropdownItemProps,
  emits: ["pointermove", "pointerleave", "click"],
  setup(props, { emit, attrs }) {
    const { elDropdown } = useDropdown();
    const _instance = (0,external_Vue_.getCurrentInstance)();
    const itemRef = (0,external_Vue_.ref)(null);
    const textContent = (0,external_Vue_.computed)(() => {
      var _a, _b;
      return (_b = (_a = (0,external_Vue_.unref)(itemRef)) == null ? void 0 : _a.textContent) != null ? _b : "";
    });
    const { onItemEnter, onItemLeave } = (0,external_Vue_.inject)(DROPDOWN_INJECTION_KEY, void 0);
    const handlePointerMove = composeEventHandlers((e) => {
      emit("pointermove", e);
      return e.defaultPrevented;
    }, whenMouse((e) => {
      var _a;
      if (props.disabled) {
        onItemLeave(e);
      } else {
        onItemEnter(e);
        if (!e.defaultPrevented) {
          ;
          (_a = e.currentTarget) == null ? void 0 : _a.focus();
        }
      }
    }));
    const handlePointerLeave = composeEventHandlers((e) => {
      emit("pointerleave", e);
      return e.defaultPrevented;
    }, whenMouse((e) => {
      onItemLeave(e);
    }));
    const handleClick = composeEventHandlers((e) => {
      emit("click", e);
      return e.type !== "keydown" && e.defaultPrevented;
    }, (e) => {
      var _a, _b, _c;
      if (props.disabled) {
        e.stopImmediatePropagation();
        return;
      }
      if ((_a = elDropdown == null ? void 0 : elDropdown.hideOnClick) == null ? void 0 : _a.value) {
        (_b = elDropdown.handleClick) == null ? void 0 : _b.call(elDropdown);
      }
      (_c = elDropdown.commandHandler) == null ? void 0 : _c.call(elDropdown, props.command, _instance, e);
    });
    const propsAndAttrs = (0,external_Vue_.computed)(() => {
      return { ...props, ...attrs };
    });
    return {
      handleClick,
      handlePointerMove,
      handlePointerLeave,
      textContent,
      propsAndAttrs
    };
  }
});
function dropdown_item_sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  var _a;
  const _component_el_dropdown_item_impl = (0,external_Vue_.resolveComponent)("el-dropdown-item-impl");
  const _component_el_roving_focus_item = (0,external_Vue_.resolveComponent)("el-roving-focus-item");
  const _component_el_dropdown_collection_item = (0,external_Vue_.resolveComponent)("el-dropdown-collection-item");
  return (0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(_component_el_dropdown_collection_item, {
    disabled: _ctx.disabled,
    "text-value": (_a = _ctx.textValue) != null ? _a : _ctx.textContent
  }, {
    default: (0,external_Vue_.withCtx)(() => [
      (0,external_Vue_.createVNode)(_component_el_roving_focus_item, {
        focusable: !_ctx.disabled
      }, {
        default: (0,external_Vue_.withCtx)(() => [
          (0,external_Vue_.createVNode)(_component_el_dropdown_item_impl, (0,external_Vue_.mergeProps)(_ctx.propsAndAttrs, {
            onPointerleave: _ctx.handlePointerLeave,
            onPointermove: _ctx.handlePointerMove,
            onClickimpl: _ctx.handleClick
          }), {
            default: (0,external_Vue_.withCtx)(() => [
              (0,external_Vue_.renderSlot)(_ctx.$slots, "default")
            ]),
            _: 3
          }, 16, ["onPointerleave", "onPointermove", "onClickimpl"])
        ]),
        _: 3
      }, 8, ["focusable"])
    ]),
    _: 3
  }, 8, ["disabled", "text-value"]);
}
var DropdownItem = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(dropdown_item_sfc_main, [["render", dropdown_item_sfc_render], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/dropdown/src/dropdown-item.vue"]]);


//# sourceMappingURL=dropdown-item.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/dropdown/src/dropdown-menu.mjs



















const dropdown_menu_sfc_main = (0,external_Vue_.defineComponent)({
  name: "ElDropdownMenu",
  props: dropdownMenuProps,
  setup(props) {
    const ns = (0,use_namespace/* useNamespace */.s)("dropdown");
    const { _elDropdownSize } = useDropdown();
    const size = _elDropdownSize.value;
    const { focusTrapRef, onKeydown } = (0,external_Vue_.inject)(FOCUS_TRAP_INJECTION_KEY, void 0);
    const { contentRef, role, triggerId } = (0,external_Vue_.inject)(DROPDOWN_INJECTION_KEY, void 0);
    const { collectionRef: dropdownCollectionRef, getItems } = (0,external_Vue_.inject)(COLLECTION_INJECTION_KEY, void 0);
    const {
      rovingFocusGroupRef,
      rovingFocusGroupRootStyle,
      tabIndex,
      onBlur,
      onFocus,
      onMousedown
    } = (0,external_Vue_.inject)(ROVING_FOCUS_GROUP_INJECTION_KEY, void 0);
    const { collectionRef: rovingFocusGroupCollectionRef } = (0,external_Vue_.inject)(roving_focus_group_COLLECTION_INJECTION_KEY, void 0);
    const dropdownKls = (0,external_Vue_.computed)(() => {
      return [ns.b("menu"), ns.bm("menu", size == null ? void 0 : size.value)];
    });
    const dropdownListWrapperRef = composeRefs(contentRef, dropdownCollectionRef, focusTrapRef, rovingFocusGroupRef, rovingFocusGroupCollectionRef);
    const composedKeydown = composeEventHandlers((e) => {
      var _a;
      (_a = props.onKeydown) == null ? void 0 : _a.call(props, e);
    }, (e) => {
      const { currentTarget, code, target } = e;
      const isKeydownContained = currentTarget.contains(target);
      if (isKeydownContained) {
      }
      if (aria_EVENT_CODE.tab === code) {
        e.stopImmediatePropagation();
      }
      e.preventDefault();
      if (target !== (0,external_Vue_.unref)(contentRef))
        return;
      if (!FIRST_LAST_KEYS.includes(code))
        return;
      const items = getItems().filter((item) => !item.disabled);
      const targets = items.map((item) => item.ref);
      if (LAST_KEYS.includes(code)) {
        targets.reverse();
      }
      focusFirst(targets);
    });
    const handleKeydown = (e) => {
      composedKeydown(e);
      onKeydown(e);
    };
    return {
      size,
      rovingFocusGroupRootStyle,
      tabIndex,
      dropdownKls,
      role,
      triggerId,
      dropdownListWrapperRef,
      handleKeydown,
      onBlur,
      onFocus,
      onMousedown
    };
  }
});
const dropdown_menu_hoisted_1 = ["role", "aria-labelledby"];
function dropdown_menu_sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("ul", {
    ref: _ctx.dropdownListWrapperRef,
    class: (0,external_Vue_.normalizeClass)(_ctx.dropdownKls),
    style: (0,external_Vue_.normalizeStyle)(_ctx.rovingFocusGroupRootStyle),
    tabindex: -1,
    role: _ctx.role,
    "aria-labelledby": _ctx.triggerId,
    onBlur: _cache[0] || (_cache[0] = (...args) => _ctx.onBlur && _ctx.onBlur(...args)),
    onFocus: _cache[1] || (_cache[1] = (...args) => _ctx.onFocus && _ctx.onFocus(...args)),
    onKeydown: _cache[2] || (_cache[2] = (...args) => _ctx.handleKeydown && _ctx.handleKeydown(...args)),
    onMousedown: _cache[3] || (_cache[3] = (...args) => _ctx.onMousedown && _ctx.onMousedown(...args))
  }, [
    (0,external_Vue_.renderSlot)(_ctx.$slots, "default")
  ], 46, dropdown_menu_hoisted_1);
}
var DropdownMenu = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(dropdown_menu_sfc_main, [["render", dropdown_menu_sfc_render], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/dropdown/src/dropdown-menu.vue"]]);


//# sourceMappingURL=dropdown-menu.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/dropdown/index.mjs








const ElDropdown = (0,install/* withInstall */.nz)(Dropdown, {
  DropdownItem: DropdownItem,
  DropdownMenu: DropdownMenu
});
const ElDropdownItem = (0,install/* withNoopInstall */.dp)(DropdownItem);
const ElDropdownMenu = (0,install/* withNoopInstall */.dp)(DropdownMenu);


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/empty/src/img-empty.mjs





let id = 0;
const img_empty_sfc_main = (0,external_Vue_.defineComponent)({
  name: "ImgEmpty",
  setup() {
    const ns = (0,use_namespace/* useNamespace */.s)("empty");
    return {
      ns,
      id: ++id
    };
  }
});
const img_empty_hoisted_1 = {
  viewBox: "0 0 79 86",
  version: "1.1",
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink"
};
const img_empty_hoisted_2 = ["id"];
const img_empty_hoisted_3 = ["stop-color"];
const img_empty_hoisted_4 = ["stop-color"];
const img_empty_hoisted_5 = ["id"];
const _hoisted_6 = ["stop-color"];
const _hoisted_7 = ["stop-color"];
const _hoisted_8 = ["id"];
const _hoisted_9 = {
  id: "Illustrations",
  stroke: "none",
  "stroke-width": "1",
  fill: "none",
  "fill-rule": "evenodd"
};
const _hoisted_10 = {
  id: "B-type",
  transform: "translate(-1268.000000, -535.000000)"
};
const _hoisted_11 = {
  id: "Group-2",
  transform: "translate(1268.000000, 535.000000)"
};
const _hoisted_12 = ["fill"];
const _hoisted_13 = ["fill"];
const _hoisted_14 = {
  id: "Group-Copy",
  transform: "translate(34.500000, 31.500000) scale(-1, 1) rotate(-25.000000) translate(-34.500000, -31.500000) translate(7.000000, 10.000000)"
};
const _hoisted_15 = ["fill"];
const _hoisted_16 = ["fill"];
const _hoisted_17 = ["fill"];
const _hoisted_18 = ["fill"];
const _hoisted_19 = ["fill"];
const _hoisted_20 = {
  id: "Rectangle-Copy-17",
  transform: "translate(53.000000, 45.000000)"
};
const _hoisted_21 = ["fill", "xlink:href"];
const _hoisted_22 = ["fill", "mask"];
const _hoisted_23 = ["fill"];
function img_empty_sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("svg", img_empty_hoisted_1, [
    (0,external_Vue_.createElementVNode)("defs", null, [
      (0,external_Vue_.createElementVNode)("linearGradient", {
        id: `linearGradient-1-${_ctx.id}`,
        x1: "38.8503086%",
        y1: "0%",
        x2: "61.1496914%",
        y2: "100%"
      }, [
        (0,external_Vue_.createElementVNode)("stop", {
          "stop-color": `var(${_ctx.ns.cssVarBlockName("fill-color-1")})`,
          offset: "0%"
        }, null, 8, img_empty_hoisted_3),
        (0,external_Vue_.createElementVNode)("stop", {
          "stop-color": `var(${_ctx.ns.cssVarBlockName("fill-color-4")})`,
          offset: "100%"
        }, null, 8, img_empty_hoisted_4)
      ], 8, img_empty_hoisted_2),
      (0,external_Vue_.createElementVNode)("linearGradient", {
        id: `linearGradient-2-${_ctx.id}`,
        x1: "0%",
        y1: "9.5%",
        x2: "100%",
        y2: "90.5%"
      }, [
        (0,external_Vue_.createElementVNode)("stop", {
          "stop-color": `var(${_ctx.ns.cssVarBlockName("fill-color-1")})`,
          offset: "0%"
        }, null, 8, _hoisted_6),
        (0,external_Vue_.createElementVNode)("stop", {
          "stop-color": `var(${_ctx.ns.cssVarBlockName("fill-color-6")})`,
          offset: "100%"
        }, null, 8, _hoisted_7)
      ], 8, img_empty_hoisted_5),
      (0,external_Vue_.createElementVNode)("rect", {
        id: `path-3-${_ctx.id}`,
        x: "0",
        y: "0",
        width: "17",
        height: "36"
      }, null, 8, _hoisted_8)
    ]),
    (0,external_Vue_.createElementVNode)("g", _hoisted_9, [
      (0,external_Vue_.createElementVNode)("g", _hoisted_10, [
        (0,external_Vue_.createElementVNode)("g", _hoisted_11, [
          (0,external_Vue_.createElementVNode)("path", {
            id: "Oval-Copy-2",
            d: "M39.5,86 C61.3152476,86 79,83.9106622 79,81.3333333 C79,78.7560045 57.3152476,78 35.5,78 C13.6847524,78 0,78.7560045 0,81.3333333 C0,83.9106622 17.6847524,86 39.5,86 Z",
            fill: `var(${_ctx.ns.cssVarBlockName("fill-color-3")})`
          }, null, 8, _hoisted_12),
          (0,external_Vue_.createElementVNode)("polygon", {
            id: "Rectangle-Copy-14",
            fill: `var(${_ctx.ns.cssVarBlockName("fill-color-7")})`,
            transform: "translate(27.500000, 51.500000) scale(1, -1) translate(-27.500000, -51.500000) ",
            points: "13 58 53 58 42 45 2 45"
          }, null, 8, _hoisted_13),
          (0,external_Vue_.createElementVNode)("g", _hoisted_14, [
            (0,external_Vue_.createElementVNode)("polygon", {
              id: "Rectangle-Copy-10",
              fill: `var(${_ctx.ns.cssVarBlockName("fill-color-7")})`,
              transform: "translate(11.500000, 5.000000) scale(1, -1) translate(-11.500000, -5.000000) ",
              points: "2.84078316e-14 3 18 3 23 7 5 7"
            }, null, 8, _hoisted_15),
            (0,external_Vue_.createElementVNode)("polygon", {
              id: "Rectangle-Copy-11",
              fill: `var(${_ctx.ns.cssVarBlockName("fill-color-5")})`,
              points: "-3.69149156e-15 7 38 7 38 43 -3.69149156e-15 43"
            }, null, 8, _hoisted_16),
            (0,external_Vue_.createElementVNode)("rect", {
              id: "Rectangle-Copy-12",
              fill: `url(#linearGradient-1-${_ctx.id})`,
              transform: "translate(46.500000, 25.000000) scale(-1, 1) translate(-46.500000, -25.000000) ",
              x: "38",
              y: "7",
              width: "17",
              height: "36"
            }, null, 8, _hoisted_17),
            (0,external_Vue_.createElementVNode)("polygon", {
              id: "Rectangle-Copy-13",
              fill: `var(${_ctx.ns.cssVarBlockName("fill-color-2")})`,
              transform: "translate(39.500000, 3.500000) scale(-1, 1) translate(-39.500000, -3.500000) ",
              points: "24 7 41 7 55 -3.63806207e-12 38 -3.63806207e-12"
            }, null, 8, _hoisted_18)
          ]),
          (0,external_Vue_.createElementVNode)("rect", {
            id: "Rectangle-Copy-15",
            fill: `url(#linearGradient-2-${_ctx.id})`,
            x: "13",
            y: "45",
            width: "40",
            height: "36"
          }, null, 8, _hoisted_19),
          (0,external_Vue_.createElementVNode)("g", _hoisted_20, [
            (0,external_Vue_.createElementVNode)("use", {
              id: "Mask",
              fill: `var(${_ctx.ns.cssVarBlockName("fill-color-8")})`,
              transform: "translate(8.500000, 18.000000) scale(-1, 1) translate(-8.500000, -18.000000) ",
              "xlink:href": `#path-3-${_ctx.id}`
            }, null, 8, _hoisted_21),
            (0,external_Vue_.createElementVNode)("polygon", {
              id: "Rectangle-Copy",
              fill: `var(${_ctx.ns.cssVarBlockName("fill-color-9")})`,
              mask: `url(#mask-4-${_ctx.id})`,
              transform: "translate(12.000000, 9.000000) scale(-1, 1) translate(-12.000000, -9.000000) ",
              points: "7 0 24 0 20 18 7 16.5"
            }, null, 8, _hoisted_22)
          ]),
          (0,external_Vue_.createElementVNode)("polygon", {
            id: "Rectangle-Copy-18",
            fill: `var(${_ctx.ns.cssVarBlockName("fill-color-2")})`,
            transform: "translate(66.000000, 51.500000) scale(-1, 1) translate(-66.000000, -51.500000) ",
            points: "62 45 79 45 70 58 53 58"
          }, null, 8, _hoisted_23)
        ])
      ])
    ])
  ]);
}
var ImgEmpty = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(img_empty_sfc_main, [["render", img_empty_sfc_render], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/empty/src/img-empty.vue"]]);


//# sourceMappingURL=img-empty.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/empty/src/empty.mjs
const emptyProps = {
  image: {
    type: String,
    default: ""
  },
  imageSize: Number,
  description: {
    type: String,
    default: ""
  }
};


//# sourceMappingURL=empty.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/empty/src/empty2.mjs








const empty2_hoisted_1 = ["src"];
const empty2_hoisted_2 = { key: 1 };
const empty2_default_ = {
  name: "ElEmpty"
};
const empty2_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...empty2_default_,
  props: emptyProps,
  setup(__props) {
    const props = __props;
    const { t } = useLocale();
    const ns = (0,use_namespace/* useNamespace */.s)("empty");
    const emptyDescription = (0,external_Vue_.computed)(() => props.description || t("el.table.emptyText"));
    const imageStyle = (0,external_Vue_.computed)(() => ({
      width: props.imageSize ? `${props.imageSize}px` : ""
    }));
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
        class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).b())
      }, [
        (0,external_Vue_.createElementVNode)("div", {
          class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("image")),
          style: (0,external_Vue_.normalizeStyle)((0,external_Vue_.unref)(imageStyle))
        }, [
          _ctx.image ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("img", {
            key: 0,
            src: _ctx.image,
            ondragstart: "return false"
          }, null, 8, empty2_hoisted_1)) : (0,external_Vue_.renderSlot)(_ctx.$slots, "image", { key: 1 }, () => [
            (0,external_Vue_.createVNode)(ImgEmpty)
          ])
        ], 6),
        (0,external_Vue_.createElementVNode)("div", {
          class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("description"))
        }, [
          _ctx.$slots.description ? (0,external_Vue_.renderSlot)(_ctx.$slots, "description", { key: 0 }) : ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("p", empty2_hoisted_2, (0,external_Vue_.toDisplayString)((0,external_Vue_.unref)(emptyDescription)), 1))
        ], 2),
        _ctx.$slots.default ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
          key: 0,
          class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("bottom"))
        }, [
          (0,external_Vue_.renderSlot)(_ctx.$slots, "default")
        ], 2)) : (0,external_Vue_.createCommentVNode)("v-if", true)
      ], 2);
    };
  }
});
var Empty = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(empty2_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/empty/src/empty.vue"]]);


//# sourceMappingURL=empty2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/empty/index.mjs





const ElEmpty = (0,install/* withInstall */.nz)(Empty);


//# sourceMappingURL=index.mjs.map

// EXTERNAL MODULE: ./node_modules/element-plus/es/components/form/index.mjs + 6 modules
var components_form = __webpack_require__(20129);
;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/image-viewer/src/image-viewer.mjs





const imageViewerProps = (0,runtime/* buildProps */.o8)({
  urlList: {
    type: (0,runtime/* definePropType */.Cq)(Array),
    default: () => (0,typescript/* mutable */.N)([])
  },
  zIndex: {
    type: Number
  },
  initialIndex: {
    type: Number,
    default: 0
  },
  infinite: {
    type: Boolean,
    default: true
  },
  hideOnClickModal: {
    type: Boolean,
    default: false
  },
  teleported: {
    type: Boolean,
    default: false
  },
  closeOnPressEscape: {
    type: Boolean,
    default: true
  }
});
const imageViewerEmits = {
  close: () => true,
  switch: (index) => (0,shared/* isNumber */.hj)(index)
};


//# sourceMappingURL=image-viewer.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/utils/browser.mjs


const isFirefox = () => shared/* isClient */.C5 && /firefox/i.test(window.navigator.userAgent);


//# sourceMappingURL=browser.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/image-viewer/src/image-viewer2.mjs

















const image_viewer2_hoisted_1 = ["src"];
const image_viewer2_default_ = {
  name: "ElImageViewer"
};
const image_viewer2_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...image_viewer2_default_,
  props: imageViewerProps,
  emits: imageViewerEmits,
  setup(__props, { emit }) {
    const props = __props;
    const modes = {
      CONTAIN: {
        name: "contain",
        icon: (0,external_Vue_.markRaw)(dist/* FullScreen */.ITT)
      },
      ORIGINAL: {
        name: "original",
        icon: (0,external_Vue_.markRaw)(dist/* ScaleToOriginal */.rGh)
      }
    };
    const mousewheelEventName = isFirefox() ? "DOMMouseScroll" : "mousewheel";
    const { t } = useLocale();
    const ns = (0,use_namespace/* useNamespace */.s)("image-viewer");
    const { nextZIndex } = useZIndex();
    const wrapper = (0,external_Vue_.ref)();
    const imgRefs = (0,external_Vue_.ref)([]);
    const scopeEventListener = (0,external_Vue_.effectScope)();
    const loading = (0,external_Vue_.ref)(true);
    const index = (0,external_Vue_.ref)(props.initialIndex);
    const mode = (0,external_Vue_.shallowRef)(modes.CONTAIN);
    const transform = (0,external_Vue_.ref)({
      scale: 1,
      deg: 0,
      offsetX: 0,
      offsetY: 0,
      enableTransition: false
    });
    const isSingle = (0,external_Vue_.computed)(() => {
      const { urlList } = props;
      return urlList.length <= 1;
    });
    const isFirst = (0,external_Vue_.computed)(() => {
      return index.value === 0;
    });
    const isLast = (0,external_Vue_.computed)(() => {
      return index.value === props.urlList.length - 1;
    });
    const currentImg = (0,external_Vue_.computed)(() => {
      return props.urlList[index.value];
    });
    const imgStyle = (0,external_Vue_.computed)(() => {
      const { scale, deg, offsetX, offsetY, enableTransition } = transform.value;
      let translateX = offsetX / scale;
      let translateY = offsetY / scale;
      switch (deg % 360) {
        case 90:
        case -270:
          ;
          [translateX, translateY] = [translateY, -translateX];
          break;
        case 180:
        case -180:
          ;
          [translateX, translateY] = [-translateX, -translateY];
          break;
        case 270:
        case -90:
          ;
          [translateX, translateY] = [-translateY, translateX];
          break;
      }
      const style = {
        transform: `scale(${scale}) rotate(${deg}deg) translate(${translateX}px, ${translateY}px)`,
        transition: enableTransition ? "transform .3s" : ""
      };
      if (mode.value.name === modes.CONTAIN.name) {
        style.maxWidth = style.maxHeight = "100%";
      }
      return style;
    });
    const computedZIndex = (0,external_Vue_.computed)(() => {
      return (0,shared/* isNumber */.hj)(props.zIndex) ? props.zIndex : nextZIndex();
    });
    function hide() {
      unregisterEventListener();
      emit("close");
    }
    function registerEventListener() {
      const keydownHandler = (0,throttle/* default */.Z)((e) => {
        switch (e.code) {
          case aria_EVENT_CODE.esc:
            props.closeOnPressEscape && hide();
            break;
          case aria_EVENT_CODE.space:
            toggleMode();
            break;
          case aria_EVENT_CODE.left:
            prev();
            break;
          case aria_EVENT_CODE.up:
            handleActions("zoomIn");
            break;
          case aria_EVENT_CODE.right:
            next();
            break;
          case aria_EVENT_CODE.down:
            handleActions("zoomOut");
            break;
        }
      });
      const mousewheelHandler = (0,throttle/* default */.Z)((e) => {
        const delta = e.wheelDelta ? e.wheelDelta : -e.detail;
        if (delta > 0) {
          handleActions("zoomIn", {
            zoomRate: 1.2,
            enableTransition: false
          });
        } else {
          handleActions("zoomOut", {
            zoomRate: 1.2,
            enableTransition: false
          });
        }
      });
      scopeEventListener.run(() => {
        (0,core/* useEventListener */.ORN)(document, "keydown", keydownHandler);
        (0,core/* useEventListener */.ORN)(document, mousewheelEventName, mousewheelHandler);
      });
    }
    function unregisterEventListener() {
      scopeEventListener.stop();
    }
    function handleImgLoad() {
      loading.value = false;
    }
    function handleImgError(e) {
      loading.value = false;
      e.target.alt = t("el.image.error");
    }
    function handleMouseDown(e) {
      if (loading.value || e.button !== 0 || !wrapper.value)
        return;
      transform.value.enableTransition = false;
      const { offsetX, offsetY } = transform.value;
      const startX = e.pageX;
      const startY = e.pageY;
      const dragHandler = (0,throttle/* default */.Z)((ev) => {
        transform.value = {
          ...transform.value,
          offsetX: offsetX + ev.pageX - startX,
          offsetY: offsetY + ev.pageY - startY
        };
      });
      const removeMousemove = (0,core/* useEventListener */.ORN)(document, "mousemove", dragHandler);
      (0,core/* useEventListener */.ORN)(document, "mouseup", () => {
        removeMousemove();
      });
      e.preventDefault();
    }
    function reset() {
      transform.value = {
        scale: 1,
        deg: 0,
        offsetX: 0,
        offsetY: 0,
        enableTransition: false
      };
    }
    function toggleMode() {
      if (loading.value)
        return;
      const modeNames = (0,objects/* keysOf */.uc)(modes);
      const modeValues = Object.values(modes);
      const currentMode = mode.value.name;
      const index2 = modeValues.findIndex((i) => i.name === currentMode);
      const nextIndex = (index2 + 1) % modeNames.length;
      mode.value = modes[modeNames[nextIndex]];
      reset();
    }
    function prev() {
      if (isFirst.value && !props.infinite)
        return;
      const len = props.urlList.length;
      index.value = (index.value - 1 + len) % len;
    }
    function next() {
      if (isLast.value && !props.infinite)
        return;
      const len = props.urlList.length;
      index.value = (index.value + 1) % len;
    }
    function handleActions(action, options = {}) {
      if (loading.value)
        return;
      const { zoomRate, rotateDeg, enableTransition } = {
        zoomRate: 1.4,
        rotateDeg: 90,
        enableTransition: true,
        ...options
      };
      switch (action) {
        case "zoomOut":
          if (transform.value.scale > 0.2) {
            transform.value.scale = Number.parseFloat((transform.value.scale / zoomRate).toFixed(3));
          }
          break;
        case "zoomIn":
          if (transform.value.scale < 7) {
            transform.value.scale = Number.parseFloat((transform.value.scale * zoomRate).toFixed(3));
          }
          break;
        case "clockwise":
          transform.value.deg += rotateDeg;
          break;
        case "anticlockwise":
          transform.value.deg -= rotateDeg;
          break;
      }
      transform.value.enableTransition = enableTransition;
    }
    (0,external_Vue_.watch)(currentImg, () => {
      (0,external_Vue_.nextTick)(() => {
        const $img = imgRefs.value[0];
        if (!($img == null ? void 0 : $img.complete)) {
          loading.value = true;
        }
      });
    });
    (0,external_Vue_.watch)(index, (val) => {
      reset();
      emit("switch", val);
    });
    (0,external_Vue_.onMounted)(() => {
      var _a, _b;
      registerEventListener();
      (_b = (_a = wrapper.value) == null ? void 0 : _a.focus) == null ? void 0 : _b.call(_a);
    });
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(external_Vue_.Teleport, {
        to: "body",
        disabled: !_ctx.teleported
      }, [
        (0,external_Vue_.createVNode)(external_Vue_.Transition, {
          name: "viewer-fade",
          appear: ""
        }, {
          default: (0,external_Vue_.withCtx)(() => [
            (0,external_Vue_.createElementVNode)("div", {
              ref_key: "wrapper",
              ref: wrapper,
              tabindex: -1,
              class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("wrapper")),
              style: (0,external_Vue_.normalizeStyle)({ zIndex: (0,external_Vue_.unref)(computedZIndex) })
            }, [
              (0,external_Vue_.createElementVNode)("div", {
                class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("mask")),
                onClick: _cache[0] || (_cache[0] = (0,external_Vue_.withModifiers)(($event) => _ctx.hideOnClickModal && hide(), ["self"]))
              }, null, 2),
              (0,external_Vue_.createCommentVNode)(" CLOSE "),
              (0,external_Vue_.createElementVNode)("span", {
                class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(ns).e("btn"), (0,external_Vue_.unref)(ns).e("close")]),
                onClick: hide
              }, [
                (0,external_Vue_.createVNode)((0,external_Vue_.unref)(components_icon/* ElIcon */.gn), null, {
                  default: (0,external_Vue_.withCtx)(() => [
                    (0,external_Vue_.createVNode)((0,external_Vue_.unref)(dist/* Close */.x8P))
                  ]),
                  _: 1
                })
              ], 2),
              (0,external_Vue_.createCommentVNode)(" ARROW "),
              !(0,external_Vue_.unref)(isSingle) ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, { key: 0 }, [
                (0,external_Vue_.createElementVNode)("span", {
                  class: (0,external_Vue_.normalizeClass)([
                    (0,external_Vue_.unref)(ns).e("btn"),
                    (0,external_Vue_.unref)(ns).e("prev"),
                    (0,external_Vue_.unref)(ns).is("disabled", !_ctx.infinite && (0,external_Vue_.unref)(isFirst))
                  ]),
                  onClick: prev
                }, [
                  (0,external_Vue_.createVNode)((0,external_Vue_.unref)(components_icon/* ElIcon */.gn), null, {
                    default: (0,external_Vue_.withCtx)(() => [
                      (0,external_Vue_.createVNode)((0,external_Vue_.unref)(dist/* ArrowLeft */.XdH))
                    ]),
                    _: 1
                  })
                ], 2),
                (0,external_Vue_.createElementVNode)("span", {
                  class: (0,external_Vue_.normalizeClass)([
                    (0,external_Vue_.unref)(ns).e("btn"),
                    (0,external_Vue_.unref)(ns).e("next"),
                    (0,external_Vue_.unref)(ns).is("disabled", !_ctx.infinite && (0,external_Vue_.unref)(isLast))
                  ]),
                  onClick: next
                }, [
                  (0,external_Vue_.createVNode)((0,external_Vue_.unref)(components_icon/* ElIcon */.gn), null, {
                    default: (0,external_Vue_.withCtx)(() => [
                      (0,external_Vue_.createVNode)((0,external_Vue_.unref)(dist/* ArrowRight */.olP))
                    ]),
                    _: 1
                  })
                ], 2)
              ], 64)) : (0,external_Vue_.createCommentVNode)("v-if", true),
              (0,external_Vue_.createCommentVNode)(" ACTIONS "),
              (0,external_Vue_.createElementVNode)("div", {
                class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(ns).e("btn"), (0,external_Vue_.unref)(ns).e("actions")])
              }, [
                (0,external_Vue_.createElementVNode)("div", {
                  class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("actions__inner"))
                }, [
                  (0,external_Vue_.createVNode)((0,external_Vue_.unref)(components_icon/* ElIcon */.gn), {
                    onClick: _cache[1] || (_cache[1] = ($event) => handleActions("zoomOut"))
                  }, {
                    default: (0,external_Vue_.withCtx)(() => [
                      (0,external_Vue_.createVNode)((0,external_Vue_.unref)(dist/* ZoomOut */.H9A))
                    ]),
                    _: 1
                  }),
                  (0,external_Vue_.createVNode)((0,external_Vue_.unref)(components_icon/* ElIcon */.gn), {
                    onClick: _cache[2] || (_cache[2] = ($event) => handleActions("zoomIn"))
                  }, {
                    default: (0,external_Vue_.withCtx)(() => [
                      (0,external_Vue_.createVNode)((0,external_Vue_.unref)(dist/* ZoomIn */.DYM))
                    ]),
                    _: 1
                  }),
                  (0,external_Vue_.createElementVNode)("i", {
                    class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("actions__divider"))
                  }, null, 2),
                  (0,external_Vue_.createVNode)((0,external_Vue_.unref)(components_icon/* ElIcon */.gn), { onClick: toggleMode }, {
                    default: (0,external_Vue_.withCtx)(() => [
                      ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.resolveDynamicComponent)((0,external_Vue_.unref)(mode).icon)))
                    ]),
                    _: 1
                  }),
                  (0,external_Vue_.createElementVNode)("i", {
                    class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("actions__divider"))
                  }, null, 2),
                  (0,external_Vue_.createVNode)((0,external_Vue_.unref)(components_icon/* ElIcon */.gn), {
                    onClick: _cache[3] || (_cache[3] = ($event) => handleActions("anticlockwise"))
                  }, {
                    default: (0,external_Vue_.withCtx)(() => [
                      (0,external_Vue_.createVNode)((0,external_Vue_.unref)(dist/* RefreshLeft */.Ufu))
                    ]),
                    _: 1
                  }),
                  (0,external_Vue_.createVNode)((0,external_Vue_.unref)(components_icon/* ElIcon */.gn), {
                    onClick: _cache[4] || (_cache[4] = ($event) => handleActions("clockwise"))
                  }, {
                    default: (0,external_Vue_.withCtx)(() => [
                      (0,external_Vue_.createVNode)((0,external_Vue_.unref)(dist/* RefreshRight */.Vyf))
                    ]),
                    _: 1
                  })
                ], 2)
              ], 2),
              (0,external_Vue_.createCommentVNode)(" CANVAS "),
              (0,external_Vue_.createElementVNode)("div", {
                class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("canvas"))
              }, [
                ((0,external_Vue_.openBlock)(true), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, null, (0,external_Vue_.renderList)(_ctx.urlList, (url, i) => {
                  return (0,external_Vue_.withDirectives)(((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("img", {
                    ref_for: true,
                    ref: (el) => imgRefs.value[i] = el,
                    key: url,
                    src: url,
                    style: (0,external_Vue_.normalizeStyle)((0,external_Vue_.unref)(imgStyle)),
                    class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("img")),
                    onLoad: handleImgLoad,
                    onError: handleImgError,
                    onMousedown: handleMouseDown
                  }, null, 46, image_viewer2_hoisted_1)), [
                    [external_Vue_.vShow, i === index.value]
                  ]);
                }), 128))
              ], 2),
              (0,external_Vue_.renderSlot)(_ctx.$slots, "default")
            ], 6)
          ]),
          _: 3
        })
      ], 8, ["disabled"]);
    };
  }
});
var ImageViewer = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(image_viewer2_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/image-viewer/src/image-viewer.vue"]]);


//# sourceMappingURL=image-viewer2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/image-viewer/index.mjs





const ElImageViewer = (0,install/* withInstall */.nz)(ImageViewer);


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/image/src/image.mjs





const imageProps = (0,runtime/* buildProps */.o8)({
  hideOnClickModal: {
    type: Boolean,
    default: false
  },
  src: {
    type: String,
    default: ""
  },
  fit: {
    type: String,
    values: ["", "contain", "cover", "fill", "none", "scale-down"],
    default: ""
  },
  loading: {
    type: String,
    values: ["eager", "lazy"]
  },
  lazy: {
    type: Boolean,
    default: false
  },
  scrollContainer: {
    type: (0,runtime/* definePropType */.Cq)([String, Object])
  },
  previewSrcList: {
    type: (0,runtime/* definePropType */.Cq)(Array),
    default: () => (0,typescript/* mutable */.N)([])
  },
  previewTeleported: {
    type: Boolean,
    default: false
  },
  zIndex: {
    type: Number
  },
  initialIndex: {
    type: Number,
    default: 0
  },
  infinite: {
    type: Boolean,
    default: true
  },
  closeOnPressEscape: {
    type: Boolean,
    default: true
  }
});
const imageEmits = {
  load: (evt) => evt instanceof Event,
  error: (evt) => evt instanceof Event,
  switch: (val) => (0,shared/* isNumber */.hj)(val),
  close: () => true
};


//# sourceMappingURL=image.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/image/src/image2.mjs















const image2_hoisted_1 = ["src", "loading"];
const image2_hoisted_2 = { key: 0 };
const image2_default_ = {
  name: "ElImage",
  inheritAttrs: false
};
const image2_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...image2_default_,
  props: imageProps,
  emits: imageEmits,
  setup(__props, { emit }) {
    const props = __props;
    let prevOverflow = "";
    const { t } = useLocale();
    const ns = (0,use_namespace/* useNamespace */.s)("image");
    const rawAttrs = (0,external_Vue_.useAttrs)();
    const attrs = (0,use_attrs/* useAttrs */.l)();
    const imageSrc = (0,external_Vue_.ref)();
    const hasLoadError = (0,external_Vue_.ref)(false);
    const isLoading = (0,external_Vue_.ref)(true);
    const showViewer = (0,external_Vue_.ref)(false);
    const container = (0,external_Vue_.ref)();
    const _scrollContainer = (0,external_Vue_.ref)();
    const supportLoading = shared/* isClient */.C5 && "loading" in HTMLImageElement.prototype;
    let stopScrollListener;
    let stopWheelListener;
    const containerStyle = (0,external_Vue_.computed)(() => rawAttrs.style);
    const imageStyle = (0,external_Vue_.computed)(() => {
      const { fit } = props;
      if (shared/* isClient */.C5 && fit) {
        return { objectFit: fit };
      }
      return {};
    });
    const preview = (0,external_Vue_.computed)(() => {
      const { previewSrcList } = props;
      return Array.isArray(previewSrcList) && previewSrcList.length > 0;
    });
    const imageIndex = (0,external_Vue_.computed)(() => {
      const { previewSrcList, initialIndex } = props;
      let previewIndex = initialIndex;
      if (initialIndex > previewSrcList.length - 1) {
        previewIndex = 0;
      }
      return previewIndex;
    });
    const isManual = (0,external_Vue_.computed)(() => {
      if (props.loading === "eager")
        return false;
      return !supportLoading && props.loading === "lazy" || props.lazy;
    });
    const loadImage = () => {
      if (!shared/* isClient */.C5)
        return;
      isLoading.value = true;
      hasLoadError.value = false;
      imageSrc.value = props.src;
    };
    function handleLoad(event) {
      isLoading.value = false;
      hasLoadError.value = false;
      emit("load", event);
    }
    function handleError(event) {
      isLoading.value = false;
      hasLoadError.value = true;
      emit("error", event);
    }
    function handleLazyLoad() {
      if (isInContainer(container.value, _scrollContainer.value)) {
        loadImage();
        removeLazyLoadListener();
      }
    }
    const lazyLoadHandler = (0,shared/* useThrottleFn */.vA)(handleLazyLoad, 200);
    async function addLazyLoadListener() {
      var _a;
      if (!shared/* isClient */.C5)
        return;
      await (0,external_Vue_.nextTick)();
      const { scrollContainer } = props;
      if ((0,types/* isElement */.kK)(scrollContainer)) {
        _scrollContainer.value = scrollContainer;
      } else if ((0,shared_esm_bundler/* isString */.HD)(scrollContainer) && scrollContainer !== "") {
        _scrollContainer.value = (_a = document.querySelector(scrollContainer)) != null ? _a : void 0;
      } else if (container.value) {
        _scrollContainer.value = getScrollContainer(container.value);
      }
      if (_scrollContainer.value) {
        stopScrollListener = (0,core/* useEventListener */.ORN)(_scrollContainer, "scroll", lazyLoadHandler);
        setTimeout(() => handleLazyLoad(), 100);
      }
    }
    function removeLazyLoadListener() {
      if (!shared/* isClient */.C5 || !_scrollContainer.value || !lazyLoadHandler)
        return;
      stopScrollListener == null ? void 0 : stopScrollListener();
      _scrollContainer.value = void 0;
    }
    function wheelHandler(e) {
      if (!e.ctrlKey)
        return;
      if (e.deltaY < 0) {
        e.preventDefault();
        return false;
      } else if (e.deltaY > 0) {
        e.preventDefault();
        return false;
      }
    }
    function clickHandler() {
      if (!preview.value)
        return;
      stopWheelListener = (0,core/* useEventListener */.ORN)("wheel", wheelHandler, {
        passive: false
      });
      prevOverflow = document.body.style.overflow;
      document.body.style.overflow = "hidden";
      showViewer.value = true;
    }
    function closeViewer() {
      stopWheelListener == null ? void 0 : stopWheelListener();
      document.body.style.overflow = prevOverflow;
      showViewer.value = false;
      emit("close");
    }
    function switchViewer(val) {
      emit("switch", val);
    }
    (0,external_Vue_.watch)(() => props.src, () => {
      if (isManual.value) {
        isLoading.value = true;
        hasLoadError.value = false;
        removeLazyLoadListener();
        addLazyLoadListener();
      } else {
        loadImage();
      }
    });
    (0,external_Vue_.onMounted)(() => {
      if (isManual.value) {
        addLazyLoadListener();
      } else {
        loadImage();
      }
    });
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
        ref_key: "container",
        ref: container,
        class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(ns).b(), _ctx.$attrs.class]),
        style: (0,external_Vue_.normalizeStyle)((0,external_Vue_.unref)(containerStyle))
      }, [
        imageSrc.value !== void 0 && !hasLoadError.value ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("img", (0,external_Vue_.mergeProps)({ key: 0 }, (0,external_Vue_.unref)(attrs), {
          src: imageSrc.value,
          loading: _ctx.loading,
          style: (0,external_Vue_.unref)(imageStyle),
          class: [
            (0,external_Vue_.unref)(ns).e("inner"),
            (0,external_Vue_.unref)(preview) && (0,external_Vue_.unref)(ns).e("preview"),
            isLoading.value && (0,external_Vue_.unref)(ns).is("loading")
          ],
          onClick: clickHandler,
          onLoad: handleLoad,
          onError: handleError
        }), null, 16, image2_hoisted_1)) : (0,external_Vue_.createCommentVNode)("v-if", true),
        isLoading.value || hasLoadError.value ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
          key: 1,
          class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("wrapper"))
        }, [
          isLoading.value ? (0,external_Vue_.renderSlot)(_ctx.$slots, "placeholder", { key: 0 }, () => [
            (0,external_Vue_.createElementVNode)("div", {
              class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("placeholder"))
            }, null, 2)
          ]) : hasLoadError.value ? (0,external_Vue_.renderSlot)(_ctx.$slots, "error", { key: 1 }, () => [
            (0,external_Vue_.createElementVNode)("div", {
              class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("error"))
            }, (0,external_Vue_.toDisplayString)((0,external_Vue_.unref)(t)("el.image.error")), 3)
          ]) : (0,external_Vue_.createCommentVNode)("v-if", true)
        ], 2)) : (0,external_Vue_.createCommentVNode)("v-if", true),
        (0,external_Vue_.unref)(preview) ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, { key: 2 }, [
          showViewer.value ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.unref)(ElImageViewer), {
            key: 0,
            "z-index": _ctx.zIndex,
            "initial-index": (0,external_Vue_.unref)(imageIndex),
            infinite: _ctx.infinite,
            "url-list": _ctx.previewSrcList,
            "hide-on-click-modal": _ctx.hideOnClickModal,
            teleported: _ctx.previewTeleported,
            "close-on-press-escape": _ctx.closeOnPressEscape,
            onClose: closeViewer,
            onSwitch: switchViewer
          }, {
            default: (0,external_Vue_.withCtx)(() => [
              _ctx.$slots.viewer ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", image2_hoisted_2, [
                (0,external_Vue_.renderSlot)(_ctx.$slots, "viewer")
              ])) : (0,external_Vue_.createCommentVNode)("v-if", true)
            ]),
            _: 3
          }, 8, ["z-index", "initial-index", "infinite", "url-list", "hide-on-click-modal", "teleported", "close-on-press-escape"])) : (0,external_Vue_.createCommentVNode)("v-if", true)
        ], 64)) : (0,external_Vue_.createCommentVNode)("v-if", true)
      ], 6);
    };
  }
});
var Image = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(image2_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/image/src/image.vue"]]);


//# sourceMappingURL=image2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/image/index.mjs





const ElImage = (0,install/* withInstall */.nz)(Image);


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/input-number/src/input-number.mjs









const inputNumberProps = (0,runtime/* buildProps */.o8)({
  id: {
    type: String,
    default: void 0
  },
  step: {
    type: Number,
    default: 1
  },
  stepStrictly: Boolean,
  max: {
    type: Number,
    default: Number.POSITIVE_INFINITY
  },
  min: {
    type: Number,
    default: Number.NEGATIVE_INFINITY
  },
  modelValue: Number,
  disabled: Boolean,
  size: use_common_props/* useSizeProp */.Pp,
  controls: {
    type: Boolean,
    default: true
  },
  controlsPosition: {
    type: String,
    default: "",
    values: ["", "right"]
  },
  valueOnClear: {
    type: [String, Number, null],
    validator: (val) => val === null || (0,shared/* isNumber */.hj)(val) || ["min", "max"].includes(val),
    default: null
  },
  name: String,
  label: String,
  placeholder: String,
  precision: {
    type: Number,
    validator: (val) => val >= 0 && val === Number.parseInt(`${val}`, 10)
  }
});
const inputNumberEmits = {
  [constants_event/* CHANGE_EVENT */.O7]: (prev, cur) => prev !== cur,
  blur: (e) => e instanceof FocusEvent,
  focus: (e) => e instanceof FocusEvent,
  [constants_event/* INPUT_EVENT */.e_]: (val) => (0,shared/* isNumber */.hj)(val) || (0,lodash_es_isNil/* default */.Z)(val),
  [constants_event/* UPDATE_MODEL_EVENT */.f_]: (val) => (0,shared/* isNumber */.hj)(val) || (0,lodash_es_isNil/* default */.Z)(val)
};


//# sourceMappingURL=input-number.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/input-number/src/input-number2.mjs




















const input_number2_hoisted_1 = ["aria-label", "onKeydown"];
const input_number2_hoisted_2 = ["aria-label", "onKeydown"];
const input_number2_default_ = {
  name: "ElInputNumber"
};
const input_number2_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...input_number2_default_,
  props: inputNumberProps,
  emits: inputNumberEmits,
  setup(__props, { expose, emit }) {
    const props = __props;
    const { t } = useLocale();
    const ns = (0,use_namespace/* useNamespace */.s)("input-number");
    const input = (0,external_Vue_.ref)();
    const data = (0,external_Vue_.reactive)({
      currentValue: props.modelValue,
      userInput: null
    });
    const { formItem } = (0,use_form_item/* useFormItem */.A)();
    const minDisabled = (0,external_Vue_.computed)(() => (0,shared/* isNumber */.hj)(props.modelValue) && ensurePrecision(props.modelValue, -1) < props.min);
    const maxDisabled = (0,external_Vue_.computed)(() => (0,shared/* isNumber */.hj)(props.modelValue) && ensurePrecision(props.modelValue) > props.max);
    const numPrecision = (0,external_Vue_.computed)(() => {
      const stepPrecision = getPrecision(props.step);
      if (!(0,types/* isUndefined */.o8)(props.precision)) {
        if (stepPrecision > props.precision) {
          (0,error/* debugWarn */.N)("InputNumber", "precision should not be less than the decimal places of step");
        }
        return props.precision;
      } else {
        return Math.max(getPrecision(props.modelValue), stepPrecision);
      }
    });
    const controlsAtRight = (0,external_Vue_.computed)(() => {
      return props.controls && props.controlsPosition === "right";
    });
    const inputNumberSize = (0,use_common_props/* useSize */.tH)();
    const inputNumberDisabled = (0,use_common_props/* useDisabled */.B4)();
    const displayValue = (0,external_Vue_.computed)(() => {
      if (data.userInput !== null) {
        return data.userInput;
      }
      let currentValue = data.currentValue;
      if ((0,lodash_es_isNil/* default */.Z)(currentValue))
        return "";
      if ((0,shared/* isNumber */.hj)(currentValue)) {
        if (Number.isNaN(currentValue))
          return "";
        if (!(0,types/* isUndefined */.o8)(props.precision)) {
          currentValue = currentValue.toFixed(props.precision);
        }
      }
      return currentValue;
    });
    const toPrecision = (num, pre) => {
      if ((0,types/* isUndefined */.o8)(pre))
        pre = numPrecision.value;
      if (pre === 0)
        return Math.round(num);
      let snum = String(num);
      const pointPos = snum.indexOf(".");
      if (pointPos === -1)
        return num;
      const nums = snum.replace(".", "").split("");
      const datum = nums[pointPos + pre];
      if (!datum)
        return num;
      const length = snum.length;
      if (snum.charAt(length - 1) === "5") {
        snum = `${snum.slice(0, Math.max(0, length - 1))}6`;
      }
      return Number.parseFloat(Number(snum).toFixed(pre));
    };
    const getPrecision = (value) => {
      if ((0,lodash_es_isNil/* default */.Z)(value))
        return 0;
      const valueString = value.toString();
      const dotPosition = valueString.indexOf(".");
      let precision = 0;
      if (dotPosition !== -1) {
        precision = valueString.length - dotPosition - 1;
      }
      return precision;
    };
    const ensurePrecision = (val, coefficient = 1) => {
      if (!(0,shared/* isNumber */.hj)(val))
        return data.currentValue;
      return toPrecision(val + props.step * coefficient);
    };
    const increase = () => {
      if (inputNumberDisabled.value || maxDisabled.value)
        return;
      const value = props.modelValue || 0;
      const newVal = ensurePrecision(value);
      setCurrentValue(newVal);
    };
    const decrease = () => {
      if (inputNumberDisabled.value || minDisabled.value)
        return;
      const value = props.modelValue || 0;
      const newVal = ensurePrecision(value, -1);
      setCurrentValue(newVal);
    };
    const verifyValue = (value, update) => {
      const { max, min, step, precision, stepStrictly, valueOnClear } = props;
      let newVal = Number(value);
      if ((0,lodash_es_isNil/* default */.Z)(value) || Number.isNaN(newVal)) {
        return null;
      }
      if (value === "") {
        if (valueOnClear === null) {
          return null;
        }
        newVal = (0,shared_esm_bundler/* isString */.HD)(valueOnClear) ? { min, max }[valueOnClear] : valueOnClear;
      }
      if (stepStrictly) {
        newVal = Math.round(newVal / step) * step;
      }
      if (!(0,types/* isUndefined */.o8)(precision)) {
        newVal = toPrecision(newVal, precision);
      }
      if (newVal > max || newVal < min) {
        newVal = newVal > max ? max : min;
        update && emit("update:modelValue", newVal);
      }
      return newVal;
    };
    const setCurrentValue = (value) => {
      var _a;
      const oldVal = data.currentValue;
      const newVal = verifyValue(value);
      if (oldVal === newVal)
        return;
      data.userInput = null;
      emit("update:modelValue", newVal);
      emit("input", newVal);
      emit("change", newVal, oldVal);
      (_a = formItem == null ? void 0 : formItem.validate) == null ? void 0 : _a.call(formItem, "change").catch((err) => (0,error/* debugWarn */.N)(err));
      data.currentValue = newVal;
    };
    const handleInput = (value) => {
      return data.userInput = value;
    };
    const handleInputChange = (value) => {
      const newVal = value !== "" ? Number(value) : "";
      if ((0,shared/* isNumber */.hj)(newVal) && !Number.isNaN(newVal) || value === "") {
        setCurrentValue(newVal);
      }
      data.userInput = null;
    };
    const focus = () => {
      var _a, _b;
      (_b = (_a = input.value) == null ? void 0 : _a.focus) == null ? void 0 : _b.call(_a);
    };
    const blur = () => {
      var _a, _b;
      (_b = (_a = input.value) == null ? void 0 : _a.blur) == null ? void 0 : _b.call(_a);
    };
    const handleFocus = (event) => {
      emit("focus", event);
    };
    const handleBlur = (event) => {
      var _a;
      emit("blur", event);
      (_a = formItem == null ? void 0 : formItem.validate) == null ? void 0 : _a.call(formItem, "blur").catch((err) => (0,error/* debugWarn */.N)(err));
    };
    (0,external_Vue_.watch)(() => props.modelValue, (value) => {
      data.currentValue = verifyValue(value, true);
      data.userInput = null;
    }, { immediate: true });
    (0,external_Vue_.onMounted)(() => {
      var _a;
      const { min, max, modelValue } = props;
      const innerInput = (_a = input.value) == null ? void 0 : _a.input;
      innerInput.setAttribute("role", "spinbutton");
      if (Number.isFinite(max)) {
        innerInput.setAttribute("aria-valuemax", String(max));
      } else {
        innerInput.removeAttribute("aria-valuemax");
      }
      if (Number.isFinite(min)) {
        innerInput.setAttribute("aria-valuemin", String(min));
      } else {
        innerInput.removeAttribute("aria-valuemin");
      }
      innerInput.setAttribute("aria-valuenow", String(data.currentValue));
      innerInput.setAttribute("aria-disabled", String(inputNumberDisabled.value));
      if (!(0,shared/* isNumber */.hj)(modelValue) && modelValue != null) {
        let val = Number(modelValue);
        if (Number.isNaN(val)) {
          val = null;
        }
        emit("update:modelValue", val);
      }
    });
    (0,external_Vue_.onUpdated)(() => {
      var _a;
      const innerInput = (_a = input.value) == null ? void 0 : _a.input;
      innerInput == null ? void 0 : innerInput.setAttribute("aria-valuenow", `${data.currentValue}`);
    });
    expose({
      focus,
      blur
    });
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
        class: (0,external_Vue_.normalizeClass)([
          (0,external_Vue_.unref)(ns).b(),
          (0,external_Vue_.unref)(ns).m((0,external_Vue_.unref)(inputNumberSize)),
          (0,external_Vue_.unref)(ns).is("disabled", (0,external_Vue_.unref)(inputNumberDisabled)),
          (0,external_Vue_.unref)(ns).is("without-controls", !_ctx.controls),
          (0,external_Vue_.unref)(ns).is("controls-right", (0,external_Vue_.unref)(controlsAtRight))
        ]),
        onDragstart: _cache[0] || (_cache[0] = (0,external_Vue_.withModifiers)(() => {
        }, ["prevent"]))
      }, [
        _ctx.controls ? (0,external_Vue_.withDirectives)(((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("span", {
          key: 0,
          role: "button",
          "aria-label": (0,external_Vue_.unref)(t)("el.inputNumber.decrease"),
          class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(ns).e("decrease"), (0,external_Vue_.unref)(ns).is("disabled", (0,external_Vue_.unref)(minDisabled))]),
          onKeydown: (0,external_Vue_.withKeys)(decrease, ["enter"])
        }, [
          (0,external_Vue_.createVNode)((0,external_Vue_.unref)(components_icon/* ElIcon */.gn), null, {
            default: (0,external_Vue_.withCtx)(() => [
              (0,external_Vue_.unref)(controlsAtRight) ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.unref)(dist/* ArrowDown */.K5e), { key: 0 })) : ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.unref)(dist/* Minus */.WF_), { key: 1 }))
            ]),
            _: 1
          })
        ], 42, input_number2_hoisted_1)), [
          [(0,external_Vue_.unref)(vRepeatClick), decrease]
        ]) : (0,external_Vue_.createCommentVNode)("v-if", true),
        _ctx.controls ? (0,external_Vue_.withDirectives)(((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("span", {
          key: 1,
          role: "button",
          "aria-label": (0,external_Vue_.unref)(t)("el.inputNumber.increase"),
          class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(ns).e("increase"), (0,external_Vue_.unref)(ns).is("disabled", (0,external_Vue_.unref)(maxDisabled))]),
          onKeydown: (0,external_Vue_.withKeys)(increase, ["enter"])
        }, [
          (0,external_Vue_.createVNode)((0,external_Vue_.unref)(components_icon/* ElIcon */.gn), null, {
            default: (0,external_Vue_.withCtx)(() => [
              (0,external_Vue_.unref)(controlsAtRight) ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.unref)(dist/* ArrowUp */.a2Z), { key: 0 })) : ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.unref)(dist/* Plus */.v37), { key: 1 }))
            ]),
            _: 1
          })
        ], 42, input_number2_hoisted_2)), [
          [(0,external_Vue_.unref)(vRepeatClick), increase]
        ]) : (0,external_Vue_.createCommentVNode)("v-if", true),
        (0,external_Vue_.createVNode)((0,external_Vue_.unref)(components_input/* ElInput */.EZ), {
          id: _ctx.id,
          ref_key: "input",
          ref: input,
          type: "number",
          step: _ctx.step,
          "model-value": (0,external_Vue_.unref)(displayValue),
          placeholder: _ctx.placeholder,
          disabled: (0,external_Vue_.unref)(inputNumberDisabled),
          size: (0,external_Vue_.unref)(inputNumberSize),
          max: _ctx.max,
          min: _ctx.min,
          name: _ctx.name,
          label: _ctx.label,
          "validate-event": false,
          onKeydown: [
            (0,external_Vue_.withKeys)((0,external_Vue_.withModifiers)(increase, ["prevent"]), ["up"]),
            (0,external_Vue_.withKeys)((0,external_Vue_.withModifiers)(decrease, ["prevent"]), ["down"])
          ],
          onBlur: handleBlur,
          onFocus: handleFocus,
          onInput: handleInput,
          onChange: handleInputChange
        }, null, 8, ["id", "step", "model-value", "placeholder", "disabled", "size", "max", "min", "name", "label", "onKeydown"])
      ], 34);
    };
  }
});
var InputNumber = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(input_number2_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/input-number/src/input-number.vue"]]);


//# sourceMappingURL=input-number2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/input-number/index.mjs





const ElInputNumber = (0,install/* withInstall */.nz)(InputNumber);


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/link/src/link.mjs




const linkProps = (0,runtime/* buildProps */.o8)({
  type: {
    type: String,
    values: ["primary", "success", "warning", "info", "danger", "default"],
    default: "default"
  },
  underline: {
    type: Boolean,
    default: true
  },
  disabled: { type: Boolean, default: false },
  href: { type: String, default: "" },
  icon: {
    type: icon/* iconPropType */.AA,
    default: ""
  }
});
const linkEmits = {
  click: (evt) => evt instanceof MouseEvent
};


//# sourceMappingURL=link.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/link/src/link2.mjs







const link2_hoisted_1 = ["href"];
const link2_default_ = {
  name: "ElLink"
};
const link2_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...link2_default_,
  props: linkProps,
  emits: linkEmits,
  setup(__props, { emit }) {
    const props = __props;
    const ns = (0,use_namespace/* useNamespace */.s)("link");
    function handleClick(event) {
      if (!props.disabled)
        emit("click", event);
    }
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("a", {
        class: (0,external_Vue_.normalizeClass)([
          (0,external_Vue_.unref)(ns).b(),
          (0,external_Vue_.unref)(ns).m(_ctx.type),
          (0,external_Vue_.unref)(ns).is("disabled", _ctx.disabled),
          (0,external_Vue_.unref)(ns).is("underline", _ctx.underline && !_ctx.disabled)
        ]),
        href: _ctx.disabled || !_ctx.href ? void 0 : _ctx.href,
        onClick: handleClick
      }, [
        _ctx.icon ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.unref)(components_icon/* ElIcon */.gn), { key: 0 }, {
          default: (0,external_Vue_.withCtx)(() => [
            ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.resolveDynamicComponent)(_ctx.icon)))
          ]),
          _: 1
        })) : (0,external_Vue_.createCommentVNode)("v-if", true),
        _ctx.$slots.default ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("span", {
          key: 1,
          class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("inner"))
        }, [
          (0,external_Vue_.renderSlot)(_ctx.$slots, "default")
        ], 2)) : (0,external_Vue_.createCommentVNode)("v-if", true),
        _ctx.$slots.icon ? (0,external_Vue_.renderSlot)(_ctx.$slots, "icon", { key: 2 }) : (0,external_Vue_.createCommentVNode)("v-if", true)
      ], 10, link2_hoisted_1);
    };
  }
});
var Link = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(link2_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/link/src/link.vue"]]);


//# sourceMappingURL=link2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/link/index.mjs





const ElLink = (0,install/* withInstall */.nz)(Link);


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/menu/src/utils/submenu.mjs





class SubMenu {
  constructor(parent, domNode) {
    this.parent = parent;
    this.domNode = domNode;
    this.subIndex = 0;
    this.subIndex = 0;
    this.init();
  }
  init() {
    this.subMenuItems = this.domNode.querySelectorAll("li");
    this.addListeners();
  }
  gotoSubIndex(idx) {
    if (idx === this.subMenuItems.length) {
      idx = 0;
    } else if (idx < 0) {
      idx = this.subMenuItems.length - 1;
    }
    ;
    this.subMenuItems[idx].focus();
    this.subIndex = idx;
  }
  addListeners() {
    const parentNode = this.parent.domNode;
    Array.prototype.forEach.call(this.subMenuItems, (el) => {
      el.addEventListener("keydown", (event) => {
        let prevDef = false;
        switch (event.code) {
          case aria_EVENT_CODE.down: {
            this.gotoSubIndex(this.subIndex + 1);
            prevDef = true;
            break;
          }
          case aria_EVENT_CODE.up: {
            this.gotoSubIndex(this.subIndex - 1);
            prevDef = true;
            break;
          }
          case aria_EVENT_CODE.tab: {
            triggerEvent(parentNode, "mouseleave");
            break;
          }
          case aria_EVENT_CODE.enter:
          case aria_EVENT_CODE.space: {
            prevDef = true;
            event.currentTarget.click();
            break;
          }
        }
        if (prevDef) {
          event.preventDefault();
          event.stopPropagation();
        }
        return false;
      });
    });
  }
}


//# sourceMappingURL=submenu.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/menu/src/utils/menu-item.mjs






class MenuItem {
  constructor(domNode, namespace) {
    this.domNode = domNode;
    this.submenu = null;
    this.submenu = null;
    this.init(namespace);
  }
  init(namespace) {
    this.domNode.setAttribute("tabindex", "0");
    const menuChild = this.domNode.querySelector(`.${namespace}-menu`);
    if (menuChild) {
      this.submenu = new SubMenu(this, menuChild);
    }
    this.addListeners();
  }
  addListeners() {
    this.domNode.addEventListener("keydown", (event) => {
      let prevDef = false;
      switch (event.code) {
        case aria_EVENT_CODE.down: {
          triggerEvent(event.currentTarget, "mouseenter");
          this.submenu && this.submenu.gotoSubIndex(0);
          prevDef = true;
          break;
        }
        case aria_EVENT_CODE.up: {
          triggerEvent(event.currentTarget, "mouseenter");
          this.submenu && this.submenu.gotoSubIndex(this.submenu.subMenuItems.length - 1);
          prevDef = true;
          break;
        }
        case aria_EVENT_CODE.tab: {
          triggerEvent(event.currentTarget, "mouseleave");
          break;
        }
        case aria_EVENT_CODE.enter:
        case aria_EVENT_CODE.space: {
          prevDef = true;
          event.currentTarget.click();
          break;
        }
      }
      if (prevDef) {
        event.preventDefault();
      }
    });
  }
}


//# sourceMappingURL=menu-item.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/menu/src/utils/menu-bar.mjs


class Menu {
  constructor(domNode, namespace) {
    this.domNode = domNode;
    this.init(namespace);
  }
  init(namespace) {
    const menuChildren = this.domNode.childNodes;
    Array.from(menuChildren).forEach((child) => {
      if (child.nodeType === 1) {
        new MenuItem(child, namespace);
      }
    });
  }
}


//# sourceMappingURL=menu-bar.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/menu/src/menu-collapse-transition.mjs







const menu_collapse_transition_sfc_main = (0,external_Vue_.defineComponent)({
  name: "ElMenuCollapseTransition",
  setup() {
    const ns = (0,use_namespace/* useNamespace */.s)("menu");
    const listeners = {
      onBeforeEnter: (el) => el.style.opacity = "0.2",
      onEnter(el, done) {
        (0,dom_style/* addClass */.cn)(el, `${ns.namespace.value}-opacity-transition`);
        el.style.opacity = "1";
        done();
      },
      onAfterEnter(el) {
        (0,dom_style/* removeClass */.IV)(el, `${ns.namespace.value}-opacity-transition`);
        el.style.opacity = "";
      },
      onBeforeLeave(el) {
        if (!el.dataset) {
          ;
          el.dataset = {};
        }
        if ((0,dom_style/* hasClass */.pv)(el, ns.m("collapse"))) {
          (0,dom_style/* removeClass */.IV)(el, ns.m("collapse"));
          el.dataset.oldOverflow = el.style.overflow;
          el.dataset.scrollWidth = el.clientWidth.toString();
          (0,dom_style/* addClass */.cn)(el, ns.m("collapse"));
        } else {
          (0,dom_style/* addClass */.cn)(el, ns.m("collapse"));
          el.dataset.oldOverflow = el.style.overflow;
          el.dataset.scrollWidth = el.clientWidth.toString();
          (0,dom_style/* removeClass */.IV)(el, ns.m("collapse"));
        }
        el.style.width = `${el.scrollWidth}px`;
        el.style.overflow = "hidden";
      },
      onLeave(el) {
        (0,dom_style/* addClass */.cn)(el, "horizontal-collapse-transition");
        el.style.width = `${el.dataset.scrollWidth}px`;
      }
    };
    return {
      listeners
    };
  }
});
function menu_collapse_transition_sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return (0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(external_Vue_.Transition, (0,external_Vue_.mergeProps)({ mode: "out-in" }, _ctx.listeners), {
    default: (0,external_Vue_.withCtx)(() => [
      (0,external_Vue_.renderSlot)(_ctx.$slots, "default")
    ]),
    _: 3
  }, 16);
}
var ElMenuCollapseTransition = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(menu_collapse_transition_sfc_main, [["render", menu_collapse_transition_sfc_render], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/menu/src/menu-collapse-transition.vue"]]);


//# sourceMappingURL=menu-collapse-transition.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/menu/src/use-menu.mjs


function useMenu(instance, currentIndex) {
  const indexPath = (0,external_Vue_.computed)(() => {
    let parent = instance.parent;
    const path = [currentIndex.value];
    while (parent.type.name !== "ElMenu") {
      if (parent.props.index) {
        path.unshift(parent.props.index);
      }
      parent = parent.parent;
    }
    return path;
  });
  const parentMenu = (0,external_Vue_.computed)(() => {
    let parent = instance.parent;
    while (parent && !["ElMenu", "ElSubMenu"].includes(parent.type.name)) {
      parent = parent.parent;
    }
    return parent;
  });
  return {
    parentMenu,
    indexPath
  };
}


//# sourceMappingURL=use-menu.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/menu/src/use-menu-color.mjs



function useMenuColor(props) {
  const menuBarColor = (0,external_Vue_.computed)(() => {
    const color = props.backgroundColor;
    if (!color) {
      return "";
    } else {
      return new dist_module/* TinyColor */.C(color).shade(20).toString();
    }
  });
  return menuBarColor;
}


//# sourceMappingURL=use-menu-color.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/menu/src/use-menu-css-var.mjs





const useMenuCssVar = (props, level) => {
  const ns = (0,use_namespace/* useNamespace */.s)("menu");
  return (0,external_Vue_.computed)(() => {
    return ns.cssVarBlock({
      "text-color": props.textColor || "",
      "hover-text-color": props.textColor || "",
      "bg-color": props.backgroundColor || "",
      "hover-bg-color": useMenuColor(props).value || "",
      "active-color": props.activeTextColor || "",
      level: `${level}`
    });
  });
};


//# sourceMappingURL=use-menu-css-var.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/menu/src/sub-menu.mjs














const subMenuProps = (0,runtime/* buildProps */.o8)({
  index: {
    type: String,
    required: true
  },
  showTimeout: {
    type: Number,
    default: 300
  },
  hideTimeout: {
    type: Number,
    default: 300
  },
  popperClass: String,
  disabled: Boolean,
  popperAppendToBody: {
    type: Boolean,
    default: void 0
  },
  popperOffset: {
    type: Number,
    default: 6
  }
});
const sub_menu_COMPONENT_NAME = "ElSubMenu";
var sub_menu_SubMenu = (0,external_Vue_.defineComponent)({
  name: sub_menu_COMPONENT_NAME,
  props: subMenuProps,
  setup(props, { slots, expose }) {
    const instance = (0,external_Vue_.getCurrentInstance)();
    const { indexPath, parentMenu } = useMenu(instance, (0,external_Vue_.computed)(() => props.index));
    const nsMenu = (0,use_namespace/* useNamespace */.s)("menu");
    const nsSubMenu = (0,use_namespace/* useNamespace */.s)("sub-menu");
    const rootMenu = (0,external_Vue_.inject)("rootMenu");
    if (!rootMenu)
      (0,error/* throwError */._)(sub_menu_COMPONENT_NAME, "can not inject root menu");
    const subMenu = (0,external_Vue_.inject)(`subMenu:${parentMenu.value.uid}`);
    if (!subMenu)
      (0,error/* throwError */._)(sub_menu_COMPONENT_NAME, "can not inject sub menu");
    const items = (0,external_Vue_.ref)({});
    const subMenus = (0,external_Vue_.ref)({});
    let timeout;
    const mouseInChild = (0,external_Vue_.ref)(false);
    const verticalTitleRef = (0,external_Vue_.ref)();
    const vPopper = (0,external_Vue_.ref)(null);
    const currentPlacement = (0,external_Vue_.computed)(() => mode.value === "horizontal" && isFirstLevel.value ? "bottom-start" : "right-start");
    const subMenuTitleIcon = (0,external_Vue_.computed)(() => {
      return mode.value === "horizontal" && isFirstLevel.value || mode.value === "vertical" && !rootMenu.props.collapse ? dist/* ArrowDown */.K5e : dist/* ArrowRight */.olP;
    });
    const isFirstLevel = (0,external_Vue_.computed)(() => {
      return subMenu.level === 0;
    });
    const appendToBody = (0,external_Vue_.computed)(() => {
      return props.popperAppendToBody === void 0 ? isFirstLevel.value : Boolean(props.popperAppendToBody);
    });
    const menuTransitionName = (0,external_Vue_.computed)(() => rootMenu.props.collapse ? `${nsMenu.namespace.value}-zoom-in-left` : `${nsMenu.namespace.value}-zoom-in-top`);
    const fallbackPlacements = (0,external_Vue_.computed)(() => mode.value === "horizontal" && isFirstLevel.value ? [
      "bottom-start",
      "bottom-end",
      "top-start",
      "top-end",
      "right-start",
      "left-start"
    ] : [
      "right-start",
      "left-start",
      "bottom-start",
      "bottom-end",
      "top-start",
      "top-end"
    ]);
    const opened = (0,external_Vue_.computed)(() => rootMenu.openedMenus.includes(props.index));
    const active = (0,external_Vue_.computed)(() => {
      let isActive = false;
      Object.values(items.value).forEach((item2) => {
        if (item2.active) {
          isActive = true;
        }
      });
      Object.values(subMenus.value).forEach((subItem) => {
        if (subItem.active) {
          isActive = true;
        }
      });
      return isActive;
    });
    const backgroundColor = (0,external_Vue_.computed)(() => rootMenu.props.backgroundColor || "");
    const activeTextColor = (0,external_Vue_.computed)(() => rootMenu.props.activeTextColor || "");
    const textColor = (0,external_Vue_.computed)(() => rootMenu.props.textColor || "");
    const mode = (0,external_Vue_.computed)(() => rootMenu.props.mode);
    const item = (0,external_Vue_.reactive)({
      index: props.index,
      indexPath,
      active
    });
    const titleStyle = (0,external_Vue_.computed)(() => {
      if (mode.value !== "horizontal") {
        return {
          color: textColor.value
        };
      }
      return {
        borderBottomColor: active.value ? rootMenu.props.activeTextColor ? activeTextColor.value : "" : "transparent",
        color: active.value ? activeTextColor.value : textColor.value
      };
    });
    const doDestroy = () => {
      var _a, _b, _c;
      return (_c = (_b = (_a = vPopper.value) == null ? void 0 : _a.popperRef) == null ? void 0 : _b.popperInstanceRef) == null ? void 0 : _c.destroy();
    };
    const handleCollapseToggle = (value) => {
      if (!value) {
        doDestroy();
      }
    };
    const handleClick = () => {
      if (rootMenu.props.menuTrigger === "hover" && rootMenu.props.mode === "horizontal" || rootMenu.props.collapse && rootMenu.props.mode === "vertical" || props.disabled)
        return;
      rootMenu.handleSubMenuClick({
        index: props.index,
        indexPath: indexPath.value,
        active: active.value
      });
    };
    const handleMouseenter = (event, showTimeout = props.showTimeout) => {
      var _a;
      if (event.type === "focus" && !event.relatedTarget) {
        return;
      }
      if (rootMenu.props.menuTrigger === "click" && rootMenu.props.mode === "horizontal" || !rootMenu.props.collapse && rootMenu.props.mode === "vertical" || props.disabled) {
        return;
      }
      subMenu.mouseInChild.value = true;
      timeout == null ? void 0 : timeout();
      ({ stop: timeout } = (0,shared/* useTimeoutFn */.eM)(() => {
        rootMenu.openMenu(props.index, indexPath.value);
      }, showTimeout));
      if (appendToBody.value) {
        (_a = parentMenu.value.vnode.el) == null ? void 0 : _a.dispatchEvent(new MouseEvent("mouseenter"));
      }
    };
    const handleMouseleave = (deepDispatch = false) => {
      var _a, _b;
      if (rootMenu.props.menuTrigger === "click" && rootMenu.props.mode === "horizontal" || !rootMenu.props.collapse && rootMenu.props.mode === "vertical") {
        return;
      }
      timeout == null ? void 0 : timeout();
      subMenu.mouseInChild.value = false;
      ({ stop: timeout } = (0,shared/* useTimeoutFn */.eM)(() => !mouseInChild.value && rootMenu.closeMenu(props.index, indexPath.value), props.hideTimeout));
      if (appendToBody.value && deepDispatch) {
        if (((_a = instance.parent) == null ? void 0 : _a.type.name) === "ElSubMenu") {
          (_b = subMenu.handleMouseleave) == null ? void 0 : _b.call(subMenu, true);
        }
      }
    };
    (0,external_Vue_.watch)(() => rootMenu.props.collapse, (value) => handleCollapseToggle(Boolean(value)));
    {
      const addSubMenu = (item2) => {
        subMenus.value[item2.index] = item2;
      };
      const removeSubMenu = (item2) => {
        delete subMenus.value[item2.index];
      };
      (0,external_Vue_.provide)(`subMenu:${instance.uid}`, {
        addSubMenu,
        removeSubMenu,
        handleMouseleave,
        mouseInChild,
        level: subMenu.level + 1
      });
    }
    expose({
      opened
    });
    (0,external_Vue_.onMounted)(() => {
      rootMenu.addSubMenu(item);
      subMenu.addSubMenu(item);
    });
    (0,external_Vue_.onBeforeUnmount)(() => {
      subMenu.removeSubMenu(item);
      rootMenu.removeSubMenu(item);
    });
    return () => {
      var _a;
      const titleTag = [
        (_a = slots.title) == null ? void 0 : _a.call(slots),
        (0,external_Vue_.h)(components_icon/* ElIcon */.gn, {
          class: nsSubMenu.e("icon-arrow")
        }, { default: () => (0,external_Vue_.h)(subMenuTitleIcon.value) })
      ];
      const ulStyle = useMenuCssVar(rootMenu.props, subMenu.level + 1);
      const child = rootMenu.isMenuPopup ? (0,external_Vue_.h)(ElTooltip, {
        ref: vPopper,
        visible: opened.value,
        effect: "light",
        pure: true,
        offset: props.popperOffset,
        showArrow: false,
        persistent: true,
        popperClass: props.popperClass,
        placement: currentPlacement.value,
        teleported: appendToBody.value,
        fallbackPlacements: fallbackPlacements.value,
        transition: menuTransitionName.value,
        gpuAcceleration: false
      }, {
        content: () => {
          var _a2;
          return (0,external_Vue_.h)("div", {
            class: [
              nsMenu.m(mode.value),
              nsMenu.m("popup-container"),
              props.popperClass
            ],
            onMouseenter: (evt) => handleMouseenter(evt, 100),
            onMouseleave: () => handleMouseleave(true),
            onFocus: (evt) => handleMouseenter(evt, 100)
          }, [
            (0,external_Vue_.h)("ul", {
              class: [
                nsMenu.b(),
                nsMenu.m("popup"),
                nsMenu.m(`popup-${currentPlacement.value}`)
              ],
              style: ulStyle.value
            }, [(_a2 = slots.default) == null ? void 0 : _a2.call(slots)])
          ]);
        },
        default: () => (0,external_Vue_.h)("div", {
          class: nsSubMenu.e("title"),
          style: [
            titleStyle.value,
            { backgroundColor: backgroundColor.value }
          ],
          onClick: handleClick
        }, titleTag)
      }) : (0,external_Vue_.h)(external_Vue_.Fragment, {}, [
        (0,external_Vue_.h)("div", {
          class: nsSubMenu.e("title"),
          style: [
            titleStyle.value,
            { backgroundColor: backgroundColor.value }
          ],
          ref: verticalTitleRef,
          onClick: handleClick
        }, titleTag),
        (0,external_Vue_.h)(_CollapseTransition, {}, {
          default: () => {
            var _a2;
            return (0,external_Vue_.withDirectives)((0,external_Vue_.h)("ul", {
              role: "menu",
              class: [nsMenu.b(), nsMenu.m("inline")],
              style: ulStyle.value
            }, [(_a2 = slots.default) == null ? void 0 : _a2.call(slots)]), [[external_Vue_.vShow, opened.value]]);
          }
        })
      ]);
      return (0,external_Vue_.h)("li", {
        class: [
          nsSubMenu.b(),
          nsSubMenu.is("active", active.value),
          nsSubMenu.is("opened", opened.value),
          nsSubMenu.is("disabled", props.disabled)
        ],
        role: "menuitem",
        ariaHaspopup: true,
        ariaExpanded: opened.value,
        onMouseenter: handleMouseenter,
        onMouseleave: () => handleMouseleave(true),
        onFocus: handleMouseenter
      }, [child]);
    };
  }
});


//# sourceMappingURL=sub-menu.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/utils/dom/resize-event.mjs


const resizeHandler = function(entries) {
  for (const entry of entries) {
    const listeners = entry.target.__resizeListeners__ || [];
    if (listeners.length) {
      listeners.forEach((fn) => {
        fn();
      });
    }
  }
};
const addResizeListener = function(element, fn) {
  if (!shared/* isClient */.C5 || !element)
    return;
  if (!element.__resizeListeners__) {
    element.__resizeListeners__ = [];
    element.__ro__ = new ResizeObserver(resizeHandler);
    element.__ro__.observe(element);
  }
  element.__resizeListeners__.push(fn);
};
const removeResizeListener = function(element, fn) {
  var _a;
  if (!element || !element.__resizeListeners__)
    return;
  element.__resizeListeners__.splice(element.__resizeListeners__.indexOf(fn), 1);
  if (!element.__resizeListeners__.length) {
    (_a = element.__ro__) == null ? void 0 : _a.disconnect();
  }
};


//# sourceMappingURL=resize-event.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/directives/resize/index.mjs



const Resize = {
  beforeMount(el, binding) {
    el._handleResize = () => {
      var _a;
      el && ((_a = binding.value) == null ? void 0 : _a.call(binding, el));
    };
    addResizeListener(el, el._handleResize);
  },
  beforeUnmount(el) {
    removeResizeListener(el, el._handleResize);
  }
};


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/menu/src/menu.mjs
















const menuProps = (0,runtime/* buildProps */.o8)({
  mode: {
    type: String,
    values: ["horizontal", "vertical"],
    default: "vertical"
  },
  defaultActive: {
    type: String,
    default: ""
  },
  defaultOpeneds: {
    type: (0,runtime/* definePropType */.Cq)(Array),
    default: () => (0,typescript/* mutable */.N)([])
  },
  uniqueOpened: Boolean,
  router: Boolean,
  menuTrigger: {
    type: String,
    values: ["hover", "click"],
    default: "hover"
  },
  collapse: Boolean,
  backgroundColor: String,
  textColor: String,
  activeTextColor: String,
  collapseTransition: {
    type: Boolean,
    default: true
  },
  ellipsis: {
    type: Boolean,
    default: true
  }
});
const checkIndexPath = (indexPath) => Array.isArray(indexPath) && indexPath.every((path) => (0,shared_esm_bundler/* isString */.HD)(path));
const menuEmits = {
  close: (index, indexPath) => (0,shared_esm_bundler/* isString */.HD)(index) && checkIndexPath(indexPath),
  open: (index, indexPath) => (0,shared_esm_bundler/* isString */.HD)(index) && checkIndexPath(indexPath),
  select: (index, indexPath, item, routerResult) => (0,shared_esm_bundler/* isString */.HD)(index) && checkIndexPath(indexPath) && (0,shared_esm_bundler/* isObject */.Kn)(item) && (routerResult === void 0 || routerResult instanceof Promise)
};
var menu_Menu = (0,external_Vue_.defineComponent)({
  name: "ElMenu",
  props: menuProps,
  emits: menuEmits,
  setup(props, { emit, slots, expose }) {
    const instance = (0,external_Vue_.getCurrentInstance)();
    const router = instance.appContext.config.globalProperties.$router;
    const menu = (0,external_Vue_.ref)();
    const nsMenu = (0,use_namespace/* useNamespace */.s)("menu");
    const nsSubMenu = (0,use_namespace/* useNamespace */.s)("sub-menu");
    const openedMenus = (0,external_Vue_.ref)(props.defaultOpeneds && !props.collapse ? props.defaultOpeneds.slice(0) : []);
    const activeIndex = (0,external_Vue_.ref)(props.defaultActive);
    const items = (0,external_Vue_.ref)({});
    const subMenus = (0,external_Vue_.ref)({});
    const isMenuPopup = (0,external_Vue_.computed)(() => {
      return props.mode === "horizontal" || props.mode === "vertical" && props.collapse;
    });
    const initMenu = () => {
      const activeItem = activeIndex.value && items.value[activeIndex.value];
      if (!activeItem || props.mode === "horizontal" || props.collapse)
        return;
      const indexPath = activeItem.indexPath;
      indexPath.forEach((index) => {
        const subMenu = subMenus.value[index];
        subMenu && openMenu(index, subMenu.indexPath);
      });
    };
    const openMenu = (index, indexPath) => {
      if (openedMenus.value.includes(index))
        return;
      if (props.uniqueOpened) {
        openedMenus.value = openedMenus.value.filter((index2) => indexPath.includes(index2));
      }
      openedMenus.value.push(index);
      emit("open", index, indexPath);
    };
    const closeMenu = (index, indexPath) => {
      const i = openedMenus.value.indexOf(index);
      if (i !== -1) {
        openedMenus.value.splice(i, 1);
      }
      emit("close", index, indexPath);
    };
    const handleSubMenuClick = ({
      index,
      indexPath
    }) => {
      const isOpened = openedMenus.value.includes(index);
      if (isOpened) {
        closeMenu(index, indexPath);
      } else {
        openMenu(index, indexPath);
      }
    };
    const handleMenuItemClick = (menuItem) => {
      if (props.mode === "horizontal" || props.collapse) {
        openedMenus.value = [];
      }
      const { index, indexPath } = menuItem;
      if (index === void 0 || indexPath === void 0)
        return;
      if (props.router && router) {
        const route = menuItem.route || index;
        const routerResult = router.push(route).then((res) => {
          if (!res)
            activeIndex.value = index;
          return res;
        });
        emit("select", index, indexPath, { index, indexPath, route }, routerResult);
      } else {
        activeIndex.value = index;
        emit("select", index, indexPath, { index, indexPath });
      }
    };
    const updateActiveIndex = (val) => {
      const itemsInData = items.value;
      const item = itemsInData[val] || activeIndex.value && itemsInData[activeIndex.value] || itemsInData[props.defaultActive];
      if (item) {
        activeIndex.value = item.index;
        initMenu();
      } else {
        activeIndex.value = val;
      }
    };
    const handleResize = () => {
      (0,external_Vue_.nextTick)(() => instance.proxy.$forceUpdate());
    };
    (0,external_Vue_.watch)(() => props.defaultActive, (currentActive) => {
      if (!items.value[currentActive]) {
        activeIndex.value = "";
      }
      updateActiveIndex(currentActive);
    });
    (0,external_Vue_.watch)(items.value, () => initMenu());
    (0,external_Vue_.watch)(() => props.collapse, (value) => {
      if (value)
        openedMenus.value = [];
    });
    {
      const addSubMenu = (item) => {
        subMenus.value[item.index] = item;
      };
      const removeSubMenu = (item) => {
        delete subMenus.value[item.index];
      };
      const addMenuItem = (item) => {
        items.value[item.index] = item;
      };
      const removeMenuItem = (item) => {
        delete items.value[item.index];
      };
      (0,external_Vue_.provide)("rootMenu", (0,external_Vue_.reactive)({
        props,
        openedMenus,
        items,
        subMenus,
        activeIndex,
        isMenuPopup,
        addMenuItem,
        removeMenuItem,
        addSubMenu,
        removeSubMenu,
        openMenu,
        closeMenu,
        handleMenuItemClick,
        handleSubMenuClick
      }));
      (0,external_Vue_.provide)(`subMenu:${instance.uid}`, {
        addSubMenu,
        removeSubMenu,
        mouseInChild: (0,external_Vue_.ref)(false),
        level: 0
      });
    }
    (0,external_Vue_.onMounted)(() => {
      initMenu();
      if (props.mode === "horizontal") {
        new Menu(instance.vnode.el, nsMenu.namespace.value);
      }
    });
    {
      const open = (index) => {
        const { indexPath } = subMenus.value[index];
        indexPath.forEach((i) => openMenu(i, indexPath));
      };
      expose({
        open,
        close: closeMenu,
        handleResize
      });
    }
    const flattedChildren = (children) => {
      const vnodes = Array.isArray(children) ? children : [children];
      const result = [];
      vnodes.forEach((child) => {
        if (Array.isArray(child.children)) {
          result.push(...flattedChildren(child.children));
        } else {
          result.push(child);
        }
      });
      return result;
    };
    const useVNodeResize = (vnode) => props.mode === "horizontal" ? (0,external_Vue_.withDirectives)(vnode, [[Resize, handleResize]]) : vnode;
    return () => {
      var _a, _b, _c, _d;
      let slot = (_b = (_a = slots.default) == null ? void 0 : _a.call(slots)) != null ? _b : [];
      const vShowMore = [];
      if (props.mode === "horizontal" && menu.value) {
        const items2 = Array.from((_d = (_c = menu.value) == null ? void 0 : _c.childNodes) != null ? _d : []).filter((item) => item.nodeName !== "#text" || item.nodeValue);
        const originalSlot = flattedChildren(slot);
        const moreItemWidth = 64;
        const paddingLeft = Number.parseInt(getComputedStyle(menu.value).paddingLeft, 10);
        const paddingRight = Number.parseInt(getComputedStyle(menu.value).paddingRight, 10);
        const menuWidth = menu.value.clientWidth - paddingLeft - paddingRight;
        let calcWidth = 0;
        let sliceIndex = 0;
        items2.forEach((item, index) => {
          calcWidth += item.offsetWidth || 0;
          if (calcWidth <= menuWidth - moreItemWidth) {
            sliceIndex = index + 1;
          }
        });
        const slotDefault = originalSlot.slice(0, sliceIndex);
        const slotMore = originalSlot.slice(sliceIndex);
        if ((slotMore == null ? void 0 : slotMore.length) && props.ellipsis) {
          slot = slotDefault;
          vShowMore.push((0,external_Vue_.h)(sub_menu_SubMenu, {
            index: "sub-menu-more",
            class: nsSubMenu.e("hide-arrow")
          }, {
            title: () => (0,external_Vue_.h)(components_icon/* ElIcon */.gn, {
              class: nsSubMenu.e("icon-more")
            }, { default: () => (0,external_Vue_.h)(dist/* More */.Tkc) }),
            default: () => slotMore
          }));
        }
      }
      const ulStyle = useMenuCssVar(props, 0);
      const resizeMenu = (vNode) => props.ellipsis ? useVNodeResize(vNode) : vNode;
      const vMenu = resizeMenu((0,external_Vue_.h)("ul", {
        key: String(props.collapse),
        role: "menubar",
        ref: menu,
        style: ulStyle.value,
        class: {
          [nsMenu.b()]: true,
          [nsMenu.m(props.mode)]: true,
          [nsMenu.m("collapse")]: props.collapse
        }
      }, [...slot, ...vShowMore]));
      if (props.collapseTransition && props.mode === "vertical") {
        return (0,external_Vue_.h)(ElMenuCollapseTransition, () => vMenu);
      }
      return vMenu;
    };
  }
});


//# sourceMappingURL=menu.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/menu/src/menu-item.mjs




const menuItemProps = (0,runtime/* buildProps */.o8)({
  index: {
    type: (0,runtime/* definePropType */.Cq)([String, null]),
    default: null
  },
  route: {
    type: (0,runtime/* definePropType */.Cq)([String, Object])
  },
  disabled: Boolean
});
const menuItemEmits = {
  click: (item) => (0,shared_esm_bundler/* isString */.HD)(item.index) && Array.isArray(item.indexPath)
};


//# sourceMappingURL=menu-item.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/menu/src/menu-item2.mjs












const menu_item2_COMPONENT_NAME = "ElMenuItem";
const menu_item2_sfc_main = (0,external_Vue_.defineComponent)({
  name: menu_item2_COMPONENT_NAME,
  components: {
    ElTooltip: ElTooltip
  },
  props: menuItemProps,
  emits: menuItemEmits,
  setup(props, { emit }) {
    const instance = (0,external_Vue_.getCurrentInstance)();
    const rootMenu = (0,external_Vue_.inject)("rootMenu");
    const nsMenu = (0,use_namespace/* useNamespace */.s)("menu");
    const nsMenuItem = (0,use_namespace/* useNamespace */.s)("menu-item");
    if (!rootMenu)
      (0,error/* throwError */._)(menu_item2_COMPONENT_NAME, "can not inject root menu");
    const { parentMenu, indexPath } = useMenu(instance, (0,external_Vue_.toRef)(props, "index"));
    const subMenu = (0,external_Vue_.inject)(`subMenu:${parentMenu.value.uid}`);
    if (!subMenu)
      (0,error/* throwError */._)(menu_item2_COMPONENT_NAME, "can not inject sub menu");
    const active = (0,external_Vue_.computed)(() => props.index === rootMenu.activeIndex);
    const item = (0,external_Vue_.reactive)({
      index: props.index,
      indexPath,
      active
    });
    const handleClick = () => {
      if (!props.disabled) {
        rootMenu.handleMenuItemClick({
          index: props.index,
          indexPath: indexPath.value,
          route: props.route
        });
        emit("click", item);
      }
    };
    (0,external_Vue_.onMounted)(() => {
      subMenu.addSubMenu(item);
      rootMenu.addMenuItem(item);
    });
    (0,external_Vue_.onBeforeUnmount)(() => {
      subMenu.removeSubMenu(item);
      rootMenu.removeMenuItem(item);
    });
    return {
      Effect: Effect,
      parentMenu,
      rootMenu,
      active,
      nsMenu,
      nsMenuItem,
      handleClick
    };
  }
});
function menu_item2_sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_el_tooltip = (0,external_Vue_.resolveComponent)("el-tooltip");
  return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("li", {
    class: (0,external_Vue_.normalizeClass)([
      _ctx.nsMenuItem.b(),
      _ctx.nsMenuItem.is("active", _ctx.active),
      _ctx.nsMenuItem.is("disabled", _ctx.disabled)
    ]),
    role: "menuitem",
    tabindex: "-1",
    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.handleClick && _ctx.handleClick(...args))
  }, [
    _ctx.parentMenu.type.name === "ElMenu" && _ctx.rootMenu.props.collapse && _ctx.$slots.title ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(_component_el_tooltip, {
      key: 0,
      effect: _ctx.Effect.DARK,
      placement: "right",
      "fallback-placements": ["left"],
      persistent: ""
    }, {
      content: (0,external_Vue_.withCtx)(() => [
        (0,external_Vue_.renderSlot)(_ctx.$slots, "title")
      ]),
      default: (0,external_Vue_.withCtx)(() => [
        (0,external_Vue_.createElementVNode)("div", {
          class: (0,external_Vue_.normalizeClass)(_ctx.nsMenu.be("tooltip", "trigger"))
        }, [
          (0,external_Vue_.renderSlot)(_ctx.$slots, "default")
        ], 2)
      ]),
      _: 3
    }, 8, ["effect"])) : ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, { key: 1 }, [
      (0,external_Vue_.renderSlot)(_ctx.$slots, "default"),
      (0,external_Vue_.renderSlot)(_ctx.$slots, "title")
    ], 64))
  ], 2);
}
var menu_item2_MenuItem = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(menu_item2_sfc_main, [["render", menu_item2_sfc_render], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/menu/src/menu-item.vue"]]);


//# sourceMappingURL=menu-item2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/menu/src/menu-item-group.mjs
const menuItemGroupProps = {
  title: String
};


//# sourceMappingURL=menu-item-group.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/menu/src/menu-item-group2.mjs






const menu_item_group2_COMPONENT_NAME = "ElMenuItemGroup";
const menu_item_group2_sfc_main = (0,external_Vue_.defineComponent)({
  name: menu_item_group2_COMPONENT_NAME,
  props: menuItemGroupProps,
  setup() {
    const ns = (0,use_namespace/* useNamespace */.s)("menu-item-group");
    return {
      ns
    };
  }
});
function menu_item_group2_sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("li", {
    class: (0,external_Vue_.normalizeClass)(_ctx.ns.b())
  }, [
    (0,external_Vue_.createElementVNode)("div", {
      class: (0,external_Vue_.normalizeClass)(_ctx.ns.e("title"))
    }, [
      !_ctx.$slots.title ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, { key: 0 }, [
        (0,external_Vue_.createTextVNode)((0,external_Vue_.toDisplayString)(_ctx.title), 1)
      ], 64)) : (0,external_Vue_.renderSlot)(_ctx.$slots, "title", { key: 1 })
    ], 2),
    (0,external_Vue_.createElementVNode)("ul", null, [
      (0,external_Vue_.renderSlot)(_ctx.$slots, "default")
    ])
  ], 2);
}
var MenuItemGroup = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(menu_item_group2_sfc_main, [["render", menu_item_group2_sfc_render], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/menu/src/menu-item-group.vue"]]);


//# sourceMappingURL=menu-item-group2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/menu/index.mjs












const ElMenu = (0,install/* withInstall */.nz)(menu_Menu, {
  MenuItem: menu_item2_MenuItem,
  MenuItemGroup: MenuItemGroup,
  SubMenu: sub_menu_SubMenu
});
const ElMenuItem = (0,install/* withNoopInstall */.dp)(menu_item2_MenuItem);
const ElMenuItemGroup = (0,install/* withNoopInstall */.dp)(MenuItemGroup);
const ElSubMenu = (0,install/* withNoopInstall */.dp)(sub_menu_SubMenu);


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/page-header/src/page-header.mjs





const pageHeaderProps = (0,runtime/* buildProps */.o8)({
  icon: {
    type: icon/* iconPropType */.AA,
    default: () => dist/* Back */.eJh
  },
  title: String,
  content: {
    type: String,
    default: ""
  }
});
const pageHeaderEmits = {
  back: () => true
};


//# sourceMappingURL=page-header.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/page-header/src/page-header2.mjs








const page_header2_default_ = {
  name: "ElPageHeader"
};
const page_header2_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...page_header2_default_,
  props: pageHeaderProps,
  emits: pageHeaderEmits,
  setup(__props, { emit }) {
    const { t } = useLocale();
    const ns = (0,use_namespace/* useNamespace */.s)("page-header");
    function handleClick() {
      emit("back");
    }
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
        class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).b())
      }, [
        (0,external_Vue_.createElementVNode)("div", {
          class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("left")),
          onClick: handleClick
        }, [
          _ctx.icon || _ctx.$slots.icon ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
            key: 0,
            class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("icon"))
          }, [
            (0,external_Vue_.renderSlot)(_ctx.$slots, "icon", {}, () => [
              _ctx.icon ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.unref)(components_icon/* ElIcon */.gn), { key: 0 }, {
                default: (0,external_Vue_.withCtx)(() => [
                  ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.resolveDynamicComponent)(_ctx.icon)))
                ]),
                _: 1
              })) : (0,external_Vue_.createCommentVNode)("v-if", true)
            ])
          ], 2)) : (0,external_Vue_.createCommentVNode)("v-if", true),
          (0,external_Vue_.createElementVNode)("div", {
            class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("title"))
          }, [
            (0,external_Vue_.renderSlot)(_ctx.$slots, "title", {}, () => [
              (0,external_Vue_.createTextVNode)((0,external_Vue_.toDisplayString)(_ctx.title || (0,external_Vue_.unref)(t)("el.pageHeader.title")), 1)
            ])
          ], 2)
        ], 2),
        (0,external_Vue_.createElementVNode)("div", {
          class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("content"))
        }, [
          (0,external_Vue_.renderSlot)(_ctx.$slots, "content", {}, () => [
            (0,external_Vue_.createTextVNode)((0,external_Vue_.toDisplayString)(_ctx.content), 1)
          ])
        ], 2)
      ], 2);
    };
  }
});
var PageHeader = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(page_header2_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/page-header/src/page-header.vue"]]);


//# sourceMappingURL=page-header2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/page-header/index.mjs





const ElPageHeader = (0,install/* withInstall */.nz)(PageHeader);


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/pagination/src/components/prev.mjs



const paginationPrevProps = (0,runtime/* buildProps */.o8)({
  disabled: Boolean,
  currentPage: {
    type: Number,
    default: 1
  },
  prevText: {
    type: String
  }
});
const paginationPrevEmits = {
  click: (evt) => evt instanceof MouseEvent
};


//# sourceMappingURL=prev.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/pagination/src/components/prev2.mjs






const prev2_hoisted_1 = ["disabled", "aria-disabled"];
const prev2_hoisted_2 = { key: 0 };
const prev2_default_ = {
  name: "ElPaginationPrev"
};
const prev2_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...prev2_default_,
  props: paginationPrevProps,
  emits: paginationPrevEmits,
  setup(__props) {
    const props = __props;
    const internalDisabled = (0,external_Vue_.computed)(() => props.disabled || props.currentPage <= 1);
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("button", {
        type: "button",
        class: "btn-prev",
        disabled: (0,external_Vue_.unref)(internalDisabled),
        "aria-disabled": (0,external_Vue_.unref)(internalDisabled),
        onClick: _cache[0] || (_cache[0] = ($event) => _ctx.$emit("click", $event))
      }, [
        _ctx.prevText ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("span", prev2_hoisted_2, (0,external_Vue_.toDisplayString)(_ctx.prevText), 1)) : ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.unref)(components_icon/* ElIcon */.gn), { key: 1 }, {
          default: (0,external_Vue_.withCtx)(() => [
            (0,external_Vue_.createVNode)((0,external_Vue_.unref)(dist/* ArrowLeft */.XdH))
          ]),
          _: 1
        }))
      ], 8, prev2_hoisted_1);
    };
  }
});
var Prev = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(prev2_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/pagination/src/components/prev.vue"]]);


//# sourceMappingURL=prev2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/pagination/src/components/next.mjs



const paginationNextProps = (0,runtime/* buildProps */.o8)({
  disabled: Boolean,
  currentPage: {
    type: Number,
    default: 1
  },
  pageCount: {
    type: Number,
    default: 50
  },
  nextText: {
    type: String
  }
});


//# sourceMappingURL=next.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/pagination/src/components/next2.mjs






const next2_hoisted_1 = ["disabled", "aria-disabled"];
const next2_hoisted_2 = { key: 0 };
const next2_default_ = {
  name: "ElPaginationNext"
};
const next2_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...next2_default_,
  props: paginationNextProps,
  emits: ["click"],
  setup(__props) {
    const props = __props;
    const internalDisabled = (0,external_Vue_.computed)(() => props.disabled || props.currentPage === props.pageCount || props.pageCount === 0);
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("button", {
        type: "button",
        class: "btn-next",
        disabled: (0,external_Vue_.unref)(internalDisabled),
        "aria-disabled": (0,external_Vue_.unref)(internalDisabled),
        onClick: _cache[0] || (_cache[0] = ($event) => _ctx.$emit("click", $event))
      }, [
        _ctx.nextText ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("span", next2_hoisted_2, (0,external_Vue_.toDisplayString)(_ctx.nextText), 1)) : ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.unref)(components_icon/* ElIcon */.gn), { key: 1 }, {
          default: (0,external_Vue_.withCtx)(() => [
            (0,external_Vue_.createVNode)((0,external_Vue_.unref)(dist/* ArrowRight */.olP))
          ]),
          _: 1
        }))
      ], 8, next2_hoisted_1);
    };
  }
});
var Next = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(next2_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/pagination/src/components/next.vue"]]);


//# sourceMappingURL=next2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/select/src/token.mjs
const selectGroupKey = "ElSelectGroup";
const selectKey = "ElSelect";


//# sourceMappingURL=token.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/utils/strings.mjs


const escapeStringRegexp = (string = "") => string.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d");


//# sourceMappingURL=strings.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/select/src/useOption.mjs






function useOption(props, states) {
  const select = (0,external_Vue_.inject)(selectKey);
  const selectGroup = (0,external_Vue_.inject)(selectGroupKey, { disabled: false });
  const isObject = (0,external_Vue_.computed)(() => {
    return Object.prototype.toString.call(props.value).toLowerCase() === "[object object]";
  });
  const itemSelected = (0,external_Vue_.computed)(() => {
    if (!select.props.multiple) {
      return isEqual(props.value, select.props.modelValue);
    } else {
      return contains(select.props.modelValue, props.value);
    }
  });
  const limitReached = (0,external_Vue_.computed)(() => {
    if (select.props.multiple) {
      const modelValue = select.props.modelValue || [];
      return !itemSelected.value && modelValue.length >= select.props.multipleLimit && select.props.multipleLimit > 0;
    } else {
      return false;
    }
  });
  const currentLabel = (0,external_Vue_.computed)(() => {
    return props.label || (isObject.value ? "" : props.value);
  });
  const currentValue = (0,external_Vue_.computed)(() => {
    return props.value || props.label || "";
  });
  const isDisabled = (0,external_Vue_.computed)(() => {
    return props.disabled || states.groupDisabled || limitReached.value;
  });
  const instance = (0,external_Vue_.getCurrentInstance)();
  const contains = (arr = [], target) => {
    if (!isObject.value) {
      return arr && arr.includes(target);
    } else {
      const valueKey = select.props.valueKey;
      return arr && arr.some((item) => {
        return (0,get/* default */.Z)(item, valueKey) === (0,get/* default */.Z)(target, valueKey);
      });
    }
  };
  const isEqual = (a, b) => {
    if (!isObject.value) {
      return a === b;
    } else {
      const { valueKey } = select.props;
      return (0,get/* default */.Z)(a, valueKey) === (0,get/* default */.Z)(b, valueKey);
    }
  };
  const hoverItem = () => {
    if (!props.disabled && !selectGroup.disabled) {
      select.hoverIndex = select.optionsArray.indexOf(instance.proxy);
    }
  };
  (0,external_Vue_.watch)(() => currentLabel.value, () => {
    if (!props.created && !select.props.remote)
      select.setSelected();
  });
  (0,external_Vue_.watch)(() => props.value, (val, oldVal) => {
    const { remote, valueKey } = select.props;
    if (!props.created && !remote) {
      if (valueKey && typeof val === "object" && typeof oldVal === "object" && val[valueKey] === oldVal[valueKey]) {
        return;
      }
      select.setSelected();
    }
  });
  (0,external_Vue_.watch)(() => selectGroup.disabled, () => {
    states.groupDisabled = selectGroup.disabled;
  }, { immediate: true });
  const { queryChange } = (0,external_Vue_.toRaw)(select);
  (0,external_Vue_.watch)(queryChange, (changes) => {
    const { query } = (0,external_Vue_.unref)(changes);
    const regexp = new RegExp(escapeStringRegexp(query), "i");
    states.visible = regexp.test(currentLabel.value) || props.created;
    if (!states.visible) {
      select.filteredOptionsCount--;
    }
  });
  return {
    select,
    currentLabel,
    currentValue,
    itemSelected,
    isDisabled,
    hoverItem
  };
}


//# sourceMappingURL=useOption.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/select/src/option.mjs






const option_sfc_main = (0,external_Vue_.defineComponent)({
  name: "ElOption",
  componentName: "ElOption",
  props: {
    value: {
      required: true,
      type: [String, Number, Boolean, Object]
    },
    label: [String, Number],
    created: Boolean,
    disabled: {
      type: Boolean,
      default: false
    }
  },
  setup(props) {
    const ns = (0,use_namespace/* useNamespace */.s)("select");
    const states = (0,external_Vue_.reactive)({
      index: -1,
      groupDisabled: false,
      visible: true,
      hitState: false,
      hover: false
    });
    const { currentLabel, itemSelected, isDisabled, select, hoverItem } = useOption(props, states);
    const { visible, hover } = (0,external_Vue_.toRefs)(states);
    const vm = (0,external_Vue_.getCurrentInstance)().proxy;
    const key = vm.value;
    select.onOptionCreate(vm);
    (0,external_Vue_.onBeforeUnmount)(() => {
      const { selected } = select;
      const selectedOptions = select.props.multiple ? selected : [selected];
      const doesSelected = selectedOptions.some((item) => {
        return item.value === vm.value;
      });
      if (select.cachedOptions.get(key) === vm && !doesSelected) {
        (0,external_Vue_.nextTick)(() => {
          select.cachedOptions.delete(key);
        });
      }
      select.onOptionDestroy(key, vm);
    });
    function selectOptionClick() {
      if (props.disabled !== true && states.groupDisabled !== true) {
        select.handleOptionSelect(vm, true);
      }
    }
    return {
      ns,
      currentLabel,
      itemSelected,
      isDisabled,
      select,
      hoverItem,
      visible,
      hover,
      selectOptionClick,
      states
    };
  }
});
function option_sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return (0,external_Vue_.withDirectives)(((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("li", {
    class: (0,external_Vue_.normalizeClass)([
      _ctx.ns.be("dropdown", "item"),
      _ctx.ns.is("disabled", _ctx.isDisabled),
      {
        selected: _ctx.itemSelected,
        hover: _ctx.hover
      }
    ]),
    onMouseenter: _cache[0] || (_cache[0] = (...args) => _ctx.hoverItem && _ctx.hoverItem(...args)),
    onClick: _cache[1] || (_cache[1] = (0,external_Vue_.withModifiers)((...args) => _ctx.selectOptionClick && _ctx.selectOptionClick(...args), ["stop"]))
  }, [
    (0,external_Vue_.renderSlot)(_ctx.$slots, "default", {}, () => [
      (0,external_Vue_.createElementVNode)("span", null, (0,external_Vue_.toDisplayString)(_ctx.currentLabel), 1)
    ])
  ], 34)), [
    [external_Vue_.vShow, _ctx.visible]
  ]);
}
var Option = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(option_sfc_main, [["render", option_sfc_render], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/select/src/option.vue"]]);


//# sourceMappingURL=option.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/select/src/select-dropdown.mjs







const select_dropdown_sfc_main = (0,external_Vue_.defineComponent)({
  name: "ElSelectDropdown",
  componentName: "ElSelectDropdown",
  setup() {
    const select = (0,external_Vue_.inject)(selectKey);
    const ns = (0,use_namespace/* useNamespace */.s)("select");
    const popperClass = (0,external_Vue_.computed)(() => select.props.popperClass);
    const isMultiple = (0,external_Vue_.computed)(() => select.props.multiple);
    const isFitInputWidth = (0,external_Vue_.computed)(() => select.props.fitInputWidth);
    const minWidth = (0,external_Vue_.ref)("");
    function updateMinWidth() {
      var _a;
      minWidth.value = `${(_a = select.selectWrapper) == null ? void 0 : _a.offsetWidth}px`;
    }
    (0,external_Vue_.onMounted)(() => {
      updateMinWidth();
      (0,core/* useResizeObserver */.yU7)(select.selectWrapper, updateMinWidth);
    });
    return {
      ns,
      minWidth,
      popperClass,
      isMultiple,
      isFitInputWidth
    };
  }
});
function select_dropdown_sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
    class: (0,external_Vue_.normalizeClass)([_ctx.ns.b("dropdown"), _ctx.ns.is("multiple", _ctx.isMultiple), _ctx.popperClass]),
    style: (0,external_Vue_.normalizeStyle)({ [_ctx.isFitInputWidth ? "width" : "minWidth"]: _ctx.minWidth })
  }, [
    (0,external_Vue_.renderSlot)(_ctx.$slots, "default")
  ], 6);
}
var ElSelectMenu = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(select_dropdown_sfc_main, [["render", select_dropdown_sfc_render], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/select/src/select-dropdown.vue"]]);


//# sourceMappingURL=select-dropdown.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/utils/vue/size.mjs



const getComponentSize = (size) => {
  return constants_size/* componentSizeMap */.V[size || "default"];
};


//# sourceMappingURL=size.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/select/src/useSelect.mjs



















function useSelectStates(props) {
  const { t } = useLocale();
  return (0,external_Vue_.reactive)({
    options: /* @__PURE__ */ new Map(),
    cachedOptions: /* @__PURE__ */ new Map(),
    createdLabel: null,
    createdSelected: false,
    selected: props.multiple ? [] : {},
    inputLength: 20,
    inputWidth: 0,
    optionsCount: 0,
    filteredOptionsCount: 0,
    visible: false,
    softFocus: false,
    selectedLabel: "",
    hoverIndex: -1,
    query: "",
    previousQuery: null,
    inputHovering: false,
    cachedPlaceHolder: "",
    currentPlaceholder: t("el.select.placeholder"),
    menuVisibleOnFocus: false,
    isOnComposition: false,
    isSilentBlur: false,
    prefixWidth: 11,
    tagInMultiLine: false
  });
}
const useSelect = (props, states, ctx) => {
  const { t } = useLocale();
  const ns = (0,use_namespace/* useNamespace */.s)("select");
  const reference = (0,external_Vue_.ref)(null);
  const input = (0,external_Vue_.ref)(null);
  const tooltipRef = (0,external_Vue_.ref)(null);
  const tags = (0,external_Vue_.ref)(null);
  const selectWrapper = (0,external_Vue_.ref)(null);
  const scrollbar = (0,external_Vue_.ref)(null);
  const hoverOption = (0,external_Vue_.ref)(-1);
  const queryChange = (0,external_Vue_.shallowRef)({ query: "" });
  const groupQueryChange = (0,external_Vue_.shallowRef)("");
  const elForm = (0,external_Vue_.inject)(tokens_form/* formContextKey */.H, {});
  const elFormItem = (0,external_Vue_.inject)(tokens_form/* formItemContextKey */.K, {});
  const readonly = (0,external_Vue_.computed)(() => !props.filterable || props.multiple || !states.visible);
  const selectDisabled = (0,external_Vue_.computed)(() => props.disabled || elForm.disabled);
  const showClose = (0,external_Vue_.computed)(() => {
    const hasValue = props.multiple ? Array.isArray(props.modelValue) && props.modelValue.length > 0 : props.modelValue !== void 0 && props.modelValue !== null && props.modelValue !== "";
    const criteria = props.clearable && !selectDisabled.value && states.inputHovering && hasValue;
    return criteria;
  });
  const iconComponent = (0,external_Vue_.computed)(() => props.remote && props.filterable ? "" : props.suffixIcon);
  const iconReverse = (0,external_Vue_.computed)(() => ns.is("reverse", iconComponent.value && states.visible));
  const debounce$1 = (0,external_Vue_.computed)(() => props.remote ? 300 : 0);
  const emptyText = (0,external_Vue_.computed)(() => {
    if (props.loading) {
      return props.loadingText || t("el.select.loading");
    } else {
      if (props.remote && states.query === "" && states.options.size === 0)
        return false;
      if (props.filterable && states.query && states.options.size > 0 && states.filteredOptionsCount === 0) {
        return props.noMatchText || t("el.select.noMatch");
      }
      if (states.options.size === 0) {
        return props.noDataText || t("el.select.noData");
      }
    }
    return null;
  });
  const optionsArray = (0,external_Vue_.computed)(() => Array.from(states.options.values()));
  const cachedOptionsArray = (0,external_Vue_.computed)(() => Array.from(states.cachedOptions.values()));
  const showNewOption = (0,external_Vue_.computed)(() => {
    const hasExistingOption = optionsArray.value.filter((option) => {
      return !option.created;
    }).some((option) => {
      return option.currentLabel === states.query;
    });
    return props.filterable && props.allowCreate && states.query !== "" && !hasExistingOption;
  });
  const selectSize = (0,use_common_props/* useSize */.tH)();
  const collapseTagSize = (0,external_Vue_.computed)(() => ["small"].includes(selectSize.value) ? "small" : "default");
  const dropMenuVisible = (0,external_Vue_.computed)({
    get() {
      return states.visible && emptyText.value !== false;
    },
    set(val) {
      states.visible = val;
    }
  });
  (0,external_Vue_.watch)([() => selectDisabled.value, () => selectSize.value, () => elForm.size], () => {
    (0,external_Vue_.nextTick)(() => {
      resetInputHeight();
    });
  });
  (0,external_Vue_.watch)(() => props.placeholder, (val) => {
    states.cachedPlaceHolder = states.currentPlaceholder = val;
  });
  (0,external_Vue_.watch)(() => props.modelValue, (val, oldVal) => {
    var _a;
    if (props.multiple) {
      resetInputHeight();
      if (val && val.length > 0 || input.value && states.query !== "") {
        states.currentPlaceholder = "";
      } else {
        states.currentPlaceholder = states.cachedPlaceHolder;
      }
      if (props.filterable && !props.reserveKeyword) {
        states.query = "";
        handleQueryChange(states.query);
      }
    }
    setSelected();
    if (props.filterable && !props.multiple) {
      states.inputLength = 20;
    }
    if (!(0,isEqual/* default */.Z)(val, oldVal)) {
      (_a = elFormItem.validate) == null ? void 0 : _a.call(elFormItem, "change").catch((err) => (0,error/* debugWarn */.N)(err));
    }
  }, {
    flush: "post",
    deep: true
  });
  (0,external_Vue_.watch)(() => states.visible, (val) => {
    var _a, _b, _c;
    if (!val) {
      input.value && input.value.blur();
      states.query = "";
      states.previousQuery = null;
      states.selectedLabel = "";
      states.inputLength = 20;
      states.menuVisibleOnFocus = false;
      resetHoverIndex();
      (0,external_Vue_.nextTick)(() => {
        if (input.value && input.value.value === "" && states.selected.length === 0) {
          states.currentPlaceholder = states.cachedPlaceHolder;
        }
      });
      if (!props.multiple) {
        if (states.selected) {
          if (props.filterable && props.allowCreate && states.createdSelected && states.createdLabel) {
            states.selectedLabel = states.createdLabel;
          } else {
            states.selectedLabel = states.selected.currentLabel;
          }
          if (props.filterable)
            states.query = states.selectedLabel;
        }
        if (props.filterable) {
          states.currentPlaceholder = states.cachedPlaceHolder;
        }
      }
    } else {
      (_b = (_a = tooltipRef.value) == null ? void 0 : _a.updatePopper) == null ? void 0 : _b.call(_a);
      if (props.filterable) {
        states.filteredOptionsCount = states.optionsCount;
        states.query = props.remote ? "" : states.selectedLabel;
        if (props.multiple) {
          (_c = input.value) == null ? void 0 : _c.focus();
        } else {
          if (states.selectedLabel) {
            states.currentPlaceholder = `${states.selectedLabel}`;
            states.selectedLabel = "";
          }
        }
        handleQueryChange(states.query);
        if (!props.multiple && !props.remote) {
          queryChange.value.query = "";
          (0,external_Vue_.triggerRef)(queryChange);
          (0,external_Vue_.triggerRef)(groupQueryChange);
        }
      }
    }
    ctx.emit("visible-change", val);
  });
  (0,external_Vue_.watch)(() => states.options.entries(), () => {
    var _a, _b, _c;
    if (!shared/* isClient */.C5)
      return;
    (_b = (_a = tooltipRef.value) == null ? void 0 : _a.updatePopper) == null ? void 0 : _b.call(_a);
    if (props.multiple) {
      resetInputHeight();
    }
    const inputs = ((_c = selectWrapper.value) == null ? void 0 : _c.querySelectorAll("input")) || [];
    if (!Array.from(inputs).includes(document.activeElement)) {
      setSelected();
    }
    if (props.defaultFirstOption && (props.filterable || props.remote) && states.filteredOptionsCount) {
      checkDefaultFirstOption();
    }
  }, {
    flush: "post"
  });
  (0,external_Vue_.watch)(() => states.hoverIndex, (val) => {
    if (typeof val === "number" && val > -1) {
      hoverOption.value = optionsArray.value[val] || {};
    }
    optionsArray.value.forEach((option) => {
      option.hover = hoverOption.value === option;
    });
  });
  const resetInputHeight = () => {
    if (props.collapseTags && !props.filterable)
      return;
    (0,external_Vue_.nextTick)(() => {
      var _a, _b;
      if (!reference.value)
        return;
      const input2 = reference.value.$el.querySelector("input");
      const _tags = tags.value;
      const sizeInMap = getComponentSize(selectSize.value || elForm.size);
      input2.style.height = `${(states.selected.length === 0 ? sizeInMap : Math.max(_tags ? _tags.clientHeight + (_tags.clientHeight > sizeInMap ? 6 : 0) : 0, sizeInMap)) - 2}px`;
      states.tagInMultiLine = Number.parseFloat(input2.style.height) >= sizeInMap;
      if (states.visible && emptyText.value !== false) {
        (_b = (_a = tooltipRef.value) == null ? void 0 : _a.updatePopper) == null ? void 0 : _b.call(_a);
      }
    });
  };
  const handleQueryChange = (val) => {
    if (states.previousQuery === val || states.isOnComposition)
      return;
    if (states.previousQuery === null && (typeof props.filterMethod === "function" || typeof props.remoteMethod === "function")) {
      states.previousQuery = val;
      return;
    }
    states.previousQuery = val;
    (0,external_Vue_.nextTick)(() => {
      var _a, _b;
      if (states.visible)
        (_b = (_a = tooltipRef.value) == null ? void 0 : _a.updatePopper) == null ? void 0 : _b.call(_a);
    });
    states.hoverIndex = -1;
    if (props.multiple && props.filterable) {
      (0,external_Vue_.nextTick)(() => {
        const length = input.value.value.length * 15 + 20;
        states.inputLength = props.collapseTags ? Math.min(50, length) : length;
        managePlaceholder();
        resetInputHeight();
      });
    }
    if (props.remote && typeof props.remoteMethod === "function") {
      states.hoverIndex = -1;
      props.remoteMethod(val);
    } else if (typeof props.filterMethod === "function") {
      props.filterMethod(val);
      (0,external_Vue_.triggerRef)(groupQueryChange);
    } else {
      states.filteredOptionsCount = states.optionsCount;
      queryChange.value.query = val;
      (0,external_Vue_.triggerRef)(queryChange);
      (0,external_Vue_.triggerRef)(groupQueryChange);
    }
    if (props.defaultFirstOption && (props.filterable || props.remote) && states.filteredOptionsCount) {
      checkDefaultFirstOption();
    }
  };
  const managePlaceholder = () => {
    if (states.currentPlaceholder !== "") {
      states.currentPlaceholder = input.value.value ? "" : states.cachedPlaceHolder;
    }
  };
  const checkDefaultFirstOption = () => {
    const optionsInDropdown = optionsArray.value.filter((n) => n.visible && !n.disabled && !n.states.groupDisabled);
    const userCreatedOption = optionsInDropdown.find((n) => n.created);
    const firstOriginOption = optionsInDropdown[0];
    states.hoverIndex = getValueIndex(optionsArray.value, userCreatedOption || firstOriginOption);
  };
  const setSelected = () => {
    var _a;
    if (!props.multiple) {
      const option = getOption(props.modelValue);
      if ((_a = option.props) == null ? void 0 : _a.created) {
        states.createdLabel = option.props.value;
        states.createdSelected = true;
      } else {
        states.createdSelected = false;
      }
      states.selectedLabel = option.currentLabel;
      states.selected = option;
      if (props.filterable)
        states.query = states.selectedLabel;
      return;
    } else {
      states.selectedLabel = "";
    }
    const result = [];
    if (Array.isArray(props.modelValue)) {
      props.modelValue.forEach((value) => {
        result.push(getOption(value));
      });
    }
    states.selected = result;
    (0,external_Vue_.nextTick)(() => {
      resetInputHeight();
    });
  };
  const getOption = (value) => {
    let option;
    const isObjectValue = (0,shared_esm_bundler/* toRawType */.W7)(value).toLowerCase() === "object";
    const isNull = (0,shared_esm_bundler/* toRawType */.W7)(value).toLowerCase() === "null";
    const isUndefined = (0,shared_esm_bundler/* toRawType */.W7)(value).toLowerCase() === "undefined";
    for (let i = states.cachedOptions.size - 1; i >= 0; i--) {
      const cachedOption = cachedOptionsArray.value[i];
      const isEqualValue = isObjectValue ? (0,get/* default */.Z)(cachedOption.value, props.valueKey) === (0,get/* default */.Z)(value, props.valueKey) : cachedOption.value === value;
      if (isEqualValue) {
        option = {
          value,
          currentLabel: cachedOption.currentLabel,
          isDisabled: cachedOption.isDisabled
        };
        break;
      }
    }
    if (option)
      return option;
    const label = isObjectValue ? value.label : !isNull && !isUndefined ? value : "";
    const newOption = {
      value,
      currentLabel: label
    };
    if (props.multiple) {
      ;
      newOption.hitState = false;
    }
    return newOption;
  };
  const resetHoverIndex = () => {
    setTimeout(() => {
      const valueKey = props.valueKey;
      if (!props.multiple) {
        states.hoverIndex = optionsArray.value.findIndex((item) => {
          return getValueKey(item) === getValueKey(states.selected);
        });
      } else {
        if (states.selected.length > 0) {
          states.hoverIndex = Math.min.apply(null, states.selected.map((selected) => {
            return optionsArray.value.findIndex((item) => {
              return (0,get/* default */.Z)(item, valueKey) === (0,get/* default */.Z)(selected, valueKey);
            });
          }));
        } else {
          states.hoverIndex = -1;
        }
      }
    }, 300);
  };
  const handleResize = () => {
    var _a, _b;
    resetInputWidth();
    (_b = (_a = tooltipRef.value) == null ? void 0 : _a.updatePopper) == null ? void 0 : _b.call(_a);
    if (props.multiple && !props.filterable)
      resetInputHeight();
  };
  const resetInputWidth = () => {
    var _a;
    states.inputWidth = (_a = reference.value) == null ? void 0 : _a.$el.getBoundingClientRect().width;
  };
  const onInputChange = () => {
    if (props.filterable && states.query !== states.selectedLabel) {
      states.query = states.selectedLabel;
      handleQueryChange(states.query);
    }
  };
  const debouncedOnInputChange = (0,debounce/* default */.Z)(() => {
    onInputChange();
  }, debounce$1.value);
  const debouncedQueryChange = (0,debounce/* default */.Z)((e) => {
    handleQueryChange(e.target.value);
  }, debounce$1.value);
  const emitChange = (val) => {
    if (!(0,isEqual/* default */.Z)(props.modelValue, val)) {
      ctx.emit(constants_event/* CHANGE_EVENT */.O7, val);
    }
  };
  const deletePrevTag = (e) => {
    if (e.target.value.length <= 0 && !toggleLastOptionHitState()) {
      const value = props.modelValue.slice();
      value.pop();
      ctx.emit(constants_event/* UPDATE_MODEL_EVENT */.f_, value);
      emitChange(value);
    }
    if (e.target.value.length === 1 && props.modelValue.length === 0) {
      states.currentPlaceholder = states.cachedPlaceHolder;
    }
  };
  const deleteTag = (event, tag) => {
    const index = states.selected.indexOf(tag);
    if (index > -1 && !selectDisabled.value) {
      const value = props.modelValue.slice();
      value.splice(index, 1);
      ctx.emit(constants_event/* UPDATE_MODEL_EVENT */.f_, value);
      emitChange(value);
      ctx.emit("remove-tag", tag.value);
    }
    event.stopPropagation();
  };
  const deleteSelected = (event) => {
    event.stopPropagation();
    const value = props.multiple ? [] : "";
    if (typeof value !== "string") {
      for (const item of states.selected) {
        if (item.isDisabled)
          value.push(item.value);
      }
    }
    ctx.emit(constants_event/* UPDATE_MODEL_EVENT */.f_, value);
    emitChange(value);
    states.visible = false;
    ctx.emit("clear");
  };
  const handleOptionSelect = (option, byClick) => {
    var _a;
    if (props.multiple) {
      const value = (props.modelValue || []).slice();
      const optionIndex = getValueIndex(value, option.value);
      if (optionIndex > -1) {
        value.splice(optionIndex, 1);
      } else if (props.multipleLimit <= 0 || value.length < props.multipleLimit) {
        value.push(option.value);
      }
      ctx.emit(constants_event/* UPDATE_MODEL_EVENT */.f_, value);
      emitChange(value);
      if (option.created) {
        states.query = "";
        handleQueryChange("");
        states.inputLength = 20;
      }
      if (props.filterable)
        (_a = input.value) == null ? void 0 : _a.focus();
    } else {
      ctx.emit(constants_event/* UPDATE_MODEL_EVENT */.f_, option.value);
      emitChange(option.value);
      states.visible = false;
    }
    states.isSilentBlur = byClick;
    setSoftFocus();
    if (states.visible)
      return;
    (0,external_Vue_.nextTick)(() => {
      scrollToOption(option);
    });
  };
  const getValueIndex = (arr = [], value) => {
    if (!(0,shared_esm_bundler/* isObject */.Kn)(value))
      return arr.indexOf(value);
    const valueKey = props.valueKey;
    let index = -1;
    arr.some((item, i) => {
      if ((0,get/* default */.Z)(item, valueKey) === (0,get/* default */.Z)(value, valueKey)) {
        index = i;
        return true;
      }
      return false;
    });
    return index;
  };
  const setSoftFocus = () => {
    states.softFocus = true;
    const _input = input.value || reference.value;
    if (_input) {
      _input == null ? void 0 : _input.focus();
    }
  };
  const scrollToOption = (option) => {
    var _a, _b, _c, _d, _e;
    const targetOption = Array.isArray(option) ? option[0] : option;
    let target = null;
    if (targetOption == null ? void 0 : targetOption.value) {
      const options = optionsArray.value.filter((item) => item.value === targetOption.value);
      if (options.length > 0) {
        target = options[0].$el;
      }
    }
    if (tooltipRef.value && target) {
      const menu = (_d = (_c = (_b = (_a = tooltipRef.value) == null ? void 0 : _a.popperRef) == null ? void 0 : _b.contentRef) == null ? void 0 : _c.querySelector) == null ? void 0 : _d.call(_c, `.${ns.be("dropdown", "wrap")}`);
      if (menu) {
        scrollIntoView(menu, target);
      }
    }
    (_e = scrollbar.value) == null ? void 0 : _e.handleScroll();
  };
  const onOptionCreate = (vm) => {
    states.optionsCount++;
    states.filteredOptionsCount++;
    states.options.set(vm.value, vm);
    states.cachedOptions.set(vm.value, vm);
  };
  const onOptionDestroy = (key, vm) => {
    if (states.options.get(key) === vm) {
      states.optionsCount--;
      states.filteredOptionsCount--;
      states.options.delete(key);
    }
  };
  const resetInputState = (e) => {
    if (e.code !== aria_EVENT_CODE.backspace)
      toggleLastOptionHitState(false);
    states.inputLength = input.value.value.length * 15 + 20;
    resetInputHeight();
  };
  const toggleLastOptionHitState = (hit) => {
    if (!Array.isArray(states.selected))
      return;
    const option = states.selected[states.selected.length - 1];
    if (!option)
      return;
    if (hit === true || hit === false) {
      option.hitState = hit;
      return hit;
    }
    option.hitState = !option.hitState;
    return option.hitState;
  };
  const handleComposition = (event) => {
    const text = event.target.value;
    if (event.type === "compositionend") {
      states.isOnComposition = false;
      (0,external_Vue_.nextTick)(() => handleQueryChange(text));
    } else {
      const lastCharacter = text[text.length - 1] || "";
      states.isOnComposition = !(0,i18n/* isKorean */.w)(lastCharacter);
    }
  };
  const handleMenuEnter = () => {
    (0,external_Vue_.nextTick)(() => scrollToOption(states.selected));
  };
  const handleFocus = (event) => {
    if (!states.softFocus) {
      if (props.automaticDropdown || props.filterable) {
        if (props.filterable && !states.visible) {
          states.menuVisibleOnFocus = true;
        }
        states.visible = true;
      }
      ctx.emit("focus", event);
    } else {
      states.softFocus = false;
    }
  };
  const blur = () => {
    var _a;
    states.visible = false;
    (_a = reference.value) == null ? void 0 : _a.blur();
  };
  const handleBlur = (event) => {
    (0,external_Vue_.nextTick)(() => {
      if (states.isSilentBlur) {
        states.isSilentBlur = false;
      } else {
        ctx.emit("blur", event);
      }
    });
    states.softFocus = false;
  };
  const handleClearClick = (event) => {
    deleteSelected(event);
  };
  const handleClose = () => {
    states.visible = false;
  };
  const handleKeydownEscape = (event) => {
    if (states.visible) {
      event.preventDefault();
      event.stopPropagation();
      states.visible = false;
    }
  };
  const toggleMenu = () => {
    var _a;
    if (props.automaticDropdown)
      return;
    if (!selectDisabled.value) {
      if (states.menuVisibleOnFocus) {
        states.menuVisibleOnFocus = false;
      } else {
        states.visible = !states.visible;
      }
      if (states.visible) {
        ;
        (_a = input.value || reference.value) == null ? void 0 : _a.focus();
      }
    }
  };
  const selectOption = () => {
    if (!states.visible) {
      toggleMenu();
    } else {
      if (optionsArray.value[states.hoverIndex]) {
        handleOptionSelect(optionsArray.value[states.hoverIndex], void 0);
      }
    }
  };
  const getValueKey = (item) => {
    return (0,shared_esm_bundler/* isObject */.Kn)(item.value) ? (0,get/* default */.Z)(item.value, props.valueKey) : item.value;
  };
  const optionsAllDisabled = (0,external_Vue_.computed)(() => optionsArray.value.filter((option) => option.visible).every((option) => option.disabled));
  const navigateOptions = (direction) => {
    if (!states.visible) {
      states.visible = true;
      return;
    }
    if (states.options.size === 0 || states.filteredOptionsCount === 0)
      return;
    if (states.isOnComposition)
      return;
    if (!optionsAllDisabled.value) {
      if (direction === "next") {
        states.hoverIndex++;
        if (states.hoverIndex === states.options.size) {
          states.hoverIndex = 0;
        }
      } else if (direction === "prev") {
        states.hoverIndex--;
        if (states.hoverIndex < 0) {
          states.hoverIndex = states.options.size - 1;
        }
      }
      const option = optionsArray.value[states.hoverIndex];
      if (option.disabled === true || option.states.groupDisabled === true || !option.visible) {
        navigateOptions(direction);
      }
      (0,external_Vue_.nextTick)(() => scrollToOption(hoverOption.value));
    }
  };
  return {
    optionsArray,
    selectSize,
    handleResize,
    debouncedOnInputChange,
    debouncedQueryChange,
    deletePrevTag,
    deleteTag,
    deleteSelected,
    handleOptionSelect,
    scrollToOption,
    readonly,
    resetInputHeight,
    showClose,
    iconComponent,
    iconReverse,
    showNewOption,
    collapseTagSize,
    setSelected,
    managePlaceholder,
    selectDisabled,
    emptyText,
    toggleLastOptionHitState,
    resetInputState,
    handleComposition,
    onOptionCreate,
    onOptionDestroy,
    handleMenuEnter,
    handleFocus,
    blur,
    handleBlur,
    handleClearClick,
    handleClose,
    handleKeydownEscape,
    toggleMenu,
    selectOption,
    getValueKey,
    navigateOptions,
    dropMenuVisible,
    queryChange,
    groupQueryChange,
    reference,
    input,
    tooltipRef,
    tags,
    selectWrapper,
    scrollbar
  };
};


//# sourceMappingURL=useSelect.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/hooks/use-focus/index.mjs
const useFocus = (el) => {
  return {
    focus: () => {
      var _a, _b;
      (_b = (_a = el.value) == null ? void 0 : _a.focus) == null ? void 0 : _b.call(_a);
    }
  };
};


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/select/src/select.mjs


























const select_COMPONENT_NAME = "ElSelect";
const select_sfc_main = (0,external_Vue_.defineComponent)({
  name: select_COMPONENT_NAME,
  componentName: select_COMPONENT_NAME,
  components: {
    ElInput: components_input/* ElInput */.EZ,
    ElSelectMenu: ElSelectMenu,
    ElOption: Option,
    ElTag: ElTag,
    ElScrollbar: ElScrollbar,
    ElTooltip: ElTooltip,
    ElIcon: components_icon/* ElIcon */.gn
  },
  directives: { ClickOutside: ClickOutside },
  props: {
    name: String,
    id: String,
    modelValue: {
      type: [Array, String, Number, Boolean, Object],
      default: void 0
    },
    autocomplete: {
      type: String,
      default: "off"
    },
    automaticDropdown: Boolean,
    size: {
      type: String,
      validator: isValidComponentSize
    },
    effect: {
      type: String,
      default: "light"
    },
    disabled: Boolean,
    clearable: Boolean,
    filterable: Boolean,
    allowCreate: Boolean,
    loading: Boolean,
    popperClass: {
      type: String,
      default: ""
    },
    remote: Boolean,
    loadingText: String,
    noMatchText: String,
    noDataText: String,
    remoteMethod: Function,
    filterMethod: Function,
    multiple: Boolean,
    multipleLimit: {
      type: Number,
      default: 0
    },
    placeholder: {
      type: String
    },
    defaultFirstOption: Boolean,
    reserveKeyword: {
      type: Boolean,
      default: true
    },
    valueKey: {
      type: String,
      default: "value"
    },
    collapseTags: Boolean,
    collapseTagsTooltip: {
      type: Boolean,
      default: false
    },
    teleported: useTooltipContentProps.teleported,
    persistent: {
      type: Boolean,
      default: true
    },
    clearIcon: {
      type: [String, Object],
      default: dist/* CircleClose */.K41
    },
    fitInputWidth: {
      type: Boolean,
      default: false
    },
    suffixIcon: {
      type: [String, Object],
      default: dist/* ArrowUp */.a2Z
    },
    tagType: { ...tagProps.type, default: "info" }
  },
  emits: [
    constants_event/* UPDATE_MODEL_EVENT */.f_,
    constants_event/* CHANGE_EVENT */.O7,
    "remove-tag",
    "clear",
    "visible-change",
    "focus",
    "blur"
  ],
  setup(props, ctx) {
    const nsSelect = (0,use_namespace/* useNamespace */.s)("select");
    const nsInput = (0,use_namespace/* useNamespace */.s)("input");
    const { t } = useLocale();
    const states = useSelectStates(props);
    const {
      optionsArray,
      selectSize,
      readonly,
      handleResize,
      collapseTagSize,
      debouncedOnInputChange,
      debouncedQueryChange,
      deletePrevTag,
      deleteTag,
      deleteSelected,
      handleOptionSelect,
      scrollToOption,
      setSelected,
      resetInputHeight,
      managePlaceholder,
      showClose,
      selectDisabled,
      iconComponent,
      iconReverse,
      showNewOption,
      emptyText,
      toggleLastOptionHitState,
      resetInputState,
      handleComposition,
      onOptionCreate,
      onOptionDestroy,
      handleMenuEnter,
      handleFocus,
      blur,
      handleBlur,
      handleClearClick,
      handleClose,
      handleKeydownEscape,
      toggleMenu,
      selectOption,
      getValueKey,
      navigateOptions,
      dropMenuVisible,
      reference,
      input,
      tooltipRef,
      tags,
      selectWrapper,
      scrollbar,
      queryChange,
      groupQueryChange
    } = useSelect(props, states, ctx);
    const { focus } = useFocus(reference);
    const {
      inputWidth,
      selected,
      inputLength,
      filteredOptionsCount,
      visible,
      softFocus,
      selectedLabel,
      hoverIndex,
      query,
      inputHovering,
      currentPlaceholder,
      menuVisibleOnFocus,
      isOnComposition,
      isSilentBlur,
      options,
      cachedOptions,
      optionsCount,
      prefixWidth,
      tagInMultiLine
    } = (0,external_Vue_.toRefs)(states);
    const wrapperKls = (0,external_Vue_.computed)(() => {
      const classList = [nsSelect.b()];
      const _selectSize = (0,external_Vue_.unref)(selectSize);
      if (_selectSize) {
        classList.push(nsSelect.m(_selectSize));
      }
      if (props.disabled) {
        classList.push(nsSelect.m("disabled"));
      }
      return classList;
    });
    const selectTagsStyle = (0,external_Vue_.computed)(() => ({
      maxWidth: `${(0,external_Vue_.unref)(inputWidth) - 32}px`,
      width: "100%"
    }));
    (0,external_Vue_.provide)(selectKey, (0,external_Vue_.reactive)({
      props,
      options,
      optionsArray,
      cachedOptions,
      optionsCount,
      filteredOptionsCount,
      hoverIndex,
      handleOptionSelect,
      onOptionCreate,
      onOptionDestroy,
      selectWrapper,
      selected,
      setSelected,
      queryChange,
      groupQueryChange
    }));
    (0,external_Vue_.onMounted)(() => {
      states.cachedPlaceHolder = currentPlaceholder.value = props.placeholder || t("el.select.placeholder");
      if (props.multiple && Array.isArray(props.modelValue) && props.modelValue.length > 0) {
        currentPlaceholder.value = "";
      }
      (0,core/* useResizeObserver */.yU7)(selectWrapper, handleResize);
      if (props.remote && props.multiple) {
        resetInputHeight();
      }
      (0,external_Vue_.nextTick)(() => {
        const refEl = reference.value && reference.value.$el;
        if (!refEl)
          return;
        inputWidth.value = refEl.getBoundingClientRect().width;
        if (ctx.slots.prefix) {
          const prefix = refEl.querySelector(`.${nsInput.e("prefix")}`);
          prefixWidth.value = Math.max(prefix.getBoundingClientRect().width + 5, 30);
        }
      });
      setSelected();
    });
    if (props.multiple && !Array.isArray(props.modelValue)) {
      ctx.emit(constants_event/* UPDATE_MODEL_EVENT */.f_, []);
    }
    if (!props.multiple && Array.isArray(props.modelValue)) {
      ctx.emit(constants_event/* UPDATE_MODEL_EVENT */.f_, "");
    }
    const popperPaneRef = (0,external_Vue_.computed)(() => {
      var _a, _b;
      return (_b = (_a = tooltipRef.value) == null ? void 0 : _a.popperRef) == null ? void 0 : _b.contentRef;
    });
    return {
      tagInMultiLine,
      prefixWidth,
      selectSize,
      readonly,
      handleResize,
      collapseTagSize,
      debouncedOnInputChange,
      debouncedQueryChange,
      deletePrevTag,
      deleteTag,
      deleteSelected,
      handleOptionSelect,
      scrollToOption,
      inputWidth,
      selected,
      inputLength,
      filteredOptionsCount,
      visible,
      softFocus,
      selectedLabel,
      hoverIndex,
      query,
      inputHovering,
      currentPlaceholder,
      menuVisibleOnFocus,
      isOnComposition,
      isSilentBlur,
      options,
      resetInputHeight,
      managePlaceholder,
      showClose,
      selectDisabled,
      iconComponent,
      iconReverse,
      showNewOption,
      emptyText,
      toggleLastOptionHitState,
      resetInputState,
      handleComposition,
      handleMenuEnter,
      handleFocus,
      blur,
      handleBlur,
      handleClearClick,
      handleClose,
      handleKeydownEscape,
      toggleMenu,
      selectOption,
      getValueKey,
      navigateOptions,
      dropMenuVisible,
      focus,
      reference,
      input,
      tooltipRef,
      popperPaneRef,
      tags,
      selectWrapper,
      scrollbar,
      wrapperKls,
      selectTagsStyle,
      nsSelect
    };
  }
});
const select_hoisted_1 = { class: "select-trigger" };
const select_hoisted_2 = ["disabled", "autocomplete"];
const select_hoisted_3 = { style: { "height": "100%", "display": "flex", "justify-content": "center", "align-items": "center" } };
function select_sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_el_tag = (0,external_Vue_.resolveComponent)("el-tag");
  const _component_el_tooltip = (0,external_Vue_.resolveComponent)("el-tooltip");
  const _component_el_icon = (0,external_Vue_.resolveComponent)("el-icon");
  const _component_el_input = (0,external_Vue_.resolveComponent)("el-input");
  const _component_el_option = (0,external_Vue_.resolveComponent)("el-option");
  const _component_el_scrollbar = (0,external_Vue_.resolveComponent)("el-scrollbar");
  const _component_el_select_menu = (0,external_Vue_.resolveComponent)("el-select-menu");
  const _directive_click_outside = (0,external_Vue_.resolveDirective)("click-outside");
  return (0,external_Vue_.withDirectives)(((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
    ref: "selectWrapper",
    class: (0,external_Vue_.normalizeClass)(_ctx.wrapperKls),
    onClick: _cache[23] || (_cache[23] = (0,external_Vue_.withModifiers)((...args) => _ctx.toggleMenu && _ctx.toggleMenu(...args), ["stop"]))
  }, [
    (0,external_Vue_.createVNode)(_component_el_tooltip, {
      ref: "tooltipRef",
      visible: _ctx.dropMenuVisible,
      "onUpdate:visible": _cache[22] || (_cache[22] = ($event) => _ctx.dropMenuVisible = $event),
      placement: "bottom-start",
      teleported: _ctx.teleported,
      "popper-class": [_ctx.nsSelect.e("popper"), _ctx.popperClass],
      "fallback-placements": ["bottom-start", "top-start", "right", "left"],
      effect: _ctx.effect,
      pure: "",
      trigger: "click",
      transition: `${_ctx.nsSelect.namespace.value}-zoom-in-top`,
      "stop-popper-mouse-event": false,
      "gpu-acceleration": false,
      persistent: _ctx.persistent,
      onShow: _ctx.handleMenuEnter
    }, {
      default: (0,external_Vue_.withCtx)(() => [
        (0,external_Vue_.createElementVNode)("div", select_hoisted_1, [
          _ctx.multiple ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
            key: 0,
            ref: "tags",
            class: (0,external_Vue_.normalizeClass)(_ctx.nsSelect.e("tags")),
            style: (0,external_Vue_.normalizeStyle)(_ctx.selectTagsStyle)
          }, [
            _ctx.collapseTags && _ctx.selected.length ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("span", {
              key: 0,
              class: (0,external_Vue_.normalizeClass)([
                _ctx.nsSelect.b("tags-wrapper"),
                { "has-prefix": _ctx.prefixWidth && _ctx.selected.length }
              ])
            }, [
              (0,external_Vue_.createVNode)(_component_el_tag, {
                closable: !_ctx.selectDisabled && !_ctx.selected[0].isDisabled,
                size: _ctx.collapseTagSize,
                hit: _ctx.selected[0].hitState,
                type: _ctx.tagType,
                "disable-transitions": "",
                onClose: _cache[0] || (_cache[0] = ($event) => _ctx.deleteTag($event, _ctx.selected[0]))
              }, {
                default: (0,external_Vue_.withCtx)(() => [
                  (0,external_Vue_.createElementVNode)("span", {
                    class: (0,external_Vue_.normalizeClass)(_ctx.nsSelect.e("tags-text")),
                    style: (0,external_Vue_.normalizeStyle)({ maxWidth: _ctx.inputWidth - 123 + "px" })
                  }, (0,external_Vue_.toDisplayString)(_ctx.selected[0].currentLabel), 7)
                ]),
                _: 1
              }, 8, ["closable", "size", "hit", "type"]),
              _ctx.selected.length > 1 ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(_component_el_tag, {
                key: 0,
                closable: false,
                size: _ctx.collapseTagSize,
                type: _ctx.tagType,
                "disable-transitions": ""
              }, {
                default: (0,external_Vue_.withCtx)(() => [
                  _ctx.collapseTagsTooltip ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(_component_el_tooltip, {
                    key: 0,
                    disabled: _ctx.dropMenuVisible,
                    "fallback-placements": ["bottom", "top", "right", "left"],
                    effect: _ctx.effect,
                    placement: "bottom",
                    teleported: false
                  }, {
                    default: (0,external_Vue_.withCtx)(() => [
                      (0,external_Vue_.createElementVNode)("span", {
                        class: (0,external_Vue_.normalizeClass)(_ctx.nsSelect.e("tags-text"))
                      }, "+ " + (0,external_Vue_.toDisplayString)(_ctx.selected.length - 1), 3)
                    ]),
                    content: (0,external_Vue_.withCtx)(() => [
                      (0,external_Vue_.createElementVNode)("div", {
                        class: (0,external_Vue_.normalizeClass)(_ctx.nsSelect.e("collapse-tags"))
                      }, [
                        ((0,external_Vue_.openBlock)(true), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, null, (0,external_Vue_.renderList)(_ctx.selected.slice(1), (item, idx) => {
                          return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
                            key: idx,
                            class: (0,external_Vue_.normalizeClass)(_ctx.nsSelect.e("collapse-tag"))
                          }, [
                            ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(_component_el_tag, {
                              key: _ctx.getValueKey(item),
                              class: "in-tooltip",
                              closable: !_ctx.selectDisabled && !item.isDisabled,
                              size: _ctx.collapseTagSize,
                              hit: item.hitState,
                              type: _ctx.tagType,
                              "disable-transitions": "",
                              style: { margin: "2px" },
                              onClose: ($event) => _ctx.deleteTag($event, item)
                            }, {
                              default: (0,external_Vue_.withCtx)(() => [
                                (0,external_Vue_.createElementVNode)("span", {
                                  class: (0,external_Vue_.normalizeClass)(_ctx.nsSelect.e("tags-text")),
                                  style: (0,external_Vue_.normalizeStyle)({
                                    maxWidth: _ctx.inputWidth - 75 + "px"
                                  })
                                }, (0,external_Vue_.toDisplayString)(item.currentLabel), 7)
                              ]),
                              _: 2
                            }, 1032, ["closable", "size", "hit", "type", "onClose"]))
                          ], 2);
                        }), 128))
                      ], 2)
                    ]),
                    _: 1
                  }, 8, ["disabled", "effect"])) : ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("span", {
                    key: 1,
                    class: (0,external_Vue_.normalizeClass)(_ctx.nsSelect.e("tags-text"))
                  }, "+ " + (0,external_Vue_.toDisplayString)(_ctx.selected.length - 1), 3))
                ]),
                _: 1
              }, 8, ["size", "type"])) : (0,external_Vue_.createCommentVNode)("v-if", true)
            ], 2)) : (0,external_Vue_.createCommentVNode)("v-if", true),
            (0,external_Vue_.createCommentVNode)(" <div> "),
            !_ctx.collapseTags ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(external_Vue_.Transition, {
              key: 1,
              onAfterLeave: _ctx.resetInputHeight
            }, {
              default: (0,external_Vue_.withCtx)(() => [
                (0,external_Vue_.createElementVNode)("span", {
                  class: (0,external_Vue_.normalizeClass)([
                    _ctx.nsSelect.b("tags-wrapper"),
                    { "has-prefix": _ctx.prefixWidth && _ctx.selected.length }
                  ])
                }, [
                  ((0,external_Vue_.openBlock)(true), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, null, (0,external_Vue_.renderList)(_ctx.selected, (item) => {
                    return (0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(_component_el_tag, {
                      key: _ctx.getValueKey(item),
                      closable: !_ctx.selectDisabled && !item.isDisabled,
                      size: _ctx.collapseTagSize,
                      hit: item.hitState,
                      type: _ctx.tagType,
                      "disable-transitions": "",
                      onClose: ($event) => _ctx.deleteTag($event, item)
                    }, {
                      default: (0,external_Vue_.withCtx)(() => [
                        (0,external_Vue_.createElementVNode)("span", {
                          class: (0,external_Vue_.normalizeClass)(_ctx.nsSelect.e("tags-text")),
                          style: (0,external_Vue_.normalizeStyle)({ maxWidth: _ctx.inputWidth - 75 + "px" })
                        }, (0,external_Vue_.toDisplayString)(item.currentLabel), 7)
                      ]),
                      _: 2
                    }, 1032, ["closable", "size", "hit", "type", "onClose"]);
                  }), 128))
                ], 2)
              ]),
              _: 1
            }, 8, ["onAfterLeave"])) : (0,external_Vue_.createCommentVNode)("v-if", true),
            (0,external_Vue_.createCommentVNode)(" </div> "),
            _ctx.filterable ? (0,external_Vue_.withDirectives)(((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("input", {
              key: 2,
              ref: "input",
              "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => _ctx.query = $event),
              type: "text",
              class: (0,external_Vue_.normalizeClass)([_ctx.nsSelect.e("input"), _ctx.nsSelect.is(_ctx.selectSize)]),
              disabled: _ctx.selectDisabled,
              autocomplete: _ctx.autocomplete,
              style: (0,external_Vue_.normalizeStyle)({
                marginLeft: _ctx.prefixWidth && !_ctx.selected.length || _ctx.tagInMultiLine ? `${_ctx.prefixWidth}px` : "",
                flexGrow: 1,
                width: `${_ctx.inputLength / (_ctx.inputWidth - 32)}%`,
                maxWidth: `${_ctx.inputWidth - 42}px`
              }),
              onFocus: _cache[2] || (_cache[2] = (...args) => _ctx.handleFocus && _ctx.handleFocus(...args)),
              onBlur: _cache[3] || (_cache[3] = (...args) => _ctx.handleBlur && _ctx.handleBlur(...args)),
              onKeyup: _cache[4] || (_cache[4] = (...args) => _ctx.managePlaceholder && _ctx.managePlaceholder(...args)),
              onKeydown: [
                _cache[5] || (_cache[5] = (...args) => _ctx.resetInputState && _ctx.resetInputState(...args)),
                _cache[6] || (_cache[6] = (0,external_Vue_.withKeys)((0,external_Vue_.withModifiers)(($event) => _ctx.navigateOptions("next"), ["prevent"]), ["down"])),
                _cache[7] || (_cache[7] = (0,external_Vue_.withKeys)((0,external_Vue_.withModifiers)(($event) => _ctx.navigateOptions("prev"), ["prevent"]), ["up"])),
                _cache[8] || (_cache[8] = (0,external_Vue_.withKeys)((...args) => _ctx.handleKeydownEscape && _ctx.handleKeydownEscape(...args), ["esc"])),
                _cache[9] || (_cache[9] = (0,external_Vue_.withKeys)((0,external_Vue_.withModifiers)((...args) => _ctx.selectOption && _ctx.selectOption(...args), ["stop", "prevent"]), ["enter"])),
                _cache[10] || (_cache[10] = (0,external_Vue_.withKeys)((...args) => _ctx.deletePrevTag && _ctx.deletePrevTag(...args), ["delete"])),
                _cache[11] || (_cache[11] = (0,external_Vue_.withKeys)(($event) => _ctx.visible = false, ["tab"]))
              ],
              onCompositionstart: _cache[12] || (_cache[12] = (...args) => _ctx.handleComposition && _ctx.handleComposition(...args)),
              onCompositionupdate: _cache[13] || (_cache[13] = (...args) => _ctx.handleComposition && _ctx.handleComposition(...args)),
              onCompositionend: _cache[14] || (_cache[14] = (...args) => _ctx.handleComposition && _ctx.handleComposition(...args)),
              onInput: _cache[15] || (_cache[15] = (...args) => _ctx.debouncedQueryChange && _ctx.debouncedQueryChange(...args))
            }, null, 46, select_hoisted_2)), [
              [external_Vue_.vModelText, _ctx.query]
            ]) : (0,external_Vue_.createCommentVNode)("v-if", true)
          ], 6)) : (0,external_Vue_.createCommentVNode)("v-if", true),
          (0,external_Vue_.createVNode)(_component_el_input, {
            id: _ctx.id,
            ref: "reference",
            modelValue: _ctx.selectedLabel,
            "onUpdate:modelValue": _cache[16] || (_cache[16] = ($event) => _ctx.selectedLabel = $event),
            type: "text",
            placeholder: _ctx.currentPlaceholder,
            name: _ctx.name,
            autocomplete: _ctx.autocomplete,
            size: _ctx.selectSize,
            disabled: _ctx.selectDisabled,
            readonly: _ctx.readonly,
            "validate-event": false,
            class: (0,external_Vue_.normalizeClass)([_ctx.nsSelect.is("focus", _ctx.visible)]),
            tabindex: _ctx.multiple && _ctx.filterable ? -1 : void 0,
            onFocus: _ctx.handleFocus,
            onBlur: _ctx.handleBlur,
            onInput: _ctx.debouncedOnInputChange,
            onPaste: _ctx.debouncedOnInputChange,
            onCompositionstart: _ctx.handleComposition,
            onCompositionupdate: _ctx.handleComposition,
            onCompositionend: _ctx.handleComposition,
            onKeydown: [
              _cache[17] || (_cache[17] = (0,external_Vue_.withKeys)((0,external_Vue_.withModifiers)(($event) => _ctx.navigateOptions("next"), ["stop", "prevent"]), ["down"])),
              _cache[18] || (_cache[18] = (0,external_Vue_.withKeys)((0,external_Vue_.withModifiers)(($event) => _ctx.navigateOptions("prev"), ["stop", "prevent"]), ["up"])),
              (0,external_Vue_.withKeys)((0,external_Vue_.withModifiers)(_ctx.selectOption, ["stop", "prevent"]), ["enter"]),
              (0,external_Vue_.withKeys)(_ctx.handleKeydownEscape, ["esc"]),
              _cache[19] || (_cache[19] = (0,external_Vue_.withKeys)(($event) => _ctx.visible = false, ["tab"]))
            ],
            onMouseenter: _cache[20] || (_cache[20] = ($event) => _ctx.inputHovering = true),
            onMouseleave: _cache[21] || (_cache[21] = ($event) => _ctx.inputHovering = false)
          }, (0,external_Vue_.createSlots)({
            suffix: (0,external_Vue_.withCtx)(() => [
              _ctx.iconComponent && !_ctx.showClose ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(_component_el_icon, {
                key: 0,
                class: (0,external_Vue_.normalizeClass)([_ctx.nsSelect.e("caret"), _ctx.nsSelect.e("icon"), _ctx.iconReverse])
              }, {
                default: (0,external_Vue_.withCtx)(() => [
                  ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.resolveDynamicComponent)(_ctx.iconComponent)))
                ]),
                _: 1
              }, 8, ["class"])) : (0,external_Vue_.createCommentVNode)("v-if", true),
              _ctx.showClose && _ctx.clearIcon ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(_component_el_icon, {
                key: 1,
                class: (0,external_Vue_.normalizeClass)([_ctx.nsSelect.e("caret"), _ctx.nsSelect.e("icon")]),
                onClick: _ctx.handleClearClick
              }, {
                default: (0,external_Vue_.withCtx)(() => [
                  ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.resolveDynamicComponent)(_ctx.clearIcon)))
                ]),
                _: 1
              }, 8, ["class", "onClick"])) : (0,external_Vue_.createCommentVNode)("v-if", true)
            ]),
            _: 2
          }, [
            _ctx.$slots.prefix ? {
              name: "prefix",
              fn: (0,external_Vue_.withCtx)(() => [
                (0,external_Vue_.createElementVNode)("div", select_hoisted_3, [
                  (0,external_Vue_.renderSlot)(_ctx.$slots, "prefix")
                ])
              ])
            } : void 0
          ]), 1032, ["id", "modelValue", "placeholder", "name", "autocomplete", "size", "disabled", "readonly", "class", "tabindex", "onFocus", "onBlur", "onInput", "onPaste", "onCompositionstart", "onCompositionupdate", "onCompositionend", "onKeydown"])
        ])
      ]),
      content: (0,external_Vue_.withCtx)(() => [
        (0,external_Vue_.createVNode)(_component_el_select_menu, null, {
          default: (0,external_Vue_.withCtx)(() => [
            (0,external_Vue_.withDirectives)((0,external_Vue_.createVNode)(_component_el_scrollbar, {
              ref: "scrollbar",
              tag: "ul",
              "wrap-class": _ctx.nsSelect.be("dropdown", "wrap"),
              "view-class": _ctx.nsSelect.be("dropdown", "list"),
              class: (0,external_Vue_.normalizeClass)([
                _ctx.nsSelect.is("empty", !_ctx.allowCreate && Boolean(_ctx.query) && _ctx.filteredOptionsCount === 0)
              ])
            }, {
              default: (0,external_Vue_.withCtx)(() => [
                _ctx.showNewOption ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(_component_el_option, {
                  key: 0,
                  value: _ctx.query,
                  created: true
                }, null, 8, ["value"])) : (0,external_Vue_.createCommentVNode)("v-if", true),
                (0,external_Vue_.renderSlot)(_ctx.$slots, "default")
              ]),
              _: 3
            }, 8, ["wrap-class", "view-class", "class"]), [
              [external_Vue_.vShow, _ctx.options.size > 0 && !_ctx.loading]
            ]),
            _ctx.emptyText && (!_ctx.allowCreate || _ctx.loading || _ctx.allowCreate && _ctx.options.size === 0) ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, { key: 0 }, [
              _ctx.$slots.empty ? (0,external_Vue_.renderSlot)(_ctx.$slots, "empty", { key: 0 }) : ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("p", {
                key: 1,
                class: (0,external_Vue_.normalizeClass)(_ctx.nsSelect.be("dropdown", "empty"))
              }, (0,external_Vue_.toDisplayString)(_ctx.emptyText), 3))
            ], 64)) : (0,external_Vue_.createCommentVNode)("v-if", true)
          ]),
          _: 3
        })
      ]),
      _: 3
    }, 8, ["visible", "teleported", "popper-class", "effect", "transition", "persistent", "onShow"])
  ], 2)), [
    [_directive_click_outside, _ctx.handleClose, _ctx.popperPaneRef]
  ]);
}
var Select = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(select_sfc_main, [["render", select_sfc_render], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/select/src/select.vue"]]);


//# sourceMappingURL=select.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/select/src/option-group.mjs






const option_group_sfc_main = (0,external_Vue_.defineComponent)({
  name: "ElOptionGroup",
  componentName: "ElOptionGroup",
  props: {
    label: String,
    disabled: {
      type: Boolean,
      default: false
    }
  },
  setup(props) {
    const ns = (0,use_namespace/* useNamespace */.s)("select");
    const visible = (0,external_Vue_.ref)(true);
    const instance = (0,external_Vue_.getCurrentInstance)();
    const children = (0,external_Vue_.ref)([]);
    (0,external_Vue_.provide)(selectGroupKey, (0,external_Vue_.reactive)({
      ...(0,external_Vue_.toRefs)(props)
    }));
    const select = (0,external_Vue_.inject)(selectKey);
    (0,external_Vue_.onMounted)(() => {
      children.value = flattedChildren(instance.subTree);
    });
    const flattedChildren = (node) => {
      const children2 = [];
      if (Array.isArray(node.children)) {
        node.children.forEach((child) => {
          var _a;
          if (child.type && child.type.name === "ElOption" && child.component && child.component.proxy) {
            children2.push(child.component.proxy);
          } else if ((_a = child.children) == null ? void 0 : _a.length) {
            children2.push(...flattedChildren(child));
          }
        });
      }
      return children2;
    };
    const { groupQueryChange } = (0,external_Vue_.toRaw)(select);
    (0,external_Vue_.watch)(groupQueryChange, () => {
      visible.value = children.value.some((option) => option.visible === true);
    });
    return {
      visible,
      ns
    };
  }
});
function option_group_sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return (0,external_Vue_.withDirectives)(((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("ul", {
    class: (0,external_Vue_.normalizeClass)(_ctx.ns.be("group", "wrap"))
  }, [
    (0,external_Vue_.createElementVNode)("li", {
      class: (0,external_Vue_.normalizeClass)(_ctx.ns.be("group", "title"))
    }, (0,external_Vue_.toDisplayString)(_ctx.label), 3),
    (0,external_Vue_.createElementVNode)("li", null, [
      (0,external_Vue_.createElementVNode)("ul", {
        class: (0,external_Vue_.normalizeClass)(_ctx.ns.b("group"))
      }, [
        (0,external_Vue_.renderSlot)(_ctx.$slots, "default")
      ], 2)
    ])
  ], 2)), [
    [external_Vue_.vShow, _ctx.visible]
  ]);
}
var OptionGroup = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(option_group_sfc_main, [["render", option_group_sfc_render], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/select/src/option-group.vue"]]);


//# sourceMappingURL=option-group.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/select/index.mjs







const ElSelect = (0,install/* withInstall */.nz)(Select, {
  Option: Option,
  OptionGroup: OptionGroup
});
const ElOption = (0,install/* withNoopInstall */.dp)(Option);
const ElOptionGroup = (0,install/* withNoopInstall */.dp)(OptionGroup);


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/tokens/pagination.mjs
const elPaginationKey = Symbol("elPaginationKey");


//# sourceMappingURL=pagination.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/pagination/src/usePagination.mjs




const usePagination = () => (0,external_Vue_.inject)(elPaginationKey, {});


//# sourceMappingURL=usePagination.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/pagination/src/components/sizes.mjs




const paginationSizesProps = (0,runtime/* buildProps */.o8)({
  pageSize: {
    type: Number,
    required: true
  },
  pageSizes: {
    type: (0,runtime/* definePropType */.Cq)(Array),
    default: () => (0,typescript/* mutable */.N)([10, 20, 30, 40, 50, 100])
  },
  popperClass: {
    type: String
  },
  disabled: Boolean,
  size: {
    type: String,
    default: "default"
  }
});


//# sourceMappingURL=sizes.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/pagination/src/components/sizes2.mjs










const sizes2_default_ = {
  name: "ElPaginationSizes"
};
const sizes2_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...sizes2_default_,
  props: paginationSizesProps,
  emits: ["page-size-change"],
  setup(__props, { emit }) {
    const props = __props;
    const { t } = useLocale();
    const ns = (0,use_namespace/* useNamespace */.s)("pagination");
    const pagination = usePagination();
    const innerPageSize = (0,external_Vue_.ref)(props.pageSize);
    (0,external_Vue_.watch)(() => props.pageSizes, (newVal, oldVal) => {
      if ((0,isEqual/* default */.Z)(newVal, oldVal))
        return;
      if (Array.isArray(newVal)) {
        const pageSize = newVal.includes(props.pageSize) ? props.pageSize : props.pageSizes[0];
        emit("page-size-change", pageSize);
      }
    });
    (0,external_Vue_.watch)(() => props.pageSize, (newVal) => {
      innerPageSize.value = newVal;
    });
    const innerPageSizes = (0,external_Vue_.computed)(() => props.pageSizes);
    function handleChange(val) {
      var _a;
      if (val !== innerPageSize.value) {
        innerPageSize.value = val;
        (_a = pagination.handleSizeChange) == null ? void 0 : _a.call(pagination, Number(val));
      }
    }
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("span", {
        class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("sizes"))
      }, [
        (0,external_Vue_.createVNode)((0,external_Vue_.unref)(ElSelect), {
          "model-value": innerPageSize.value,
          disabled: _ctx.disabled,
          "popper-class": _ctx.popperClass,
          size: _ctx.size,
          onChange: handleChange
        }, {
          default: (0,external_Vue_.withCtx)(() => [
            ((0,external_Vue_.openBlock)(true), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, null, (0,external_Vue_.renderList)((0,external_Vue_.unref)(innerPageSizes), (item) => {
              return (0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.unref)(ElOption), {
                key: item,
                value: item,
                label: item + (0,external_Vue_.unref)(t)("el.pagination.pagesize")
              }, null, 8, ["value", "label"]);
            }), 128))
          ]),
          _: 1
        }, 8, ["model-value", "disabled", "popper-class", "size"])
      ], 2);
    };
  }
});
var Sizes = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(sizes2_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/pagination/src/components/sizes.vue"]]);


//# sourceMappingURL=sizes2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/pagination/src/components/jumper.mjs








const jumper_hoisted_1 = ["disabled"];
const jumper_default_ = {
  name: "ElPaginationJumper"
};
const jumper_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...jumper_default_,
  setup(__props) {
    const { t } = useLocale();
    const ns = (0,use_namespace/* useNamespace */.s)("pagination");
    const { pageCount, disabled, currentPage, changeEvent } = usePagination();
    const userInput = (0,external_Vue_.ref)();
    const innerValue = (0,external_Vue_.computed)(() => {
      var _a;
      return (_a = userInput.value) != null ? _a : currentPage == null ? void 0 : currentPage.value;
    });
    function handleInput(val) {
      userInput.value = +val;
    }
    function handleChange(val) {
      val = Math.trunc(+val);
      changeEvent == null ? void 0 : changeEvent(+val);
      userInput.value = void 0;
    }
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("span", {
        class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("jump")),
        disabled: (0,external_Vue_.unref)(disabled)
      }, [
        (0,external_Vue_.createTextVNode)((0,external_Vue_.toDisplayString)((0,external_Vue_.unref)(t)("el.pagination.goto")) + " ", 1),
        (0,external_Vue_.createVNode)((0,external_Vue_.unref)(components_input/* ElInput */.EZ), {
          size: "small",
          class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(ns).e("editor"), (0,external_Vue_.unref)(ns).is("in-pagination")]),
          min: 1,
          max: (0,external_Vue_.unref)(pageCount),
          disabled: (0,external_Vue_.unref)(disabled),
          "model-value": (0,external_Vue_.unref)(innerValue),
          type: "number",
          "onUpdate:modelValue": handleInput,
          onChange: handleChange
        }, null, 8, ["class", "max", "disabled", "model-value"]),
        (0,external_Vue_.createTextVNode)(" " + (0,external_Vue_.toDisplayString)((0,external_Vue_.unref)(t)("el.pagination.pageClassifier")), 1)
      ], 10, jumper_hoisted_1);
    };
  }
});
var Jumper = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(jumper_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/pagination/src/components/jumper.vue"]]);


//# sourceMappingURL=jumper.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/pagination/src/components/total.mjs



const paginationTotalProps = (0,runtime/* buildProps */.o8)({
  total: {
    type: Number,
    default: 1e3
  }
});


//# sourceMappingURL=total.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/pagination/src/components/total2.mjs








const total2_hoisted_1 = ["disabled"];
const total2_default_ = {
  name: "ElPaginationTotal"
};
const total2_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...total2_default_,
  props: paginationTotalProps,
  setup(__props) {
    const { t } = useLocale();
    const ns = (0,use_namespace/* useNamespace */.s)("pagination");
    const { disabled } = usePagination();
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("span", {
        class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("total")),
        disabled: (0,external_Vue_.unref)(disabled)
      }, (0,external_Vue_.toDisplayString)((0,external_Vue_.unref)(t)("el.pagination.total", {
        total: _ctx.total
      })), 11, total2_hoisted_1);
    };
  }
});
var Total = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(total2_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/pagination/src/components/total.vue"]]);


//# sourceMappingURL=total2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/pagination/src/components/pager.mjs



const paginationPagerProps = (0,runtime/* buildProps */.o8)({
  currentPage: {
    type: Number,
    default: 1
  },
  pageCount: {
    type: Number,
    required: true
  },
  pagerCount: {
    type: Number,
    default: 7
  },
  disabled: Boolean
});


//# sourceMappingURL=pager.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/pagination/src/components/pager2.mjs







const pager2_hoisted_1 = ["onKeyup"];
const pager2_hoisted_2 = ["aria-current", "tabindex"];
const pager2_hoisted_3 = ["tabindex"];
const pager2_hoisted_4 = ["aria-current", "tabindex"];
const pager2_hoisted_5 = ["tabindex"];
const pager2_hoisted_6 = ["aria-current", "tabindex"];
const pager2_default_ = {
  name: "ElPaginationPager"
};
const pager2_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...pager2_default_,
  props: paginationPagerProps,
  emits: ["change"],
  setup(__props, { emit }) {
    const props = __props;
    const nsPager = (0,use_namespace/* useNamespace */.s)("pager");
    const nsIcon = (0,use_namespace/* useNamespace */.s)("icon");
    const showPrevMore = (0,external_Vue_.ref)(false);
    const showNextMore = (0,external_Vue_.ref)(false);
    const quickPrevHover = (0,external_Vue_.ref)(false);
    const quickNextHover = (0,external_Vue_.ref)(false);
    const quickPrevFocus = (0,external_Vue_.ref)(false);
    const quickNextFocus = (0,external_Vue_.ref)(false);
    const pagers = (0,external_Vue_.computed)(() => {
      const pagerCount = props.pagerCount;
      const halfPagerCount = (pagerCount - 1) / 2;
      const currentPage = Number(props.currentPage);
      const pageCount = Number(props.pageCount);
      let showPrevMore2 = false;
      let showNextMore2 = false;
      if (pageCount > pagerCount) {
        if (currentPage > pagerCount - halfPagerCount) {
          showPrevMore2 = true;
        }
        if (currentPage < pageCount - halfPagerCount) {
          showNextMore2 = true;
        }
      }
      const array = [];
      if (showPrevMore2 && !showNextMore2) {
        const startPage = pageCount - (pagerCount - 2);
        for (let i = startPage; i < pageCount; i++) {
          array.push(i);
        }
      } else if (!showPrevMore2 && showNextMore2) {
        for (let i = 2; i < pagerCount; i++) {
          array.push(i);
        }
      } else if (showPrevMore2 && showNextMore2) {
        const offset = Math.floor(pagerCount / 2) - 1;
        for (let i = currentPage - offset; i <= currentPage + offset; i++) {
          array.push(i);
        }
      } else {
        for (let i = 2; i < pageCount; i++) {
          array.push(i);
        }
      }
      return array;
    });
    const tabindex = (0,external_Vue_.computed)(() => props.disabled ? -1 : 0);
    (0,external_Vue_.watchEffect)(() => {
      const halfPagerCount = (props.pagerCount - 1) / 2;
      showPrevMore.value = false;
      showNextMore.value = false;
      if (props.pageCount > props.pagerCount) {
        if (props.currentPage > props.pagerCount - halfPagerCount) {
          showPrevMore.value = true;
        }
        if (props.currentPage < props.pageCount - halfPagerCount) {
          showNextMore.value = true;
        }
      }
    });
    function onMouseEnter(forward = false) {
      if (props.disabled)
        return;
      if (forward) {
        quickPrevHover.value = true;
      } else {
        quickNextHover.value = true;
      }
    }
    function onFocus(forward = false) {
      if (forward) {
        quickPrevFocus.value = true;
      } else {
        quickNextFocus.value = true;
      }
    }
    function onEnter(e) {
      const target = e.target;
      if (target.tagName.toLowerCase() === "li" && Array.from(target.classList).includes("number")) {
        const newPage = Number(target.textContent);
        if (newPage !== props.currentPage) {
          emit("change", newPage);
        }
      } else if (target.tagName.toLowerCase() === "li" && Array.from(target.classList).includes("more")) {
        onPagerClick(e);
      }
    }
    function onPagerClick(event) {
      const target = event.target;
      if (target.tagName.toLowerCase() === "ul" || props.disabled) {
        return;
      }
      let newPage = Number(target.textContent);
      const pageCount = props.pageCount;
      const currentPage = props.currentPage;
      const pagerCountOffset = props.pagerCount - 2;
      if (target.className.includes("more")) {
        if (target.className.includes("quickprev")) {
          newPage = currentPage - pagerCountOffset;
        } else if (target.className.includes("quicknext")) {
          newPage = currentPage + pagerCountOffset;
        }
      }
      if (!Number.isNaN(+newPage)) {
        if (newPage < 1) {
          newPage = 1;
        }
        if (newPage > pageCount) {
          newPage = pageCount;
        }
      }
      if (newPage !== currentPage) {
        emit("change", newPage);
      }
    }
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("ul", {
        class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(nsPager).b()),
        onClick: onPagerClick,
        onKeyup: (0,external_Vue_.withKeys)(onEnter, ["enter"])
      }, [
        _ctx.pageCount > 0 ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("li", {
          key: 0,
          class: (0,external_Vue_.normalizeClass)([[
            (0,external_Vue_.unref)(nsPager).is("active", _ctx.currentPage === 1),
            (0,external_Vue_.unref)(nsPager).is("disabled", _ctx.disabled)
          ], "number"]),
          "aria-current": _ctx.currentPage === 1,
          tabindex: (0,external_Vue_.unref)(tabindex)
        }, " 1 ", 10, pager2_hoisted_2)) : (0,external_Vue_.createCommentVNode)("v-if", true),
        showPrevMore.value ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("li", {
          key: 1,
          class: (0,external_Vue_.normalizeClass)([
            "more",
            "btn-quickprev",
            (0,external_Vue_.unref)(nsIcon).b(),
            (0,external_Vue_.unref)(nsPager).is("disabled", _ctx.disabled)
          ]),
          tabindex: (0,external_Vue_.unref)(tabindex),
          onMouseenter: _cache[0] || (_cache[0] = ($event) => onMouseEnter(true)),
          onMouseleave: _cache[1] || (_cache[1] = ($event) => quickPrevHover.value = false),
          onFocus: _cache[2] || (_cache[2] = ($event) => onFocus(true)),
          onBlur: _cache[3] || (_cache[3] = ($event) => quickPrevFocus.value = false)
        }, [
          quickPrevHover.value || quickPrevFocus.value ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.unref)(dist/* DArrowLeft */.BAP), { key: 0 })) : ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.unref)(dist/* MoreFilled */.ohl), { key: 1 }))
        ], 42, pager2_hoisted_3)) : (0,external_Vue_.createCommentVNode)("v-if", true),
        ((0,external_Vue_.openBlock)(true), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, null, (0,external_Vue_.renderList)((0,external_Vue_.unref)(pagers), (pager) => {
          return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("li", {
            key: pager,
            class: (0,external_Vue_.normalizeClass)([[
              (0,external_Vue_.unref)(nsPager).is("active", _ctx.currentPage === pager),
              (0,external_Vue_.unref)(nsPager).is("disabled", _ctx.disabled)
            ], "number"]),
            "aria-current": _ctx.currentPage === pager,
            tabindex: (0,external_Vue_.unref)(tabindex)
          }, (0,external_Vue_.toDisplayString)(pager), 11, pager2_hoisted_4);
        }), 128)),
        showNextMore.value ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("li", {
          key: 2,
          class: (0,external_Vue_.normalizeClass)([
            "more",
            "btn-quicknext",
            (0,external_Vue_.unref)(nsIcon).b(),
            (0,external_Vue_.unref)(nsPager).is("disabled", _ctx.disabled)
          ]),
          tabindex: (0,external_Vue_.unref)(tabindex),
          onMouseenter: _cache[4] || (_cache[4] = ($event) => onMouseEnter()),
          onMouseleave: _cache[5] || (_cache[5] = ($event) => quickNextHover.value = false),
          onFocus: _cache[6] || (_cache[6] = ($event) => onFocus()),
          onBlur: _cache[7] || (_cache[7] = ($event) => quickNextFocus.value = false)
        }, [
          quickNextHover.value || quickNextFocus.value ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.unref)(dist/* DArrowRight */.tsQ), { key: 0 })) : ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.unref)(dist/* MoreFilled */.ohl), { key: 1 }))
        ], 42, pager2_hoisted_5)) : (0,external_Vue_.createCommentVNode)("v-if", true),
        _ctx.pageCount > 1 ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("li", {
          key: 3,
          class: (0,external_Vue_.normalizeClass)([[
            (0,external_Vue_.unref)(nsPager).is("active", _ctx.currentPage === _ctx.pageCount),
            (0,external_Vue_.unref)(nsPager).is("disabled", _ctx.disabled)
          ], "number"]),
          "aria-current": _ctx.currentPage === _ctx.pageCount,
          tabindex: (0,external_Vue_.unref)(tabindex)
        }, (0,external_Vue_.toDisplayString)(_ctx.pageCount), 11, pager2_hoisted_6)) : (0,external_Vue_.createCommentVNode)("v-if", true)
      ], 42, pager2_hoisted_1);
    };
  }
});
var Pager = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(pager2_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/pagination/src/components/pager.vue"]]);


//# sourceMappingURL=pager2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/pagination/src/pagination.mjs

















const isAbsent = (v) => typeof v !== "number";
const paginationProps = (0,runtime/* buildProps */.o8)({
  total: Number,
  pageSize: Number,
  defaultPageSize: Number,
  currentPage: Number,
  defaultCurrentPage: Number,
  pageCount: Number,
  pagerCount: {
    type: Number,
    validator: (value) => {
      return typeof value === "number" && Math.trunc(value) === value && value > 4 && value < 22 && value % 2 === 1;
    },
    default: 7
  },
  layout: {
    type: String,
    default: ["prev", "pager", "next", "jumper", "->", "total"].join(", ")
  },
  pageSizes: {
    type: (0,runtime/* definePropType */.Cq)(Array),
    default: () => (0,typescript/* mutable */.N)([10, 20, 30, 40, 50, 100])
  },
  popperClass: {
    type: String,
    default: ""
  },
  prevText: {
    type: String,
    default: ""
  },
  nextText: {
    type: String,
    default: ""
  },
  small: Boolean,
  background: Boolean,
  disabled: Boolean,
  hideOnSinglePage: Boolean
});
const paginationEmits = {
  "update:current-page": (val) => typeof val === "number",
  "update:page-size": (val) => typeof val === "number",
  "size-change": (val) => typeof val === "number",
  "current-change": (val) => typeof val === "number",
  "prev-click": (val) => typeof val === "number",
  "next-click": (val) => typeof val === "number"
};
const componentName = "ElPagination";
var Pagination = (0,external_Vue_.defineComponent)({
  name: componentName,
  props: paginationProps,
  emits: paginationEmits,
  setup(props, { emit, slots }) {
    const { t } = useLocale();
    const ns = (0,use_namespace/* useNamespace */.s)("pagination");
    const vnodeProps = (0,external_Vue_.getCurrentInstance)().vnode.props || {};
    const hasCurrentPageListener = "onUpdate:currentPage" in vnodeProps || "onUpdate:current-page" in vnodeProps || "onCurrentChange" in vnodeProps;
    const hasPageSizeListener = "onUpdate:pageSize" in vnodeProps || "onUpdate:page-size" in vnodeProps || "onSizeChange" in vnodeProps;
    const assertValidUsage = (0,external_Vue_.computed)(() => {
      if (isAbsent(props.total) && isAbsent(props.pageCount))
        return false;
      if (!isAbsent(props.currentPage) && !hasCurrentPageListener)
        return false;
      if (props.layout.includes("sizes")) {
        if (!isAbsent(props.pageCount)) {
          if (!hasPageSizeListener)
            return false;
        } else if (!isAbsent(props.total)) {
          if (!isAbsent(props.pageSize)) {
            if (!hasPageSizeListener) {
              return false;
            }
          } else {
          }
        }
      }
      return true;
    });
    const innerPageSize = (0,external_Vue_.ref)(isAbsent(props.defaultPageSize) ? 10 : props.defaultPageSize);
    const innerCurrentPage = (0,external_Vue_.ref)(isAbsent(props.defaultCurrentPage) ? 1 : props.defaultCurrentPage);
    const pageSizeBridge = (0,external_Vue_.computed)({
      get() {
        return isAbsent(props.pageSize) ? innerPageSize.value : props.pageSize;
      },
      set(v) {
        if (isAbsent(props.pageSize)) {
          innerPageSize.value = v;
        }
        if (hasPageSizeListener) {
          emit("update:page-size", v);
          emit("size-change", v);
        }
      }
    });
    const pageCountBridge = (0,external_Vue_.computed)(() => {
      let pageCount = 0;
      if (!isAbsent(props.pageCount)) {
        pageCount = props.pageCount;
      } else if (!isAbsent(props.total)) {
        pageCount = Math.max(1, Math.ceil(props.total / pageSizeBridge.value));
      }
      return pageCount;
    });
    const currentPageBridge = (0,external_Vue_.computed)({
      get() {
        return isAbsent(props.currentPage) ? innerCurrentPage.value : props.currentPage;
      },
      set(v) {
        let newCurrentPage = v;
        if (v < 1) {
          newCurrentPage = 1;
        } else if (v > pageCountBridge.value) {
          newCurrentPage = pageCountBridge.value;
        }
        if (isAbsent(props.currentPage)) {
          innerCurrentPage.value = newCurrentPage;
        }
        if (hasCurrentPageListener) {
          emit("update:current-page", newCurrentPage);
          emit("current-change", newCurrentPage);
        }
      }
    });
    (0,external_Vue_.watch)(pageCountBridge, (val) => {
      if (currentPageBridge.value > val)
        currentPageBridge.value = val;
    });
    function handleCurrentChange(val) {
      currentPageBridge.value = val;
    }
    function handleSizeChange(val) {
      pageSizeBridge.value = val;
      const newPageCount = pageCountBridge.value;
      if (currentPageBridge.value > newPageCount) {
        currentPageBridge.value = newPageCount;
      }
    }
    function prev() {
      if (props.disabled)
        return;
      currentPageBridge.value -= 1;
      emit("prev-click", currentPageBridge.value);
    }
    function next() {
      if (props.disabled)
        return;
      currentPageBridge.value += 1;
      emit("next-click", currentPageBridge.value);
    }
    function addClass(element, cls) {
      if (element) {
        if (!element.props) {
          element.props = {};
        }
        element.props.class = [element.props.class, cls].join(" ");
      }
    }
    (0,external_Vue_.provide)(elPaginationKey, {
      pageCount: pageCountBridge,
      disabled: (0,external_Vue_.computed)(() => props.disabled),
      currentPage: currentPageBridge,
      changeEvent: handleCurrentChange,
      handleSizeChange
    });
    return () => {
      var _a, _b;
      if (!assertValidUsage.value) {
        (0,error/* debugWarn */.N)(componentName, t("el.pagination.deprecationWarning"));
        return null;
      }
      if (!props.layout)
        return null;
      if (props.hideOnSinglePage && pageCountBridge.value <= 1)
        return null;
      const rootChildren = [];
      const rightWrapperChildren = [];
      const rightWrapperRoot = (0,external_Vue_.h)("div", { class: ns.e("rightwrapper") }, rightWrapperChildren);
      const TEMPLATE_MAP = {
        prev: (0,external_Vue_.h)(Prev, {
          disabled: props.disabled,
          currentPage: currentPageBridge.value,
          prevText: props.prevText,
          onClick: prev
        }),
        jumper: (0,external_Vue_.h)(Jumper),
        pager: (0,external_Vue_.h)(Pager, {
          currentPage: currentPageBridge.value,
          pageCount: pageCountBridge.value,
          pagerCount: props.pagerCount,
          onChange: handleCurrentChange,
          disabled: props.disabled
        }),
        next: (0,external_Vue_.h)(Next, {
          disabled: props.disabled,
          currentPage: currentPageBridge.value,
          pageCount: pageCountBridge.value,
          nextText: props.nextText,
          onClick: next
        }),
        sizes: (0,external_Vue_.h)(Sizes, {
          pageSize: pageSizeBridge.value,
          pageSizes: props.pageSizes,
          popperClass: props.popperClass,
          disabled: props.disabled,
          size: props.small ? "small" : "default"
        }),
        slot: (_b = (_a = slots == null ? void 0 : slots.default) == null ? void 0 : _a.call(slots)) != null ? _b : null,
        total: (0,external_Vue_.h)(Total, { total: isAbsent(props.total) ? 0 : props.total })
      };
      const components = props.layout.split(",").map((item) => item.trim());
      let haveRightWrapper = false;
      components.forEach((c) => {
        if (c === "->") {
          haveRightWrapper = true;
          return;
        }
        if (!haveRightWrapper) {
          rootChildren.push(TEMPLATE_MAP[c]);
        } else {
          rightWrapperChildren.push(TEMPLATE_MAP[c]);
        }
      });
      addClass(rootChildren[0], ns.is("first"));
      addClass(rootChildren[rootChildren.length - 1], ns.is("last"));
      if (haveRightWrapper && rightWrapperChildren.length > 0) {
        addClass(rightWrapperChildren[0], ns.is("first"));
        addClass(rightWrapperChildren[rightWrapperChildren.length - 1], ns.is("last"));
        rootChildren.push(rightWrapperRoot);
      }
      return (0,external_Vue_.h)("div", {
        role: "pagination",
        "aria-label": "pagination",
        class: [
          ns.b(),
          ns.is("background", props.background),
          {
            [ns.m("small")]: props.small
          }
        ]
      }, rootChildren);
    };
  }
});


//# sourceMappingURL=pagination.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/pagination/index.mjs





const ElPagination = (0,install/* withInstall */.nz)(Pagination);


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/popconfirm/src/popconfirm.mjs









const popconfirmProps = (0,runtime/* buildProps */.o8)({
  title: String,
  confirmButtonText: String,
  cancelButtonText: String,
  confirmButtonType: {
    type: String,
    values: buttonTypes,
    default: "primary"
  },
  cancelButtonType: {
    type: String,
    values: buttonTypes,
    default: "text"
  },
  icon: {
    type: icon/* iconPropType */.AA,
    default: dist/* QuestionFilled */.Ruj
  },
  iconColor: {
    type: String,
    default: "#f90"
  },
  hideIcon: {
    type: Boolean,
    default: false
  },
  hideAfter: {
    type: Number,
    default: 200
  },
  onConfirm: {
    type: (0,runtime/* definePropType */.Cq)(Function)
  },
  onCancel: {
    type: (0,runtime/* definePropType */.Cq)(Function)
  },
  teleported: useTooltipContentProps.teleported,
  persistent: useTooltipContentProps.persistent
});


//# sourceMappingURL=popconfirm.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/popconfirm/src/popconfirm2.mjs










const popconfirm2_default_ = {
  name: "ElPopconfirm"
};
const popconfirm2_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...popconfirm2_default_,
  props: popconfirmProps,
  setup(__props) {
    const props = __props;
    const { t } = useLocale();
    const ns = (0,use_namespace/* useNamespace */.s)("popconfirm");
    const tooltipRef = (0,external_Vue_.ref)();
    const hidePopper = () => {
      var _a, _b;
      (_b = (_a = tooltipRef.value) == null ? void 0 : _a.onClose) == null ? void 0 : _b.call(_a);
    };
    const handleCallback = () => {
      hidePopper();
    };
    const confirm = (e) => {
      var _a;
      (_a = props.onConfirm) == null ? void 0 : _a.call(props, e);
      handleCallback();
    };
    const cancel = (e) => {
      var _a;
      (_a = props.onCancel) == null ? void 0 : _a.call(props, e);
      handleCallback();
    };
    const finalConfirmButtonText = (0,external_Vue_.computed)(() => props.confirmButtonText || t("el.popconfirm.confirmButtonText"));
    const finalCancelButtonText = (0,external_Vue_.computed)(() => props.cancelButtonText || t("el.popconfirm.cancelButtonText"));
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.unref)(ElTooltip), {
        ref_key: "tooltipRef",
        ref: tooltipRef,
        trigger: "click",
        effect: "light",
        "popper-class": `${(0,external_Vue_.unref)(ns).namespace.value}-popover`,
        teleported: _ctx.teleported,
        "fallback-placements": ["bottom", "top", "right", "left"],
        "hide-after": _ctx.hideAfter,
        persistent: _ctx.persistent
      }, {
        content: (0,external_Vue_.withCtx)(() => [
          (0,external_Vue_.createElementVNode)("div", {
            class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).b())
          }, [
            (0,external_Vue_.createElementVNode)("div", {
              class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("main"))
            }, [
              !_ctx.hideIcon && _ctx.icon ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.unref)(components_icon/* ElIcon */.gn), {
                key: 0,
                class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("icon")),
                style: (0,external_Vue_.normalizeStyle)({ color: _ctx.iconColor })
              }, {
                default: (0,external_Vue_.withCtx)(() => [
                  ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.resolveDynamicComponent)(_ctx.icon)))
                ]),
                _: 1
              }, 8, ["class", "style"])) : (0,external_Vue_.createCommentVNode)("v-if", true),
              (0,external_Vue_.createTextVNode)(" " + (0,external_Vue_.toDisplayString)(_ctx.title), 1)
            ], 2),
            (0,external_Vue_.createElementVNode)("div", {
              class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("action"))
            }, [
              (0,external_Vue_.createVNode)((0,external_Vue_.unref)(ElButton), {
                size: "small",
                type: _ctx.cancelButtonType === "text" ? "" : _ctx.cancelButtonType,
                text: _ctx.cancelButtonType === "text",
                onClick: cancel
              }, {
                default: (0,external_Vue_.withCtx)(() => [
                  (0,external_Vue_.createTextVNode)((0,external_Vue_.toDisplayString)((0,external_Vue_.unref)(finalCancelButtonText)), 1)
                ]),
                _: 1
              }, 8, ["type", "text"]),
              (0,external_Vue_.createVNode)((0,external_Vue_.unref)(ElButton), {
                size: "small",
                type: _ctx.confirmButtonType === "text" ? "" : _ctx.confirmButtonType,
                text: _ctx.confirmButtonType === "text",
                onClick: confirm
              }, {
                default: (0,external_Vue_.withCtx)(() => [
                  (0,external_Vue_.createTextVNode)((0,external_Vue_.toDisplayString)((0,external_Vue_.unref)(finalConfirmButtonText)), 1)
                ]),
                _: 1
              }, 8, ["type", "text"])
            ], 2)
          ], 2)
        ]),
        default: (0,external_Vue_.withCtx)(() => [
          _ctx.$slots.reference ? (0,external_Vue_.renderSlot)(_ctx.$slots, "reference", { key: 0 }) : (0,external_Vue_.createCommentVNode)("v-if", true)
        ]),
        _: 3
      }, 8, ["popper-class", "teleported", "hide-after", "persistent"]);
    };
  }
});
var Popconfirm = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(popconfirm2_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/popconfirm/src/popconfirm.vue"]]);


//# sourceMappingURL=popconfirm2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/popconfirm/index.mjs





const ElPopconfirm = (0,install/* withInstall */.nz)(Popconfirm);


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/popover/src/popover.mjs








const popoverProps = (0,runtime/* buildProps */.o8)({
  trigger: useTooltipTriggerProps.trigger,
  placement: dropdownProps.placement,
  disabled: useTooltipTriggerProps.disabled,
  visible: useTooltipContentProps.visible,
  transition: useTooltipContentProps.transition,
  popperOptions: dropdownProps.popperOptions,
  tabindex: dropdownProps.tabindex,
  content: useTooltipContentProps.content,
  popperStyle: useTooltipContentProps.popperStyle,
  popperClass: useTooltipContentProps.popperClass,
  enterable: {
    ...useTooltipContentProps.enterable,
    default: true
  },
  effect: {
    ...useTooltipContentProps.effect,
    default: "light"
  },
  teleported: useTooltipContentProps.teleported,
  title: String,
  width: {
    type: [String, Number],
    default: 150
  },
  offset: {
    type: Number,
    default: void 0
  },
  showAfter: {
    type: Number,
    default: 0
  },
  hideAfter: {
    type: Number,
    default: 200
  },
  autoClose: {
    type: Number,
    default: 0
  },
  showArrow: {
    type: Boolean,
    default: true
  },
  persistent: {
    type: Boolean,
    default: true
  }
});
const popoverEmits = {
  "update:visible": (value) => (0,shared/* isBoolean */.jn)(value),
  "before-enter": () => true,
  "before-leave": () => true,
  "after-enter": () => true,
  "after-leave": () => true
};


//# sourceMappingURL=popover.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/popover/src/popover2.mjs









const popover2_default_ = {
  name: "ElPopover"
};
const popover2_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...popover2_default_,
  props: popoverProps,
  emits: popoverEmits,
  setup(__props, { expose, emit }) {
    const props = __props;
    const ns = (0,use_namespace/* useNamespace */.s)("popover");
    const tooltipRef = (0,external_Vue_.ref)();
    const popperRef = (0,external_Vue_.computed)(() => {
      var _a;
      return (_a = (0,external_Vue_.unref)(tooltipRef)) == null ? void 0 : _a.popperRef;
    });
    const style = (0,external_Vue_.computed)(() => {
      return [
        {
          width: (0,dom_style/* addUnit */.Nn)(props.width)
        },
        props.popperStyle
      ];
    });
    const kls = (0,external_Vue_.computed)(() => {
      return [ns.b(), props.popperClass, { [ns.m("plain")]: !!props.content }];
    });
    const gpuAcceleration = (0,external_Vue_.computed)(() => {
      return props.transition === "el-fade-in-linear";
    });
    const hide = () => {
      var _a;
      (_a = tooltipRef.value) == null ? void 0 : _a.hide();
    };
    const beforeEnter = () => {
      emit("before-enter");
    };
    const beforeLeave = () => {
      emit("before-leave");
    };
    const afterEnter = () => {
      emit("after-enter");
    };
    const afterLeave = () => {
      emit("update:visible", false);
      emit("after-leave");
    };
    expose({
      popperRef,
      hide
    });
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.unref)(ElTooltip), (0,external_Vue_.mergeProps)({
        ref_key: "tooltipRef",
        ref: tooltipRef
      }, _ctx.$attrs, {
        trigger: _ctx.trigger,
        placement: _ctx.placement,
        disabled: _ctx.disabled,
        visible: _ctx.visible,
        transition: _ctx.transition,
        "popper-options": _ctx.popperOptions,
        tabindex: _ctx.tabindex,
        content: _ctx.content,
        offset: _ctx.offset,
        "show-after": _ctx.showAfter,
        "hide-after": _ctx.hideAfter,
        "auto-close": _ctx.autoClose,
        "show-arrow": _ctx.showArrow,
        "aria-label": _ctx.title,
        effect: _ctx.effect,
        enterable: _ctx.enterable,
        "popper-class": (0,external_Vue_.unref)(kls),
        "popper-style": (0,external_Vue_.unref)(style),
        teleported: _ctx.teleported,
        persistent: _ctx.persistent,
        "gpu-acceleration": (0,external_Vue_.unref)(gpuAcceleration),
        onBeforeShow: beforeEnter,
        onBeforeHide: beforeLeave,
        onShow: afterEnter,
        onHide: afterLeave
      }), {
        content: (0,external_Vue_.withCtx)(() => [
          _ctx.title ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
            key: 0,
            class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("title")),
            role: "title"
          }, (0,external_Vue_.toDisplayString)(_ctx.title), 3)) : (0,external_Vue_.createCommentVNode)("v-if", true),
          (0,external_Vue_.renderSlot)(_ctx.$slots, "default", {}, () => [
            (0,external_Vue_.createTextVNode)((0,external_Vue_.toDisplayString)(_ctx.content), 1)
          ])
        ]),
        default: (0,external_Vue_.withCtx)(() => [
          _ctx.$slots.reference ? (0,external_Vue_.renderSlot)(_ctx.$slots, "reference", { key: 0 }) : (0,external_Vue_.createCommentVNode)("v-if", true)
        ]),
        _: 3
      }, 16, ["trigger", "placement", "disabled", "visible", "transition", "popper-options", "tabindex", "content", "offset", "show-after", "hide-after", "auto-close", "show-arrow", "aria-label", "effect", "enterable", "popper-class", "popper-style", "teleported", "persistent", "gpu-acceleration"]);
    };
  }
});
var Popover = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(popover2_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/popover/src/popover.vue"]]);


//# sourceMappingURL=popover2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/popover/src/directive.mjs
const attachEvents = (el, binding) => {
  const popperComponent = binding.arg || binding.value;
  const popover = popperComponent == null ? void 0 : popperComponent.popperRef;
  if (popover) {
    popover.triggerRef = el;
  }
};
var PopoverDirective = {
  mounted(el, binding) {
    attachEvents(el, binding);
  },
  updated(el, binding) {
    attachEvents(el, binding);
  }
};
const VPopover = "popover";


//# sourceMappingURL=directive.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/popover/index.mjs






const ElPopoverDirective = (0,install/* withInstallDirective */.dH)(PopoverDirective, VPopover);
const ElPopover = (0,install/* withInstall */.nz)(Popover, {
  directive: ElPopoverDirective
});


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/progress/src/progress.mjs



const progressProps = (0,runtime/* buildProps */.o8)({
  type: {
    type: String,
    default: "line",
    values: ["line", "circle", "dashboard"]
  },
  percentage: {
    type: Number,
    default: 0,
    validator: (val) => val >= 0 && val <= 100
  },
  status: {
    type: String,
    default: "",
    values: ["", "success", "exception", "warning"]
  },
  indeterminate: {
    type: Boolean,
    default: false
  },
  duration: {
    type: Number,
    default: 3
  },
  strokeWidth: {
    type: Number,
    default: 6
  },
  strokeLinecap: {
    type: (0,runtime/* definePropType */.Cq)(String),
    default: "round"
  },
  textInside: {
    type: Boolean,
    default: false
  },
  width: {
    type: Number,
    default: 126
  },
  showText: {
    type: Boolean,
    default: true
  },
  color: {
    type: (0,runtime/* definePropType */.Cq)([
      String,
      Array,
      Function
    ]),
    default: ""
  },
  format: {
    type: (0,runtime/* definePropType */.Cq)(Function),
    default: (percentage) => `${percentage}%`
  }
});


//# sourceMappingURL=progress.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/progress/src/progress2.mjs










const progress2_hoisted_1 = ["aria-valuenow"];
const progress2_hoisted_2 = { viewBox: "0 0 100 100" };
const progress2_hoisted_3 = ["d", "stroke", "stroke-width"];
const progress2_hoisted_4 = ["d", "stroke", "opacity", "stroke-linecap", "stroke-width"];
const progress2_hoisted_5 = { key: 0 };
const progress2_default_ = {
  name: "ElProgress"
};
const progress2_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...progress2_default_,
  props: progressProps,
  setup(__props) {
    const props = __props;
    const STATUS_COLOR_MAP = {
      success: "#13ce66",
      exception: "#ff4949",
      warning: "#e6a23c",
      default: "#20a0ff"
    };
    const ns = (0,use_namespace/* useNamespace */.s)("progress");
    const barStyle = (0,external_Vue_.computed)(() => ({
      width: `${props.percentage}%`,
      animationDuration: `${props.duration}s`,
      backgroundColor: getCurrentColor(props.percentage)
    }));
    const relativeStrokeWidth = (0,external_Vue_.computed)(() => (props.strokeWidth / props.width * 100).toFixed(1));
    const radius = (0,external_Vue_.computed)(() => {
      if (["circle", "dashboard"].includes(props.type)) {
        return Number.parseInt(`${50 - Number.parseFloat(relativeStrokeWidth.value) / 2}`, 10);
      }
      return 0;
    });
    const trackPath = (0,external_Vue_.computed)(() => {
      const r = radius.value;
      const isDashboard = props.type === "dashboard";
      return `
          M 50 50
          m 0 ${isDashboard ? "" : "-"}${r}
          a ${r} ${r} 0 1 1 0 ${isDashboard ? "-" : ""}${r * 2}
          a ${r} ${r} 0 1 1 0 ${isDashboard ? "" : "-"}${r * 2}
          `;
    });
    const perimeter = (0,external_Vue_.computed)(() => 2 * Math.PI * radius.value);
    const rate = (0,external_Vue_.computed)(() => props.type === "dashboard" ? 0.75 : 1);
    const strokeDashoffset = (0,external_Vue_.computed)(() => {
      const offset = -1 * perimeter.value * (1 - rate.value) / 2;
      return `${offset}px`;
    });
    const trailPathStyle = (0,external_Vue_.computed)(() => ({
      strokeDasharray: `${perimeter.value * rate.value}px, ${perimeter.value}px`,
      strokeDashoffset: strokeDashoffset.value
    }));
    const circlePathStyle = (0,external_Vue_.computed)(() => ({
      strokeDasharray: `${perimeter.value * rate.value * (props.percentage / 100)}px, ${perimeter.value}px`,
      strokeDashoffset: strokeDashoffset.value,
      transition: "stroke-dasharray 0.6s ease 0s, stroke 0.6s ease, opacity ease 0.6s"
    }));
    const stroke = (0,external_Vue_.computed)(() => {
      let ret;
      if (props.color) {
        ret = getCurrentColor(props.percentage);
      } else {
        ret = STATUS_COLOR_MAP[props.status] || STATUS_COLOR_MAP.default;
      }
      return ret;
    });
    const statusIcon = (0,external_Vue_.computed)(() => {
      if (props.status === "warning") {
        return dist/* WarningFilled */.Rrw;
      }
      if (props.type === "line") {
        return props.status === "success" ? dist/* CircleCheck */.yGk : dist/* CircleClose */.K41;
      } else {
        return props.status === "success" ? dist/* Check */.JrY : dist/* Close */.x8P;
      }
    });
    const progressTextSize = (0,external_Vue_.computed)(() => {
      return props.type === "line" ? 12 + props.strokeWidth * 0.4 : props.width * 0.111111 + 2;
    });
    const content = (0,external_Vue_.computed)(() => props.format(props.percentage));
    function getColors(color) {
      const span = 100 / color.length;
      const seriesColors = color.map((seriesColor, index) => {
        if ((0,shared_esm_bundler/* isString */.HD)(seriesColor)) {
          return {
            color: seriesColor,
            percentage: (index + 1) * span
          };
        }
        return seriesColor;
      });
      return seriesColors.sort((a, b) => a.percentage - b.percentage);
    }
    const getCurrentColor = (percentage) => {
      var _a;
      const { color } = props;
      if ((0,shared_esm_bundler/* isFunction */.mf)(color)) {
        return color(percentage);
      } else if ((0,shared_esm_bundler/* isString */.HD)(color)) {
        return color;
      } else {
        const colors = getColors(color);
        for (const color2 of colors) {
          if (color2.percentage > percentage)
            return color2.color;
        }
        return (_a = colors[colors.length - 1]) == null ? void 0 : _a.color;
      }
    };
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
        class: (0,external_Vue_.normalizeClass)([
          (0,external_Vue_.unref)(ns).b(),
          (0,external_Vue_.unref)(ns).m(_ctx.type),
          (0,external_Vue_.unref)(ns).is(_ctx.status),
          {
            [(0,external_Vue_.unref)(ns).m("without-text")]: !_ctx.showText,
            [(0,external_Vue_.unref)(ns).m("text-inside")]: _ctx.textInside
          }
        ]),
        role: "progressbar",
        "aria-valuenow": _ctx.percentage,
        "aria-valuemin": "0",
        "aria-valuemax": "100"
      }, [
        _ctx.type === "line" ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
          key: 0,
          class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).b("bar"))
        }, [
          (0,external_Vue_.createElementVNode)("div", {
            class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).be("bar", "outer")),
            style: (0,external_Vue_.normalizeStyle)({ height: `${_ctx.strokeWidth}px` })
          }, [
            (0,external_Vue_.createElementVNode)("div", {
              class: (0,external_Vue_.normalizeClass)([
                (0,external_Vue_.unref)(ns).be("bar", "inner"),
                { [(0,external_Vue_.unref)(ns).bem("bar", "inner", "indeterminate")]: _ctx.indeterminate }
              ]),
              style: (0,external_Vue_.normalizeStyle)((0,external_Vue_.unref)(barStyle))
            }, [
              (_ctx.showText || _ctx.$slots.default) && _ctx.textInside ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
                key: 0,
                class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).be("bar", "innerText"))
              }, [
                (0,external_Vue_.renderSlot)(_ctx.$slots, "default", { percentage: _ctx.percentage }, () => [
                  (0,external_Vue_.createElementVNode)("span", null, (0,external_Vue_.toDisplayString)((0,external_Vue_.unref)(content)), 1)
                ])
              ], 2)) : (0,external_Vue_.createCommentVNode)("v-if", true)
            ], 6)
          ], 6)
        ], 2)) : ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
          key: 1,
          class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).b("circle")),
          style: (0,external_Vue_.normalizeStyle)({ height: `${_ctx.width}px`, width: `${_ctx.width}px` })
        }, [
          ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("svg", progress2_hoisted_2, [
            (0,external_Vue_.createElementVNode)("path", {
              class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).be("circle", "track")),
              d: (0,external_Vue_.unref)(trackPath),
              stroke: `var(${(0,external_Vue_.unref)(ns).cssVarName("fill-color-light")}, #e5e9f2)`,
              "stroke-width": (0,external_Vue_.unref)(relativeStrokeWidth),
              fill: "none",
              style: (0,external_Vue_.normalizeStyle)((0,external_Vue_.unref)(trailPathStyle))
            }, null, 14, progress2_hoisted_3),
            (0,external_Vue_.createElementVNode)("path", {
              class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).be("circle", "path")),
              d: (0,external_Vue_.unref)(trackPath),
              stroke: (0,external_Vue_.unref)(stroke),
              fill: "none",
              opacity: _ctx.percentage ? 1 : 0,
              "stroke-linecap": _ctx.strokeLinecap,
              "stroke-width": (0,external_Vue_.unref)(relativeStrokeWidth),
              style: (0,external_Vue_.normalizeStyle)((0,external_Vue_.unref)(circlePathStyle))
            }, null, 14, progress2_hoisted_4)
          ]))
        ], 6)),
        (_ctx.showText || _ctx.$slots.default) && !_ctx.textInside ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
          key: 2,
          class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("text")),
          style: (0,external_Vue_.normalizeStyle)({ fontSize: `${(0,external_Vue_.unref)(progressTextSize)}px` })
        }, [
          (0,external_Vue_.renderSlot)(_ctx.$slots, "default", { percentage: _ctx.percentage }, () => [
            !_ctx.status ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("span", progress2_hoisted_5, (0,external_Vue_.toDisplayString)((0,external_Vue_.unref)(content)), 1)) : ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.unref)(components_icon/* ElIcon */.gn), { key: 1 }, {
              default: (0,external_Vue_.withCtx)(() => [
                ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.resolveDynamicComponent)((0,external_Vue_.unref)(statusIcon))))
              ]),
              _: 1
            }))
          ])
        ], 6)) : (0,external_Vue_.createCommentVNode)("v-if", true)
      ], 10, progress2_hoisted_1);
    };
  }
});
var Progress = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(progress2_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/progress/src/progress.vue"]]);


//# sourceMappingURL=progress2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/progress/index.mjs





const ElProgress = (0,install/* withInstall */.nz)(Progress);


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/rate/src/rate.mjs










const rateProps = (0,runtime/* buildProps */.o8)({
  modelValue: {
    type: Number,
    default: 0
  },
  id: {
    type: String,
    default: void 0
  },
  lowThreshold: {
    type: Number,
    default: 2
  },
  highThreshold: {
    type: Number,
    default: 4
  },
  max: {
    type: Number,
    default: 5
  },
  colors: {
    type: (0,runtime/* definePropType */.Cq)([Array, Object]),
    default: () => (0,typescript/* mutable */.N)(["", "", ""])
  },
  voidColor: {
    type: String,
    default: ""
  },
  disabledVoidColor: {
    type: String,
    default: ""
  },
  icons: {
    type: (0,runtime/* definePropType */.Cq)([Array, Object]),
    default: () => [dist/* StarFilled */.RhE, dist/* StarFilled */.RhE, dist/* StarFilled */.RhE]
  },
  voidIcon: {
    type: icon/* iconPropType */.AA,
    default: () => dist/* Star */.Uxw
  },
  disabledVoidIcon: {
    type: icon/* iconPropType */.AA,
    default: () => dist/* StarFilled */.RhE
  },
  disabled: {
    type: Boolean
  },
  allowHalf: {
    type: Boolean
  },
  showText: {
    type: Boolean
  },
  showScore: {
    type: Boolean
  },
  textColor: {
    type: String,
    default: ""
  },
  texts: {
    type: (0,runtime/* definePropType */.Cq)(Array),
    default: () => (0,typescript/* mutable */.N)([
      "Extremely bad",
      "Disappointed",
      "Fair",
      "Satisfied",
      "Surprise"
    ])
  },
  scoreTemplate: {
    type: String,
    default: "{value}"
  },
  size: {
    type: String,
    validator: isValidComponentSize
  },
  label: {
    type: String,
    default: void 0
  }
});
const rateEmits = {
  [constants_event/* CHANGE_EVENT */.O7]: (value) => (0,shared/* isNumber */.hj)(value),
  [constants_event/* UPDATE_MODEL_EVENT */.f_]: (value) => (0,shared/* isNumber */.hj)(value)
};


//# sourceMappingURL=rate.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/rate/src/rate2.mjs

















const rate2_hoisted_1 = ["id", "aria-label", "aria-labelledby", "aria-valuenow", "aria-valuetext", "aria-valuemax"];
const rate2_hoisted_2 = ["onMousemove", "onClick"];
const rate2_default_ = {
  name: "ElRate"
};
const rate2_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...rate2_default_,
  props: rateProps,
  emits: rateEmits,
  setup(__props, { expose, emit }) {
    const props = __props;
    function getValueFromMap(value, map) {
      const isExcludedObject = (val) => (0,shared_esm_bundler/* isObject */.Kn)(val);
      const matchedKeys = Object.keys(map).map((key) => +key).filter((key) => {
        const val = map[key];
        const excluded = isExcludedObject(val) ? val.excluded : false;
        return excluded ? value < key : value <= key;
      }).sort((a, b) => a - b);
      const matchedValue = map[matchedKeys[0]];
      return isExcludedObject(matchedValue) && matchedValue.value || matchedValue;
    }
    const formContext = (0,external_Vue_.inject)(tokens_form/* formContextKey */.H, void 0);
    const formItemContext = (0,external_Vue_.inject)(tokens_form/* formItemContextKey */.K, void 0);
    const rateSize = (0,use_common_props/* useSize */.tH)();
    const ns = (0,use_namespace/* useNamespace */.s)("rate");
    const { inputId, isLabeledByFormItem } = (0,use_form_item/* useFormItemInputId */.p)(props, {
      formItemContext
    });
    const currentValue = (0,external_Vue_.ref)(props.modelValue);
    const hoverIndex = (0,external_Vue_.ref)(-1);
    const pointerAtLeftHalf = (0,external_Vue_.ref)(true);
    const rateClasses = (0,external_Vue_.computed)(() => [ns.b(), ns.m(rateSize.value)]);
    const rateDisabled = (0,external_Vue_.computed)(() => props.disabled || (formContext == null ? void 0 : formContext.disabled));
    const rateStyles = (0,external_Vue_.computed)(() => {
      return ns.cssVarBlock({
        "void-color": props.voidColor,
        "disabled-void-color": props.disabledVoidColor,
        "fill-color": activeColor.value
      });
    });
    const text = (0,external_Vue_.computed)(() => {
      let result = "";
      if (props.showScore) {
        result = props.scoreTemplate.replace(/\{\s*value\s*\}/, rateDisabled.value ? `${props.modelValue}` : `${currentValue.value}`);
      } else if (props.showText) {
        result = props.texts[Math.ceil(currentValue.value) - 1];
      }
      return result;
    });
    const valueDecimal = (0,external_Vue_.computed)(() => props.modelValue * 100 - Math.floor(props.modelValue) * 100);
    const colorMap = (0,external_Vue_.computed)(() => (0,shared_esm_bundler/* isArray */.kJ)(props.colors) ? {
      [props.lowThreshold]: props.colors[0],
      [props.highThreshold]: { value: props.colors[1], excluded: true },
      [props.max]: props.colors[2]
    } : props.colors);
    const activeColor = (0,external_Vue_.computed)(() => {
      const color = getValueFromMap(currentValue.value, colorMap.value);
      return (0,shared_esm_bundler/* isObject */.Kn)(color) ? "" : color;
    });
    const decimalStyle = (0,external_Vue_.computed)(() => {
      let width = "";
      if (rateDisabled.value) {
        width = `${valueDecimal.value}%`;
      } else if (props.allowHalf) {
        width = "50%";
      }
      return {
        color: activeColor.value,
        width
      };
    });
    const componentMap = (0,external_Vue_.computed)(() => (0,shared_esm_bundler/* isArray */.kJ)(props.icons) ? {
      [props.lowThreshold]: props.icons[0],
      [props.highThreshold]: {
        value: props.icons[1],
        excluded: true
      },
      [props.max]: props.icons[2]
    } : props.icons);
    const decimalIconComponent = (0,external_Vue_.computed)(() => getValueFromMap(props.modelValue, componentMap.value));
    const voidComponent = (0,external_Vue_.computed)(() => rateDisabled.value ? props.disabledVoidIcon : props.voidIcon);
    const activeComponent = (0,external_Vue_.computed)(() => getValueFromMap(currentValue.value, componentMap.value));
    const iconComponents = (0,external_Vue_.computed)(() => {
      const result = Array.from({ length: props.max });
      const threshold = currentValue.value;
      result.fill(activeComponent.value, 0, threshold);
      result.fill(voidComponent.value, threshold, props.max);
      return result;
    });
    function showDecimalIcon(item) {
      const showWhenDisabled = rateDisabled.value && valueDecimal.value > 0 && item - 1 < props.modelValue && item > props.modelValue;
      const showWhenAllowHalf = props.allowHalf && pointerAtLeftHalf.value && item - 0.5 <= currentValue.value && item > currentValue.value;
      return showWhenDisabled || showWhenAllowHalf;
    }
    function selectValue(value) {
      if (rateDisabled.value) {
        return;
      }
      if (props.allowHalf && pointerAtLeftHalf.value) {
        emit(constants_event/* UPDATE_MODEL_EVENT */.f_, currentValue.value);
        if (props.modelValue !== currentValue.value) {
          emit("change", currentValue.value);
        }
      } else {
        emit(constants_event/* UPDATE_MODEL_EVENT */.f_, value);
        if (props.modelValue !== value) {
          emit("change", value);
        }
      }
    }
    function handleKey(e) {
      if (rateDisabled.value) {
        return;
      }
      let _currentValue = currentValue.value;
      const code = e.code;
      if (code === aria_EVENT_CODE.up || code === aria_EVENT_CODE.right) {
        if (props.allowHalf) {
          _currentValue += 0.5;
        } else {
          _currentValue += 1;
        }
        e.stopPropagation();
        e.preventDefault();
      } else if (code === aria_EVENT_CODE.left || code === aria_EVENT_CODE.down) {
        if (props.allowHalf) {
          _currentValue -= 0.5;
        } else {
          _currentValue -= 1;
        }
        e.stopPropagation();
        e.preventDefault();
      }
      _currentValue = _currentValue < 0 ? 0 : _currentValue;
      _currentValue = _currentValue > props.max ? props.max : _currentValue;
      emit(constants_event/* UPDATE_MODEL_EVENT */.f_, _currentValue);
      emit("change", _currentValue);
      return _currentValue;
    }
    function setCurrentValue(value, event) {
      if (rateDisabled.value) {
        return;
      }
      if (props.allowHalf) {
        let target = event.target;
        if ((0,dom_style/* hasClass */.pv)(target, ns.e("item"))) {
          target = target.querySelector(`.${ns.e("icon")}`);
        }
        if (target.clientWidth === 0 || (0,dom_style/* hasClass */.pv)(target, ns.e("decimal"))) {
          target = target.parentNode;
        }
        pointerAtLeftHalf.value = event.offsetX * 2 <= target.clientWidth;
        currentValue.value = pointerAtLeftHalf.value ? value - 0.5 : value;
      } else {
        currentValue.value = value;
      }
      hoverIndex.value = value;
    }
    function resetCurrentValue() {
      if (rateDisabled.value) {
        return;
      }
      if (props.allowHalf) {
        pointerAtLeftHalf.value = props.modelValue !== Math.floor(props.modelValue);
      }
      currentValue.value = props.modelValue;
      hoverIndex.value = -1;
    }
    (0,external_Vue_.watch)(() => props.modelValue, (val) => {
      currentValue.value = val;
      pointerAtLeftHalf.value = props.modelValue !== Math.floor(props.modelValue);
    });
    if (!props.modelValue) {
      emit(constants_event/* UPDATE_MODEL_EVENT */.f_, 0);
    }
    expose({
      setCurrentValue,
      resetCurrentValue
    });
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
        id: (0,external_Vue_.unref)(inputId),
        class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(rateClasses), (0,external_Vue_.unref)(ns).is("disabled", (0,external_Vue_.unref)(rateDisabled))]),
        role: "slider",
        "aria-label": !(0,external_Vue_.unref)(isLabeledByFormItem) ? _ctx.label || "rating" : void 0,
        "aria-labelledby": (0,external_Vue_.unref)(isLabeledByFormItem) ? (0,external_Vue_.unref)(formItemContext).labelId : void 0,
        "aria-valuenow": currentValue.value,
        "aria-valuetext": (0,external_Vue_.unref)(text) || void 0,
        "aria-valuemin": "0",
        "aria-valuemax": _ctx.max,
        tabindex: "0",
        style: (0,external_Vue_.normalizeStyle)((0,external_Vue_.unref)(rateStyles)),
        onKeydown: handleKey
      }, [
        ((0,external_Vue_.openBlock)(true), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, null, (0,external_Vue_.renderList)(_ctx.max, (item, key) => {
          return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("span", {
            key,
            class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("item")),
            onMousemove: ($event) => setCurrentValue(item, $event),
            onMouseleave: resetCurrentValue,
            onClick: ($event) => selectValue(item)
          }, [
            (0,external_Vue_.createVNode)((0,external_Vue_.unref)(components_icon/* ElIcon */.gn), {
              class: (0,external_Vue_.normalizeClass)([
                (0,external_Vue_.unref)(ns).e("icon"),
                { hover: hoverIndex.value === item },
                (0,external_Vue_.unref)(ns).is("active", item <= currentValue.value)
              ])
            }, {
              default: (0,external_Vue_.withCtx)(() => [
                !showDecimalIcon(item) ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.resolveDynamicComponent)((0,external_Vue_.unref)(iconComponents)[item - 1]), { key: 0 })) : (0,external_Vue_.createCommentVNode)("v-if", true),
                showDecimalIcon(item) ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.unref)(components_icon/* ElIcon */.gn), {
                  key: 1,
                  style: (0,external_Vue_.normalizeStyle)((0,external_Vue_.unref)(decimalStyle)),
                  class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(ns).e("icon"), (0,external_Vue_.unref)(ns).e("decimal")])
                }, {
                  default: (0,external_Vue_.withCtx)(() => [
                    ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.resolveDynamicComponent)((0,external_Vue_.unref)(decimalIconComponent))))
                  ]),
                  _: 1
                }, 8, ["style", "class"])) : (0,external_Vue_.createCommentVNode)("v-if", true)
              ]),
              _: 2
            }, 1032, ["class"])
          ], 42, rate2_hoisted_2);
        }), 128)),
        _ctx.showText || _ctx.showScore ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("span", {
          key: 0,
          class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("text"))
        }, (0,external_Vue_.toDisplayString)((0,external_Vue_.unref)(text)), 3)) : (0,external_Vue_.createCommentVNode)("v-if", true)
      ], 46, rate2_hoisted_1);
    };
  }
});
var Rate = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(rate2_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/rate/src/rate.vue"]]);


//# sourceMappingURL=rate2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/rate/index.mjs





const ElRate = (0,install/* withInstall */.nz)(Rate);


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/result/src/result.mjs




const IconMap = {
  success: "icon-success",
  warning: "icon-warning",
  error: "icon-error",
  info: "icon-info"
};
const IconComponentMap = {
  [IconMap.success]: dist/* CircleCheckFilled */.rV3,
  [IconMap.warning]: dist/* WarningFilled */.Rrw,
  [IconMap.error]: dist/* CircleCloseFilled */.Tw$,
  [IconMap.info]: dist/* InfoFilled */.cEj
};
const resultProps = (0,runtime/* buildProps */.o8)({
  title: {
    type: String,
    default: ""
  },
  subTitle: {
    type: String,
    default: ""
  },
  icon: {
    type: String,
    values: ["success", "warning", "info", "error"],
    default: "info"
  }
});


//# sourceMappingURL=result.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/result/src/result2.mjs






const result2_default_ = {
  name: "ElResult"
};
const result2_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...result2_default_,
  props: resultProps,
  setup(__props) {
    const props = __props;
    const ns = (0,use_namespace/* useNamespace */.s)("result");
    const resultIcon = (0,external_Vue_.computed)(() => {
      const icon = props.icon;
      const iconClass = icon && IconMap[icon] ? IconMap[icon] : "icon-info";
      const iconComponent = IconComponentMap[iconClass] || IconComponentMap["icon-info"];
      return {
        class: iconClass,
        component: iconComponent
      };
    });
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
        class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).b())
      }, [
        (0,external_Vue_.createElementVNode)("div", {
          class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("icon"))
        }, [
          (0,external_Vue_.renderSlot)(_ctx.$slots, "icon", {}, () => [
            (0,external_Vue_.unref)(resultIcon).component ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.resolveDynamicComponent)((0,external_Vue_.unref)(resultIcon).component), {
              key: 0,
              class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(resultIcon).class)
            }, null, 8, ["class"])) : (0,external_Vue_.createCommentVNode)("v-if", true)
          ])
        ], 2),
        _ctx.title || _ctx.$slots.title ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
          key: 0,
          class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("title"))
        }, [
          (0,external_Vue_.renderSlot)(_ctx.$slots, "title", {}, () => [
            (0,external_Vue_.createElementVNode)("p", null, (0,external_Vue_.toDisplayString)(_ctx.title), 1)
          ])
        ], 2)) : (0,external_Vue_.createCommentVNode)("v-if", true),
        _ctx.subTitle || _ctx.$slots["sub-title"] ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
          key: 1,
          class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("subtitle"))
        }, [
          (0,external_Vue_.renderSlot)(_ctx.$slots, "sub-title", {}, () => [
            (0,external_Vue_.createElementVNode)("p", null, (0,external_Vue_.toDisplayString)(_ctx.subTitle), 1)
          ])
        ], 2)) : (0,external_Vue_.createCommentVNode)("v-if", true),
        _ctx.$slots.extra ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
          key: 2,
          class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("extra"))
        }, [
          (0,external_Vue_.renderSlot)(_ctx.$slots, "extra")
        ], 2)) : (0,external_Vue_.createCommentVNode)("v-if", true)
      ], 2);
    };
  }
});
var Result = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(result2_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/result/src/result.vue"]]);


//# sourceMappingURL=result2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/result/index.mjs





const ElResult = (0,install/* withInstall */.nz)(Result);


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/row/src/row.mjs



const RowJustify = [
  "start",
  "center",
  "end",
  "space-around",
  "space-between",
  "space-evenly"
];
const RowAlign = ["top", "middle", "bottom"];
const rowProps = (0,runtime/* buildProps */.o8)({
  tag: {
    type: String,
    default: "div"
  },
  gutter: {
    type: Number,
    default: 0
  },
  justify: {
    type: String,
    values: RowJustify,
    default: "start"
  },
  align: {
    type: String,
    values: RowAlign,
    default: "top"
  }
});


//# sourceMappingURL=row.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/row/src/row2.mjs








const row2_default_ = {
  name: "ElRow"
};
const row2_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...row2_default_,
  props: rowProps,
  setup(__props) {
    const props = __props;
    const ns = (0,use_namespace/* useNamespace */.s)("row");
    const gutter = (0,external_Vue_.computed)(() => props.gutter);
    (0,external_Vue_.provide)(rowContextKey, {
      gutter
    });
    const style = (0,external_Vue_.computed)(() => {
      const styles = {};
      if (!props.gutter) {
        return styles;
      }
      styles.marginRight = styles.marginLeft = `-${props.gutter / 2}px`;
      return styles;
    });
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.resolveDynamicComponent)(_ctx.tag), {
        class: (0,external_Vue_.normalizeClass)([
          (0,external_Vue_.unref)(ns).b(),
          (0,external_Vue_.unref)(ns).is(`justify-${props.justify}`, _ctx.justify !== "start"),
          (0,external_Vue_.unref)(ns).is(`align-${props.align}`, _ctx.align !== "top")
        ]),
        style: (0,external_Vue_.normalizeStyle)((0,external_Vue_.unref)(style))
      }, {
        default: (0,external_Vue_.withCtx)(() => [
          (0,external_Vue_.renderSlot)(_ctx.$slots, "default")
        ]),
        _: 3
      }, 8, ["class", "style"]);
    };
  }
});
var Row = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(row2_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/row/src/row.vue"]]);


//# sourceMappingURL=row2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/row/index.mjs





const ElRow = (0,install/* withInstall */.nz)(Row);


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/select-v2/src/group-item.mjs





const group_item_sfc_main = (0,external_Vue_.defineComponent)({
  props: {
    item: {
      type: Object,
      required: true
    },
    style: Object,
    height: Number
  },
  setup() {
    const ns = (0,use_namespace/* useNamespace */.s)("select");
    return {
      ns
    };
  }
});
function group_item_sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return _ctx.item.isTitle ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
    key: 0,
    class: (0,external_Vue_.normalizeClass)(_ctx.ns.be("group", "title")),
    style: (0,external_Vue_.normalizeStyle)([_ctx.style, { lineHeight: `${_ctx.height}px` }])
  }, (0,external_Vue_.toDisplayString)(_ctx.item.label), 7)) : ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
    key: 1,
    class: (0,external_Vue_.normalizeClass)(_ctx.ns.be("group", "split")),
    style: (0,external_Vue_.normalizeStyle)(_ctx.style)
  }, [
    (0,external_Vue_.createElementVNode)("span", {
      class: (0,external_Vue_.normalizeClass)(_ctx.ns.be("group", "split-dash")),
      style: (0,external_Vue_.normalizeStyle)({ top: `${_ctx.height / 2}px` })
    }, null, 6)
  ], 6));
}
var GroupItem = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(group_item_sfc_main, [["render", group_item_sfc_render], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/select-v2/src/group-item.vue"]]);


//# sourceMappingURL=group-item.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/select-v2/src/useOption.mjs
function useOption_useOption(props, { emit }) {
  return {
    hoverItem: () => {
      if (!props.disabled) {
        emit("hover", props.index);
      }
    },
    selectOptionClick: () => {
      if (!props.disabled) {
        emit("select", props.item, props.index);
      }
    }
  };
}


//# sourceMappingURL=useOption.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/select-v2/src/defaults.mjs






const SelectProps = {
  allowCreate: Boolean,
  autocomplete: {
    type: String,
    default: "none"
  },
  automaticDropdown: Boolean,
  clearable: Boolean,
  clearIcon: {
    type: [String, Object],
    default: dist/* CircleClose */.K41
  },
  effect: {
    type: String,
    default: "light"
  },
  collapseTags: Boolean,
  collapseTagsTooltip: {
    type: Boolean,
    default: false
  },
  defaultFirstOption: Boolean,
  disabled: Boolean,
  estimatedOptionHeight: {
    type: Number,
    default: void 0
  },
  filterable: Boolean,
  filterMethod: Function,
  height: {
    type: Number,
    default: 170
  },
  itemHeight: {
    type: Number,
    default: 34
  },
  id: String,
  loading: Boolean,
  loadingText: String,
  label: String,
  modelValue: [Array, String, Number, Boolean, Object],
  multiple: Boolean,
  multipleLimit: {
    type: Number,
    default: 0
  },
  name: String,
  noDataText: String,
  noMatchText: String,
  remoteMethod: Function,
  reserveKeyword: {
    type: Boolean,
    default: true
  },
  options: {
    type: Array,
    required: true
  },
  placeholder: {
    type: String
  },
  teleported: useTooltipContentProps.teleported,
  persistent: {
    type: Boolean,
    default: true
  },
  popperClass: {
    type: String,
    default: ""
  },
  popperOptions: {
    type: Object,
    default: () => ({})
  },
  remote: Boolean,
  size: {
    type: String,
    validator: isValidComponentSize
  },
  valueKey: {
    type: String,
    default: "value"
  },
  scrollbarAlwaysOn: {
    type: Boolean,
    default: false
  }
};
const OptionProps = {
  data: Array,
  disabled: Boolean,
  hovering: Boolean,
  item: Object,
  index: Number,
  style: Object,
  selected: Boolean,
  created: Boolean
};


//# sourceMappingURL=defaults.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/select-v2/src/option-item.mjs







const option_item_sfc_main = (0,external_Vue_.defineComponent)({
  props: OptionProps,
  emits: ["select", "hover"],
  setup(props, { emit }) {
    const ns = (0,use_namespace/* useNamespace */.s)("select");
    const { hoverItem, selectOptionClick } = useOption_useOption(props, { emit });
    return {
      ns,
      hoverItem,
      selectOptionClick
    };
  }
});
const option_item_hoisted_1 = ["aria-selected"];
function option_item_sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("li", {
    "aria-selected": _ctx.selected,
    style: (0,external_Vue_.normalizeStyle)(_ctx.style),
    class: (0,external_Vue_.normalizeClass)([
      _ctx.ns.be("dropdown", "option-item"),
      _ctx.ns.is("selected", _ctx.selected),
      _ctx.ns.is("disabled", _ctx.disabled),
      _ctx.ns.is("created", _ctx.created),
      { hover: _ctx.hovering }
    ]),
    onMouseenter: _cache[0] || (_cache[0] = (...args) => _ctx.hoverItem && _ctx.hoverItem(...args)),
    onClick: _cache[1] || (_cache[1] = (0,external_Vue_.withModifiers)((...args) => _ctx.selectOptionClick && _ctx.selectOptionClick(...args), ["stop"]))
  }, [
    (0,external_Vue_.renderSlot)(_ctx.$slots, "default", {
      item: _ctx.item,
      index: _ctx.index,
      disabled: _ctx.disabled
    }, () => [
      (0,external_Vue_.createElementVNode)("span", null, (0,external_Vue_.toDisplayString)(_ctx.item.label), 1)
    ])
  ], 46, option_item_hoisted_1);
}
var OptionItem = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(option_item_sfc_main, [["render", option_item_sfc_render], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/select-v2/src/option-item.vue"]]);


//# sourceMappingURL=option-item.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/select-v2/src/token.mjs
const selectV2InjectionKey = "ElSelectV2Injection";


//# sourceMappingURL=token.mjs.map

// EXTERNAL MODULE: ./node_modules/lodash-es/memoize.js
var memoize = __webpack_require__(42454);
// EXTERNAL MODULE: ./node_modules/memoize-one/dist/memoize-one.esm.js
var memoize_one_esm = __webpack_require__(30845);
;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/virtual-list/src/hooks/use-cache.mjs




const useCache = () => {
  const vm = (0,external_Vue_.getCurrentInstance)();
  const props = vm.proxy.$props;
  return (0,external_Vue_.computed)(() => {
    const _getItemStyleCache = (_, __, ___) => ({});
    return props.perfMode ? (0,memoize/* default */.Z)(_getItemStyleCache) : (0,memoize_one_esm/* default */.Z)(_getItemStyleCache);
  });
};


//# sourceMappingURL=use-cache.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/virtual-list/src/defaults.mjs
const DEFAULT_DYNAMIC_LIST_ITEM_SIZE = 50;
const ITEM_RENDER_EVT = "itemRendered";
const SCROLL_EVT = "scroll";
const FORWARD = "forward";
const BACKWARD = "backward";
const AUTO_ALIGNMENT = "auto";
const SMART_ALIGNMENT = "smart";
const START_ALIGNMENT = "start";
const CENTERED_ALIGNMENT = "center";
const END_ALIGNMENT = "end";
const HORIZONTAL = "horizontal";
const VERTICAL = "vertical";
const LTR = "ltr";
const RTL = "rtl";
const RTL_OFFSET_NAG = "negative";
const RTL_OFFSET_POS_ASC = "positive-ascending";
const RTL_OFFSET_POS_DESC = "positive-descending";
const defaults_PageKey = {
  [HORIZONTAL]: "pageX",
  [VERTICAL]: "pageY"
};
const ScrollbarSizeKey = {
  [HORIZONTAL]: "height",
  [VERTICAL]: "width"
};
const ScrollbarDirKey = {
  [HORIZONTAL]: "left",
  [VERTICAL]: "top"
};
const SCROLLBAR_MIN_SIZE = 20;


//# sourceMappingURL=defaults.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/utils/raf.mjs


const rAF = (fn) => shared/* isClient */.C5 ? window.requestAnimationFrame(fn) : setTimeout(fn, 16);
const cAF = (handle) => shared/* isClient */.C5 ? window.cancelAnimationFrame(handle) : clearTimeout(handle);


//# sourceMappingURL=raf.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/virtual-list/src/hooks/use-wheel.mjs





const LayoutKeys = {
  [HORIZONTAL]: "deltaX",
  [VERTICAL]: "deltaY"
};
const useWheel = ({ atEndEdge, atStartEdge, layout }, onWheelDelta) => {
  let frameHandle;
  let offset = 0;
  const hasReachedEdge = (offset2) => {
    const edgeReached = offset2 < 0 && atStartEdge.value || offset2 > 0 && atEndEdge.value;
    return edgeReached;
  };
  const onWheel = (e) => {
    cAF(frameHandle);
    const newOffset = e[LayoutKeys[layout.value]];
    if (hasReachedEdge(offset) && hasReachedEdge(offset + newOffset))
      return;
    offset += newOffset;
    if (!isFirefox()) {
      e.preventDefault();
    }
    frameHandle = rAF(() => {
      onWheelDelta(offset);
      offset = 0;
    });
  };
  return {
    hasReachedEdge,
    onWheel
  };
};


//# sourceMappingURL=use-wheel.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/virtual-list/src/props.mjs





const itemSize = (0,runtime/* buildProp */.l0)({
  type: (0,runtime/* definePropType */.Cq)([Number, Function]),
  required: true
});
const estimatedItemSize = (0,runtime/* buildProp */.l0)({
  type: Number
});
const cache = (0,runtime/* buildProp */.l0)({
  type: Number,
  default: 2
});
const direction = (0,runtime/* buildProp */.l0)({
  type: String,
  values: ["ltr", "rtl"],
  default: "ltr"
});
const initScrollOffset = (0,runtime/* buildProp */.l0)({
  type: Number,
  default: 0
});
const total = (0,runtime/* buildProp */.l0)({
  type: Number,
  required: true
});
const layout = (0,runtime/* buildProp */.l0)({
  type: String,
  values: ["horizontal", "vertical"],
  default: VERTICAL
});
const virtualizedProps = (0,runtime/* buildProps */.o8)({
  className: {
    type: String,
    default: ""
  },
  containerElement: {
    type: (0,runtime/* definePropType */.Cq)([String, Object]),
    default: "div"
  },
  data: {
    type: (0,runtime/* definePropType */.Cq)(Array),
    default: () => (0,typescript/* mutable */.N)([])
  },
  direction,
  height: {
    type: [String, Number],
    required: true
  },
  innerElement: {
    type: [String, Object],
    default: "div"
  },
  style: {
    type: (0,runtime/* definePropType */.Cq)([Object, String, Array])
  },
  useIsScrolling: {
    type: Boolean,
    default: false
  },
  width: {
    type: [Number, String],
    required: false
  },
  perfMode: {
    type: Boolean,
    default: true
  },
  scrollbarAlwaysOn: {
    type: Boolean,
    default: false
  }
});
const virtualizedListProps = (0,runtime/* buildProps */.o8)({
  cache,
  estimatedItemSize,
  layout,
  initScrollOffset,
  total,
  itemSize,
  ...virtualizedProps
});
const scrollbarSize = {
  type: Number,
  default: 6
};
const startGap = { type: Number, default: 0 };
const endGap = { type: Number, default: 2 };
const virtualizedGridProps = (0,runtime/* buildProps */.o8)({
  columnCache: cache,
  columnWidth: itemSize,
  estimatedColumnWidth: estimatedItemSize,
  estimatedRowHeight: estimatedItemSize,
  initScrollLeft: initScrollOffset,
  initScrollTop: initScrollOffset,
  itemKey: {
    type: (0,runtime/* definePropType */.Cq)(Function),
    default: ({ columnIndex, rowIndex }) => `${rowIndex}:${columnIndex}`
  },
  rowCache: cache,
  rowHeight: itemSize,
  totalColumn: total,
  totalRow: total,
  hScrollbarSize: scrollbarSize,
  vScrollbarSize: scrollbarSize,
  scrollbarStartGap: startGap,
  scrollbarEndGap: endGap,
  ...virtualizedProps
});
const virtualizedScrollbarProps = (0,runtime/* buildProps */.o8)({
  alwaysOn: Boolean,
  class: String,
  layout,
  total,
  ratio: {
    type: Number,
    required: true
  },
  clientSize: {
    type: Number,
    required: true
  },
  scrollFrom: {
    type: Number,
    required: true
  },
  scrollbarSize,
  startGap,
  endGap,
  visible: Boolean
});


//# sourceMappingURL=props.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/virtual-list/src/utils.mjs


const getScrollDir = (prev, cur) => prev < cur ? FORWARD : BACKWARD;
const isHorizontal = (dir) => dir === LTR || dir === RTL || dir === HORIZONTAL;
const isRTL = (dir) => dir === RTL;
let cachedRTLResult = null;
function getRTLOffsetType(recalculate = false) {
  if (cachedRTLResult === null || recalculate) {
    const outerDiv = document.createElement("div");
    const outerStyle = outerDiv.style;
    outerStyle.width = "50px";
    outerStyle.height = "50px";
    outerStyle.overflow = "scroll";
    outerStyle.direction = "rtl";
    const innerDiv = document.createElement("div");
    const innerStyle = innerDiv.style;
    innerStyle.width = "100px";
    innerStyle.height = "100px";
    outerDiv.appendChild(innerDiv);
    document.body.appendChild(outerDiv);
    if (outerDiv.scrollLeft > 0) {
      cachedRTLResult = RTL_OFFSET_POS_DESC;
    } else {
      outerDiv.scrollLeft = 1;
      if (outerDiv.scrollLeft === 0) {
        cachedRTLResult = RTL_OFFSET_NAG;
      } else {
        cachedRTLResult = RTL_OFFSET_POS_ASC;
      }
    }
    document.body.removeChild(outerDiv);
    return cachedRTLResult;
  }
  return cachedRTLResult;
}
const getRelativePos = (e, layout) => {
  return "touches" in e ? e.touches[0][PageKey[layout]] : e[PageKey[layout]];
};
function utils_renderThumbStyle({ move, size, bar }, layout) {
  const style = {};
  const translate = `translate${bar.axis}(${move}px)`;
  style[bar.size] = size;
  style.transform = translate;
  style.msTransform = translate;
  style.webkitTransform = translate;
  if (layout === "horizontal") {
    style.height = "100%";
  } else {
    style.width = "100%";
  }
  return style;
}


//# sourceMappingURL=utils.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/virtual-list/src/components/scrollbar.mjs











const ScrollBar = (0,external_Vue_.defineComponent)({
  name: "ElVirtualScrollBar",
  props: virtualizedScrollbarProps,
  emits: ["scroll", "start-move", "stop-move"],
  setup(props, { emit }) {
    const GAP = (0,external_Vue_.computed)(() => props.startGap + props.endGap);
    const nsVirtualScrollbar = (0,use_namespace/* useNamespace */.s)("virtual-scrollbar");
    const nsScrollbar = (0,use_namespace/* useNamespace */.s)("scrollbar");
    const trackRef = (0,external_Vue_.ref)();
    const thumbRef = (0,external_Vue_.ref)();
    let frameHandle = null;
    let onselectstartStore = null;
    const state = (0,external_Vue_.reactive)({
      isDragging: false,
      traveled: 0
    });
    const bar = (0,external_Vue_.computed)(() => BAR_MAP[props.layout]);
    const trackSize = (0,external_Vue_.computed)(() => props.clientSize - (0,external_Vue_.unref)(GAP));
    const trackStyle = (0,external_Vue_.computed)(() => ({
      position: "absolute",
      width: `${HORIZONTAL === props.layout ? trackSize.value : props.scrollbarSize}px`,
      height: `${HORIZONTAL === props.layout ? props.scrollbarSize : trackSize.value}px`,
      [ScrollbarDirKey[props.layout]]: "2px",
      right: "2px",
      bottom: "2px",
      borderRadius: "4px"
    }));
    const thumbSize = (0,external_Vue_.computed)(() => {
      const ratio = props.ratio;
      const clientSize = props.clientSize;
      if (ratio >= 100) {
        return Number.POSITIVE_INFINITY;
      }
      if (ratio >= 50) {
        return ratio * clientSize / 100;
      }
      const SCROLLBAR_MAX_SIZE = clientSize / 3;
      return Math.floor(Math.min(Math.max(ratio * clientSize, SCROLLBAR_MIN_SIZE), SCROLLBAR_MAX_SIZE));
    });
    const thumbStyle = (0,external_Vue_.computed)(() => {
      if (!Number.isFinite(thumbSize.value)) {
        return {
          display: "none"
        };
      }
      const thumb = `${thumbSize.value}px`;
      const style = utils_renderThumbStyle({
        bar: bar.value,
        size: thumb,
        move: state.traveled
      }, props.layout);
      return style;
    });
    const totalSteps = (0,external_Vue_.computed)(() => Math.floor(props.clientSize - thumbSize.value - (0,external_Vue_.unref)(GAP)));
    const attachEvents = () => {
      window.addEventListener("mousemove", onMouseMove);
      window.addEventListener("mouseup", onMouseUp);
      const thumbEl = (0,external_Vue_.unref)(thumbRef);
      if (!thumbEl)
        return;
      onselectstartStore = document.onselectstart;
      document.onselectstart = () => false;
      thumbEl.addEventListener("touchmove", onMouseMove);
      thumbEl.addEventListener("touchend", onMouseUp);
    };
    const detachEvents = () => {
      window.removeEventListener("mousemove", onMouseMove);
      window.removeEventListener("mouseup", onMouseUp);
      document.onselectstart = onselectstartStore;
      onselectstartStore = null;
      const thumbEl = (0,external_Vue_.unref)(thumbRef);
      if (!thumbEl)
        return;
      thumbEl.removeEventListener("touchmove", onMouseMove);
      thumbEl.removeEventListener("touchend", onMouseUp);
    };
    const onThumbMouseDown = (e) => {
      e.stopImmediatePropagation();
      if (e.ctrlKey || [1, 2].includes(e.button)) {
        return;
      }
      state.isDragging = true;
      state[bar.value.axis] = e.currentTarget[bar.value.offset] - (e[bar.value.client] - e.currentTarget.getBoundingClientRect()[bar.value.direction]);
      emit("start-move");
      attachEvents();
    };
    const onMouseUp = () => {
      state.isDragging = false;
      state[bar.value.axis] = 0;
      emit("stop-move");
      detachEvents();
    };
    const onMouseMove = (e) => {
      const { isDragging } = state;
      if (!isDragging)
        return;
      if (!thumbRef.value || !trackRef.value)
        return;
      const prevPage = state[bar.value.axis];
      if (!prevPage)
        return;
      cAF(frameHandle);
      const offset = (trackRef.value.getBoundingClientRect()[bar.value.direction] - e[bar.value.client]) * -1;
      const thumbClickPosition = thumbRef.value[bar.value.offset] - prevPage;
      const distance = offset - thumbClickPosition;
      frameHandle = rAF(() => {
        state.traveled = Math.max(props.startGap, Math.min(distance, totalSteps.value));
        emit("scroll", distance, totalSteps.value);
      });
    };
    const clickTrackHandler = (e) => {
      const offset = Math.abs(e.target.getBoundingClientRect()[bar.value.direction] - e[bar.value.client]);
      const thumbHalf = thumbRef.value[bar.value.offset] / 2;
      const distance = offset - thumbHalf;
      state.traveled = Math.max(0, Math.min(distance, totalSteps.value));
      emit("scroll", distance, totalSteps.value);
    };
    (0,external_Vue_.watch)(() => props.scrollFrom, (v) => {
      if (state.isDragging)
        return;
      state.traveled = Math.ceil(v * totalSteps.value);
    });
    (0,external_Vue_.onBeforeUnmount)(() => {
      detachEvents();
    });
    return () => {
      return (0,external_Vue_.h)("div", {
        role: "presentation",
        ref: trackRef,
        class: [
          nsVirtualScrollbar.b(),
          props.class,
          (props.alwaysOn || state.isDragging) && "always-on"
        ],
        style: trackStyle.value,
        onMousedown: (0,external_Vue_.withModifiers)(clickTrackHandler, ["stop", "prevent"]),
        onTouchstartPrevent: onThumbMouseDown
      }, (0,external_Vue_.h)("div", {
        ref: thumbRef,
        class: nsScrollbar.e("thumb"),
        style: thumbStyle.value,
        onMousedown: onThumbMouseDown
      }, []));
    };
  }
});


//# sourceMappingURL=scrollbar.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/virtual-list/src/builders/build-list.mjs













const createList = ({
  name,
  getOffset,
  getItemSize,
  getItemOffset,
  getEstimatedTotalSize,
  getStartIndexForOffset,
  getStopIndexForStartIndex,
  initCache,
  clearCache,
  validateProps
}) => {
  return (0,external_Vue_.defineComponent)({
    name: name != null ? name : "ElVirtualList",
    props: virtualizedListProps,
    emits: [ITEM_RENDER_EVT, SCROLL_EVT],
    setup(props, { emit, expose }) {
      validateProps(props);
      const instance = (0,external_Vue_.getCurrentInstance)();
      const ns = (0,use_namespace/* useNamespace */.s)("vl");
      const dynamicSizeCache = (0,external_Vue_.ref)(initCache(props, instance));
      const getItemStyleCache = useCache();
      const windowRef = (0,external_Vue_.ref)();
      const innerRef = (0,external_Vue_.ref)();
      const scrollbarRef = (0,external_Vue_.ref)();
      const states = (0,external_Vue_.ref)({
        isScrolling: false,
        scrollDir: "forward",
        scrollOffset: (0,shared/* isNumber */.hj)(props.initScrollOffset) ? props.initScrollOffset : 0,
        updateRequested: false,
        isScrollbarDragging: false,
        scrollbarAlwaysOn: props.scrollbarAlwaysOn
      });
      const itemsToRender = (0,external_Vue_.computed)(() => {
        const { total, cache } = props;
        const { isScrolling, scrollDir, scrollOffset } = (0,external_Vue_.unref)(states);
        if (total === 0) {
          return [0, 0, 0, 0];
        }
        const startIndex = getStartIndexForOffset(props, scrollOffset, (0,external_Vue_.unref)(dynamicSizeCache));
        const stopIndex = getStopIndexForStartIndex(props, startIndex, scrollOffset, (0,external_Vue_.unref)(dynamicSizeCache));
        const cacheBackward = !isScrolling || scrollDir === BACKWARD ? Math.max(1, cache) : 1;
        const cacheForward = !isScrolling || scrollDir === FORWARD ? Math.max(1, cache) : 1;
        return [
          Math.max(0, startIndex - cacheBackward),
          Math.max(0, Math.min(total - 1, stopIndex + cacheForward)),
          startIndex,
          stopIndex
        ];
      });
      const estimatedTotalSize = (0,external_Vue_.computed)(() => getEstimatedTotalSize(props, (0,external_Vue_.unref)(dynamicSizeCache)));
      const _isHorizontal = (0,external_Vue_.computed)(() => isHorizontal(props.layout));
      const windowStyle = (0,external_Vue_.computed)(() => [
        {
          position: "relative",
          [`overflow-${_isHorizontal.value ? "x" : "y"}`]: "scroll",
          WebkitOverflowScrolling: "touch",
          willChange: "transform"
        },
        {
          direction: props.direction,
          height: (0,shared/* isNumber */.hj)(props.height) ? `${props.height}px` : props.height,
          width: (0,shared/* isNumber */.hj)(props.width) ? `${props.width}px` : props.width
        },
        props.style
      ]);
      const innerStyle = (0,external_Vue_.computed)(() => {
        const size = (0,external_Vue_.unref)(estimatedTotalSize);
        const horizontal = (0,external_Vue_.unref)(_isHorizontal);
        return {
          height: horizontal ? "100%" : `${size}px`,
          pointerEvents: (0,external_Vue_.unref)(states).isScrolling ? "none" : void 0,
          width: horizontal ? `${size}px` : "100%"
        };
      });
      const clientSize = (0,external_Vue_.computed)(() => _isHorizontal.value ? props.width : props.height);
      const { onWheel } = useWheel({
        atStartEdge: (0,external_Vue_.computed)(() => states.value.scrollOffset <= 0),
        atEndEdge: (0,external_Vue_.computed)(() => states.value.scrollOffset >= estimatedTotalSize.value),
        layout: (0,external_Vue_.computed)(() => props.layout)
      }, (offset) => {
        var _a, _b;
        ;
        (_b = (_a = scrollbarRef.value).onMouseUp) == null ? void 0 : _b.call(_a);
        scrollTo(Math.min(states.value.scrollOffset + offset, estimatedTotalSize.value - clientSize.value));
      });
      const emitEvents = () => {
        const { total } = props;
        if (total > 0) {
          const [cacheStart, cacheEnd, visibleStart, visibleEnd] = (0,external_Vue_.unref)(itemsToRender);
          emit(ITEM_RENDER_EVT, cacheStart, cacheEnd, visibleStart, visibleEnd);
        }
        const { scrollDir, scrollOffset, updateRequested } = (0,external_Vue_.unref)(states);
        emit(SCROLL_EVT, scrollDir, scrollOffset, updateRequested);
      };
      const scrollVertically = (e) => {
        const { clientHeight, scrollHeight, scrollTop } = e.currentTarget;
        const _states = (0,external_Vue_.unref)(states);
        if (_states.scrollOffset === scrollTop) {
          return;
        }
        const scrollOffset = Math.max(0, Math.min(scrollTop, scrollHeight - clientHeight));
        states.value = {
          ..._states,
          isScrolling: true,
          scrollDir: getScrollDir(_states.scrollOffset, scrollOffset),
          scrollOffset,
          updateRequested: false
        };
        (0,external_Vue_.nextTick)(resetIsScrolling);
      };
      const scrollHorizontally = (e) => {
        const { clientWidth, scrollLeft, scrollWidth } = e.currentTarget;
        const _states = (0,external_Vue_.unref)(states);
        if (_states.scrollOffset === scrollLeft) {
          return;
        }
        const { direction } = props;
        let scrollOffset = scrollLeft;
        if (direction === RTL) {
          switch (getRTLOffsetType()) {
            case RTL_OFFSET_NAG: {
              scrollOffset = -scrollLeft;
              break;
            }
            case RTL_OFFSET_POS_DESC: {
              scrollOffset = scrollWidth - clientWidth - scrollLeft;
              break;
            }
          }
        }
        scrollOffset = Math.max(0, Math.min(scrollOffset, scrollWidth - clientWidth));
        states.value = {
          ..._states,
          isScrolling: true,
          scrollDir: getScrollDir(_states.scrollOffset, scrollOffset),
          scrollOffset,
          updateRequested: false
        };
        (0,external_Vue_.nextTick)(resetIsScrolling);
      };
      const onScroll = (e) => {
        (0,external_Vue_.unref)(_isHorizontal) ? scrollHorizontally(e) : scrollVertically(e);
        emitEvents();
      };
      const onScrollbarScroll = (distanceToGo, totalSteps) => {
        const offset = (estimatedTotalSize.value - clientSize.value) / totalSteps * distanceToGo;
        scrollTo(Math.min(estimatedTotalSize.value - clientSize.value, offset));
      };
      const scrollTo = (offset) => {
        offset = Math.max(offset, 0);
        if (offset === (0,external_Vue_.unref)(states).scrollOffset) {
          return;
        }
        states.value = {
          ...(0,external_Vue_.unref)(states),
          scrollOffset: offset,
          scrollDir: getScrollDir((0,external_Vue_.unref)(states).scrollOffset, offset),
          updateRequested: true
        };
        (0,external_Vue_.nextTick)(resetIsScrolling);
      };
      const scrollToItem = (idx, alignment = AUTO_ALIGNMENT) => {
        const { scrollOffset } = (0,external_Vue_.unref)(states);
        idx = Math.max(0, Math.min(idx, props.total - 1));
        scrollTo(getOffset(props, idx, alignment, scrollOffset, (0,external_Vue_.unref)(dynamicSizeCache)));
      };
      const getItemStyle = (idx) => {
        const { direction, itemSize, layout } = props;
        const itemStyleCache = getItemStyleCache.value(clearCache && itemSize, clearCache && layout, clearCache && direction);
        let style;
        if ((0,shared_esm_bundler/* hasOwn */.RI)(itemStyleCache, String(idx))) {
          style = itemStyleCache[idx];
        } else {
          const offset = getItemOffset(props, idx, (0,external_Vue_.unref)(dynamicSizeCache));
          const size = getItemSize(props, idx, (0,external_Vue_.unref)(dynamicSizeCache));
          const horizontal = (0,external_Vue_.unref)(_isHorizontal);
          const isRtl = direction === RTL;
          const offsetHorizontal = horizontal ? offset : 0;
          itemStyleCache[idx] = style = {
            position: "absolute",
            left: isRtl ? void 0 : `${offsetHorizontal}px`,
            right: isRtl ? `${offsetHorizontal}px` : void 0,
            top: !horizontal ? `${offset}px` : 0,
            height: !horizontal ? `${size}px` : "100%",
            width: horizontal ? `${size}px` : "100%"
          };
        }
        return style;
      };
      const resetIsScrolling = () => {
        states.value.isScrolling = false;
        (0,external_Vue_.nextTick)(() => {
          getItemStyleCache.value(-1, null, null);
        });
      };
      const resetScrollTop = () => {
        const window = windowRef.value;
        if (window) {
          window.scrollTop = 0;
        }
      };
      (0,external_Vue_.onMounted)(() => {
        if (!shared/* isClient */.C5)
          return;
        const { initScrollOffset } = props;
        const windowElement = (0,external_Vue_.unref)(windowRef);
        if ((0,shared/* isNumber */.hj)(initScrollOffset) && windowElement) {
          if ((0,external_Vue_.unref)(_isHorizontal)) {
            windowElement.scrollLeft = initScrollOffset;
          } else {
            windowElement.scrollTop = initScrollOffset;
          }
        }
        emitEvents();
      });
      (0,external_Vue_.onUpdated)(() => {
        const { direction, layout } = props;
        const { scrollOffset, updateRequested } = (0,external_Vue_.unref)(states);
        const windowElement = (0,external_Vue_.unref)(windowRef);
        if (updateRequested && windowElement) {
          if (layout === HORIZONTAL) {
            if (direction === RTL) {
              switch (getRTLOffsetType()) {
                case "negative": {
                  windowElement.scrollLeft = -scrollOffset;
                  break;
                }
                case "positive-ascending": {
                  windowElement.scrollLeft = scrollOffset;
                  break;
                }
                default: {
                  const { clientWidth, scrollWidth } = windowElement;
                  windowElement.scrollLeft = scrollWidth - clientWidth - scrollOffset;
                  break;
                }
              }
            } else {
              windowElement.scrollLeft = scrollOffset;
            }
          } else {
            windowElement.scrollTop = scrollOffset;
          }
        }
      });
      const api = {
        ns,
        clientSize,
        estimatedTotalSize,
        windowStyle,
        windowRef,
        innerRef,
        innerStyle,
        itemsToRender,
        scrollbarRef,
        states,
        getItemStyle,
        onScroll,
        onScrollbarScroll,
        onWheel,
        scrollTo,
        scrollToItem,
        resetScrollTop
      };
      expose({
        windowRef,
        innerRef,
        getItemStyleCache,
        scrollTo,
        scrollToItem,
        resetScrollTop,
        states
      });
      return api;
    },
    render(ctx) {
      var _a;
      const {
        $slots,
        className,
        clientSize,
        containerElement,
        data,
        getItemStyle,
        innerElement,
        itemsToRender,
        innerStyle,
        layout,
        total,
        onScroll,
        onScrollbarScroll,
        onWheel,
        states,
        useIsScrolling,
        windowStyle,
        ns
      } = ctx;
      const [start, end] = itemsToRender;
      const Container = (0,external_Vue_.resolveDynamicComponent)(containerElement);
      const Inner = (0,external_Vue_.resolveDynamicComponent)(innerElement);
      const children = [];
      if (total > 0) {
        for (let i = start; i <= end; i++) {
          children.push((_a = $slots.default) == null ? void 0 : _a.call($slots, {
            data,
            key: i,
            index: i,
            isScrolling: useIsScrolling ? states.isScrolling : void 0,
            style: getItemStyle(i)
          }));
        }
      }
      const InnerNode = [
        (0,external_Vue_.h)(Inner, {
          style: innerStyle,
          ref: "innerRef"
        }, !(0,shared_esm_bundler/* isString */.HD)(Inner) ? {
          default: () => children
        } : children)
      ];
      const scrollbar = (0,external_Vue_.h)(ScrollBar, {
        ref: "scrollbarRef",
        clientSize,
        layout,
        onScroll: onScrollbarScroll,
        ratio: clientSize * 100 / this.estimatedTotalSize,
        scrollFrom: states.scrollOffset / (this.estimatedTotalSize - clientSize),
        total
      });
      const listContainer = (0,external_Vue_.h)(Container, {
        class: [ns.e("window"), className],
        style: windowStyle,
        onScroll,
        onWheel,
        ref: "windowRef",
        key: 0
      }, !(0,shared_esm_bundler/* isString */.HD)(Container) ? { default: () => [InnerNode] } : [InnerNode]);
      return (0,external_Vue_.h)("div", {
        key: 0,
        class: [ns.e("wrapper"), states.scrollbarAlwaysOn ? "always-on" : ""]
      }, [listContainer, scrollbar]);
    }
  });
};


//# sourceMappingURL=build-list.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/virtual-list/src/components/fixed-size-list.mjs







const FixedSizeList = createList({
  name: "ElFixedSizeList",
  getItemOffset: ({ itemSize }, index) => index * itemSize,
  getItemSize: ({ itemSize }) => itemSize,
  getEstimatedTotalSize: ({ total, itemSize }) => itemSize * total,
  getOffset: ({ height, total, itemSize, layout, width }, index, alignment, scrollOffset) => {
    const size = isHorizontal(layout) ? width : height;
    if (false) {}
    const lastItemOffset = Math.max(0, total * itemSize - size);
    const maxOffset = Math.min(lastItemOffset, index * itemSize);
    const minOffset = Math.max(0, (index + 1) * itemSize - size);
    if (alignment === SMART_ALIGNMENT) {
      if (scrollOffset >= minOffset - size && scrollOffset <= maxOffset + size) {
        alignment = AUTO_ALIGNMENT;
      } else {
        alignment = CENTERED_ALIGNMENT;
      }
    }
    switch (alignment) {
      case START_ALIGNMENT: {
        return maxOffset;
      }
      case END_ALIGNMENT: {
        return minOffset;
      }
      case CENTERED_ALIGNMENT: {
        const middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);
        if (middleOffset < Math.ceil(size / 2)) {
          return 0;
        } else if (middleOffset > lastItemOffset + Math.floor(size / 2)) {
          return lastItemOffset;
        } else {
          return middleOffset;
        }
      }
      case AUTO_ALIGNMENT:
      default: {
        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {
          return scrollOffset;
        } else if (scrollOffset < minOffset) {
          return minOffset;
        } else {
          return maxOffset;
        }
      }
    }
  },
  getStartIndexForOffset: ({ total, itemSize }, offset) => Math.max(0, Math.min(total - 1, Math.floor(offset / itemSize))),
  getStopIndexForStartIndex: ({ height, total, itemSize, layout, width }, startIndex, scrollOffset) => {
    const offset = startIndex * itemSize;
    const size = isHorizontal(layout) ? width : height;
    const numVisibleItems = Math.ceil((size + scrollOffset - offset) / itemSize);
    return Math.max(0, Math.min(total - 1, startIndex + numVisibleItems - 1));
  },
  initCache() {
    return void 0;
  },
  clearCache: true,
  validateProps() {
  }
});


//# sourceMappingURL=fixed-size-list.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/virtual-list/src/components/dynamic-size-list.mjs






const dynamic_size_list_SCOPE = "ElDynamicSizeList";
const getItemFromCache = (props, index, listCache) => {
  const { itemSize } = props;
  const { items, lastVisitedIndex } = listCache;
  if (index > lastVisitedIndex) {
    let offset = 0;
    if (lastVisitedIndex >= 0) {
      const item = items[lastVisitedIndex];
      offset = item.offset + item.size;
    }
    for (let i = lastVisitedIndex + 1; i <= index; i++) {
      const size = itemSize(i);
      items[i] = {
        offset,
        size
      };
      offset += size;
    }
    listCache.lastVisitedIndex = index;
  }
  return items[index];
};
const findItem = (props, listCache, offset) => {
  const { items, lastVisitedIndex } = listCache;
  const lastVisitedOffset = lastVisitedIndex > 0 ? items[lastVisitedIndex].offset : 0;
  if (lastVisitedOffset >= offset) {
    return bs(props, listCache, 0, lastVisitedIndex, offset);
  }
  return es(props, listCache, Math.max(0, lastVisitedIndex), offset);
};
const bs = (props, listCache, low, high, offset) => {
  while (low <= high) {
    const mid = low + Math.floor((high - low) / 2);
    const currentOffset = getItemFromCache(props, mid, listCache).offset;
    if (currentOffset === offset) {
      return mid;
    } else if (currentOffset < offset) {
      low = mid + 1;
    } else if (currentOffset > offset) {
      high = mid - 1;
    }
  }
  return Math.max(0, low - 1);
};
const es = (props, listCache, index, offset) => {
  const { total } = props;
  let exponent = 1;
  while (index < total && getItemFromCache(props, index, listCache).offset < offset) {
    index += exponent;
    exponent *= 2;
  }
  return bs(props, listCache, Math.floor(index / 2), Math.min(index, total - 1), offset);
};
const getEstimatedTotalSize = ({ total }, { items, estimatedItemSize, lastVisitedIndex }) => {
  let totalSizeOfMeasuredItems = 0;
  if (lastVisitedIndex >= total) {
    lastVisitedIndex = total - 1;
  }
  if (lastVisitedIndex >= 0) {
    const item = items[lastVisitedIndex];
    totalSizeOfMeasuredItems = item.offset + item.size;
  }
  const numUnmeasuredItems = total - lastVisitedIndex - 1;
  const totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedItemSize;
  return totalSizeOfMeasuredItems + totalSizeOfUnmeasuredItems;
};
const DynamicSizeList = createList({
  name: "ElDynamicSizeList",
  getItemOffset: (props, index, listCache) => getItemFromCache(props, index, listCache).offset,
  getItemSize: (_, index, { items }) => items[index].size,
  getEstimatedTotalSize,
  getOffset: (props, index, alignment, scrollOffset, listCache) => {
    const { height, layout, width } = props;
    const size = isHorizontal(layout) ? width : height;
    const item = getItemFromCache(props, index, listCache);
    const estimatedTotalSize = getEstimatedTotalSize(props, listCache);
    const maxOffset = Math.max(0, Math.min(estimatedTotalSize - size, item.offset));
    const minOffset = Math.max(0, item.offset - size + item.size);
    if (alignment === SMART_ALIGNMENT) {
      if (scrollOffset >= minOffset - size && scrollOffset <= maxOffset + size) {
        alignment = AUTO_ALIGNMENT;
      } else {
        alignment = CENTERED_ALIGNMENT;
      }
    }
    switch (alignment) {
      case START_ALIGNMENT: {
        return maxOffset;
      }
      case END_ALIGNMENT: {
        return minOffset;
      }
      case CENTERED_ALIGNMENT: {
        return Math.round(minOffset + (maxOffset - minOffset) / 2);
      }
      case AUTO_ALIGNMENT:
      default: {
        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {
          return scrollOffset;
        } else if (scrollOffset < minOffset) {
          return minOffset;
        } else {
          return maxOffset;
        }
      }
    }
  },
  getStartIndexForOffset: (props, offset, listCache) => findItem(props, listCache, offset),
  getStopIndexForStartIndex: (props, startIndex, scrollOffset, listCache) => {
    const { height, total, layout, width } = props;
    const size = isHorizontal(layout) ? width : height;
    const item = getItemFromCache(props, startIndex, listCache);
    const maxOffset = scrollOffset + size;
    let offset = item.offset + item.size;
    let stopIndex = startIndex;
    while (stopIndex < total - 1 && offset < maxOffset) {
      stopIndex++;
      offset += getItemFromCache(props, stopIndex, listCache).size;
    }
    return stopIndex;
  },
  initCache({ estimatedItemSize = DEFAULT_DYNAMIC_LIST_ITEM_SIZE }, instance) {
    const cache = {
      items: {},
      estimatedItemSize,
      lastVisitedIndex: -1
    };
    cache.clearCacheAfterIndex = (index, forceUpdate = true) => {
      var _a, _b;
      cache.lastVisitedIndex = Math.min(cache.lastVisitedIndex, index - 1);
      (_a = instance.exposed) == null ? void 0 : _a.getItemStyleCache(-1);
      if (forceUpdate) {
        (_b = instance.proxy) == null ? void 0 : _b.$forceUpdate();
      }
    };
    return cache;
  },
  clearCache: false,
  validateProps: ({ itemSize }) => {
    if (false) {}
  }
});


//# sourceMappingURL=dynamic-size-list.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/select-v2/src/select-dropdown.mjs
















var select_dropdown_ElSelectMenu = (0,external_Vue_.defineComponent)({
  name: "ElSelectDropdown",
  props: {
    data: {
      type: Array,
      required: true
    },
    hoveringIndex: Number,
    width: Number
  },
  setup(props, {
    slots,
    expose
  }) {
    const select = (0,external_Vue_.inject)(selectV2InjectionKey);
    const ns = (0,use_namespace/* useNamespace */.s)("select");
    const cachedHeights = (0,external_Vue_.ref)([]);
    const listRef = (0,external_Vue_.ref)();
    const isSized = (0,external_Vue_.computed)(() => (0,types/* isUndefined */.o8)(select.props.estimatedOptionHeight));
    const listProps = (0,external_Vue_.computed)(() => {
      if (isSized.value) {
        return {
          itemSize: select.props.itemHeight
        };
      }
      return {
        estimatedSize: select.props.estimatedOptionHeight,
        itemSize: (idx) => cachedHeights.value[idx]
      };
    });
    const contains = (arr = [], target) => {
      const {
        props: {
          valueKey
        }
      } = select;
      if (!(0,shared_esm_bundler/* isObject */.Kn)(target)) {
        return arr.includes(target);
      }
      return arr && arr.some((item) => {
        return (0,get/* default */.Z)(item, valueKey) === (0,get/* default */.Z)(target, valueKey);
      });
    };
    const isEqual = (selected, target) => {
      if (!(0,shared_esm_bundler/* isObject */.Kn)(target)) {
        return selected === target;
      } else {
        const {
          valueKey
        } = select.props;
        return (0,get/* default */.Z)(selected, valueKey) === (0,get/* default */.Z)(target, valueKey);
      }
    };
    const isItemSelected = (modelValue, target) => {
      const {
        valueKey
      } = select.props;
      if (select.props.multiple) {
        return contains(modelValue, (0,get/* default */.Z)(target, valueKey));
      }
      return isEqual(modelValue, (0,get/* default */.Z)(target, valueKey));
    };
    const isItemDisabled = (modelValue, selected) => {
      const {
        disabled,
        multiple,
        multipleLimit
      } = select.props;
      return disabled || !selected && (multiple ? multipleLimit > 0 && modelValue.length >= multipleLimit : false);
    };
    const isItemHovering = (target) => props.hoveringIndex === target;
    const scrollToItem = (index) => {
      const list = listRef.value;
      if (list) {
        list.scrollToItem(index);
      }
    };
    const resetScrollTop = () => {
      const list = listRef.value;
      if (list) {
        list.resetScrollTop();
      }
    };
    expose({
      listRef,
      isSized,
      isItemDisabled,
      isItemHovering,
      isItemSelected,
      scrollToItem,
      resetScrollTop
    });
    const Item = (itemProps) => {
      const {
        index,
        data,
        style
      } = itemProps;
      const sized = (0,external_Vue_.unref)(isSized);
      const {
        itemSize,
        estimatedSize
      } = (0,external_Vue_.unref)(listProps);
      const {
        modelValue
      } = select.props;
      const {
        onSelect,
        onHover
      } = select;
      const item = data[index];
      if (item.type === "Group") {
        return (0,external_Vue_.createVNode)(GroupItem, {
          "item": item,
          "style": style,
          "height": sized ? itemSize : estimatedSize
        }, null);
      }
      const isSelected = isItemSelected(modelValue, item);
      const isDisabled = isItemDisabled(modelValue, isSelected);
      const isHovering = isItemHovering(index);
      return (0,external_Vue_.createVNode)(OptionItem, (0,external_Vue_.mergeProps)(itemProps, {
        "selected": isSelected,
        "disabled": item.disabled || isDisabled,
        "created": !!item.created,
        "hovering": isHovering,
        "item": item,
        "onSelect": onSelect,
        "onHover": onHover
      }), {
        default: (props2) => {
          var _a;
          return ((_a = slots.default) == null ? void 0 : _a.call(slots, props2)) || (0,external_Vue_.createVNode)("span", null, [item.label]);
        }
      });
    };
    const {
      onKeyboardNavigate,
      onKeyboardSelect
    } = select;
    const onForward = () => {
      onKeyboardNavigate("forward");
    };
    const onBackward = () => {
      onKeyboardNavigate("backward");
    };
    const onEscOrTab = () => {
      select.expanded = false;
    };
    const onKeydown = (e) => {
      const {
        code
      } = e;
      const {
        tab,
        esc,
        down,
        up,
        enter
      } = aria_EVENT_CODE;
      if (code !== tab) {
        e.preventDefault();
        e.stopPropagation();
      }
      switch (code) {
        case tab:
        case esc: {
          onEscOrTab();
          break;
        }
        case down: {
          onForward();
          break;
        }
        case up: {
          onBackward();
          break;
        }
        case enter: {
          onKeyboardSelect();
          break;
        }
      }
    };
    return () => {
      var _a;
      const {
        data,
        width
      } = props;
      const {
        height,
        multiple,
        scrollbarAlwaysOn
      } = select.props;
      if (data.length === 0) {
        return (0,external_Vue_.createVNode)("div", {
          "class": ns.b("dropdown"),
          "style": {
            width: `${width}px`
          }
        }, [(_a = slots.empty) == null ? void 0 : _a.call(slots)]);
      }
      const List = (0,external_Vue_.unref)(isSized) ? FixedSizeList : DynamicSizeList;
      return (0,external_Vue_.createVNode)("div", {
        "class": [ns.b("dropdown"), ns.is("multiple", multiple)]
      }, [(0,external_Vue_.createVNode)(List, (0,external_Vue_.mergeProps)({
        "ref": listRef
      }, (0,external_Vue_.unref)(listProps), {
        "className": ns.be("dropdown", "list"),
        "scrollbarAlwaysOn": scrollbarAlwaysOn,
        "data": data,
        "height": height,
        "width": width,
        "total": data.length,
        "onKeydown": onKeydown
      }), {
        default: (props2) => (0,external_Vue_.createVNode)(Item, props2, null)
      })]);
    };
  }
});


//# sourceMappingURL=select-dropdown.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/select-v2/src/useAllowCreate.mjs


function useAllowCreate(props, states) {
  const createOptionCount = (0,external_Vue_.ref)(0);
  const cachedSelectedOption = (0,external_Vue_.ref)(null);
  const enableAllowCreateMode = (0,external_Vue_.computed)(() => {
    return props.allowCreate && props.filterable;
  });
  function hasExistingOption(query) {
    const hasValue = (option) => option.value === query;
    return props.options && props.options.some(hasValue) || states.createdOptions.some(hasValue);
  }
  function selectNewOption(option) {
    if (!enableAllowCreateMode.value) {
      return;
    }
    if (props.multiple && option.created) {
      createOptionCount.value++;
    } else {
      cachedSelectedOption.value = option;
    }
  }
  function createNewOption(query) {
    if (enableAllowCreateMode.value) {
      if (query && query.length > 0 && !hasExistingOption(query)) {
        const newOption = {
          value: query,
          label: query,
          created: true,
          disabled: false
        };
        if (states.createdOptions.length >= createOptionCount.value) {
          states.createdOptions[createOptionCount.value] = newOption;
        } else {
          states.createdOptions.push(newOption);
        }
      } else {
        if (props.multiple) {
          states.createdOptions.length = createOptionCount.value;
        } else {
          const selectedOption = cachedSelectedOption.value;
          states.createdOptions.length = 0;
          if (selectedOption && selectedOption.created) {
            states.createdOptions.push(selectedOption);
          }
        }
      }
    }
  }
  function removeNewOption(option) {
    if (!enableAllowCreateMode.value || !option || !option.created || option.created && props.reserveKeyword && states.inputValue === option.label) {
      return;
    }
    const idx = states.createdOptions.findIndex((it) => it.value === option.value);
    if (~idx) {
      states.createdOptions.splice(idx, 1);
      createOptionCount.value--;
    }
  }
  function clearAllNewOption() {
    if (enableAllowCreateMode.value) {
      states.createdOptions.length = 0;
      createOptionCount.value = 0;
    }
  }
  return {
    createNewOption,
    removeNewOption,
    selectNewOption,
    clearAllNewOption
  };
}


//# sourceMappingURL=useAllowCreate.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/select-v2/src/util.mjs


const flattenOptions = (options) => {
  const flattened = [];
  options.forEach((option) => {
    if ((0,shared_esm_bundler/* isArray */.kJ)(option.options)) {
      flattened.push({
        label: option.label,
        isTitle: true,
        type: "Group"
      });
      option.options.forEach((o) => {
        flattened.push(o);
      });
      flattened.push({
        type: "Group"
      });
    } else {
      flattened.push(option);
    }
  });
  return flattened;
};


//# sourceMappingURL=util.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/select-v2/src/useInput.mjs





function useInput(handleInput) {
  const isComposing = (0,external_Vue_.ref)(false);
  const handleCompositionStart = () => {
    isComposing.value = true;
  };
  const handleCompositionUpdate = (event) => {
    const text = event.target.value;
    const lastCharacter = text[text.length - 1] || "";
    isComposing.value = !(0,i18n/* isKorean */.w)(lastCharacter);
  };
  const handleCompositionEnd = (event) => {
    if (isComposing.value) {
      isComposing.value = false;
      if ((0,shared_esm_bundler/* isFunction */.mf)(handleInput)) {
        handleInput(event);
      }
    }
  };
  return {
    handleCompositionStart,
    handleCompositionUpdate,
    handleCompositionEnd
  };
}


//# sourceMappingURL=useInput.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/select-v2/src/useSelect.mjs



















const DEFAULT_INPUT_PLACEHOLDER = "";
const MINIMUM_INPUT_WIDTH = 11;
const TAG_BASE_WIDTH = {
  larget: 51,
  default: 42,
  small: 33
};
const useSelect_useSelect = (props, emit) => {
  const { t } = useLocale();
  const nsSelectV2 = (0,use_namespace/* useNamespace */.s)("select-v2");
  const nsInput = (0,use_namespace/* useNamespace */.s)("input");
  const { form: elForm, formItem: elFormItem } = (0,use_form_item/* useFormItem */.A)();
  const states = (0,external_Vue_.reactive)({
    inputValue: DEFAULT_INPUT_PLACEHOLDER,
    displayInputValue: DEFAULT_INPUT_PLACEHOLDER,
    calculatedWidth: 0,
    cachedPlaceholder: "",
    cachedOptions: [],
    createdOptions: [],
    createdLabel: "",
    createdSelected: false,
    currentPlaceholder: "",
    hoveringIndex: -1,
    comboBoxHovering: false,
    isOnComposition: false,
    isSilentBlur: false,
    isComposing: false,
    inputLength: 20,
    selectWidth: 200,
    initialInputHeight: 0,
    previousQuery: null,
    previousValue: "",
    query: "",
    selectedLabel: "",
    softFocus: false,
    tagInMultiLine: false
  });
  const selectedIndex = (0,external_Vue_.ref)(-1);
  const popperSize = (0,external_Vue_.ref)(-1);
  const controlRef = (0,external_Vue_.ref)(null);
  const inputRef = (0,external_Vue_.ref)(null);
  const menuRef = (0,external_Vue_.ref)(null);
  const popper = (0,external_Vue_.ref)(null);
  const selectRef = (0,external_Vue_.ref)(null);
  const selectionRef = (0,external_Vue_.ref)(null);
  const calculatorRef = (0,external_Vue_.ref)(null);
  const expanded = (0,external_Vue_.ref)(false);
  const selectDisabled = (0,external_Vue_.computed)(() => props.disabled || (elForm == null ? void 0 : elForm.disabled));
  const popupHeight = (0,external_Vue_.computed)(() => {
    const totalHeight = filteredOptions.value.length * 34;
    return totalHeight > props.height ? props.height : totalHeight;
  });
  const hasModelValue = (0,external_Vue_.computed)(() => {
    return props.modelValue !== void 0 && props.modelValue !== null && props.modelValue !== "";
  });
  const showClearBtn = (0,external_Vue_.computed)(() => {
    const hasValue = props.multiple ? Array.isArray(props.modelValue) && props.modelValue.length > 0 : hasModelValue.value;
    const criteria = props.clearable && !selectDisabled.value && states.comboBoxHovering && hasValue;
    return criteria;
  });
  const iconComponent = (0,external_Vue_.computed)(() => props.remote && props.filterable ? "" : dist/* ArrowUp */.a2Z);
  const iconReverse = (0,external_Vue_.computed)(() => iconComponent.value && nsSelectV2.is("reverse", expanded.value));
  const validateState = (0,external_Vue_.computed)(() => (elFormItem == null ? void 0 : elFormItem.validateState) || "");
  const validateIcon = (0,external_Vue_.computed)(() => icon/* ValidateComponentsMap */.rU[validateState.value]);
  const debounce$1 = (0,external_Vue_.computed)(() => props.remote ? 300 : 0);
  const emptyText = (0,external_Vue_.computed)(() => {
    const options = filteredOptions.value;
    if (props.loading) {
      return props.loadingText || t("el.select.loading");
    } else {
      if (props.remote && states.inputValue === "" && options.length === 0)
        return false;
      if (props.filterable && states.inputValue && options.length > 0) {
        return props.noMatchText || t("el.select.noMatch");
      }
      if (options.length === 0) {
        return props.noDataText || t("el.select.noData");
      }
    }
    return null;
  });
  const filteredOptions = (0,external_Vue_.computed)(() => {
    const isValidOption = (o) => {
      const query = states.inputValue;
      const containsQueryString = query ? o.label.includes(query) : true;
      return containsQueryString;
    };
    if (props.loading) {
      return [];
    }
    return flattenOptions(props.options.concat(states.createdOptions).map((v) => {
      if ((0,shared_esm_bundler/* isArray */.kJ)(v.options)) {
        const filtered = v.options.filter(isValidOption);
        if (filtered.length > 0) {
          return {
            ...v,
            options: filtered
          };
        }
      } else {
        if (props.remote || isValidOption(v)) {
          return v;
        }
      }
      return null;
    }).filter((v) => v !== null));
  });
  const optionsAllDisabled = (0,external_Vue_.computed)(() => filteredOptions.value.every((option) => option.disabled));
  const selectSize = (0,use_common_props/* useSize */.tH)();
  const collapseTagSize = (0,external_Vue_.computed)(() => selectSize.value === "small" ? "small" : "default");
  const tagMaxWidth = (0,external_Vue_.computed)(() => {
    const select = selectionRef.value;
    const size = collapseTagSize.value || "default";
    const paddingLeft = select ? Number.parseInt(getComputedStyle(select).paddingLeft) : 0;
    const paddingRight = select ? Number.parseInt(getComputedStyle(select).paddingRight) : 0;
    return states.selectWidth - paddingRight - paddingLeft - TAG_BASE_WIDTH[size];
  });
  const calculatePopperSize = () => {
    var _a;
    popperSize.value = ((_a = selectRef.value) == null ? void 0 : _a.offsetWidth) || 200;
  };
  const inputWrapperStyle = (0,external_Vue_.computed)(() => {
    return {
      width: `${states.calculatedWidth === 0 ? MINIMUM_INPUT_WIDTH : Math.ceil(states.calculatedWidth) + MINIMUM_INPUT_WIDTH}px`
    };
  });
  const shouldShowPlaceholder = (0,external_Vue_.computed)(() => {
    if ((0,shared_esm_bundler/* isArray */.kJ)(props.modelValue)) {
      return props.modelValue.length === 0 && !states.displayInputValue;
    }
    return props.filterable ? states.displayInputValue.length === 0 : true;
  });
  const currentPlaceholder = (0,external_Vue_.computed)(() => {
    const _placeholder = props.placeholder || t("el.select.placeholder");
    return props.multiple ? _placeholder : states.selectedLabel || _placeholder;
  });
  const popperRef = (0,external_Vue_.computed)(() => {
    var _a, _b;
    return (_b = (_a = popper.value) == null ? void 0 : _a.popperRef) == null ? void 0 : _b.contentRef;
  });
  const indexRef = (0,external_Vue_.computed)(() => {
    if (props.multiple) {
      const len = props.modelValue.length;
      if (props.modelValue.length > 0) {
        return filteredOptions.value.findIndex((o) => o.value === props.modelValue[len - 1]);
      }
    } else {
      if (props.modelValue) {
        return filteredOptions.value.findIndex((o) => o.value === props.modelValue);
      }
    }
    return -1;
  });
  const dropdownMenuVisible = (0,external_Vue_.computed)({
    get() {
      return expanded.value && emptyText.value !== false;
    },
    set(val) {
      expanded.value = val;
    }
  });
  const {
    createNewOption,
    removeNewOption,
    selectNewOption,
    clearAllNewOption
  } = useAllowCreate(props, states);
  const {
    handleCompositionStart,
    handleCompositionUpdate,
    handleCompositionEnd
  } = useInput((e) => onInput(e));
  const focusAndUpdatePopup = () => {
    var _a, _b, _c;
    (_b = (_a = inputRef.value).focus) == null ? void 0 : _b.call(_a);
    (_c = popper.value) == null ? void 0 : _c.updatePopper();
  };
  const toggleMenu = () => {
    if (props.automaticDropdown)
      return;
    if (!selectDisabled.value) {
      if (states.isComposing)
        states.softFocus = true;
      return (0,external_Vue_.nextTick)(() => {
        var _a, _b;
        expanded.value = !expanded.value;
        (_b = (_a = inputRef.value) == null ? void 0 : _a.focus) == null ? void 0 : _b.call(_a);
      });
    }
  };
  const onInputChange = () => {
    if (props.filterable && states.inputValue !== states.selectedLabel) {
      states.query = states.selectedLabel;
    }
    handleQueryChange(states.inputValue);
    return (0,external_Vue_.nextTick)(() => {
      createNewOption(states.inputValue);
    });
  };
  const debouncedOnInputChange = (0,debounce/* default */.Z)(onInputChange, debounce$1.value);
  const handleQueryChange = (val) => {
    if (states.previousQuery === val) {
      return;
    }
    states.previousQuery = val;
    if (props.filterable && (0,shared_esm_bundler/* isFunction */.mf)(props.filterMethod)) {
      props.filterMethod(val);
    } else if (props.filterable && props.remote && (0,shared_esm_bundler/* isFunction */.mf)(props.remoteMethod)) {
      props.remoteMethod(val);
    }
  };
  const emitChange = (val) => {
    if (!(0,isEqual/* default */.Z)(props.modelValue, val)) {
      emit(constants_event/* CHANGE_EVENT */.O7, val);
    }
  };
  const update = (val) => {
    emit(constants_event/* UPDATE_MODEL_EVENT */.f_, val);
    emitChange(val);
    states.previousValue = val.toString();
  };
  const getValueIndex = (arr = [], value) => {
    if (!(0,shared_esm_bundler/* isObject */.Kn)(value)) {
      return arr.indexOf(value);
    }
    const valueKey = props.valueKey;
    let index = -1;
    arr.some((item, i) => {
      if ((0,get/* default */.Z)(item, valueKey) === (0,get/* default */.Z)(value, valueKey)) {
        index = i;
        return true;
      }
      return false;
    });
    return index;
  };
  const getValueKey = (item) => {
    return (0,shared_esm_bundler/* isObject */.Kn)(item) ? (0,get/* default */.Z)(item, props.valueKey) : item;
  };
  const getLabel = (item) => {
    return (0,shared_esm_bundler/* isObject */.Kn)(item) ? item.label : item;
  };
  const resetInputHeight = () => {
    if (props.collapseTags && !props.filterable) {
      return;
    }
    return (0,external_Vue_.nextTick)(() => {
      var _a, _b;
      if (!inputRef.value)
        return;
      const selection = selectionRef.value;
      selectRef.value.height = selection.offsetHeight;
      if (expanded.value && emptyText.value !== false) {
        (_b = (_a = popper.value) == null ? void 0 : _a.updatePopper) == null ? void 0 : _b.call(_a);
      }
    });
  };
  const handleResize = () => {
    var _a, _b;
    resetInputWidth();
    calculatePopperSize();
    (_b = (_a = popper.value) == null ? void 0 : _a.updatePopper) == null ? void 0 : _b.call(_a);
    if (props.multiple) {
      return resetInputHeight();
    }
  };
  const resetInputWidth = () => {
    const select = selectionRef.value;
    if (select) {
      states.selectWidth = select.getBoundingClientRect().width;
    }
  };
  const onSelect = (option, idx, byClick = true) => {
    var _a, _b;
    if (props.multiple) {
      let selectedOptions = props.modelValue.slice();
      const index = getValueIndex(selectedOptions, getValueKey(option));
      if (index > -1) {
        selectedOptions = [
          ...selectedOptions.slice(0, index),
          ...selectedOptions.slice(index + 1)
        ];
        states.cachedOptions.splice(index, 1);
        removeNewOption(option);
      } else if (props.multipleLimit <= 0 || selectedOptions.length < props.multipleLimit) {
        selectedOptions = [...selectedOptions, getValueKey(option)];
        states.cachedOptions.push(option);
        selectNewOption(option);
        updateHoveringIndex(idx);
      }
      update(selectedOptions);
      if (option.created) {
        states.query = "";
        handleQueryChange("");
        states.inputLength = 20;
      }
      if (props.filterable && !props.reserveKeyword) {
        (_b = (_a = inputRef.value).focus) == null ? void 0 : _b.call(_a);
        onUpdateInputValue("");
      }
      if (props.filterable) {
        states.calculatedWidth = calculatorRef.value.getBoundingClientRect().width;
      }
      resetInputHeight();
      setSoftFocus();
    } else {
      selectedIndex.value = idx;
      states.selectedLabel = option.label;
      update(getValueKey(option));
      expanded.value = false;
      states.isComposing = false;
      states.isSilentBlur = byClick;
      selectNewOption(option);
      if (!option.created) {
        clearAllNewOption();
      }
      updateHoveringIndex(idx);
    }
  };
  const deleteTag = (event, tag) => {
    const { valueKey } = props;
    const index = props.modelValue.indexOf((0,get/* default */.Z)(tag, valueKey));
    if (index > -1 && !selectDisabled.value) {
      const value = [
        ...props.modelValue.slice(0, index),
        ...props.modelValue.slice(index + 1)
      ];
      states.cachedOptions.splice(index, 1);
      update(value);
      emit("remove-tag", (0,get/* default */.Z)(tag, valueKey));
      states.softFocus = true;
      removeNewOption(tag);
      return (0,external_Vue_.nextTick)(focusAndUpdatePopup);
    }
    event.stopPropagation();
  };
  const handleFocus = (event) => {
    const focused = states.isComposing;
    states.isComposing = true;
    if (!states.softFocus) {
      if (!focused)
        emit("focus", event);
    } else {
      states.softFocus = false;
    }
  };
  const handleBlur = () => {
    states.softFocus = false;
    return (0,external_Vue_.nextTick)(() => {
      var _a, _b;
      (_b = (_a = inputRef.value) == null ? void 0 : _a.blur) == null ? void 0 : _b.call(_a);
      if (calculatorRef.value) {
        states.calculatedWidth = calculatorRef.value.getBoundingClientRect().width;
      }
      if (states.isSilentBlur) {
        states.isSilentBlur = false;
      } else {
        if (states.isComposing) {
          emit("blur");
        }
      }
      states.isComposing = false;
    });
  };
  const handleEsc = () => {
    if (states.displayInputValue.length > 0) {
      onUpdateInputValue("");
    } else {
      expanded.value = false;
    }
  };
  const handleDel = (e) => {
    if (states.displayInputValue.length === 0) {
      e.preventDefault();
      const selected = props.modelValue.slice();
      selected.pop();
      removeNewOption(states.cachedOptions.pop());
      update(selected);
    }
  };
  const handleClear = () => {
    let emptyValue;
    if ((0,shared_esm_bundler/* isArray */.kJ)(props.modelValue)) {
      emptyValue = [];
    } else {
      emptyValue = "";
    }
    states.softFocus = true;
    if (props.multiple) {
      states.cachedOptions = [];
    } else {
      states.selectedLabel = "";
    }
    expanded.value = false;
    update(emptyValue);
    emit("clear");
    clearAllNewOption();
    return (0,external_Vue_.nextTick)(focusAndUpdatePopup);
  };
  const onUpdateInputValue = (val) => {
    states.displayInputValue = val;
    states.inputValue = val;
  };
  const onKeyboardNavigate = (direction, hoveringIndex = void 0) => {
    const options = filteredOptions.value;
    if (!["forward", "backward"].includes(direction) || selectDisabled.value || options.length <= 0 || optionsAllDisabled.value) {
      return;
    }
    if (!expanded.value) {
      return toggleMenu();
    }
    if (hoveringIndex === void 0) {
      hoveringIndex = states.hoveringIndex;
    }
    let newIndex = -1;
    if (direction === "forward") {
      newIndex = hoveringIndex + 1;
      if (newIndex >= options.length) {
        newIndex = 0;
      }
    } else if (direction === "backward") {
      newIndex = hoveringIndex - 1;
      if (newIndex < 0) {
        newIndex = options.length - 1;
      }
    }
    const option = options[newIndex];
    if (option.disabled || option.type === "Group") {
      return onKeyboardNavigate(direction, newIndex);
    } else {
      updateHoveringIndex(newIndex);
      scrollToItem(newIndex);
    }
  };
  const onKeyboardSelect = () => {
    if (!expanded.value) {
      return toggleMenu();
    } else if (~states.hoveringIndex && filteredOptions.value[states.hoveringIndex]) {
      onSelect(filteredOptions.value[states.hoveringIndex], states.hoveringIndex, false);
    }
  };
  const updateHoveringIndex = (idx) => {
    states.hoveringIndex = idx;
  };
  const resetHoveringIndex = () => {
    states.hoveringIndex = -1;
  };
  const setSoftFocus = () => {
    var _a;
    const _input = inputRef.value;
    if (_input) {
      (_a = _input.focus) == null ? void 0 : _a.call(_input);
    }
  };
  const onInput = (event) => {
    const value = event.target.value;
    onUpdateInputValue(value);
    if (states.displayInputValue.length > 0 && !expanded.value) {
      expanded.value = true;
    }
    states.calculatedWidth = calculatorRef.value.getBoundingClientRect().width;
    if (props.multiple) {
      resetInputHeight();
    }
    if (props.remote) {
      debouncedOnInputChange();
    } else {
      return onInputChange();
    }
  };
  const handleClickOutside = () => {
    expanded.value = false;
    return handleBlur();
  };
  const handleMenuEnter = () => {
    states.inputValue = states.displayInputValue;
    return (0,external_Vue_.nextTick)(() => {
      if (~indexRef.value) {
        updateHoveringIndex(indexRef.value);
        scrollToItem(states.hoveringIndex);
      }
    });
  };
  const scrollToItem = (index) => {
    menuRef.value.scrollToItem(index);
  };
  const initStates = () => {
    resetHoveringIndex();
    if (props.multiple) {
      if (props.modelValue.length > 0) {
        let initHovering = false;
        states.cachedOptions.length = 0;
        states.previousValue = props.modelValue.toString();
        props.modelValue.forEach((selected) => {
          const itemIndex = filteredOptions.value.findIndex((option) => getValueKey(option) === selected);
          if (~itemIndex) {
            states.cachedOptions.push(filteredOptions.value[itemIndex]);
            if (!initHovering) {
              updateHoveringIndex(itemIndex);
            }
            initHovering = true;
          }
        });
      } else {
        states.cachedOptions = [];
        states.previousValue = "";
      }
    } else {
      if (hasModelValue.value) {
        states.previousValue = props.modelValue;
        const options = filteredOptions.value;
        const selectedItemIndex = options.findIndex((option) => getValueKey(option) === getValueKey(props.modelValue));
        if (~selectedItemIndex) {
          states.selectedLabel = options[selectedItemIndex].label;
          updateHoveringIndex(selectedItemIndex);
        } else {
          states.selectedLabel = `${props.modelValue}`;
        }
      } else {
        states.selectedLabel = "";
        states.previousValue = "";
      }
    }
    clearAllNewOption();
    calculatePopperSize();
  };
  (0,external_Vue_.watch)(expanded, (val) => {
    var _a, _b;
    emit("visible-change", val);
    if (val) {
      (_b = (_a = popper.value).update) == null ? void 0 : _b.call(_a);
    } else {
      states.displayInputValue = "";
      states.previousQuery = null;
      createNewOption("");
    }
  });
  (0,external_Vue_.watch)(() => props.modelValue, (val, oldVal) => {
    var _a;
    if (!val || val.toString() !== states.previousValue) {
      initStates();
    }
    if (!(0,isEqual/* default */.Z)(val, oldVal)) {
      (_a = elFormItem == null ? void 0 : elFormItem.validate) == null ? void 0 : _a.call(elFormItem, "change").catch((err) => (0,error/* debugWarn */.N)(err));
    }
  }, {
    deep: true
  });
  (0,external_Vue_.watch)(() => props.options, () => {
    const input = inputRef.value;
    if (!input || input && document.activeElement !== input) {
      initStates();
    }
  }, {
    deep: true
  });
  (0,external_Vue_.watch)(filteredOptions, () => {
    return (0,external_Vue_.nextTick)(menuRef.value.resetScrollTop);
  });
  (0,external_Vue_.onMounted)(() => {
    initStates();
  });
  (0,core/* useResizeObserver */.yU7)(selectRef, handleResize);
  return {
    collapseTagSize,
    currentPlaceholder,
    expanded,
    emptyText,
    popupHeight,
    debounce: debounce$1,
    filteredOptions,
    iconComponent,
    iconReverse,
    inputWrapperStyle,
    popperSize,
    dropdownMenuVisible,
    hasModelValue,
    shouldShowPlaceholder,
    selectDisabled,
    selectSize,
    showClearBtn,
    states,
    tagMaxWidth,
    nsSelectV2,
    nsInput,
    calculatorRef,
    controlRef,
    inputRef,
    menuRef,
    popper,
    selectRef,
    selectionRef,
    popperRef,
    validateState,
    validateIcon,
    debouncedOnInputChange,
    deleteTag,
    getLabel,
    getValueKey,
    handleBlur,
    handleClear,
    handleClickOutside,
    handleDel,
    handleEsc,
    handleFocus,
    handleMenuEnter,
    handleResize,
    toggleMenu,
    scrollTo: scrollToItem,
    onInput,
    onKeyboardNavigate,
    onKeyboardSelect,
    onSelect,
    onHover: updateHoveringIndex,
    onUpdateInputValue,
    handleCompositionStart,
    handleCompositionEnd,
    handleCompositionUpdate
  };
};


//# sourceMappingURL=useSelect.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/select-v2/src/select.mjs














const src_select_sfc_main = (0,external_Vue_.defineComponent)({
  name: "ElSelectV2",
  components: {
    ElSelectMenu: select_dropdown_ElSelectMenu,
    ElTag: ElTag,
    ElTooltip: ElTooltip,
    ElIcon: components_icon/* ElIcon */.gn
  },
  directives: { ClickOutside: ClickOutside, ModelText: external_Vue_.vModelText },
  props: SelectProps,
  emits: [
    constants_event/* UPDATE_MODEL_EVENT */.f_,
    constants_event/* CHANGE_EVENT */.O7,
    "remove-tag",
    "clear",
    "visible-change",
    "focus",
    "blur"
  ],
  setup(props, { emit }) {
    const API = useSelect_useSelect(props, emit);
    (0,external_Vue_.provide)(selectV2InjectionKey, {
      props: (0,external_Vue_.reactive)({
        ...(0,external_Vue_.toRefs)(props),
        height: API.popupHeight
      }),
      onSelect: API.onSelect,
      onHover: API.onHover,
      onKeyboardNavigate: API.onKeyboardNavigate,
      onKeyboardSelect: API.onKeyboardSelect
    });
    return API;
  }
});
const src_select_hoisted_1 = { key: 0 };
const src_select_hoisted_2 = ["id", "autocomplete", "aria-expanded", "aria-labelledby", "disabled", "readonly", "name", "unselectable"];
const src_select_hoisted_3 = ["textContent"];
const select_hoisted_4 = ["id", "aria-labelledby", "aria-expanded", "autocomplete", "disabled", "name", "readonly", "unselectable"];
const select_hoisted_5 = ["textContent"];
function src_select_sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_el_tag = (0,external_Vue_.resolveComponent)("el-tag");
  const _component_el_tooltip = (0,external_Vue_.resolveComponent)("el-tooltip");
  const _component_el_icon = (0,external_Vue_.resolveComponent)("el-icon");
  const _component_el_select_menu = (0,external_Vue_.resolveComponent)("el-select-menu");
  const _directive_model_text = (0,external_Vue_.resolveDirective)("model-text");
  const _directive_click_outside = (0,external_Vue_.resolveDirective)("click-outside");
  return (0,external_Vue_.withDirectives)(((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
    ref: "selectRef",
    class: (0,external_Vue_.normalizeClass)([_ctx.nsSelectV2.b(), _ctx.nsSelectV2.m(_ctx.selectSize)]),
    onClick: _cache[24] || (_cache[24] = (0,external_Vue_.withModifiers)((...args) => _ctx.toggleMenu && _ctx.toggleMenu(...args), ["stop"])),
    onMouseenter: _cache[25] || (_cache[25] = ($event) => _ctx.states.comboBoxHovering = true),
    onMouseleave: _cache[26] || (_cache[26] = ($event) => _ctx.states.comboBoxHovering = false)
  }, [
    (0,external_Vue_.createVNode)(_component_el_tooltip, {
      ref: "popper",
      visible: _ctx.dropdownMenuVisible,
      "onUpdate:visible": _cache[22] || (_cache[22] = ($event) => _ctx.dropdownMenuVisible = $event),
      teleported: _ctx.teleported,
      "popper-class": [_ctx.nsSelectV2.e("popper"), _ctx.popperClass],
      "gpu-acceleration": false,
      "stop-popper-mouse-event": false,
      "popper-options": _ctx.popperOptions,
      "fallback-placements": ["bottom-start", "top-start", "right", "left"],
      effect: _ctx.effect,
      placement: "bottom-start",
      pure: "",
      transition: `${_ctx.nsSelectV2.namespace.value}-zoom-in-top`,
      trigger: "click",
      persistent: _ctx.persistent,
      onBeforeShow: _ctx.handleMenuEnter,
      onHide: _cache[23] || (_cache[23] = ($event) => _ctx.states.inputValue = _ctx.states.displayInputValue)
    }, {
      default: (0,external_Vue_.withCtx)(() => {
        var _a;
        return [
          (0,external_Vue_.createElementVNode)("div", {
            ref: "selectionRef",
            class: (0,external_Vue_.normalizeClass)([
              _ctx.nsSelectV2.e("wrapper"),
              _ctx.nsSelectV2.is("focused", _ctx.states.isComposing),
              _ctx.nsSelectV2.is("hovering", _ctx.states.comboBoxHovering),
              _ctx.nsSelectV2.is("filterable", _ctx.filterable),
              _ctx.nsSelectV2.is("disabled", _ctx.selectDisabled)
            ])
          }, [
            _ctx.$slots.prefix ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", src_select_hoisted_1, [
              (0,external_Vue_.renderSlot)(_ctx.$slots, "prefix")
            ])) : (0,external_Vue_.createCommentVNode)("v-if", true),
            _ctx.multiple ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
              key: 1,
              class: (0,external_Vue_.normalizeClass)(_ctx.nsSelectV2.e("selection"))
            }, [
              _ctx.collapseTags && _ctx.modelValue.length > 0 ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
                key: 0,
                class: (0,external_Vue_.normalizeClass)(_ctx.nsSelectV2.e("selected-item"))
              }, [
                (0,external_Vue_.createVNode)(_component_el_tag, {
                  closable: !_ctx.selectDisabled && !((_a = _ctx.states.cachedOptions[0]) == null ? void 0 : _a.disable),
                  size: _ctx.collapseTagSize,
                  type: "info",
                  "disable-transitions": "",
                  onClose: _cache[0] || (_cache[0] = ($event) => _ctx.deleteTag($event, _ctx.states.cachedOptions[0]))
                }, {
                  default: (0,external_Vue_.withCtx)(() => {
                    var _a2;
                    return [
                      (0,external_Vue_.createElementVNode)("span", {
                        class: (0,external_Vue_.normalizeClass)(_ctx.nsSelectV2.e("tags-text")),
                        style: (0,external_Vue_.normalizeStyle)({
                          maxWidth: `${_ctx.tagMaxWidth}px`
                        })
                      }, (0,external_Vue_.toDisplayString)((_a2 = _ctx.states.cachedOptions[0]) == null ? void 0 : _a2.label), 7)
                    ];
                  }),
                  _: 1
                }, 8, ["closable", "size"]),
                _ctx.modelValue.length > 1 ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(_component_el_tag, {
                  key: 0,
                  closable: false,
                  size: _ctx.collapseTagSize,
                  type: "info",
                  "disable-transitions": ""
                }, {
                  default: (0,external_Vue_.withCtx)(() => [
                    _ctx.collapseTagsTooltip ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(_component_el_tooltip, {
                      key: 0,
                      disabled: _ctx.dropdownMenuVisible,
                      "fallback-placements": ["bottom", "top", "right", "left"],
                      effect: _ctx.effect,
                      placement: "bottom",
                      teleported: false
                    }, {
                      default: (0,external_Vue_.withCtx)(() => [
                        (0,external_Vue_.createElementVNode)("span", {
                          class: (0,external_Vue_.normalizeClass)(_ctx.nsSelectV2.e("tags-text")),
                          style: (0,external_Vue_.normalizeStyle)({
                            maxWidth: `${_ctx.tagMaxWidth}px`
                          })
                        }, "+ " + (0,external_Vue_.toDisplayString)(_ctx.modelValue.length - 1), 7)
                      ]),
                      content: (0,external_Vue_.withCtx)(() => [
                        (0,external_Vue_.createElementVNode)("div", {
                          class: (0,external_Vue_.normalizeClass)(_ctx.nsSelectV2.e("selection"))
                        }, [
                          ((0,external_Vue_.openBlock)(true), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, null, (0,external_Vue_.renderList)(_ctx.states.cachedOptions.slice(1), (selected, idx) => {
                            return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
                              key: idx,
                              class: (0,external_Vue_.normalizeClass)(_ctx.nsSelectV2.e("selected-item"))
                            }, [
                              ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(_component_el_tag, {
                                key: _ctx.getValueKey(selected),
                                closable: !_ctx.selectDisabled && !selected.disabled,
                                size: _ctx.collapseTagSize,
                                class: "in-tooltip",
                                type: "info",
                                "disable-transitions": "",
                                onClose: ($event) => _ctx.deleteTag($event, selected)
                              }, {
                                default: (0,external_Vue_.withCtx)(() => [
                                  (0,external_Vue_.createElementVNode)("span", {
                                    class: (0,external_Vue_.normalizeClass)(_ctx.nsSelectV2.e("tags-text")),
                                    style: (0,external_Vue_.normalizeStyle)({
                                      maxWidth: `${_ctx.tagMaxWidth}px`
                                    })
                                  }, (0,external_Vue_.toDisplayString)(_ctx.getLabel(selected)), 7)
                                ]),
                                _: 2
                              }, 1032, ["closable", "size", "onClose"]))
                            ], 2);
                          }), 128))
                        ], 2)
                      ]),
                      _: 1
                    }, 8, ["disabled", "effect"])) : ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("span", {
                      key: 1,
                      class: (0,external_Vue_.normalizeClass)(_ctx.nsSelectV2.e("tags-text")),
                      style: (0,external_Vue_.normalizeStyle)({
                        maxWidth: `${_ctx.tagMaxWidth}px`
                      })
                    }, "+ " + (0,external_Vue_.toDisplayString)(_ctx.modelValue.length - 1), 7))
                  ]),
                  _: 1
                }, 8, ["size"])) : (0,external_Vue_.createCommentVNode)("v-if", true)
              ], 2)) : ((0,external_Vue_.openBlock)(true), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, { key: 1 }, (0,external_Vue_.renderList)(_ctx.states.cachedOptions, (selected, idx) => {
                return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
                  key: idx,
                  class: (0,external_Vue_.normalizeClass)(_ctx.nsSelectV2.e("selected-item"))
                }, [
                  ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(_component_el_tag, {
                    key: _ctx.getValueKey(selected),
                    closable: !_ctx.selectDisabled && !selected.disabled,
                    size: _ctx.collapseTagSize,
                    type: "info",
                    "disable-transitions": "",
                    onClose: ($event) => _ctx.deleteTag($event, selected)
                  }, {
                    default: (0,external_Vue_.withCtx)(() => [
                      (0,external_Vue_.createElementVNode)("span", {
                        class: (0,external_Vue_.normalizeClass)(_ctx.nsSelectV2.e("tags-text")),
                        style: (0,external_Vue_.normalizeStyle)({
                          maxWidth: `${_ctx.tagMaxWidth}px`
                        })
                      }, (0,external_Vue_.toDisplayString)(_ctx.getLabel(selected)), 7)
                    ]),
                    _: 2
                  }, 1032, ["closable", "size", "onClose"]))
                ], 2);
              }), 128)),
              (0,external_Vue_.createElementVNode)("div", {
                class: (0,external_Vue_.normalizeClass)([
                  _ctx.nsSelectV2.e("selected-item"),
                  _ctx.nsSelectV2.e("input-wrapper")
                ]),
                style: (0,external_Vue_.normalizeStyle)(_ctx.inputWrapperStyle)
              }, [
                (0,external_Vue_.withDirectives)((0,external_Vue_.createElementVNode)("input", {
                  id: _ctx.id,
                  ref: "inputRef",
                  autocomplete: _ctx.autocomplete,
                  "aria-autocomplete": "list",
                  "aria-haspopup": "listbox",
                  autocapitalize: "off",
                  "aria-expanded": _ctx.expanded,
                  "aria-labelledby": _ctx.label,
                  class: (0,external_Vue_.normalizeClass)([
                    _ctx.nsSelectV2.is(_ctx.selectSize),
                    _ctx.nsSelectV2.e("combobox-input")
                  ]),
                  disabled: _ctx.disabled,
                  role: "combobox",
                  readonly: !_ctx.filterable,
                  spellcheck: "false",
                  type: "text",
                  name: _ctx.name,
                  unselectable: _ctx.expanded ? "on" : void 0,
                  "onUpdate:modelValue": _cache[1] || (_cache[1] = (...args) => _ctx.onUpdateInputValue && _ctx.onUpdateInputValue(...args)),
                  onFocus: _cache[2] || (_cache[2] = (...args) => _ctx.handleFocus && _ctx.handleFocus(...args)),
                  onInput: _cache[3] || (_cache[3] = (...args) => _ctx.onInput && _ctx.onInput(...args)),
                  onCompositionstart: _cache[4] || (_cache[4] = (...args) => _ctx.handleCompositionStart && _ctx.handleCompositionStart(...args)),
                  onCompositionupdate: _cache[5] || (_cache[5] = (...args) => _ctx.handleCompositionUpdate && _ctx.handleCompositionUpdate(...args)),
                  onCompositionend: _cache[6] || (_cache[6] = (...args) => _ctx.handleCompositionEnd && _ctx.handleCompositionEnd(...args)),
                  onKeydown: [
                    _cache[7] || (_cache[7] = (0,external_Vue_.withKeys)((0,external_Vue_.withModifiers)(($event) => _ctx.onKeyboardNavigate("backward"), ["stop", "prevent"]), ["up"])),
                    _cache[8] || (_cache[8] = (0,external_Vue_.withKeys)((0,external_Vue_.withModifiers)(($event) => _ctx.onKeyboardNavigate("forward"), ["stop", "prevent"]), ["down"])),
                    _cache[9] || (_cache[9] = (0,external_Vue_.withKeys)((0,external_Vue_.withModifiers)((...args) => _ctx.onKeyboardSelect && _ctx.onKeyboardSelect(...args), ["stop", "prevent"]), ["enter"])),
                    _cache[10] || (_cache[10] = (0,external_Vue_.withKeys)((0,external_Vue_.withModifiers)((...args) => _ctx.handleEsc && _ctx.handleEsc(...args), ["stop", "prevent"]), ["esc"])),
                    _cache[11] || (_cache[11] = (0,external_Vue_.withKeys)((0,external_Vue_.withModifiers)((...args) => _ctx.handleDel && _ctx.handleDel(...args), ["stop"]), ["delete"]))
                  ]
                }, null, 42, src_select_hoisted_2), [
                  [_directive_model_text, _ctx.states.displayInputValue]
                ]),
                _ctx.filterable ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("span", {
                  key: 0,
                  ref: "calculatorRef",
                  "aria-hidden": "true",
                  class: (0,external_Vue_.normalizeClass)(_ctx.nsSelectV2.e("input-calculator")),
                  textContent: (0,external_Vue_.toDisplayString)(_ctx.states.displayInputValue)
                }, null, 10, src_select_hoisted_3)) : (0,external_Vue_.createCommentVNode)("v-if", true)
              ], 6)
            ], 2)) : ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, { key: 2 }, [
              (0,external_Vue_.createElementVNode)("div", {
                class: (0,external_Vue_.normalizeClass)([
                  _ctx.nsSelectV2.e("selected-item"),
                  _ctx.nsSelectV2.e("input-wrapper")
                ])
              }, [
                (0,external_Vue_.withDirectives)((0,external_Vue_.createElementVNode)("input", {
                  id: _ctx.id,
                  ref: "inputRef",
                  "aria-autocomplete": "list",
                  "aria-haspopup": "listbox",
                  "aria-labelledby": _ctx.label,
                  "aria-expanded": _ctx.expanded,
                  autocapitalize: "off",
                  autocomplete: _ctx.autocomplete,
                  class: (0,external_Vue_.normalizeClass)(_ctx.nsSelectV2.e("combobox-input")),
                  disabled: _ctx.disabled,
                  name: _ctx.name,
                  role: "combobox",
                  readonly: !_ctx.filterable,
                  spellcheck: "false",
                  type: "text",
                  unselectable: _ctx.expanded ? "on" : void 0,
                  onCompositionstart: _cache[12] || (_cache[12] = (...args) => _ctx.handleCompositionStart && _ctx.handleCompositionStart(...args)),
                  onCompositionupdate: _cache[13] || (_cache[13] = (...args) => _ctx.handleCompositionUpdate && _ctx.handleCompositionUpdate(...args)),
                  onCompositionend: _cache[14] || (_cache[14] = (...args) => _ctx.handleCompositionEnd && _ctx.handleCompositionEnd(...args)),
                  onFocus: _cache[15] || (_cache[15] = (...args) => _ctx.handleFocus && _ctx.handleFocus(...args)),
                  onInput: _cache[16] || (_cache[16] = (...args) => _ctx.onInput && _ctx.onInput(...args)),
                  onKeydown: [
                    _cache[17] || (_cache[17] = (0,external_Vue_.withKeys)((0,external_Vue_.withModifiers)(($event) => _ctx.onKeyboardNavigate("backward"), ["stop", "prevent"]), ["up"])),
                    _cache[18] || (_cache[18] = (0,external_Vue_.withKeys)((0,external_Vue_.withModifiers)(($event) => _ctx.onKeyboardNavigate("forward"), ["stop", "prevent"]), ["down"])),
                    _cache[19] || (_cache[19] = (0,external_Vue_.withKeys)((0,external_Vue_.withModifiers)((...args) => _ctx.onKeyboardSelect && _ctx.onKeyboardSelect(...args), ["stop", "prevent"]), ["enter"])),
                    _cache[20] || (_cache[20] = (0,external_Vue_.withKeys)((0,external_Vue_.withModifiers)((...args) => _ctx.handleEsc && _ctx.handleEsc(...args), ["stop", "prevent"]), ["esc"]))
                  ],
                  "onUpdate:modelValue": _cache[21] || (_cache[21] = (...args) => _ctx.onUpdateInputValue && _ctx.onUpdateInputValue(...args))
                }, null, 42, select_hoisted_4), [
                  [_directive_model_text, _ctx.states.displayInputValue]
                ])
              ], 2),
              _ctx.filterable ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("span", {
                key: 0,
                ref: "calculatorRef",
                "aria-hidden": "true",
                class: (0,external_Vue_.normalizeClass)([
                  _ctx.nsSelectV2.e("selected-item"),
                  _ctx.nsSelectV2.e("input-calculator")
                ]),
                textContent: (0,external_Vue_.toDisplayString)(_ctx.states.displayInputValue)
              }, null, 10, select_hoisted_5)) : (0,external_Vue_.createCommentVNode)("v-if", true)
            ], 64)),
            _ctx.shouldShowPlaceholder ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("span", {
              key: 3,
              class: (0,external_Vue_.normalizeClass)([
                _ctx.nsSelectV2.e("placeholder"),
                _ctx.nsSelectV2.is("transparent", _ctx.states.isComposing || (_ctx.placeholder && _ctx.multiple ? _ctx.modelValue.length === 0 : !_ctx.hasModelValue))
              ])
            }, (0,external_Vue_.toDisplayString)(_ctx.currentPlaceholder), 3)) : (0,external_Vue_.createCommentVNode)("v-if", true),
            (0,external_Vue_.createElementVNode)("span", {
              class: (0,external_Vue_.normalizeClass)(_ctx.nsSelectV2.e("suffix"))
            }, [
              _ctx.iconComponent ? (0,external_Vue_.withDirectives)(((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(_component_el_icon, {
                key: 0,
                class: (0,external_Vue_.normalizeClass)([_ctx.nsSelectV2.e("caret"), _ctx.nsInput.e("icon"), _ctx.iconReverse])
              }, {
                default: (0,external_Vue_.withCtx)(() => [
                  ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.resolveDynamicComponent)(_ctx.iconComponent)))
                ]),
                _: 1
              }, 8, ["class"])), [
                [external_Vue_.vShow, !_ctx.showClearBtn]
              ]) : (0,external_Vue_.createCommentVNode)("v-if", true),
              _ctx.showClearBtn && _ctx.clearIcon ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(_component_el_icon, {
                key: 1,
                class: (0,external_Vue_.normalizeClass)([_ctx.nsSelectV2.e("caret"), _ctx.nsInput.e("icon")]),
                onClick: (0,external_Vue_.withModifiers)(_ctx.handleClear, ["prevent", "stop"])
              }, {
                default: (0,external_Vue_.withCtx)(() => [
                  ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.resolveDynamicComponent)(_ctx.clearIcon)))
                ]),
                _: 1
              }, 8, ["class", "onClick"])) : (0,external_Vue_.createCommentVNode)("v-if", true),
              _ctx.validateState && _ctx.validateIcon ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(_component_el_icon, {
                key: 2,
                class: (0,external_Vue_.normalizeClass)([_ctx.nsInput.e("icon"), _ctx.nsInput.e("validateIcon")])
              }, {
                default: (0,external_Vue_.withCtx)(() => [
                  ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.resolveDynamicComponent)(_ctx.validateIcon)))
                ]),
                _: 1
              }, 8, ["class"])) : (0,external_Vue_.createCommentVNode)("v-if", true)
            ], 2)
          ], 2)
        ];
      }),
      content: (0,external_Vue_.withCtx)(() => [
        (0,external_Vue_.createVNode)(_component_el_select_menu, {
          ref: "menuRef",
          data: _ctx.filteredOptions,
          width: _ctx.popperSize,
          "hovering-index": _ctx.states.hoveringIndex,
          "scrollbar-always-on": _ctx.scrollbarAlwaysOn
        }, {
          default: (0,external_Vue_.withCtx)((scope) => [
            (0,external_Vue_.renderSlot)(_ctx.$slots, "default", (0,external_Vue_.normalizeProps)((0,external_Vue_.guardReactiveProps)(scope)))
          ]),
          empty: (0,external_Vue_.withCtx)(() => [
            (0,external_Vue_.renderSlot)(_ctx.$slots, "empty", {}, () => [
              (0,external_Vue_.createElementVNode)("p", {
                class: (0,external_Vue_.normalizeClass)(_ctx.nsSelectV2.e("empty"))
              }, (0,external_Vue_.toDisplayString)(_ctx.emptyText ? _ctx.emptyText : ""), 3)
            ])
          ]),
          _: 3
        }, 8, ["data", "width", "hovering-index", "scrollbar-always-on"])
      ]),
      _: 3
    }, 8, ["visible", "teleported", "popper-class", "popper-options", "effect", "transition", "persistent", "onBeforeShow"])
  ], 34)), [
    [_directive_click_outside, _ctx.handleClickOutside, _ctx.popperRef]
  ]);
}
var select_Select = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(src_select_sfc_main, [["render", src_select_sfc_render], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/select-v2/src/select.vue"]]);


//# sourceMappingURL=select.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/select-v2/index.mjs



select_Select.install = (app) => {
  app.component(select_Select.name, select_Select);
};
const _Select = select_Select;
const ElSelectV2 = _Select;


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/skeleton/src/skeleton.mjs



const skeletonProps = (0,runtime/* buildProps */.o8)({
  animated: {
    type: Boolean,
    default: false
  },
  count: {
    type: Number,
    default: 1
  },
  rows: {
    type: Number,
    default: 3
  },
  loading: {
    type: Boolean,
    default: true
  },
  throttle: {
    type: Number
  }
});


//# sourceMappingURL=skeleton.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/skeleton/src/skeleton-item.mjs



const skeletonItemProps = (0,runtime/* buildProps */.o8)({
  variant: {
    type: String,
    values: [
      "circle",
      "rect",
      "h1",
      "h3",
      "text",
      "caption",
      "p",
      "image",
      "button"
    ],
    default: "text"
  }
});


//# sourceMappingURL=skeleton-item.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/skeleton/src/skeleton-item2.mjs







const skeleton_item2_default_ = {
  name: "ElSkeletonItem"
};
const skeleton_item2_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...skeleton_item2_default_,
  props: skeletonItemProps,
  setup(__props) {
    const ns = (0,use_namespace/* useNamespace */.s)("skeleton");
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
        class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(ns).e("item"), (0,external_Vue_.unref)(ns).e(_ctx.variant)])
      }, [
        _ctx.variant === "image" ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.unref)(dist/* PictureFilled */.D5R), { key: 0 })) : (0,external_Vue_.createCommentVNode)("v-if", true)
      ], 2);
    };
  }
});
var SkeletonItem = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(skeleton_item2_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/skeleton/src/skeleton-item.vue"]]);


//# sourceMappingURL=skeleton-item2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/hooks/use-throttle-render/index.mjs


const useThrottleRender = (loading, throttle = 0) => {
  if (throttle === 0)
    return loading;
  const throttled = (0,external_Vue_.ref)(false);
  let timeoutHandle = 0;
  const dispatchThrottling = () => {
    if (timeoutHandle) {
      clearTimeout(timeoutHandle);
    }
    timeoutHandle = window.setTimeout(() => {
      throttled.value = loading.value;
    }, throttle);
  };
  (0,external_Vue_.onMounted)(dispatchThrottling);
  (0,external_Vue_.watch)(() => loading.value, (val) => {
    if (val) {
      dispatchThrottling();
    } else {
      throttled.value = val;
    }
  });
  return throttled;
};


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/skeleton/src/skeleton2.mjs








const skeleton2_default_ = {
  name: "ElSkeleton"
};
const skeleton2_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...skeleton2_default_,
  props: skeletonProps,
  setup(__props, { expose }) {
    const props = __props;
    const ns = (0,use_namespace/* useNamespace */.s)("skeleton");
    const uiLoading = useThrottleRender((0,external_Vue_.toRef)(props, "loading"), props.throttle);
    expose({
      uiLoading
    });
    return (_ctx, _cache) => {
      return (0,external_Vue_.unref)(uiLoading) ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", (0,external_Vue_.mergeProps)({
        key: 0,
        class: [(0,external_Vue_.unref)(ns).b(), (0,external_Vue_.unref)(ns).is("animated", _ctx.animated)]
      }, _ctx.$attrs), [
        ((0,external_Vue_.openBlock)(true), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, null, (0,external_Vue_.renderList)(_ctx.count, (i) => {
          return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, { key: i }, [
            _ctx.loading ? (0,external_Vue_.renderSlot)(_ctx.$slots, "template", { key: i }, () => [
              (0,external_Vue_.createVNode)(SkeletonItem, {
                class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).is("first")),
                variant: "p"
              }, null, 8, ["class"]),
              ((0,external_Vue_.openBlock)(true), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, null, (0,external_Vue_.renderList)(_ctx.rows, (item) => {
                return (0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(SkeletonItem, {
                  key: item,
                  class: (0,external_Vue_.normalizeClass)([
                    (0,external_Vue_.unref)(ns).e("paragraph"),
                    (0,external_Vue_.unref)(ns).is("last", item === _ctx.rows && _ctx.rows > 1)
                  ]),
                  variant: "p"
                }, null, 8, ["class"]);
              }), 128))
            ]) : (0,external_Vue_.createCommentVNode)("v-if", true)
          ], 64);
        }), 128))
      ], 16)) : (0,external_Vue_.renderSlot)(_ctx.$slots, "default", (0,external_Vue_.normalizeProps)((0,external_Vue_.mergeProps)({ key: 1 }, _ctx.$attrs)));
    };
  }
});
var Skeleton = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(skeleton2_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/skeleton/src/skeleton.vue"]]);


//# sourceMappingURL=skeleton2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/skeleton/index.mjs







const ElSkeleton = (0,install/* withInstall */.nz)(Skeleton, {
  SkeletonItem: SkeletonItem
});
const ElSkeletonItem = (0,install/* withNoopInstall */.dp)(SkeletonItem);


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/slider/src/slider.mjs









const sliderProps = (0,runtime/* buildProps */.o8)({
  modelValue: {
    type: (0,runtime/* definePropType */.Cq)([Number, Array]),
    default: 0
  },
  id: {
    type: String,
    default: void 0
  },
  min: {
    type: Number,
    default: 0
  },
  max: {
    type: Number,
    default: 100
  },
  step: {
    type: Number,
    default: 1
  },
  showInput: Boolean,
  showInputControls: {
    type: Boolean,
    default: true
  },
  size: use_common_props/* useSizeProp */.Pp,
  inputSize: use_common_props/* useSizeProp */.Pp,
  showStops: Boolean,
  showTooltip: {
    type: Boolean,
    default: true
  },
  formatTooltip: {
    type: (0,runtime/* definePropType */.Cq)(Function),
    default: void 0
  },
  disabled: Boolean,
  range: Boolean,
  vertical: Boolean,
  height: String,
  debounce: {
    type: Number,
    default: 300
  },
  label: {
    type: String,
    default: void 0
  },
  rangeStartLabel: {
    type: String,
    default: void 0
  },
  rangeEndLabel: {
    type: String,
    default: void 0
  },
  formatValueText: {
    type: (0,runtime/* definePropType */.Cq)(Function),
    default: void 0
  },
  tooltipClass: {
    type: String,
    default: void 0
  },
  marks: {
    type: (0,runtime/* definePropType */.Cq)(Object)
  }
});
const isValidValue = (value) => (0,shared/* isNumber */.hj)(value) || (0,shared_esm_bundler/* isArray */.kJ)(value) && value.every(shared/* isNumber */.hj);
const sliderEmits = {
  [constants_event/* UPDATE_MODEL_EVENT */.f_]: isValidValue,
  [constants_event/* INPUT_EVENT */.e_]: isValidValue,
  [constants_event/* CHANGE_EVENT */.O7]: isValidValue
};


//# sourceMappingURL=slider.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/slider/src/button.mjs






const sliderButtonProps = (0,runtime/* buildProps */.o8)({
  modelValue: {
    type: Number,
    default: 0
  },
  vertical: Boolean,
  tooltipClass: String
});
const sliderButtonEmits = {
  [constants_event/* UPDATE_MODEL_EVENT */.f_]: (value) => (0,shared/* isNumber */.hj)(value)
};


//# sourceMappingURL=button.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/tokens/slider.mjs
const sliderContextKey = Symbol("sliderContextKey");


//# sourceMappingURL=slider.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/slider/src/composables/use-slider-button.mjs








const { left, down, right, up, home, end, pageUp, pageDown } = aria_EVENT_CODE;
const useTooltip = (props, formatTooltip, showTooltip) => {
  const tooltip = (0,external_Vue_.ref)();
  const tooltipVisible = (0,external_Vue_.ref)(false);
  const enableFormat = (0,external_Vue_.computed)(() => {
    return formatTooltip.value instanceof Function;
  });
  const formatValue = (0,external_Vue_.computed)(() => {
    return enableFormat.value && formatTooltip.value(props.modelValue) || props.modelValue;
  });
  const displayTooltip = (0,debounce/* default */.Z)(() => {
    showTooltip.value && (tooltipVisible.value = true);
  }, 50);
  const hideTooltip = (0,debounce/* default */.Z)(() => {
    showTooltip.value && (tooltipVisible.value = false);
  }, 50);
  return {
    tooltip,
    tooltipVisible,
    formatValue,
    displayTooltip,
    hideTooltip
  };
};
const useSliderButton = (props, initData, emit) => {
  const {
    disabled,
    min,
    max,
    step,
    showTooltip,
    precision,
    sliderSize,
    formatTooltip,
    emitChange,
    resetSize,
    updateDragging
  } = (0,external_Vue_.inject)(sliderContextKey);
  const { tooltip, tooltipVisible, formatValue, displayTooltip, hideTooltip } = useTooltip(props, formatTooltip, showTooltip);
  const button = (0,external_Vue_.ref)();
  const currentPosition = (0,external_Vue_.computed)(() => {
    return `${(props.modelValue - min.value) / (max.value - min.value) * 100}%`;
  });
  const wrapperStyle = (0,external_Vue_.computed)(() => {
    return props.vertical ? { bottom: currentPosition.value } : { left: currentPosition.value };
  });
  const handleMouseEnter = () => {
    initData.hovering = true;
    displayTooltip();
  };
  const handleMouseLeave = () => {
    initData.hovering = false;
    if (!initData.dragging) {
      hideTooltip();
    }
  };
  const onButtonDown = (event) => {
    if (disabled.value)
      return;
    event.preventDefault();
    onDragStart(event);
    window.addEventListener("mousemove", onDragging);
    window.addEventListener("touchmove", onDragging);
    window.addEventListener("mouseup", onDragEnd);
    window.addEventListener("touchend", onDragEnd);
    window.addEventListener("contextmenu", onDragEnd);
    button.value.focus();
  };
  const incrementPosition = (amount) => {
    if (disabled.value)
      return;
    initData.newPosition = Number.parseFloat(currentPosition.value) + amount / (max.value - min.value) * 100;
    setPosition(initData.newPosition);
    emitChange();
  };
  const onLeftKeyDown = () => {
    incrementPosition(-step.value);
  };
  const onRightKeyDown = () => {
    incrementPosition(step.value);
  };
  const onPageDownKeyDown = () => {
    incrementPosition(-step.value * 4);
  };
  const onPageUpKeyDown = () => {
    incrementPosition(step.value * 4);
  };
  const onHomeKeyDown = () => {
    if (disabled.value)
      return;
    setPosition(0);
    emitChange();
  };
  const onEndKeyDown = () => {
    if (disabled.value)
      return;
    setPosition(100);
    emitChange();
  };
  const onKeyDown = (event) => {
    let isPreventDefault = true;
    if ([left, down].includes(event.key)) {
      onLeftKeyDown();
    } else if ([right, up].includes(event.key)) {
      onRightKeyDown();
    } else if (event.key === home) {
      onHomeKeyDown();
    } else if (event.key === end) {
      onEndKeyDown();
    } else if (event.key === pageDown) {
      onPageDownKeyDown();
    } else if (event.key === pageUp) {
      onPageUpKeyDown();
    } else {
      isPreventDefault = false;
    }
    isPreventDefault && event.preventDefault();
  };
  const getClientXY = (event) => {
    let clientX;
    let clientY;
    if (event.type.startsWith("touch")) {
      clientY = event.touches[0].clientY;
      clientX = event.touches[0].clientX;
    } else {
      clientY = event.clientY;
      clientX = event.clientX;
    }
    return {
      clientX,
      clientY
    };
  };
  const onDragStart = (event) => {
    initData.dragging = true;
    initData.isClick = true;
    const { clientX, clientY } = getClientXY(event);
    if (props.vertical) {
      initData.startY = clientY;
    } else {
      initData.startX = clientX;
    }
    initData.startPosition = Number.parseFloat(currentPosition.value);
    initData.newPosition = initData.startPosition;
  };
  const onDragging = (event) => {
    if (initData.dragging) {
      initData.isClick = false;
      displayTooltip();
      resetSize();
      let diff;
      const { clientX, clientY } = getClientXY(event);
      if (props.vertical) {
        initData.currentY = clientY;
        diff = (initData.startY - initData.currentY) / sliderSize.value * 100;
      } else {
        initData.currentX = clientX;
        diff = (initData.currentX - initData.startX) / sliderSize.value * 100;
      }
      initData.newPosition = initData.startPosition + diff;
      setPosition(initData.newPosition);
    }
  };
  const onDragEnd = () => {
    if (initData.dragging) {
      setTimeout(() => {
        initData.dragging = false;
        if (!initData.hovering) {
          hideTooltip();
        }
        if (!initData.isClick) {
          setPosition(initData.newPosition);
          emitChange();
        }
      }, 0);
      window.removeEventListener("mousemove", onDragging);
      window.removeEventListener("touchmove", onDragging);
      window.removeEventListener("mouseup", onDragEnd);
      window.removeEventListener("touchend", onDragEnd);
      window.removeEventListener("contextmenu", onDragEnd);
    }
  };
  const setPosition = async (newPosition) => {
    if (newPosition === null || Number.isNaN(+newPosition))
      return;
    if (newPosition < 0) {
      newPosition = 0;
    } else if (newPosition > 100) {
      newPosition = 100;
    }
    const lengthPerStep = 100 / ((max.value - min.value) / step.value);
    const steps = Math.round(newPosition / lengthPerStep);
    let value = steps * lengthPerStep * (max.value - min.value) * 0.01 + min.value;
    value = Number.parseFloat(value.toFixed(precision.value));
    emit(constants_event/* UPDATE_MODEL_EVENT */.f_, value);
    if (!initData.dragging && props.modelValue !== initData.oldValue) {
      initData.oldValue = props.modelValue;
    }
    await (0,external_Vue_.nextTick)();
    initData.dragging && displayTooltip();
    tooltip.value.updatePopper();
  };
  (0,external_Vue_.watch)(() => initData.dragging, (val) => {
    updateDragging(val);
  });
  return {
    button,
    tooltip,
    tooltipVisible,
    showTooltip,
    wrapperStyle,
    formatValue,
    handleMouseEnter,
    handleMouseLeave,
    onButtonDown,
    onKeyDown,
    setPosition
  };
};


//# sourceMappingURL=use-slider-button.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/slider/src/button2.mjs









const src_button2_default_ = {
  name: "ElSliderButton"
};
const src_button2_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...src_button2_default_,
  props: sliderButtonProps,
  emits: sliderButtonEmits,
  setup(__props, { expose, emit }) {
    const props = __props;
    const ns = (0,use_namespace/* useNamespace */.s)("slider");
    const initData = (0,external_Vue_.reactive)({
      hovering: false,
      dragging: false,
      isClick: false,
      startX: 0,
      currentX: 0,
      startY: 0,
      currentY: 0,
      startPosition: 0,
      newPosition: 0,
      oldValue: props.modelValue
    });
    const {
      button,
      tooltip,
      showTooltip,
      tooltipVisible,
      wrapperStyle,
      formatValue,
      handleMouseEnter,
      handleMouseLeave,
      onButtonDown,
      onKeyDown,
      setPosition
    } = useSliderButton(props, initData, emit);
    const { hovering, dragging } = (0,external_Vue_.toRefs)(initData);
    expose({
      onButtonDown,
      onKeyDown,
      setPosition,
      hovering,
      dragging
    });
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
        ref_key: "button",
        ref: button,
        class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(ns).e("button-wrapper"), { hover: (0,external_Vue_.unref)(hovering), dragging: (0,external_Vue_.unref)(dragging) }]),
        style: (0,external_Vue_.normalizeStyle)((0,external_Vue_.unref)(wrapperStyle)),
        tabindex: "0",
        onMouseenter: _cache[1] || (_cache[1] = (...args) => (0,external_Vue_.unref)(handleMouseEnter) && (0,external_Vue_.unref)(handleMouseEnter)(...args)),
        onMouseleave: _cache[2] || (_cache[2] = (...args) => (0,external_Vue_.unref)(handleMouseLeave) && (0,external_Vue_.unref)(handleMouseLeave)(...args)),
        onMousedown: _cache[3] || (_cache[3] = (...args) => (0,external_Vue_.unref)(onButtonDown) && (0,external_Vue_.unref)(onButtonDown)(...args)),
        onTouchstart: _cache[4] || (_cache[4] = (...args) => (0,external_Vue_.unref)(onButtonDown) && (0,external_Vue_.unref)(onButtonDown)(...args)),
        onFocus: _cache[5] || (_cache[5] = (...args) => (0,external_Vue_.unref)(handleMouseEnter) && (0,external_Vue_.unref)(handleMouseEnter)(...args)),
        onBlur: _cache[6] || (_cache[6] = (...args) => (0,external_Vue_.unref)(handleMouseLeave) && (0,external_Vue_.unref)(handleMouseLeave)(...args)),
        onKeydown: _cache[7] || (_cache[7] = (...args) => (0,external_Vue_.unref)(onKeyDown) && (0,external_Vue_.unref)(onKeyDown)(...args))
      }, [
        (0,external_Vue_.createVNode)((0,external_Vue_.unref)(ElTooltip), {
          ref_key: "tooltip",
          ref: tooltip,
          visible: (0,external_Vue_.unref)(tooltipVisible),
          "onUpdate:visible": _cache[0] || (_cache[0] = ($event) => (0,external_Vue_.isRef)(tooltipVisible) ? tooltipVisible.value = $event : null),
          placement: "top",
          "stop-popper-mouse-event": false,
          "popper-class": _ctx.tooltipClass,
          disabled: !(0,external_Vue_.unref)(showTooltip),
          persistent: ""
        }, {
          content: (0,external_Vue_.withCtx)(() => [
            (0,external_Vue_.createElementVNode)("span", null, (0,external_Vue_.toDisplayString)((0,external_Vue_.unref)(formatValue)), 1)
          ]),
          default: (0,external_Vue_.withCtx)(() => [
            (0,external_Vue_.createElementVNode)("div", {
              class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(ns).e("button"), { hover: (0,external_Vue_.unref)(hovering), dragging: (0,external_Vue_.unref)(dragging) }])
            }, null, 2)
          ]),
          _: 1
        }, 8, ["visible", "popper-class", "disabled"])
      ], 38);
    };
  }
});
var SliderButton = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(src_button2_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/slider/src/button.vue"]]);


//# sourceMappingURL=button2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/slider/src/marker.mjs







const sliderMarkerProps = (0,runtime/* buildProps */.o8)({
  mark: {
    type: (0,runtime/* definePropType */.Cq)([String, Object]),
    default: void 0
  }
});
var SliderMarker = (0,external_Vue_.defineComponent)({
  name: "ElSliderMarker",
  props: sliderMarkerProps,
  setup(props) {
    const ns = (0,use_namespace/* useNamespace */.s)("slider");
    const label = (0,external_Vue_.computed)(() => {
      return (0,shared_esm_bundler/* isString */.HD)(props.mark) ? props.mark : props.mark.label;
    });
    const style = (0,external_Vue_.computed)(() => (0,shared_esm_bundler/* isString */.HD)(props.mark) ? void 0 : props.mark.style);
    return () => (0,external_Vue_.h)("div", {
      class: ns.e("marks-text"),
      style
    }, label.value);
  }
});


//# sourceMappingURL=marker.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/slider/src/composables/use-slide.mjs






const useSlide = (props, initData, emit) => {
  const { form: elForm, formItem: elFormItem } = (0,use_form_item/* useFormItem */.A)();
  const slider = (0,external_Vue_.shallowRef)();
  const firstButton = (0,external_Vue_.ref)();
  const secondButton = (0,external_Vue_.ref)();
  const buttonRefs = {
    firstButton,
    secondButton
  };
  const sliderDisabled = (0,external_Vue_.computed)(() => {
    return props.disabled || (elForm == null ? void 0 : elForm.disabled) || false;
  });
  const minValue = (0,external_Vue_.computed)(() => {
    return Math.min(initData.firstValue, initData.secondValue);
  });
  const maxValue = (0,external_Vue_.computed)(() => {
    return Math.max(initData.firstValue, initData.secondValue);
  });
  const barSize = (0,external_Vue_.computed)(() => {
    return props.range ? `${100 * (maxValue.value - minValue.value) / (props.max - props.min)}%` : `${100 * (initData.firstValue - props.min) / (props.max - props.min)}%`;
  });
  const barStart = (0,external_Vue_.computed)(() => {
    return props.range ? `${100 * (minValue.value - props.min) / (props.max - props.min)}%` : "0%";
  });
  const runwayStyle = (0,external_Vue_.computed)(() => {
    return props.vertical ? { height: props.height } : {};
  });
  const barStyle = (0,external_Vue_.computed)(() => {
    return props.vertical ? {
      height: barSize.value,
      bottom: barStart.value
    } : {
      width: barSize.value,
      left: barStart.value
    };
  });
  const resetSize = () => {
    if (slider.value) {
      initData.sliderSize = slider.value[`client${props.vertical ? "Height" : "Width"}`];
    }
  };
  const getButtonRefByPercent = (percent) => {
    const targetValue = props.min + percent * (props.max - props.min) / 100;
    if (!props.range) {
      return firstButton;
    }
    let buttonRefName;
    if (Math.abs(minValue.value - targetValue) < Math.abs(maxValue.value - targetValue)) {
      buttonRefName = initData.firstValue < initData.secondValue ? "firstButton" : "secondButton";
    } else {
      buttonRefName = initData.firstValue > initData.secondValue ? "firstButton" : "secondButton";
    }
    return buttonRefs[buttonRefName];
  };
  const setPosition = (percent) => {
    const buttonRef = getButtonRefByPercent(percent);
    buttonRef.value.setPosition(percent);
    return buttonRef;
  };
  const setFirstValue = (firstValue) => {
    initData.firstValue = firstValue;
    _emit(props.range ? [minValue.value, maxValue.value] : firstValue);
  };
  const setSecondValue = (secondValue) => {
    initData.secondValue = secondValue;
    if (props.range) {
      _emit([minValue.value, maxValue.value]);
    }
  };
  const _emit = (val) => {
    emit(constants_event/* UPDATE_MODEL_EVENT */.f_, val);
    emit(constants_event/* INPUT_EVENT */.e_, val);
  };
  const emitChange = async () => {
    await (0,external_Vue_.nextTick)();
    emit(constants_event/* CHANGE_EVENT */.O7, props.range ? [minValue.value, maxValue.value] : props.modelValue);
  };
  const handleSliderPointerEvent = (event) => {
    var _a, _b, _c, _d, _e, _f;
    if (sliderDisabled.value || initData.dragging)
      return;
    resetSize();
    let newPercent = 0;
    if (props.vertical) {
      const clientY = (_c = (_b = (_a = event.touches) == null ? void 0 : _a.item(0)) == null ? void 0 : _b.clientY) != null ? _c : event.clientY;
      const sliderOffsetBottom = slider.value.getBoundingClientRect().bottom;
      newPercent = (sliderOffsetBottom - clientY) / initData.sliderSize * 100;
    } else {
      const clientX = (_f = (_e = (_d = event.touches) == null ? void 0 : _d.item(0)) == null ? void 0 : _e.clientX) != null ? _f : event.clientX;
      const sliderOffsetLeft = slider.value.getBoundingClientRect().left;
      newPercent = (clientX - sliderOffsetLeft) / initData.sliderSize * 100;
    }
    if (newPercent < 0 || newPercent > 100)
      return;
    return setPosition(newPercent);
  };
  const onSliderWrapperPrevent = (event) => {
    var _a, _b;
    if (((_a = buttonRefs["firstButton"].value) == null ? void 0 : _a.dragging) || ((_b = buttonRefs["secondButton"].value) == null ? void 0 : _b.dragging)) {
      event.preventDefault();
    }
  };
  const onSliderDown = async (event) => {
    const buttonRef = handleSliderPointerEvent(event);
    if (buttonRef) {
      await (0,external_Vue_.nextTick)();
      buttonRef.value.onButtonDown(event);
    }
  };
  const onSliderClick = (event) => {
    const buttonRef = handleSliderPointerEvent(event);
    if (buttonRef) {
      emitChange();
    }
  };
  return {
    elFormItem,
    slider,
    firstButton,
    secondButton,
    sliderDisabled,
    minValue,
    maxValue,
    runwayStyle,
    barStyle,
    resetSize,
    setPosition,
    emitChange,
    onSliderWrapperPrevent,
    onSliderClick,
    onSliderDown,
    setFirstValue,
    setSecondValue
  };
};


//# sourceMappingURL=use-slide.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/slider/src/composables/use-stops.mjs




const useStops = (props, initData, minValue, maxValue) => {
  const stops = (0,external_Vue_.computed)(() => {
    if (!props.showStops || props.min > props.max)
      return [];
    if (props.step === 0) {
      (0,error/* debugWarn */.N)("ElSlider", "step should not be 0.");
      return [];
    }
    const stopCount = (props.max - props.min) / props.step;
    const stepWidth = 100 * props.step / (props.max - props.min);
    const result = Array.from({ length: stopCount - 1 }).map((_, index) => (index + 1) * stepWidth);
    if (props.range) {
      return result.filter((step) => {
        return step < 100 * (minValue.value - props.min) / (props.max - props.min) || step > 100 * (maxValue.value - props.min) / (props.max - props.min);
      });
    } else {
      return result.filter((step) => step > 100 * (initData.firstValue - props.min) / (props.max - props.min));
    }
  });
  const getStopStyle = (position) => {
    return props.vertical ? { bottom: `${position}%` } : { left: `${position}%` };
  };
  return {
    stops,
    getStopStyle
  };
};


//# sourceMappingURL=use-stops.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/slider/src/composables/use-marks.mjs


const useMarks = (props) => {
  return (0,external_Vue_.computed)(() => {
    if (!props.marks) {
      return [];
    }
    const marksKeys = Object.keys(props.marks);
    return marksKeys.map(parseFloat).sort((a, b) => a - b).filter((point) => point <= props.max && point >= props.min).map((point) => ({
      point,
      position: (point - props.min) * 100 / (props.max - props.min),
      mark: props.marks[point]
    }));
  });
};


//# sourceMappingURL=use-marks.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/slider/src/composables/use-watch.mjs






const useWatch = (props, initData, minValue, maxValue, emit, elFormItem) => {
  const _emit = (val) => {
    emit(constants_event/* UPDATE_MODEL_EVENT */.f_, val);
    emit(constants_event/* INPUT_EVENT */.e_, val);
  };
  const valueChanged = () => {
    if (props.range) {
      return ![minValue.value, maxValue.value].every((item, index) => item === initData.oldValue[index]);
    } else {
      return props.modelValue !== initData.oldValue;
    }
  };
  const setValues = () => {
    var _a, _b;
    if (props.min > props.max) {
      (0,error/* throwError */._)("Slider", "min should not be greater than max.");
      return;
    }
    const val = props.modelValue;
    if (props.range && Array.isArray(val)) {
      if (val[1] < props.min) {
        _emit([props.min, props.min]);
      } else if (val[0] > props.max) {
        _emit([props.max, props.max]);
      } else if (val[0] < props.min) {
        _emit([props.min, val[1]]);
      } else if (val[1] > props.max) {
        _emit([val[0], props.max]);
      } else {
        initData.firstValue = val[0];
        initData.secondValue = val[1];
        if (valueChanged()) {
          (_a = elFormItem == null ? void 0 : elFormItem.validate) == null ? void 0 : _a.call(elFormItem, "change").catch((err) => (0,error/* debugWarn */.N)(err));
          initData.oldValue = val.slice();
        }
      }
    } else if (!props.range && typeof val === "number" && !Number.isNaN(val)) {
      if (val < props.min) {
        _emit(props.min);
      } else if (val > props.max) {
        _emit(props.max);
      } else {
        initData.firstValue = val;
        if (valueChanged()) {
          (_b = elFormItem == null ? void 0 : elFormItem.validate) == null ? void 0 : _b.call(elFormItem, "change").catch((err) => (0,error/* debugWarn */.N)(err));
          initData.oldValue = val;
        }
      }
    }
  };
  setValues();
  (0,external_Vue_.watch)(() => initData.dragging, (val) => {
    if (!val) {
      setValues();
    }
  });
  (0,external_Vue_.watch)(() => props.modelValue, (val, oldVal) => {
    if (initData.dragging || Array.isArray(val) && Array.isArray(oldVal) && val.every((item, index) => item === oldVal[index]) && initData.firstValue === val[0] && initData.secondValue === val[1]) {
      return;
    }
    setValues();
  }, {
    deep: true
  });
  (0,external_Vue_.watch)(() => [props.min, props.max], () => {
    setValues();
  });
};


//# sourceMappingURL=use-watch.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/slider/src/composables/use-lifecycle.mjs



const useLifecycle = (props, initData, resetSize) => {
  const sliderWrapper = (0,external_Vue_.ref)();
  (0,external_Vue_.onMounted)(async () => {
    if (props.range) {
      if (Array.isArray(props.modelValue)) {
        initData.firstValue = Math.max(props.min, props.modelValue[0]);
        initData.secondValue = Math.min(props.max, props.modelValue[1]);
      } else {
        initData.firstValue = props.min;
        initData.secondValue = props.max;
      }
      initData.oldValue = [initData.firstValue, initData.secondValue];
    } else {
      if (typeof props.modelValue !== "number" || Number.isNaN(props.modelValue)) {
        initData.firstValue = props.min;
      } else {
        initData.firstValue = Math.min(props.max, Math.max(props.min, props.modelValue));
      }
      initData.oldValue = initData.firstValue;
    }
    (0,core/* useEventListener */.ORN)(window, "resize", resetSize);
    await (0,external_Vue_.nextTick)();
    resetSize();
  });
  return {
    sliderWrapper
  };
};


//# sourceMappingURL=use-lifecycle.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/slider/src/slider2.mjs




















const slider2_hoisted_1 = ["id", "role", "aria-label", "aria-labelledby"];
const slider2_hoisted_2 = { key: 1 };
const slider2_default_ = {
  name: "ElSlider"
};
const slider2_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...slider2_default_,
  props: sliderProps,
  emits: sliderEmits,
  setup(__props, { expose, emit }) {
    const props = __props;
    const ns = (0,use_namespace/* useNamespace */.s)("slider");
    const { t } = useLocale();
    const initData = (0,external_Vue_.reactive)({
      firstValue: 0,
      secondValue: 0,
      oldValue: 0,
      dragging: false,
      sliderSize: 1
    });
    const {
      elFormItem,
      slider,
      firstButton,
      secondButton,
      sliderDisabled,
      minValue,
      maxValue,
      runwayStyle,
      barStyle,
      resetSize,
      emitChange,
      onSliderWrapperPrevent,
      onSliderClick,
      onSliderDown,
      setFirstValue,
      setSecondValue
    } = useSlide(props, initData, emit);
    const { stops, getStopStyle } = useStops(props, initData, minValue, maxValue);
    const { inputId, isLabeledByFormItem } = (0,use_form_item/* useFormItemInputId */.p)(props, {
      formItemContext: elFormItem
    });
    const sliderWrapperSize = (0,use_common_props/* useSize */.tH)();
    const sliderInputSize = (0,external_Vue_.computed)(() => props.inputSize || sliderWrapperSize.value);
    const groupLabel = (0,external_Vue_.computed)(() => {
      return props.label || t("el.slider.defaultLabel", {
        min: props.min,
        max: props.max
      });
    });
    const firstButtonLabel = (0,external_Vue_.computed)(() => {
      if (props.range) {
        return props.rangeStartLabel || t("el.slider.defaultRangeStartLabel");
      } else {
        return groupLabel.value;
      }
    });
    const firstValueText = (0,external_Vue_.computed)(() => {
      return props.formatValueText ? props.formatValueText(firstValue.value) : `${firstValue.value}`;
    });
    const secondButtonLabel = (0,external_Vue_.computed)(() => {
      return props.rangeEndLabel || t("el.slider.defaultRangeEndLabel");
    });
    const secondValueText = (0,external_Vue_.computed)(() => {
      return props.formatValueText ? props.formatValueText(secondValue.value) : `${secondValue.value}`;
    });
    const sliderKls = (0,external_Vue_.computed)(() => [
      ns.b(),
      ns.m(sliderWrapperSize.value),
      ns.is("vertical", props.vertical),
      { [ns.m("with-input")]: props.showInput }
    ]);
    const markList = useMarks(props);
    useWatch(props, initData, minValue, maxValue, emit, elFormItem);
    const precision = (0,external_Vue_.computed)(() => {
      const precisions = [props.min, props.max, props.step].map((item) => {
        const decimal = `${item}`.split(".")[1];
        return decimal ? decimal.length : 0;
      });
      return Math.max.apply(null, precisions);
    });
    const { sliderWrapper } = useLifecycle(props, initData, resetSize);
    const { firstValue, secondValue, sliderSize } = (0,external_Vue_.toRefs)(initData);
    const updateDragging = (val) => {
      initData.dragging = val;
    };
    (0,external_Vue_.provide)(sliderContextKey, {
      ...(0,external_Vue_.toRefs)(props),
      sliderSize,
      disabled: sliderDisabled,
      precision,
      emitChange,
      resetSize,
      updateDragging
    });
    expose({
      onSliderClick
    });
    return (_ctx, _cache) => {
      var _a, _b;
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
        id: _ctx.range ? (0,external_Vue_.unref)(inputId) : void 0,
        ref_key: "sliderWrapper",
        ref: sliderWrapper,
        class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(sliderKls)),
        role: _ctx.range ? "group" : void 0,
        "aria-label": _ctx.range && !(0,external_Vue_.unref)(isLabeledByFormItem) ? (0,external_Vue_.unref)(groupLabel) : void 0,
        "aria-labelledby": _ctx.range && (0,external_Vue_.unref)(isLabeledByFormItem) ? (_a = (0,external_Vue_.unref)(elFormItem)) == null ? void 0 : _a.labelId : void 0,
        onTouchstart: _cache[2] || (_cache[2] = (...args) => (0,external_Vue_.unref)(onSliderWrapperPrevent) && (0,external_Vue_.unref)(onSliderWrapperPrevent)(...args)),
        onTouchmove: _cache[3] || (_cache[3] = (...args) => (0,external_Vue_.unref)(onSliderWrapperPrevent) && (0,external_Vue_.unref)(onSliderWrapperPrevent)(...args))
      }, [
        (0,external_Vue_.createElementVNode)("div", {
          ref_key: "slider",
          ref: slider,
          class: (0,external_Vue_.normalizeClass)([
            (0,external_Vue_.unref)(ns).e("runway"),
            { "show-input": _ctx.showInput && !_ctx.range },
            (0,external_Vue_.unref)(ns).is("disabled", (0,external_Vue_.unref)(sliderDisabled))
          ]),
          style: (0,external_Vue_.normalizeStyle)((0,external_Vue_.unref)(runwayStyle)),
          onMousedown: _cache[0] || (_cache[0] = (...args) => (0,external_Vue_.unref)(onSliderDown) && (0,external_Vue_.unref)(onSliderDown)(...args)),
          onTouchstart: _cache[1] || (_cache[1] = (...args) => (0,external_Vue_.unref)(onSliderDown) && (0,external_Vue_.unref)(onSliderDown)(...args))
        }, [
          (0,external_Vue_.createElementVNode)("div", {
            class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("bar")),
            style: (0,external_Vue_.normalizeStyle)((0,external_Vue_.unref)(barStyle))
          }, null, 6),
          (0,external_Vue_.createVNode)(SliderButton, {
            id: !_ctx.range ? (0,external_Vue_.unref)(inputId) : void 0,
            ref_key: "firstButton",
            ref: firstButton,
            "model-value": (0,external_Vue_.unref)(firstValue),
            vertical: _ctx.vertical,
            "tooltip-class": _ctx.tooltipClass,
            role: "slider",
            "aria-label": _ctx.range || !(0,external_Vue_.unref)(isLabeledByFormItem) ? (0,external_Vue_.unref)(firstButtonLabel) : void 0,
            "aria-labelledby": !_ctx.range && (0,external_Vue_.unref)(isLabeledByFormItem) ? (_b = (0,external_Vue_.unref)(elFormItem)) == null ? void 0 : _b.labelId : void 0,
            "aria-valuemin": _ctx.min,
            "aria-valuemax": _ctx.range ? (0,external_Vue_.unref)(secondValue) : _ctx.max,
            "aria-valuenow": (0,external_Vue_.unref)(firstValue),
            "aria-valuetext": (0,external_Vue_.unref)(firstValueText),
            "aria-orientation": _ctx.vertical ? "vertical" : "horizontal",
            "aria-disabled": (0,external_Vue_.unref)(sliderDisabled),
            "onUpdate:modelValue": (0,external_Vue_.unref)(setFirstValue)
          }, null, 8, ["id", "model-value", "vertical", "tooltip-class", "aria-label", "aria-labelledby", "aria-valuemin", "aria-valuemax", "aria-valuenow", "aria-valuetext", "aria-orientation", "aria-disabled", "onUpdate:modelValue"]),
          _ctx.range ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(SliderButton, {
            key: 0,
            ref_key: "secondButton",
            ref: secondButton,
            "model-value": (0,external_Vue_.unref)(secondValue),
            vertical: _ctx.vertical,
            "tooltip-class": _ctx.tooltipClass,
            role: "slider",
            "aria-label": (0,external_Vue_.unref)(secondButtonLabel),
            "aria-valuemin": (0,external_Vue_.unref)(firstValue),
            "aria-valuemax": _ctx.max,
            "aria-valuenow": (0,external_Vue_.unref)(secondValue),
            "aria-valuetext": (0,external_Vue_.unref)(secondValueText),
            "aria-orientation": _ctx.vertical ? "vertical" : "horizontal",
            "aria-disabled": (0,external_Vue_.unref)(sliderDisabled),
            "onUpdate:modelValue": (0,external_Vue_.unref)(setSecondValue)
          }, null, 8, ["model-value", "vertical", "tooltip-class", "aria-label", "aria-valuemin", "aria-valuemax", "aria-valuenow", "aria-valuetext", "aria-orientation", "aria-disabled", "onUpdate:modelValue"])) : (0,external_Vue_.createCommentVNode)("v-if", true),
          _ctx.showStops ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", slider2_hoisted_2, [
            ((0,external_Vue_.openBlock)(true), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, null, (0,external_Vue_.renderList)((0,external_Vue_.unref)(stops), (item, key) => {
              return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
                key,
                class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("stop")),
                style: (0,external_Vue_.normalizeStyle)((0,external_Vue_.unref)(getStopStyle)(item))
              }, null, 6);
            }), 128))
          ])) : (0,external_Vue_.createCommentVNode)("v-if", true),
          (0,external_Vue_.unref)(markList).length > 0 ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, { key: 2 }, [
            (0,external_Vue_.createElementVNode)("div", null, [
              ((0,external_Vue_.openBlock)(true), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, null, (0,external_Vue_.renderList)((0,external_Vue_.unref)(markList), (item, key) => {
                return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
                  key,
                  style: (0,external_Vue_.normalizeStyle)((0,external_Vue_.unref)(getStopStyle)(item.position)),
                  class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(ns).e("stop"), (0,external_Vue_.unref)(ns).e("marks-stop")])
                }, null, 6);
              }), 128))
            ]),
            (0,external_Vue_.createElementVNode)("div", {
              class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("marks"))
            }, [
              ((0,external_Vue_.openBlock)(true), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, null, (0,external_Vue_.renderList)((0,external_Vue_.unref)(markList), (item, key) => {
                return (0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.unref)(SliderMarker), {
                  key,
                  mark: item.mark,
                  style: (0,external_Vue_.normalizeStyle)((0,external_Vue_.unref)(getStopStyle)(item.position))
                }, null, 8, ["mark", "style"]);
              }), 128))
            ], 2)
          ], 64)) : (0,external_Vue_.createCommentVNode)("v-if", true)
        ], 38),
        _ctx.showInput && !_ctx.range ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.unref)(ElInputNumber), {
          key: 0,
          ref: "input",
          "model-value": (0,external_Vue_.unref)(firstValue),
          class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("input")),
          step: _ctx.step,
          disabled: (0,external_Vue_.unref)(sliderDisabled),
          controls: _ctx.showInputControls,
          min: _ctx.min,
          max: _ctx.max,
          debounce: _ctx.debounce,
          size: (0,external_Vue_.unref)(sliderInputSize),
          "onUpdate:modelValue": (0,external_Vue_.unref)(setFirstValue),
          onChange: (0,external_Vue_.unref)(emitChange)
        }, null, 8, ["model-value", "class", "step", "disabled", "controls", "min", "max", "debounce", "size", "onUpdate:modelValue", "onChange"])) : (0,external_Vue_.createCommentVNode)("v-if", true)
      ], 42, slider2_hoisted_1);
    };
  }
});
var Slider = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(slider2_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/slider/src/slider.vue"]]);


//# sourceMappingURL=slider2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/slider/index.mjs





const ElSlider = (0,install/* withInstall */.nz)(Slider);


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/space/src/item.mjs






const spaceItemProps = (0,runtime/* buildProps */.o8)({
  prefixCls: {
    type: String
  }
});
const SpaceItem = (0,external_Vue_.defineComponent)({
  name: "ElSpaceItem",
  props: spaceItemProps,
  setup(props, { slots }) {
    const ns = (0,use_namespace/* useNamespace */.s)("space");
    const classes = (0,external_Vue_.computed)(() => `${props.prefixCls || ns.b()}__item`);
    return () => (0,external_Vue_.h)("div", { class: classes.value }, (0,external_Vue_.renderSlot)(slots, "default"));
  }
});


//# sourceMappingURL=item.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/space/src/use-space.mjs







const SIZE_MAP = {
  small: 8,
  default: 12,
  large: 16
};
function useSpace(props) {
  const ns = (0,use_namespace/* useNamespace */.s)("space");
  const classes = (0,external_Vue_.computed)(() => [ns.b(), ns.m(props.direction), props.class]);
  const horizontalSize = (0,external_Vue_.ref)(0);
  const verticalSize = (0,external_Vue_.ref)(0);
  const containerStyle = (0,external_Vue_.computed)(() => {
    const wrapKls = props.wrap || props.fill ? { flexWrap: "wrap", marginBottom: `-${verticalSize.value}px` } : {};
    const alignment = {
      alignItems: props.alignment
    };
    return [wrapKls, alignment, props.style];
  });
  const itemStyle = (0,external_Vue_.computed)(() => {
    const itemBaseStyle = {
      paddingBottom: `${verticalSize.value}px`,
      marginRight: `${horizontalSize.value}px`
    };
    const fillStyle = props.fill ? { flexGrow: 1, minWidth: `${props.fillRatio}%` } : {};
    return [itemBaseStyle, fillStyle];
  });
  (0,external_Vue_.watchEffect)(() => {
    const { size = "small", wrap, direction: dir, fill } = props;
    if ((0,shared_esm_bundler/* isArray */.kJ)(size)) {
      const [h = 0, v = 0] = size;
      horizontalSize.value = h;
      verticalSize.value = v;
    } else {
      let val;
      if ((0,shared/* isNumber */.hj)(size)) {
        val = size;
      } else {
        val = SIZE_MAP[size || "small"] || SIZE_MAP.small;
      }
      if ((wrap || fill) && dir === "horizontal") {
        horizontalSize.value = verticalSize.value = val;
      } else {
        if (dir === "horizontal") {
          horizontalSize.value = val;
          verticalSize.value = 0;
        } else {
          verticalSize.value = val;
          horizontalSize.value = 0;
        }
      }
    }
  });
  return {
    classes,
    containerStyle,
    itemStyle
  };
}


//# sourceMappingURL=use-space.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/space/src/space.mjs











const spaceProps = (0,runtime/* buildProps */.o8)({
  direction: {
    type: String,
    values: ["horizontal", "vertical"],
    default: "horizontal"
  },
  class: {
    type: (0,runtime/* definePropType */.Cq)([
      String,
      Object,
      Array
    ]),
    default: ""
  },
  style: {
    type: (0,runtime/* definePropType */.Cq)([String, Array, Object]),
    default: ""
  },
  alignment: {
    type: (0,runtime/* definePropType */.Cq)(String),
    default: "center"
  },
  prefixCls: {
    type: String
  },
  spacer: {
    type: (0,runtime/* definePropType */.Cq)([Object, String, Number, Array]),
    default: null,
    validator: (val) => (0,external_Vue_.isVNode)(val) || (0,shared/* isNumber */.hj)(val) || (0,shared_esm_bundler/* isString */.HD)(val)
  },
  wrap: Boolean,
  fill: Boolean,
  fillRatio: {
    type: Number,
    default: 100
  },
  size: {
    type: [String, Array, Number],
    values: constants_size/* componentSizes */.k,
    validator: (val) => {
      return (0,shared/* isNumber */.hj)(val) || (0,shared_esm_bundler/* isArray */.kJ)(val) && val.length === 2 && val.every(shared/* isNumber */.hj);
    }
  }
});
var Space = (0,external_Vue_.defineComponent)({
  name: "ElSpace",
  props: spaceProps,
  setup(props, { slots }) {
    const { classes, containerStyle, itemStyle } = useSpace(props);
    return () => {
      var _a;
      const { spacer, prefixCls, direction } = props;
      const children = (0,external_Vue_.renderSlot)(slots, "default", { key: 0 }, () => []);
      if (((_a = children.children) != null ? _a : []).length === 0)
        return null;
      if ((0,shared_esm_bundler/* isArray */.kJ)(children.children)) {
        let extractedChildren = [];
        children.children.forEach((child, loopKey) => {
          if (isFragment(child)) {
            if ((0,shared_esm_bundler/* isArray */.kJ)(child.children)) {
              child.children.forEach((nested, key) => {
                extractedChildren.push((0,external_Vue_.createVNode)(SpaceItem, {
                  style: itemStyle.value,
                  prefixCls,
                  key: `nested-${key}`
                }, {
                  default: () => [nested]
                }, PatchFlags.PROPS | PatchFlags.STYLE, ["style", "prefixCls"]));
              });
            }
          } else if (isValidElementNode(child)) {
            extractedChildren.push((0,external_Vue_.createVNode)(SpaceItem, {
              style: itemStyle.value,
              prefixCls,
              key: `LoopKey${loopKey}`
            }, {
              default: () => [child]
            }, PatchFlags.PROPS | PatchFlags.STYLE, ["style", "prefixCls"]));
          }
        });
        if (spacer) {
          const len = extractedChildren.length - 1;
          extractedChildren = extractedChildren.reduce((acc, child, idx) => {
            const children2 = [...acc, child];
            if (idx !== len) {
              children2.push((0,external_Vue_.createVNode)("span", {
                style: [
                  itemStyle.value,
                  direction === "vertical" ? "width: 100%" : null
                ],
                key: idx
              }, [
                (0,external_Vue_.isVNode)(spacer) ? spacer : (0,external_Vue_.createTextVNode)(spacer, PatchFlags.TEXT)
              ], PatchFlags.STYLE));
            }
            return children2;
          }, []);
        }
        return (0,external_Vue_.createVNode)("div", {
          class: classes.value,
          style: containerStyle.value
        }, extractedChildren, PatchFlags.STYLE | PatchFlags.CLASS);
      }
      return children.children;
    };
  }
});


//# sourceMappingURL=space.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/space/index.mjs







const ElSpace = (0,install/* withInstall */.nz)(Space);


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/steps/src/steps.mjs






const stepsProps = (0,runtime/* buildProps */.o8)({
  space: {
    type: [Number, String],
    default: ""
  },
  active: {
    type: Number,
    default: 0
  },
  direction: {
    type: String,
    default: "horizontal",
    values: ["horizontal", "vertical"]
  },
  alignCenter: {
    type: Boolean
  },
  simple: {
    type: Boolean
  },
  finishStatus: {
    type: String,
    values: ["wait", "process", "finish", "error", "success"],
    default: "finish"
  },
  processStatus: {
    type: String,
    values: ["wait", "process", "finish", "error", "success"],
    default: "process"
  }
});
const stepsEmits = {
  [constants_event/* CHANGE_EVENT */.O7]: (newVal, oldVal) => [newVal, oldVal].every(shared/* isNumber */.hj)
};


//# sourceMappingURL=steps.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/steps/src/steps2.mjs








const steps2_default_ = {
  name: "ElSteps"
};
const steps2_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...steps2_default_,
  props: stepsProps,
  emits: stepsEmits,
  setup(__props, { emit }) {
    const props = __props;
    const ns = (0,use_namespace/* useNamespace */.s)("steps");
    const steps = (0,external_Vue_.ref)([]);
    (0,external_Vue_.watch)(steps, () => {
      steps.value.forEach((instance, index) => {
        instance.setIndex(index);
      });
    });
    (0,external_Vue_.provide)("ElSteps", { props, steps });
    (0,external_Vue_.watch)(() => props.active, (newVal, oldVal) => {
      emit(constants_event/* CHANGE_EVENT */.O7, newVal, oldVal);
    });
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
        class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(ns).b(), (0,external_Vue_.unref)(ns).m(_ctx.simple ? "simple" : _ctx.direction)])
      }, [
        (0,external_Vue_.renderSlot)(_ctx.$slots, "default")
      ], 2);
    };
  }
});
var Steps = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(steps2_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/steps/src/steps.vue"]]);


//# sourceMappingURL=steps2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/steps/src/item.mjs




const stepProps = (0,runtime/* buildProps */.o8)({
  title: {
    type: String,
    default: ""
  },
  icon: {
    type: icon/* iconPropType */.AA
  },
  description: {
    type: String,
    default: ""
  },
  status: {
    type: String,
    values: ["", "wait", "process", "finish", "error", "success"],
    default: ""
  }
});


//# sourceMappingURL=item.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/steps/src/item2.mjs








const item2_default_ = {
  name: "ElStep"
};
const item2_sfc_main = (0,external_Vue_.defineComponent)({
  ...item2_default_,
  props: stepProps,
  setup(__props) {
    const props = __props;
    const ns = (0,use_namespace/* useNamespace */.s)("step");
    const index = (0,external_Vue_.ref)(-1);
    const lineStyle = (0,external_Vue_.ref)({});
    const internalStatus = (0,external_Vue_.ref)("");
    const parent = (0,external_Vue_.inject)("ElSteps");
    const currentInstance = (0,external_Vue_.getCurrentInstance)();
    (0,external_Vue_.onMounted)(() => {
      (0,external_Vue_.watch)([
        () => parent.props.active,
        () => parent.props.processStatus,
        () => parent.props.finishStatus
      ], ([active]) => {
        updateStatus(active);
      }, { immediate: true });
    });
    (0,external_Vue_.onBeforeUnmount)(() => {
      parent.steps.value = parent.steps.value.filter((instance) => instance.uid !== (currentInstance == null ? void 0 : currentInstance.uid));
    });
    const currentStatus = (0,external_Vue_.computed)(() => {
      return props.status || internalStatus.value;
    });
    const prevStatus = (0,external_Vue_.computed)(() => {
      const prevStep = parent.steps.value[index.value - 1];
      return prevStep ? prevStep.currentStatus : "wait";
    });
    const isCenter = (0,external_Vue_.computed)(() => {
      return parent.props.alignCenter;
    });
    const isVertical = (0,external_Vue_.computed)(() => {
      return parent.props.direction === "vertical";
    });
    const isSimple = (0,external_Vue_.computed)(() => {
      return parent.props.simple;
    });
    const stepsCount = (0,external_Vue_.computed)(() => {
      return parent.steps.value.length;
    });
    const isLast = (0,external_Vue_.computed)(() => {
      var _a;
      return ((_a = parent.steps.value[stepsCount.value - 1]) == null ? void 0 : _a.uid) === (currentInstance == null ? void 0 : currentInstance.uid);
    });
    const space = (0,external_Vue_.computed)(() => {
      return isSimple.value ? "" : parent.props.space;
    });
    const style = (0,external_Vue_.computed)(() => {
      const style2 = {
        flexBasis: typeof space.value === "number" ? `${space.value}px` : space.value ? space.value : `${100 / (stepsCount.value - (isCenter.value ? 0 : 1))}%`
      };
      if (isVertical.value)
        return style2;
      if (isLast.value) {
        style2.maxWidth = `${100 / stepsCount.value}%`;
      }
      return style2;
    });
    const setIndex = (val) => {
      index.value = val;
    };
    const calcProgress = (status) => {
      let step = 100;
      const style2 = {};
      style2.transitionDelay = `${150 * index.value}ms`;
      if (status === parent.props.processStatus) {
        step = 0;
      } else if (status === "wait") {
        step = 0;
        style2.transitionDelay = `${-150 * index.value}ms`;
      }
      style2.borderWidth = step && !isSimple.value ? "1px" : 0;
      style2[parent.props.direction === "vertical" ? "height" : "width"] = `${step}%`;
      lineStyle.value = style2;
    };
    const updateStatus = (activeIndex) => {
      if (activeIndex > index.value) {
        internalStatus.value = parent.props.finishStatus;
      } else if (activeIndex === index.value && prevStatus.value !== "error") {
        internalStatus.value = parent.props.processStatus;
      } else {
        internalStatus.value = "wait";
      }
      const prevChild = parent.steps.value[stepsCount.value - 1];
      if (prevChild)
        prevChild.calcProgress(internalStatus.value);
    };
    const stepItemState = (0,external_Vue_.reactive)({
      uid: (0,external_Vue_.computed)(() => currentInstance == null ? void 0 : currentInstance.uid),
      currentStatus,
      setIndex,
      calcProgress
    });
    parent.steps.value = [...parent.steps.value, stepItemState];
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
        style: (0,external_Vue_.normalizeStyle)((0,external_Vue_.unref)(style)),
        class: (0,external_Vue_.normalizeClass)([
          (0,external_Vue_.unref)(ns).b(),
          (0,external_Vue_.unref)(ns).is((0,external_Vue_.unref)(isSimple) ? "simple" : (0,external_Vue_.unref)(parent).props.direction),
          (0,external_Vue_.unref)(ns).is("flex", (0,external_Vue_.unref)(isLast) && !(0,external_Vue_.unref)(space) && !(0,external_Vue_.unref)(isCenter)),
          (0,external_Vue_.unref)(ns).is("center", (0,external_Vue_.unref)(isCenter) && !(0,external_Vue_.unref)(isVertical) && !(0,external_Vue_.unref)(isSimple))
        ])
      }, [
        (0,external_Vue_.createCommentVNode)(" icon & line "),
        (0,external_Vue_.createElementVNode)("div", {
          class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(ns).e("head"), (0,external_Vue_.unref)(ns).is((0,external_Vue_.unref)(currentStatus))])
        }, [
          !(0,external_Vue_.unref)(isSimple) ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
            key: 0,
            class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("line"))
          }, [
            (0,external_Vue_.createElementVNode)("i", {
              class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("line-inner")),
              style: (0,external_Vue_.normalizeStyle)(lineStyle.value)
            }, null, 6)
          ], 2)) : (0,external_Vue_.createCommentVNode)("v-if", true),
          (0,external_Vue_.createElementVNode)("div", {
            class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(ns).e("icon"), (0,external_Vue_.unref)(ns).is(_ctx.icon ? "icon" : "text")])
          }, [
            (0,external_Vue_.unref)(currentStatus) !== "success" && (0,external_Vue_.unref)(currentStatus) !== "error" ? (0,external_Vue_.renderSlot)(_ctx.$slots, "icon", { key: 0 }, () => [
              _ctx.icon ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.unref)(components_icon/* ElIcon */.gn), {
                key: 0,
                class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("icon-inner"))
              }, {
                default: (0,external_Vue_.withCtx)(() => [
                  ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.resolveDynamicComponent)(_ctx.icon)))
                ]),
                _: 1
              }, 8, ["class"])) : (0,external_Vue_.createCommentVNode)("v-if", true),
              !_ctx.icon && !(0,external_Vue_.unref)(isSimple) ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
                key: 1,
                class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("icon-inner"))
              }, (0,external_Vue_.toDisplayString)(index.value + 1), 3)) : (0,external_Vue_.createCommentVNode)("v-if", true)
            ]) : ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.unref)(components_icon/* ElIcon */.gn), {
              key: 1,
              class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(ns).e("icon-inner"), (0,external_Vue_.unref)(ns).is("status")])
            }, {
              default: (0,external_Vue_.withCtx)(() => [
                (0,external_Vue_.unref)(currentStatus) === "success" ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.unref)(dist/* Check */.JrY), { key: 0 })) : ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.unref)(dist/* Close */.x8P), { key: 1 }))
              ]),
              _: 1
            }, 8, ["class"]))
          ], 2)
        ], 2),
        (0,external_Vue_.createCommentVNode)(" title & description "),
        (0,external_Vue_.createElementVNode)("div", {
          class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("main"))
        }, [
          (0,external_Vue_.createElementVNode)("div", {
            class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(ns).e("title"), (0,external_Vue_.unref)(ns).is((0,external_Vue_.unref)(currentStatus))])
          }, [
            (0,external_Vue_.renderSlot)(_ctx.$slots, "title", {}, () => [
              (0,external_Vue_.createTextVNode)((0,external_Vue_.toDisplayString)(_ctx.title), 1)
            ])
          ], 2),
          (0,external_Vue_.unref)(isSimple) ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
            key: 0,
            class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("arrow"))
          }, null, 2)) : ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
            key: 1,
            class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(ns).e("description"), (0,external_Vue_.unref)(ns).is((0,external_Vue_.unref)(currentStatus))])
          }, [
            (0,external_Vue_.renderSlot)(_ctx.$slots, "description", {}, () => [
              (0,external_Vue_.createTextVNode)((0,external_Vue_.toDisplayString)(_ctx.description), 1)
            ])
          ], 2))
        ], 2)
      ], 6);
    };
  }
});
var Step = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(item2_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/steps/src/item.vue"]]);


//# sourceMappingURL=item2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/steps/index.mjs







const ElSteps = (0,install/* withInstall */.nz)(Steps, {
  Step: Step
});
const ElStep = (0,install/* withNoopInstall */.dp)(Step);


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/switch/src/switch.mjs









const switchProps = (0,runtime/* buildProps */.o8)({
  modelValue: {
    type: [Boolean, String, Number],
    default: false
  },
  value: {
    type: [Boolean, String, Number],
    default: false
  },
  disabled: {
    type: Boolean,
    default: false
  },
  width: {
    type: [String, Number],
    default: ""
  },
  inlinePrompt: {
    type: Boolean,
    default: false
  },
  activeIcon: {
    type: icon/* iconPropType */.AA,
    default: ""
  },
  inactiveIcon: {
    type: icon/* iconPropType */.AA,
    default: ""
  },
  activeText: {
    type: String,
    default: ""
  },
  inactiveText: {
    type: String,
    default: ""
  },
  activeColor: {
    type: String,
    default: ""
  },
  inactiveColor: {
    type: String,
    default: ""
  },
  borderColor: {
    type: String,
    default: ""
  },
  activeValue: {
    type: [Boolean, String, Number],
    default: true
  },
  inactiveValue: {
    type: [Boolean, String, Number],
    default: false
  },
  name: {
    type: String,
    default: ""
  },
  validateEvent: {
    type: Boolean,
    default: true
  },
  id: String,
  loading: {
    type: Boolean,
    default: false
  },
  beforeChange: {
    type: (0,runtime/* definePropType */.Cq)(Function)
  },
  size: {
    type: String,
    validator: isValidComponentSize
  },
  tabindex: {
    type: [String, Number]
  }
});
const switchEmits = {
  [constants_event/* UPDATE_MODEL_EVENT */.f_]: (val) => (0,shared/* isBoolean */.jn)(val) || (0,shared_esm_bundler/* isString */.HD)(val) || (0,shared/* isNumber */.hj)(val),
  [constants_event/* CHANGE_EVENT */.O7]: (val) => (0,shared/* isBoolean */.jn)(val) || (0,shared_esm_bundler/* isString */.HD)(val) || (0,shared/* isNumber */.hj)(val),
  [constants_event/* INPUT_EVENT */.e_]: (val) => (0,shared/* isBoolean */.jn)(val) || (0,shared_esm_bundler/* isString */.HD)(val) || (0,shared/* isNumber */.hj)(val)
};


//# sourceMappingURL=switch.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/switch/src/switch2.mjs


















const switch2_hoisted_1 = ["onClick"];
const switch2_hoisted_2 = ["id", "aria-checked", "aria-disabled", "name", "true-value", "false-value", "disabled", "tabindex", "onKeydown"];
const switch2_hoisted_3 = ["aria-hidden"];
const switch2_hoisted_4 = ["aria-hidden"];
const switch2_hoisted_5 = ["aria-hidden"];
const switch2_hoisted_6 = ["aria-hidden"];
const switch2_default_ = {
  name: "ElSwitch"
};
const switch2_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...switch2_default_,
  props: switchProps,
  emits: switchEmits,
  setup(__props, { expose, emit }) {
    const props = __props;
    const COMPONENT_NAME = "ElSwitch";
    const vm = (0,external_Vue_.getCurrentInstance)();
    const { formItem } = (0,use_form_item/* useFormItem */.A)();
    const switchSize = (0,use_common_props/* useSize */.tH)();
    const ns = (0,use_namespace/* useNamespace */.s)("switch");
    useDeprecated({
      from: '"value"',
      replacement: '"model-value" or "v-model"',
      scope: COMPONENT_NAME,
      version: "2.3.0",
      ref: "https://element-plus.org/en-US/component/switch.html#attributes",
      type: "Attribute"
    }, (0,external_Vue_.computed)(() => {
      var _a;
      return !!((_a = vm.vnode.props) == null ? void 0 : _a.value);
    }));
    const { inputId } = (0,use_form_item/* useFormItemInputId */.p)(props, {
      formItemContext: formItem
    });
    const switchDisabled = (0,use_common_props/* useDisabled */.B4)((0,external_Vue_.computed)(() => props.loading));
    const isControlled = (0,external_Vue_.ref)(props.modelValue !== false);
    const input = (0,external_Vue_.ref)();
    const core = (0,external_Vue_.ref)();
    const switchKls = (0,external_Vue_.computed)(() => [
      ns.b(),
      ns.m(switchSize.value),
      ns.is("disabled", switchDisabled.value),
      ns.is("checked", checked.value)
    ]);
    const coreStyle = (0,external_Vue_.computed)(() => ({
      width: (0,dom_style/* addUnit */.Nn)(props.width)
    }));
    (0,external_Vue_.watch)(() => props.modelValue, () => {
      isControlled.value = true;
    });
    (0,external_Vue_.watch)(() => props.value, () => {
      isControlled.value = false;
    });
    const actualValue = (0,external_Vue_.computed)(() => {
      return isControlled.value ? props.modelValue : props.value;
    });
    const checked = (0,external_Vue_.computed)(() => actualValue.value === props.activeValue);
    if (![props.activeValue, props.inactiveValue].includes(actualValue.value)) {
      emit(constants_event/* UPDATE_MODEL_EVENT */.f_, props.inactiveValue);
      emit(constants_event/* CHANGE_EVENT */.O7, props.inactiveValue);
      emit(constants_event/* INPUT_EVENT */.e_, props.inactiveValue);
    }
    (0,external_Vue_.watch)(checked, (val) => {
      var _a;
      input.value.checked = val;
      if (props.validateEvent) {
        (_a = formItem == null ? void 0 : formItem.validate) == null ? void 0 : _a.call(formItem, "change").catch((err) => (0,error/* debugWarn */.N)(err));
      }
    });
    const handleChange = () => {
      const val = checked.value ? props.inactiveValue : props.activeValue;
      emit(constants_event/* UPDATE_MODEL_EVENT */.f_, val);
      emit(constants_event/* CHANGE_EVENT */.O7, val);
      emit(constants_event/* INPUT_EVENT */.e_, val);
      (0,external_Vue_.nextTick)(() => {
        input.value.checked = checked.value;
      });
    };
    const switchValue = () => {
      if (switchDisabled.value)
        return;
      const { beforeChange } = props;
      if (!beforeChange) {
        handleChange();
        return;
      }
      const shouldChange = beforeChange();
      const isPromiseOrBool = [
        (0,shared_esm_bundler/* isPromise */.tI)(shouldChange),
        (0,shared/* isBoolean */.jn)(shouldChange)
      ].includes(true);
      if (!isPromiseOrBool) {
        (0,error/* throwError */._)(COMPONENT_NAME, "beforeChange must return type `Promise<boolean>` or `boolean`");
      }
      if ((0,shared_esm_bundler/* isPromise */.tI)(shouldChange)) {
        shouldChange.then((result) => {
          if (result) {
            handleChange();
          }
        }).catch((e) => {
          (0,error/* debugWarn */.N)(COMPONENT_NAME, `some error occurred: ${e}`);
        });
      } else if (shouldChange) {
        handleChange();
      }
    };
    const styles = (0,external_Vue_.computed)(() => {
      return ns.cssVarBlock({
        ...props.activeColor ? { "on-color": props.activeColor } : null,
        ...props.inactiveColor ? { "off-color": props.inactiveColor } : null,
        ...props.borderColor ? { "border-color": props.borderColor } : null
      });
    });
    const focus = () => {
      var _a, _b;
      (_b = (_a = input.value) == null ? void 0 : _a.focus) == null ? void 0 : _b.call(_a);
    };
    (0,external_Vue_.onMounted)(() => {
      input.value.checked = checked.value;
    });
    expose({
      focus
    });
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
        class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(switchKls)),
        style: (0,external_Vue_.normalizeStyle)((0,external_Vue_.unref)(styles)),
        onClick: (0,external_Vue_.withModifiers)(switchValue, ["prevent"])
      }, [
        (0,external_Vue_.createElementVNode)("input", {
          id: (0,external_Vue_.unref)(inputId),
          ref_key: "input",
          ref: input,
          class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("input")),
          type: "checkbox",
          role: "switch",
          "aria-checked": (0,external_Vue_.unref)(checked),
          "aria-disabled": (0,external_Vue_.unref)(switchDisabled),
          name: _ctx.name,
          "true-value": _ctx.activeValue,
          "false-value": _ctx.inactiveValue,
          disabled: (0,external_Vue_.unref)(switchDisabled),
          tabindex: _ctx.tabindex,
          onChange: handleChange,
          onKeydown: (0,external_Vue_.withKeys)(switchValue, ["enter"])
        }, null, 42, switch2_hoisted_2),
        !_ctx.inlinePrompt && (_ctx.inactiveIcon || _ctx.inactiveText) ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("span", {
          key: 0,
          class: (0,external_Vue_.normalizeClass)([
            (0,external_Vue_.unref)(ns).e("label"),
            (0,external_Vue_.unref)(ns).em("label", "left"),
            (0,external_Vue_.unref)(ns).is("active", !(0,external_Vue_.unref)(checked))
          ])
        }, [
          _ctx.inactiveIcon ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.unref)(components_icon/* ElIcon */.gn), { key: 0 }, {
            default: (0,external_Vue_.withCtx)(() => [
              ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.resolveDynamicComponent)(_ctx.inactiveIcon)))
            ]),
            _: 1
          })) : (0,external_Vue_.createCommentVNode)("v-if", true),
          !_ctx.inactiveIcon && _ctx.inactiveText ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("span", {
            key: 1,
            "aria-hidden": (0,external_Vue_.unref)(checked)
          }, (0,external_Vue_.toDisplayString)(_ctx.inactiveText), 9, switch2_hoisted_3)) : (0,external_Vue_.createCommentVNode)("v-if", true)
        ], 2)) : (0,external_Vue_.createCommentVNode)("v-if", true),
        (0,external_Vue_.createElementVNode)("span", {
          ref_key: "core",
          ref: core,
          class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("core")),
          style: (0,external_Vue_.normalizeStyle)((0,external_Vue_.unref)(coreStyle))
        }, [
          _ctx.inlinePrompt ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
            key: 0,
            class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("inner"))
          }, [
            _ctx.activeIcon || _ctx.inactiveIcon ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, { key: 0 }, [
              _ctx.activeIcon ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.unref)(components_icon/* ElIcon */.gn), {
                key: 0,
                class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(ns).is("icon"), (0,external_Vue_.unref)(checked) ? (0,external_Vue_.unref)(ns).is("show") : (0,external_Vue_.unref)(ns).is("hide")])
              }, {
                default: (0,external_Vue_.withCtx)(() => [
                  ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.resolveDynamicComponent)(_ctx.activeIcon)))
                ]),
                _: 1
              }, 8, ["class"])) : (0,external_Vue_.createCommentVNode)("v-if", true),
              _ctx.inactiveIcon ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.unref)(components_icon/* ElIcon */.gn), {
                key: 1,
                class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(ns).is("icon"), !(0,external_Vue_.unref)(checked) ? (0,external_Vue_.unref)(ns).is("show") : (0,external_Vue_.unref)(ns).is("hide")])
              }, {
                default: (0,external_Vue_.withCtx)(() => [
                  ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.resolveDynamicComponent)(_ctx.inactiveIcon)))
                ]),
                _: 1
              }, 8, ["class"])) : (0,external_Vue_.createCommentVNode)("v-if", true)
            ], 64)) : _ctx.activeText || _ctx.inactiveIcon ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, { key: 1 }, [
              _ctx.activeText ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("span", {
                key: 0,
                class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(ns).is("text"), (0,external_Vue_.unref)(checked) ? (0,external_Vue_.unref)(ns).is("show") : (0,external_Vue_.unref)(ns).is("hide")]),
                "aria-hidden": !(0,external_Vue_.unref)(checked)
              }, (0,external_Vue_.toDisplayString)(_ctx.activeText.substring(0, 3)), 11, switch2_hoisted_4)) : (0,external_Vue_.createCommentVNode)("v-if", true),
              _ctx.inactiveText ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("span", {
                key: 1,
                class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(ns).is("text"), !(0,external_Vue_.unref)(checked) ? (0,external_Vue_.unref)(ns).is("show") : (0,external_Vue_.unref)(ns).is("hide")]),
                "aria-hidden": (0,external_Vue_.unref)(checked)
              }, (0,external_Vue_.toDisplayString)(_ctx.inactiveText.substring(0, 3)), 11, switch2_hoisted_5)) : (0,external_Vue_.createCommentVNode)("v-if", true)
            ], 64)) : (0,external_Vue_.createCommentVNode)("v-if", true)
          ], 2)) : (0,external_Vue_.createCommentVNode)("v-if", true),
          (0,external_Vue_.createElementVNode)("div", {
            class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("action"))
          }, [
            _ctx.loading ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.unref)(components_icon/* ElIcon */.gn), {
              key: 0,
              class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).is("loading"))
            }, {
              default: (0,external_Vue_.withCtx)(() => [
                (0,external_Vue_.createVNode)((0,external_Vue_.unref)(dist/* Loading */.gbz))
              ]),
              _: 1
            }, 8, ["class"])) : (0,external_Vue_.createCommentVNode)("v-if", true)
          ], 2)
        ], 6),
        !_ctx.inlinePrompt && (_ctx.activeIcon || _ctx.activeText) ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("span", {
          key: 1,
          class: (0,external_Vue_.normalizeClass)([
            (0,external_Vue_.unref)(ns).e("label"),
            (0,external_Vue_.unref)(ns).em("label", "right"),
            (0,external_Vue_.unref)(ns).is("active", (0,external_Vue_.unref)(checked))
          ])
        }, [
          _ctx.activeIcon ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.unref)(components_icon/* ElIcon */.gn), { key: 0 }, {
            default: (0,external_Vue_.withCtx)(() => [
              ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.resolveDynamicComponent)(_ctx.activeIcon)))
            ]),
            _: 1
          })) : (0,external_Vue_.createCommentVNode)("v-if", true),
          !_ctx.activeIcon && _ctx.activeText ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("span", {
            key: 1,
            "aria-hidden": !(0,external_Vue_.unref)(checked)
          }, (0,external_Vue_.toDisplayString)(_ctx.activeText), 9, switch2_hoisted_6)) : (0,external_Vue_.createCommentVNode)("v-if", true)
        ], 2)) : (0,external_Vue_.createCommentVNode)("v-if", true)
      ], 14, switch2_hoisted_1);
    };
  }
});
var Switch = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(switch2_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/switch/src/switch.vue"]]);


//# sourceMappingURL=switch2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/switch/index.mjs





const ElSwitch = (0,install/* withInstall */.nz)(Switch);


//# sourceMappingURL=index.mjs.map

// EXTERNAL MODULE: ./node_modules/escape-html/index.js
var escape_html = __webpack_require__(95573);
;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table/src/util.mjs









const getCell = function(event) {
  let cell = event.target;
  while (cell && cell.tagName.toUpperCase() !== "HTML") {
    if (cell.tagName.toUpperCase() === "TD") {
      return cell;
    }
    cell = cell.parentNode;
  }
  return null;
};
const isObject = function(obj) {
  return obj !== null && typeof obj === "object";
};
const orderBy = function(array, sortKey, reverse, sortMethod, sortBy) {
  if (!sortKey && !sortMethod && (!sortBy || Array.isArray(sortBy) && !sortBy.length)) {
    return array;
  }
  if (typeof reverse === "string") {
    reverse = reverse === "descending" ? -1 : 1;
  } else {
    reverse = reverse && reverse < 0 ? -1 : 1;
  }
  const getKey = sortMethod ? null : function(value, index) {
    if (sortBy) {
      if (!Array.isArray(sortBy)) {
        sortBy = [sortBy];
      }
      return sortBy.map((by) => {
        if (typeof by === "string") {
          return (0,get/* default */.Z)(value, by);
        } else {
          return by(value, index, array);
        }
      });
    }
    if (sortKey !== "$key") {
      if (isObject(value) && "$value" in value)
        value = value.$value;
    }
    return [isObject(value) ? (0,get/* default */.Z)(value, sortKey) : value];
  };
  const compare = function(a, b) {
    if (sortMethod) {
      return sortMethod(a.value, b.value);
    }
    for (let i = 0, len = a.key.length; i < len; i++) {
      if (a.key[i] < b.key[i]) {
        return -1;
      }
      if (a.key[i] > b.key[i]) {
        return 1;
      }
    }
    return 0;
  };
  return array.map((value, index) => {
    return {
      value,
      index,
      key: getKey ? getKey(value, index) : null
    };
  }).sort((a, b) => {
    let order = compare(a, b);
    if (!order) {
      order = a.index - b.index;
    }
    return order * +reverse;
  }).map((item) => item.value);
};
const getColumnById = function(table, columnId) {
  let column = null;
  table.columns.forEach((item) => {
    if (item.id === columnId) {
      column = item;
    }
  });
  return column;
};
const getColumnByKey = function(table, columnKey) {
  let column = null;
  for (let i = 0; i < table.columns.length; i++) {
    const item = table.columns[i];
    if (item.columnKey === columnKey) {
      column = item;
      break;
    }
  }
  return column;
};
const getColumnByCell = function(table, cell, namespace) {
  const matches = (cell.className || "").match(new RegExp(`${namespace}-table_[^\\s]+`, "gm"));
  if (matches) {
    return getColumnById(table, matches[0]);
  }
  return null;
};
const getRowIdentity = (row, rowKey) => {
  if (!row)
    throw new Error("Row is required when get row identity");
  if (typeof rowKey === "string") {
    if (!rowKey.includes(".")) {
      return `${row[rowKey]}`;
    }
    const key = rowKey.split(".");
    let current = row;
    for (const element of key) {
      current = current[element];
    }
    return `${current}`;
  } else if (typeof rowKey === "function") {
    return rowKey.call(null, row);
  }
};
const getKeysMap = function(array, rowKey) {
  const arrayMap = {};
  (array || []).forEach((row, index) => {
    arrayMap[getRowIdentity(row, rowKey)] = { row, index };
  });
  return arrayMap;
};
function mergeOptions(defaults, config) {
  const options = {};
  let key;
  for (key in defaults) {
    options[key] = defaults[key];
  }
  for (key in config) {
    if ((0,shared_esm_bundler/* hasOwn */.RI)(config, key)) {
      const value = config[key];
      if (typeof value !== "undefined") {
        options[key] = value;
      }
    }
  }
  return options;
}
function parseWidth(width) {
  if (width === "")
    return width;
  if (width !== void 0) {
    width = Number.parseInt(width, 10);
    if (Number.isNaN(width)) {
      width = "";
    }
  }
  return width;
}
function parseMinWidth(minWidth) {
  if (minWidth === "")
    return minWidth;
  if (minWidth !== void 0) {
    minWidth = parseWidth(minWidth);
    if (Number.isNaN(minWidth)) {
      minWidth = 80;
    }
  }
  return minWidth;
}
function parseHeight(height) {
  if (typeof height === "number") {
    return height;
  }
  if (typeof height === "string") {
    if (/^\d+(?:px)?$/.test(height)) {
      return Number.parseInt(height, 10);
    } else {
      return height;
    }
  }
  return null;
}
function compose(...funcs) {
  if (funcs.length === 0) {
    return (arg) => arg;
  }
  if (funcs.length === 1) {
    return funcs[0];
  }
  return funcs.reduce((a, b) => (...args) => a(b(...args)));
}
function toggleRowStatus(statusArr, row, newVal) {
  let changed = false;
  const index = statusArr.indexOf(row);
  const included = index !== -1;
  const addRow = () => {
    statusArr.push(row);
    changed = true;
  };
  const removeRow = () => {
    statusArr.splice(index, 1);
    changed = true;
  };
  if (typeof newVal === "boolean") {
    if (newVal && !included) {
      addRow();
    } else if (!newVal && included) {
      removeRow();
    }
  } else {
    if (included) {
      removeRow();
    } else {
      addRow();
    }
  }
  return changed;
}
function walkTreeNode(root, cb, childrenKey = "children", lazyKey = "hasChildren") {
  const isNil = (array) => !(Array.isArray(array) && array.length);
  function _walker(parent, children, level) {
    cb(parent, children, level);
    children.forEach((item) => {
      if (item[lazyKey]) {
        cb(item, null, level + 1);
        return;
      }
      const children2 = item[childrenKey];
      if (!isNil(children2)) {
        _walker(item, children2, level + 1);
      }
    });
  }
  root.forEach((item) => {
    if (item[lazyKey]) {
      cb(item, null, 0);
      return;
    }
    const children = item[childrenKey];
    if (!isNil(children)) {
      _walker(item, children, 0);
    }
  });
}
let removePopper;
function createTablePopper(parentNode, trigger, popperContent, popperOptions, tooltipEffect) {
  const { nextZIndex } = useZIndex();
  const ns = parentNode == null ? void 0 : parentNode.dataset.prefix;
  const scrollContainer = parentNode == null ? void 0 : parentNode.querySelector(`.${ns}-scrollbar__wrap`);
  function renderContent() {
    const isLight = tooltipEffect === "light";
    const content2 = document.createElement("div");
    content2.className = `${ns}-popper ${isLight ? "is-light" : "is-dark"}`;
    popperContent = escape_html(popperContent);
    content2.innerHTML = popperContent;
    content2.style.zIndex = String(nextZIndex());
    parentNode == null ? void 0 : parentNode.appendChild(content2);
    return content2;
  }
  function renderArrow() {
    const arrow2 = document.createElement("div");
    arrow2.className = `${ns}-popper__arrow`;
    return arrow2;
  }
  function showPopper() {
    popperInstance && popperInstance.update();
  }
  removePopper = () => {
    try {
      popperInstance && popperInstance.destroy();
      content && (parentNode == null ? void 0 : parentNode.removeChild(content));
      off(trigger, "mouseenter", showPopper);
      off(trigger, "mouseleave", removePopper);
      if (scrollContainer) {
        off(scrollContainer, "scroll", removePopper);
      }
      removePopper = void 0;
    } catch (e) {
    }
  };
  let popperInstance = null;
  const content = renderContent();
  const arrow = renderArrow();
  content.appendChild(arrow);
  popperInstance = (0,core_dist/* createPopper */.fi)(trigger, content, {
    strategy: "absolute",
    modifiers: [
      {
        name: "offset",
        options: {
          offset: [0, 8]
        }
      },
      {
        name: "arrow",
        options: {
          element: arrow,
          padding: 10
        }
      }
    ],
    ...popperOptions
  });
  event_on(trigger, "mouseenter", showPopper);
  event_on(trigger, "mouseleave", removePopper);
  if (scrollContainer) {
    event_on(scrollContainer, "scroll", removePopper);
  }
  return popperInstance;
}
const isFixedColumn = (index, fixed, store, realColumns) => {
  let start = 0;
  let after = index;
  if (realColumns) {
    if (realColumns[index].colSpan > 1) {
      return {};
    }
    for (let i = 0; i < index; i++) {
      start += realColumns[i].colSpan;
    }
    after = start + realColumns[index].colSpan - 1;
  } else {
    start = index;
  }
  let fixedLayout;
  const columns = store.states.columns;
  switch (fixed) {
    case "left":
      if (after < store.states.fixedLeafColumnsLength.value) {
        fixedLayout = "left";
      }
      break;
    case "right":
      if (start >= columns.value.length - store.states.rightFixedLeafColumnsLength.value) {
        fixedLayout = "right";
      }
      break;
    default:
      if (after < store.states.fixedLeafColumnsLength.value) {
        fixedLayout = "left";
      } else if (start >= columns.value.length - store.states.rightFixedLeafColumnsLength.value) {
        fixedLayout = "right";
      }
  }
  return fixedLayout ? {
    direction: fixedLayout,
    start,
    after
  } : {};
};
const getFixedColumnsClass = (namespace, index, fixed, store, realColumns) => {
  const classes = [];
  const { direction, start } = isFixedColumn(index, fixed, store, realColumns);
  if (direction) {
    const isLeft = direction === "left";
    classes.push(`${namespace}-fixed-column--${direction}`);
    if (isLeft && start === store.states.fixedLeafColumnsLength.value - 1) {
      classes.push("is-last-column");
    } else if (!isLeft && start === store.states.columns.value.length - store.states.rightFixedLeafColumnsLength.value) {
      classes.push("is-first-column");
    }
  }
  return classes;
};
function getOffset(offset, column) {
  return offset + (column.realWidth === null || Number.isNaN(column.realWidth) ? Number(column.width) : column.realWidth);
}
const getFixedColumnOffset = (index, fixed, store, realColumns) => {
  const { direction, start = 0 } = isFixedColumn(index, fixed, store, realColumns);
  if (!direction) {
    return;
  }
  const styles = {};
  const isLeft = direction === "left";
  const columns = store.states.columns.value;
  if (isLeft) {
    styles.left = columns.slice(0, index).reduce(getOffset, 0);
  } else {
    styles.right = columns.slice(start + 1).reverse().reduce(getOffset, 0);
  }
  return styles;
};
const ensurePosition = (style, key) => {
  if (!style)
    return;
  if (!Number.isNaN(style[key])) {
    style[key] = `${style[key]}px`;
  }
};


//# sourceMappingURL=util.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table/src/store/expand.mjs



function useExpand(watcherData) {
  const instance = (0,external_Vue_.getCurrentInstance)();
  const defaultExpandAll = (0,external_Vue_.ref)(false);
  const expandRows = (0,external_Vue_.ref)([]);
  const updateExpandRows = () => {
    const data = watcherData.data.value || [];
    const rowKey = watcherData.rowKey.value;
    if (defaultExpandAll.value) {
      expandRows.value = data.slice();
    } else if (rowKey) {
      const expandRowsMap = getKeysMap(expandRows.value, rowKey);
      expandRows.value = data.reduce((prev, row) => {
        const rowId = getRowIdentity(row, rowKey);
        const rowInfo = expandRowsMap[rowId];
        if (rowInfo) {
          prev.push(row);
        }
        return prev;
      }, []);
    } else {
      expandRows.value = [];
    }
  };
  const toggleRowExpansion = (row, expanded) => {
    const changed = toggleRowStatus(expandRows.value, row, expanded);
    if (changed) {
      instance.emit("expand-change", row, expandRows.value.slice());
    }
  };
  const setExpandRowKeys = (rowKeys) => {
    instance.store.assertRowKey();
    const data = watcherData.data.value || [];
    const rowKey = watcherData.rowKey.value;
    const keysMap = getKeysMap(data, rowKey);
    expandRows.value = rowKeys.reduce((prev, cur) => {
      const info = keysMap[cur];
      if (info) {
        prev.push(info.row);
      }
      return prev;
    }, []);
  };
  const isRowExpanded = (row) => {
    const rowKey = watcherData.rowKey.value;
    if (rowKey) {
      const expandMap = getKeysMap(expandRows.value, rowKey);
      return !!expandMap[getRowIdentity(row, rowKey)];
    }
    return expandRows.value.includes(row);
  };
  return {
    updateExpandRows,
    toggleRowExpansion,
    setExpandRowKeys,
    isRowExpanded,
    states: {
      expandRows,
      defaultExpandAll
    }
  };
}


//# sourceMappingURL=expand.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table/src/store/current.mjs



function useCurrent(watcherData) {
  const instance = (0,external_Vue_.getCurrentInstance)();
  const _currentRowKey = (0,external_Vue_.ref)(null);
  const currentRow = (0,external_Vue_.ref)(null);
  const setCurrentRowKey = (key) => {
    instance.store.assertRowKey();
    _currentRowKey.value = key;
    setCurrentRowByKey(key);
  };
  const restoreCurrentRowKey = () => {
    _currentRowKey.value = null;
  };
  const setCurrentRowByKey = (key) => {
    const { data, rowKey } = watcherData;
    let _currentRow = null;
    if (rowKey.value) {
      _currentRow = ((0,external_Vue_.unref)(data) || []).find((item) => getRowIdentity(item, rowKey.value) === key);
    }
    currentRow.value = _currentRow;
    instance.emit("current-change", currentRow.value, null);
  };
  const updateCurrentRow = (_currentRow) => {
    const oldCurrentRow = currentRow.value;
    if (_currentRow && _currentRow !== oldCurrentRow) {
      currentRow.value = _currentRow;
      instance.emit("current-change", currentRow.value, oldCurrentRow);
      return;
    }
    if (!_currentRow && oldCurrentRow) {
      currentRow.value = null;
      instance.emit("current-change", null, oldCurrentRow);
    }
  };
  const updateCurrentRowData = () => {
    const rowKey = watcherData.rowKey.value;
    const data = watcherData.data.value || [];
    const oldCurrentRow = currentRow.value;
    if (!data.includes(oldCurrentRow) && oldCurrentRow) {
      if (rowKey) {
        const currentRowKey = getRowIdentity(oldCurrentRow, rowKey);
        setCurrentRowByKey(currentRowKey);
      } else {
        currentRow.value = null;
      }
      if (currentRow.value === null) {
        instance.emit("current-change", null, oldCurrentRow);
      }
    } else if (_currentRowKey.value) {
      setCurrentRowByKey(_currentRowKey.value);
      restoreCurrentRowKey();
    }
  };
  return {
    setCurrentRowKey,
    restoreCurrentRowKey,
    setCurrentRowByKey,
    updateCurrentRow,
    updateCurrentRowData,
    states: {
      _currentRowKey,
      currentRow
    }
  };
}


//# sourceMappingURL=current.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table/src/store/tree.mjs



function useTree(watcherData) {
  const expandRowKeys = (0,external_Vue_.ref)([]);
  const treeData = (0,external_Vue_.ref)({});
  const indent = (0,external_Vue_.ref)(16);
  const lazy = (0,external_Vue_.ref)(false);
  const lazyTreeNodeMap = (0,external_Vue_.ref)({});
  const lazyColumnIdentifier = (0,external_Vue_.ref)("hasChildren");
  const childrenColumnName = (0,external_Vue_.ref)("children");
  const instance = (0,external_Vue_.getCurrentInstance)();
  const normalizedData = (0,external_Vue_.computed)(() => {
    if (!watcherData.rowKey.value)
      return {};
    const data = watcherData.data.value || [];
    return normalize(data);
  });
  const normalizedLazyNode = (0,external_Vue_.computed)(() => {
    const rowKey = watcherData.rowKey.value;
    const keys = Object.keys(lazyTreeNodeMap.value);
    const res = {};
    if (!keys.length)
      return res;
    keys.forEach((key) => {
      if (lazyTreeNodeMap.value[key].length) {
        const item = { children: [] };
        lazyTreeNodeMap.value[key].forEach((row) => {
          const currentRowKey = getRowIdentity(row, rowKey);
          item.children.push(currentRowKey);
          if (row[lazyColumnIdentifier.value] && !res[currentRowKey]) {
            res[currentRowKey] = { children: [] };
          }
        });
        res[key] = item;
      }
    });
    return res;
  });
  const normalize = (data) => {
    const rowKey = watcherData.rowKey.value;
    const res = {};
    walkTreeNode(data, (parent, children, level) => {
      const parentId = getRowIdentity(parent, rowKey);
      if (Array.isArray(children)) {
        res[parentId] = {
          children: children.map((row) => getRowIdentity(row, rowKey)),
          level
        };
      } else if (lazy.value) {
        res[parentId] = {
          children: [],
          lazy: true,
          level
        };
      }
    }, childrenColumnName.value, lazyColumnIdentifier.value);
    return res;
  };
  const updateTreeData = (ifChangeExpandRowKeys = false, ifExpandAll = ((_a) => (_a = instance.store) == null ? void 0 : _a.states.defaultExpandAll.value)()) => {
    var _a2;
    const nested = normalizedData.value;
    const normalizedLazyNode_ = normalizedLazyNode.value;
    const keys = Object.keys(nested);
    const newTreeData = {};
    if (keys.length) {
      const oldTreeData = (0,external_Vue_.unref)(treeData);
      const rootLazyRowKeys = [];
      const getExpanded = (oldValue, key) => {
        if (ifChangeExpandRowKeys) {
          if (expandRowKeys.value) {
            return ifExpandAll || expandRowKeys.value.includes(key);
          } else {
            return !!(ifExpandAll || (oldValue == null ? void 0 : oldValue.expanded));
          }
        } else {
          const included = ifExpandAll || expandRowKeys.value && expandRowKeys.value.includes(key);
          return !!((oldValue == null ? void 0 : oldValue.expanded) || included);
        }
      };
      keys.forEach((key) => {
        const oldValue = oldTreeData[key];
        const newValue = { ...nested[key] };
        newValue.expanded = getExpanded(oldValue, key);
        if (newValue.lazy) {
          const { loaded = false, loading = false } = oldValue || {};
          newValue.loaded = !!loaded;
          newValue.loading = !!loading;
          rootLazyRowKeys.push(key);
        }
        newTreeData[key] = newValue;
      });
      const lazyKeys = Object.keys(normalizedLazyNode_);
      if (lazy.value && lazyKeys.length && rootLazyRowKeys.length) {
        lazyKeys.forEach((key) => {
          const oldValue = oldTreeData[key];
          const lazyNodeChildren = normalizedLazyNode_[key].children;
          if (rootLazyRowKeys.includes(key)) {
            if (newTreeData[key].children.length !== 0) {
              throw new Error("[ElTable]children must be an empty array.");
            }
            newTreeData[key].children = lazyNodeChildren;
          } else {
            const { loaded = false, loading = false } = oldValue || {};
            newTreeData[key] = {
              lazy: true,
              loaded: !!loaded,
              loading: !!loading,
              expanded: getExpanded(oldValue, key),
              children: lazyNodeChildren,
              level: ""
            };
          }
        });
      }
    }
    treeData.value = newTreeData;
    (_a2 = instance.store) == null ? void 0 : _a2.updateTableScrollY();
  };
  (0,external_Vue_.watch)(() => expandRowKeys.value, () => {
    updateTreeData(true);
  });
  (0,external_Vue_.watch)(() => normalizedData.value, () => {
    updateTreeData();
  });
  (0,external_Vue_.watch)(() => normalizedLazyNode.value, () => {
    updateTreeData();
  });
  const updateTreeExpandKeys = (value) => {
    expandRowKeys.value = value;
    updateTreeData();
  };
  const toggleTreeExpansion = (row, expanded) => {
    instance.store.assertRowKey();
    const rowKey = watcherData.rowKey.value;
    const id = getRowIdentity(row, rowKey);
    const data = id && treeData.value[id];
    if (id && data && "expanded" in data) {
      const oldExpanded = data.expanded;
      expanded = typeof expanded === "undefined" ? !data.expanded : expanded;
      treeData.value[id].expanded = expanded;
      if (oldExpanded !== expanded) {
        instance.emit("expand-change", row, expanded);
      }
      instance.store.updateTableScrollY();
    }
  };
  const loadOrToggle = (row) => {
    instance.store.assertRowKey();
    const rowKey = watcherData.rowKey.value;
    const id = getRowIdentity(row, rowKey);
    const data = treeData.value[id];
    if (lazy.value && data && "loaded" in data && !data.loaded) {
      loadData(row, id, data);
    } else {
      toggleTreeExpansion(row, void 0);
    }
  };
  const loadData = (row, key, treeNode) => {
    const { load } = instance.props;
    if (load && !treeData.value[key].loaded) {
      treeData.value[key].loading = true;
      load(row, treeNode, (data) => {
        if (!Array.isArray(data)) {
          throw new TypeError("[ElTable] data must be an array");
        }
        treeData.value[key].loading = false;
        treeData.value[key].loaded = true;
        treeData.value[key].expanded = true;
        if (data.length) {
          lazyTreeNodeMap.value[key] = data;
        }
        instance.emit("expand-change", row, true);
      });
    }
  };
  return {
    loadData,
    loadOrToggle,
    toggleTreeExpansion,
    updateTreeExpandKeys,
    updateTreeData,
    normalize,
    states: {
      expandRowKeys,
      treeData,
      indent,
      lazy,
      lazyTreeNodeMap,
      lazyColumnIdentifier,
      childrenColumnName
    }
  };
}


//# sourceMappingURL=tree.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table/src/store/watcher.mjs








const sortData = (data, states) => {
  const sortingColumn = states.sortingColumn;
  if (!sortingColumn || typeof sortingColumn.sortable === "string") {
    return data;
  }
  return orderBy(data, states.sortProp, states.sortOrder, sortingColumn.sortMethod, sortingColumn.sortBy);
};
const doFlattenColumns = (columns) => {
  const result = [];
  columns.forEach((column) => {
    if (column.children) {
      result.push.apply(result, doFlattenColumns(column.children));
    } else {
      result.push(column);
    }
  });
  return result;
};
function useWatcher() {
  var _a;
  const instance = (0,external_Vue_.getCurrentInstance)();
  const { size: tableSize } = (0,external_Vue_.toRefs)((_a = instance.proxy) == null ? void 0 : _a.$props);
  const rowKey = (0,external_Vue_.ref)(null);
  const data = (0,external_Vue_.ref)([]);
  const _data = (0,external_Vue_.ref)([]);
  const isComplex = (0,external_Vue_.ref)(false);
  const _columns = (0,external_Vue_.ref)([]);
  const originColumns = (0,external_Vue_.ref)([]);
  const columns = (0,external_Vue_.ref)([]);
  const fixedColumns = (0,external_Vue_.ref)([]);
  const rightFixedColumns = (0,external_Vue_.ref)([]);
  const leafColumns = (0,external_Vue_.ref)([]);
  const fixedLeafColumns = (0,external_Vue_.ref)([]);
  const rightFixedLeafColumns = (0,external_Vue_.ref)([]);
  const leafColumnsLength = (0,external_Vue_.ref)(0);
  const fixedLeafColumnsLength = (0,external_Vue_.ref)(0);
  const rightFixedLeafColumnsLength = (0,external_Vue_.ref)(0);
  const isAllSelected = (0,external_Vue_.ref)(false);
  const selection = (0,external_Vue_.ref)([]);
  const reserveSelection = (0,external_Vue_.ref)(false);
  const selectOnIndeterminate = (0,external_Vue_.ref)(false);
  const selectable = (0,external_Vue_.ref)(null);
  const filters = (0,external_Vue_.ref)({});
  const filteredData = (0,external_Vue_.ref)(null);
  const sortingColumn = (0,external_Vue_.ref)(null);
  const sortProp = (0,external_Vue_.ref)(null);
  const sortOrder = (0,external_Vue_.ref)(null);
  const hoverRow = (0,external_Vue_.ref)(null);
  (0,external_Vue_.watch)(data, () => instance.state && scheduleLayout(false), {
    deep: true
  });
  const assertRowKey = () => {
    if (!rowKey.value)
      throw new Error("[ElTable] prop row-key is required");
  };
  const updateColumns = () => {
    fixedColumns.value = _columns.value.filter((column) => column.fixed === true || column.fixed === "left");
    rightFixedColumns.value = _columns.value.filter((column) => column.fixed === "right");
    if (fixedColumns.value.length > 0 && _columns.value[0] && _columns.value[0].type === "selection" && !_columns.value[0].fixed) {
      _columns.value[0].fixed = true;
      fixedColumns.value.unshift(_columns.value[0]);
    }
    const notFixedColumns = _columns.value.filter((column) => !column.fixed);
    originColumns.value = [].concat(fixedColumns.value).concat(notFixedColumns).concat(rightFixedColumns.value);
    const leafColumns2 = doFlattenColumns(notFixedColumns);
    const fixedLeafColumns2 = doFlattenColumns(fixedColumns.value);
    const rightFixedLeafColumns2 = doFlattenColumns(rightFixedColumns.value);
    leafColumnsLength.value = leafColumns2.length;
    fixedLeafColumnsLength.value = fixedLeafColumns2.length;
    rightFixedLeafColumnsLength.value = rightFixedLeafColumns2.length;
    columns.value = [].concat(fixedLeafColumns2).concat(leafColumns2).concat(rightFixedLeafColumns2);
    isComplex.value = fixedColumns.value.length > 0 || rightFixedColumns.value.length > 0;
  };
  const scheduleLayout = (needUpdateColumns, immediate = false) => {
    if (needUpdateColumns) {
      updateColumns();
    }
    if (immediate) {
      instance.state.doLayout();
    } else {
      instance.state.debouncedUpdateLayout();
    }
  };
  const isSelected = (row) => {
    return selection.value.includes(row);
  };
  const clearSelection = () => {
    isAllSelected.value = false;
    const oldSelection = selection.value;
    if (oldSelection.length) {
      selection.value = [];
      instance.emit("selection-change", []);
    }
  };
  const cleanSelection = () => {
    let deleted;
    if (rowKey.value) {
      deleted = [];
      const selectedMap = getKeysMap(selection.value, rowKey.value);
      const dataMap = getKeysMap(data.value, rowKey.value);
      for (const key in selectedMap) {
        if ((0,shared_esm_bundler/* hasOwn */.RI)(selectedMap, key) && !dataMap[key]) {
          deleted.push(selectedMap[key].row);
        }
      }
    } else {
      deleted = selection.value.filter((item) => !data.value.includes(item));
    }
    if (deleted.length) {
      const newSelection = selection.value.filter((item) => !deleted.includes(item));
      selection.value = newSelection;
      instance.emit("selection-change", newSelection.slice());
    }
  };
  const getSelectionRows = () => {
    return (selection.value || []).slice();
  };
  const toggleRowSelection = (row, selected = void 0, emitChange = true) => {
    const changed = toggleRowStatus(selection.value, row, selected);
    if (changed) {
      const newSelection = (selection.value || []).slice();
      if (emitChange) {
        instance.emit("select", newSelection, row);
      }
      instance.emit("selection-change", newSelection);
    }
  };
  const _toggleAllSelection = () => {
    var _a2, _b;
    const value = selectOnIndeterminate.value ? !isAllSelected.value : !(isAllSelected.value || selection.value.length);
    isAllSelected.value = value;
    let selectionChanged = false;
    let childrenCount = 0;
    const rowKey2 = (_b = (_a2 = instance == null ? void 0 : instance.store) == null ? void 0 : _a2.states) == null ? void 0 : _b.rowKey.value;
    data.value.forEach((row, index) => {
      const rowIndex = index + childrenCount;
      if (selectable.value) {
        if (selectable.value.call(null, row, rowIndex) && toggleRowStatus(selection.value, row, value)) {
          selectionChanged = true;
        }
      } else {
        if (toggleRowStatus(selection.value, row, value)) {
          selectionChanged = true;
        }
      }
      childrenCount += getChildrenCount(getRowIdentity(row, rowKey2));
    });
    if (selectionChanged) {
      instance.emit("selection-change", selection.value ? selection.value.slice() : []);
    }
    instance.emit("select-all", selection.value);
  };
  const updateSelectionByRowKey = () => {
    const selectedMap = getKeysMap(selection.value, rowKey.value);
    data.value.forEach((row) => {
      const rowId = getRowIdentity(row, rowKey.value);
      const rowInfo = selectedMap[rowId];
      if (rowInfo) {
        selection.value[rowInfo.index] = row;
      }
    });
  };
  const updateAllSelected = () => {
    var _a2, _b, _c;
    if (((_a2 = data.value) == null ? void 0 : _a2.length) === 0) {
      isAllSelected.value = false;
      return;
    }
    let selectedMap;
    if (rowKey.value) {
      selectedMap = getKeysMap(selection.value, rowKey.value);
    }
    const isSelected2 = function(row) {
      if (selectedMap) {
        return !!selectedMap[getRowIdentity(row, rowKey.value)];
      } else {
        return selection.value.includes(row);
      }
    };
    let isAllSelected_ = true;
    let selectedCount = 0;
    let childrenCount = 0;
    for (let i = 0, j = (data.value || []).length; i < j; i++) {
      const keyProp = (_c = (_b = instance == null ? void 0 : instance.store) == null ? void 0 : _b.states) == null ? void 0 : _c.rowKey.value;
      const rowIndex = i + childrenCount;
      const item = data.value[i];
      const isRowSelectable = selectable.value && selectable.value.call(null, item, rowIndex);
      if (!isSelected2(item)) {
        if (!selectable.value || isRowSelectable) {
          isAllSelected_ = false;
          break;
        }
      } else {
        selectedCount++;
      }
      childrenCount += getChildrenCount(getRowIdentity(item, keyProp));
    }
    if (selectedCount === 0)
      isAllSelected_ = false;
    isAllSelected.value = isAllSelected_;
  };
  const getChildrenCount = (rowKey2) => {
    var _a2;
    if (!instance || !instance.store)
      return 0;
    const { treeData } = instance.store.states;
    let count = 0;
    const children = (_a2 = treeData.value[rowKey2]) == null ? void 0 : _a2.children;
    if (children) {
      count += children.length;
      children.forEach((childKey) => {
        count += getChildrenCount(childKey);
      });
    }
    return count;
  };
  const updateFilters = (columns2, values) => {
    if (!Array.isArray(columns2)) {
      columns2 = [columns2];
    }
    const filters_ = {};
    columns2.forEach((col) => {
      filters.value[col.id] = values;
      filters_[col.columnKey || col.id] = values;
    });
    return filters_;
  };
  const updateSort = (column, prop, order) => {
    if (sortingColumn.value && sortingColumn.value !== column) {
      sortingColumn.value.order = null;
    }
    sortingColumn.value = column;
    sortProp.value = prop;
    sortOrder.value = order;
  };
  const execFilter = () => {
    let sourceData = (0,external_Vue_.unref)(_data);
    Object.keys(filters.value).forEach((columnId) => {
      const values = filters.value[columnId];
      if (!values || values.length === 0)
        return;
      const column = getColumnById({
        columns: columns.value
      }, columnId);
      if (column && column.filterMethod) {
        sourceData = sourceData.filter((row) => {
          return values.some((value) => column.filterMethod.call(null, value, row, column));
        });
      }
    });
    filteredData.value = sourceData;
  };
  const execSort = () => {
    data.value = sortData(filteredData.value, {
      sortingColumn: sortingColumn.value,
      sortProp: sortProp.value,
      sortOrder: sortOrder.value
    });
  };
  const execQuery = (ignore = void 0) => {
    if (!(ignore && ignore.filter)) {
      execFilter();
    }
    execSort();
  };
  const clearFilter = (columnKeys) => {
    const { tableHeaderRef } = instance.refs;
    if (!tableHeaderRef)
      return;
    const panels = Object.assign({}, tableHeaderRef.filterPanels);
    const keys = Object.keys(panels);
    if (!keys.length)
      return;
    if (typeof columnKeys === "string") {
      columnKeys = [columnKeys];
    }
    if (Array.isArray(columnKeys)) {
      const columns_ = columnKeys.map((key) => getColumnByKey({
        columns: columns.value
      }, key));
      keys.forEach((key) => {
        const column = columns_.find((col) => col.id === key);
        if (column) {
          column.filteredValue = [];
        }
      });
      instance.store.commit("filterChange", {
        column: columns_,
        values: [],
        silent: true,
        multi: true
      });
    } else {
      keys.forEach((key) => {
        const column = columns.value.find((col) => col.id === key);
        if (column) {
          column.filteredValue = [];
        }
      });
      filters.value = {};
      instance.store.commit("filterChange", {
        column: {},
        values: [],
        silent: true
      });
    }
  };
  const clearSort = () => {
    if (!sortingColumn.value)
      return;
    updateSort(null, null, null);
    instance.store.commit("changeSortCondition", {
      silent: true
    });
  };
  const {
    setExpandRowKeys,
    toggleRowExpansion,
    updateExpandRows,
    states: expandStates,
    isRowExpanded
  } = useExpand({
    data,
    rowKey
  });
  const {
    updateTreeExpandKeys,
    toggleTreeExpansion,
    updateTreeData,
    loadOrToggle,
    states: treeStates
  } = useTree({
    data,
    rowKey
  });
  const {
    updateCurrentRowData,
    updateCurrentRow,
    setCurrentRowKey,
    states: currentData
  } = useCurrent({
    data,
    rowKey
  });
  const setExpandRowKeysAdapter = (val) => {
    setExpandRowKeys(val);
    updateTreeExpandKeys(val);
  };
  const toggleRowExpansionAdapter = (row, expanded) => {
    const hasExpandColumn = columns.value.some(({ type }) => type === "expand");
    if (hasExpandColumn) {
      toggleRowExpansion(row, expanded);
    } else {
      toggleTreeExpansion(row, expanded);
    }
  };
  return {
    assertRowKey,
    updateColumns,
    scheduleLayout,
    isSelected,
    clearSelection,
    cleanSelection,
    getSelectionRows,
    toggleRowSelection,
    _toggleAllSelection,
    toggleAllSelection: null,
    updateSelectionByRowKey,
    updateAllSelected,
    updateFilters,
    updateCurrentRow,
    updateSort,
    execFilter,
    execSort,
    execQuery,
    clearFilter,
    clearSort,
    toggleRowExpansion,
    setExpandRowKeysAdapter,
    setCurrentRowKey,
    toggleRowExpansionAdapter,
    isRowExpanded,
    updateExpandRows,
    updateCurrentRowData,
    loadOrToggle,
    updateTreeData,
    states: {
      tableSize,
      rowKey,
      data,
      _data,
      isComplex,
      _columns,
      originColumns,
      columns,
      fixedColumns,
      rightFixedColumns,
      leafColumns,
      fixedLeafColumns,
      rightFixedLeafColumns,
      leafColumnsLength,
      fixedLeafColumnsLength,
      rightFixedLeafColumnsLength,
      isAllSelected,
      selection,
      reserveSelection,
      selectOnIndeterminate,
      selectable,
      filters,
      filteredData,
      sortingColumn,
      sortProp,
      sortOrder,
      hoverRow,
      ...expandStates,
      ...treeStates,
      ...currentData
    }
  };
}


//# sourceMappingURL=watcher.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table/src/store/index.mjs





function replaceColumn(array, column) {
  return array.map((item) => {
    var _a;
    if (item.id === column.id) {
      return column;
    } else if ((_a = item.children) == null ? void 0 : _a.length) {
      item.children = replaceColumn(item.children, column);
    }
    return item;
  });
}
function sortColumn(array) {
  array.forEach((item) => {
    var _a, _b;
    item.no = (_a = item.getColumnIndex) == null ? void 0 : _a.call(item);
    if ((_b = item.children) == null ? void 0 : _b.length) {
      sortColumn(item.children);
    }
  });
  array.sort((cur, pre) => cur.no - pre.no);
}
function useStore() {
  const instance = (0,external_Vue_.getCurrentInstance)();
  const watcher = useWatcher();
  const ns = (0,use_namespace/* useNamespace */.s)("table");
  const mutations = {
    setData(states, data) {
      const dataInstanceChanged = (0,external_Vue_.unref)(states._data) !== data;
      states.data.value = data;
      states._data.value = data;
      instance.store.execQuery();
      instance.store.updateCurrentRowData();
      instance.store.updateExpandRows();
      instance.store.updateTreeData(instance.store.states.defaultExpandAll.value);
      if ((0,external_Vue_.unref)(states.reserveSelection)) {
        instance.store.assertRowKey();
        instance.store.updateSelectionByRowKey();
      } else {
        if (dataInstanceChanged) {
          instance.store.clearSelection();
        } else {
          instance.store.cleanSelection();
        }
      }
      instance.store.updateAllSelected();
      if (instance.$ready) {
        instance.store.scheduleLayout();
      }
    },
    insertColumn(states, column, parent) {
      const array = (0,external_Vue_.unref)(states._columns);
      let newColumns = [];
      if (!parent) {
        array.push(column);
        newColumns = array;
      } else {
        if (parent && !parent.children) {
          parent.children = [];
        }
        parent.children.push(column);
        newColumns = replaceColumn(array, parent);
      }
      sortColumn(newColumns);
      states._columns.value = newColumns;
      if (column.type === "selection") {
        states.selectable.value = column.selectable;
        states.reserveSelection.value = column.reserveSelection;
      }
      if (instance.$ready) {
        instance.store.updateColumns();
        instance.store.scheduleLayout();
      }
    },
    removeColumn(states, column, parent) {
      const array = (0,external_Vue_.unref)(states._columns) || [];
      if (parent) {
        parent.children.splice(parent.children.findIndex((item) => item.id === column.id), 1);
        if (parent.children.length === 0) {
          delete parent.children;
        }
        states._columns.value = replaceColumn(array, parent);
      } else {
        const index = array.indexOf(column);
        if (index > -1) {
          array.splice(index, 1);
          states._columns.value = array;
        }
      }
      if (instance.$ready) {
        instance.store.updateColumns();
        instance.store.scheduleLayout();
      }
    },
    sort(states, options) {
      const { prop, order, init } = options;
      if (prop) {
        const column = (0,external_Vue_.unref)(states.columns).find((column2) => column2.property === prop);
        if (column) {
          column.order = order;
          instance.store.updateSort(column, prop, order);
          instance.store.commit("changeSortCondition", { init });
        }
      }
    },
    changeSortCondition(states, options) {
      const { sortingColumn: column, sortProp: prop, sortOrder: order } = states;
      if ((0,external_Vue_.unref)(order) === null) {
        states.sortingColumn.value = null;
        states.sortProp.value = null;
      }
      const ingore = { filter: true };
      instance.store.execQuery(ingore);
      if (!options || !(options.silent || options.init)) {
        instance.emit("sort-change", {
          column: (0,external_Vue_.unref)(column),
          prop: (0,external_Vue_.unref)(prop),
          order: (0,external_Vue_.unref)(order)
        });
      }
      instance.store.updateTableScrollY();
    },
    filterChange(_states, options) {
      const { column, values, silent } = options;
      const newFilters = instance.store.updateFilters(column, values);
      instance.store.execQuery();
      if (!silent) {
        instance.emit("filter-change", newFilters);
      }
      instance.store.updateTableScrollY();
    },
    toggleAllSelection() {
      instance.store.toggleAllSelection();
    },
    rowSelectedChanged(_states, row) {
      instance.store.toggleRowSelection(row);
      instance.store.updateAllSelected();
    },
    setHoverRow(states, row) {
      states.hoverRow.value = row;
    },
    setCurrentRow(_states, row) {
      instance.store.updateCurrentRow(row);
    }
  };
  const commit = function(name, ...args) {
    const mutations2 = instance.store.mutations;
    if (mutations2[name]) {
      mutations2[name].apply(instance, [instance.store.states].concat(args));
    } else {
      throw new Error(`Action not found: ${name}`);
    }
  };
  const updateTableScrollY = function() {
    (0,external_Vue_.nextTick)(() => instance.layout.updateScrollY.apply(instance.layout));
  };
  return {
    ns,
    ...watcher,
    mutations,
    commit,
    updateTableScrollY
  };
}
class HelperStore {
  constructor() {
    this.Return = useStore();
  }
}


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table/src/store/helper.mjs




const InitialStateMap = {
  rowKey: "rowKey",
  defaultExpandAll: "defaultExpandAll",
  selectOnIndeterminate: "selectOnIndeterminate",
  indent: "indent",
  lazy: "lazy",
  data: "data",
  ["treeProps.hasChildren"]: {
    key: "lazyColumnIdentifier",
    default: "hasChildren"
  },
  ["treeProps.children"]: {
    key: "childrenColumnName",
    default: "children"
  }
};
function createStore(table, props) {
  if (!table) {
    throw new Error("Table is required.");
  }
  const store = useStore();
  store.toggleAllSelection = (0,debounce/* default */.Z)(store._toggleAllSelection, 10);
  Object.keys(InitialStateMap).forEach((key) => {
    handleValue(getArrKeysValue(props, key), key, store);
  });
  proxyTableProps(store, props);
  return store;
}
function proxyTableProps(store, props) {
  Object.keys(InitialStateMap).forEach((key) => {
    (0,external_Vue_.watch)(() => getArrKeysValue(props, key), (value) => {
      handleValue(value, key, store);
    });
  });
}
function handleValue(value, propsKey, store) {
  let newVal = value;
  let storeKey = InitialStateMap[propsKey];
  if (typeof InitialStateMap[propsKey] === "object") {
    storeKey = storeKey.key;
    newVal = newVal || InitialStateMap[propsKey].default;
  }
  store.states[storeKey].value = newVal;
}
function getArrKeysValue(props, keys) {
  if (keys.includes(".")) {
    const keyList = keys.split(".");
    let value = props;
    keyList.forEach((key) => {
      value = value[key];
    });
    return value;
  } else {
    return props[keys];
  }
}


//# sourceMappingURL=helper.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table/src/table-layout.mjs






class TableLayout {
  constructor(options) {
    this.observers = [];
    this.table = null;
    this.store = null;
    this.columns = [];
    this.fit = true;
    this.showHeader = true;
    this.height = (0,external_Vue_.ref)(null);
    this.scrollX = (0,external_Vue_.ref)(false);
    this.scrollY = (0,external_Vue_.ref)(false);
    this.bodyWidth = (0,external_Vue_.ref)(null);
    this.fixedWidth = (0,external_Vue_.ref)(null);
    this.rightFixedWidth = (0,external_Vue_.ref)(null);
    this.tableHeight = (0,external_Vue_.ref)(null);
    this.headerHeight = (0,external_Vue_.ref)(44);
    this.appendHeight = (0,external_Vue_.ref)(0);
    this.footerHeight = (0,external_Vue_.ref)(44);
    this.viewportHeight = (0,external_Vue_.ref)(null);
    this.bodyHeight = (0,external_Vue_.ref)(null);
    this.bodyScrollHeight = (0,external_Vue_.ref)(0);
    this.fixedBodyHeight = (0,external_Vue_.ref)(null);
    this.gutterWidth = 0;
    for (const name in options) {
      if ((0,shared_esm_bundler/* hasOwn */.RI)(options, name)) {
        if ((0,external_Vue_.isRef)(this[name])) {
          this[name].value = options[name];
        } else {
          this[name] = options[name];
        }
      }
    }
    if (!this.table) {
      throw new Error("Table is required for Table Layout");
    }
    if (!this.store) {
      throw new Error("Store is required for Table Layout");
    }
  }
  updateScrollY() {
    const height = this.height.value;
    if (height === null)
      return false;
    const bodyWrapper = this.table.refs.bodyWrapper;
    if (this.table.vnode.el && bodyWrapper) {
      let scrollY = true;
      const prevScrollY = this.scrollY.value;
      if (this.bodyHeight.value === null) {
        scrollY = false;
      } else {
        scrollY = bodyWrapper.scrollHeight > this.bodyHeight.value;
      }
      this.scrollY.value = scrollY;
      return prevScrollY !== scrollY;
    }
    return false;
  }
  setHeight(value, prop = "height") {
    if (!shared/* isClient */.C5)
      return;
    const el = this.table.vnode.el;
    value = parseHeight(value);
    this.height.value = Number(value);
    if (!el && (value || value === 0))
      return (0,external_Vue_.nextTick)(() => this.setHeight(value, prop));
    if (typeof value === "number") {
      el.style[prop] = `${value}px`;
      this.updateElsHeight();
    } else if (typeof value === "string") {
      el.style[prop] = value;
      this.updateElsHeight();
    }
  }
  setMaxHeight(value) {
    this.setHeight(value, "max-height");
  }
  getFlattenColumns() {
    const flattenColumns = [];
    const columns = this.table.store.states.columns.value;
    columns.forEach((column) => {
      if (column.isColumnGroup) {
        flattenColumns.push.apply(flattenColumns, column.columns);
      } else {
        flattenColumns.push(column);
      }
    });
    return flattenColumns;
  }
  updateElsHeight() {
    var _a, _b;
    if (!this.table.$ready)
      return (0,external_Vue_.nextTick)(() => this.updateElsHeight());
    const {
      tableWrapper,
      headerWrapper,
      appendWrapper,
      footerWrapper,
      tableHeader,
      tableBody
    } = this.table.refs;
    if (tableWrapper && tableWrapper.style.display === "none") {
      return;
    }
    const { tableLayout } = this.table.props;
    this.appendHeight.value = appendWrapper ? appendWrapper.offsetHeight : 0;
    if (this.showHeader && !headerWrapper && tableLayout === "fixed") {
      return;
    }
    const headerTrElm = tableHeader ? tableHeader : null;
    const noneHeader = this.headerDisplayNone(headerTrElm);
    const headerWrapperOffsetHeight = (headerWrapper == null ? void 0 : headerWrapper.offsetHeight) || 0;
    const headerHeight = this.headerHeight.value = !this.showHeader ? 0 : headerWrapperOffsetHeight;
    if (this.showHeader && !noneHeader && headerWrapperOffsetHeight > 0 && (this.table.store.states.columns.value || []).length > 0 && headerHeight < 2) {
      return (0,external_Vue_.nextTick)(() => this.updateElsHeight());
    }
    const tableHeight = this.tableHeight.value = (_b = (_a = this.table) == null ? void 0 : _a.vnode.el) == null ? void 0 : _b.clientHeight;
    const footerHeight = this.footerHeight.value = footerWrapper ? footerWrapper.offsetHeight : 0;
    if (this.height.value !== null) {
      if (this.bodyHeight.value === null) {
        requestAnimationFrame(() => this.updateElsHeight());
      }
      this.bodyHeight.value = tableHeight - headerHeight - footerHeight + (footerWrapper ? 1 : 0);
      this.bodyScrollHeight.value = tableBody == null ? void 0 : tableBody.scrollHeight;
    }
    this.fixedBodyHeight.value = this.scrollX.value ? this.bodyHeight.value - this.gutterWidth : this.bodyHeight.value;
    this.viewportHeight.value = this.scrollX.value ? tableHeight - this.gutterWidth : tableHeight;
    this.updateScrollY();
    this.notifyObservers("scrollable");
  }
  headerDisplayNone(elm) {
    if (!elm)
      return true;
    let headerChild = elm;
    while (headerChild.tagName !== "DIV") {
      if (getComputedStyle(headerChild).display === "none") {
        return true;
      }
      headerChild = headerChild.parentElement;
    }
    return false;
  }
  updateColumnsWidth() {
    if (!shared/* isClient */.C5)
      return;
    const fit = this.fit;
    const bodyWidth = this.table.vnode.el.clientWidth;
    let bodyMinWidth = 0;
    const flattenColumns = this.getFlattenColumns();
    const flexColumns = flattenColumns.filter((column) => typeof column.width !== "number");
    flattenColumns.forEach((column) => {
      if (typeof column.width === "number" && column.realWidth)
        column.realWidth = null;
    });
    if (flexColumns.length > 0 && fit) {
      flattenColumns.forEach((column) => {
        bodyMinWidth += Number(column.width || column.minWidth || 80);
      });
      if (bodyMinWidth <= bodyWidth) {
        this.scrollX.value = false;
        const totalFlexWidth = bodyWidth - bodyMinWidth;
        if (flexColumns.length === 1) {
          flexColumns[0].realWidth = Number(flexColumns[0].minWidth || 80) + totalFlexWidth;
        } else {
          const allColumnsWidth = flexColumns.reduce((prev, column) => prev + Number(column.minWidth || 80), 0);
          const flexWidthPerPixel = totalFlexWidth / allColumnsWidth;
          let noneFirstWidth = 0;
          flexColumns.forEach((column, index) => {
            if (index === 0)
              return;
            const flexWidth = Math.floor(Number(column.minWidth || 80) * flexWidthPerPixel);
            noneFirstWidth += flexWidth;
            column.realWidth = Number(column.minWidth || 80) + flexWidth;
          });
          flexColumns[0].realWidth = Number(flexColumns[0].minWidth || 80) + totalFlexWidth - noneFirstWidth;
        }
      } else {
        this.scrollX.value = true;
        flexColumns.forEach((column) => {
          column.realWidth = Number(column.minWidth);
        });
      }
      this.bodyWidth.value = Math.max(bodyMinWidth, bodyWidth);
      this.table.state.resizeState.value.width = this.bodyWidth.value;
    } else {
      flattenColumns.forEach((column) => {
        if (!column.width && !column.minWidth) {
          column.realWidth = 80;
        } else {
          column.realWidth = Number(column.width || column.minWidth);
        }
        bodyMinWidth += column.realWidth;
      });
      this.scrollX.value = bodyMinWidth > bodyWidth;
      this.bodyWidth.value = bodyMinWidth;
    }
    const fixedColumns = this.store.states.fixedColumns.value;
    if (fixedColumns.length > 0) {
      let fixedWidth = 0;
      fixedColumns.forEach((column) => {
        fixedWidth += Number(column.realWidth || column.width);
      });
      this.fixedWidth.value = fixedWidth;
    }
    const rightFixedColumns = this.store.states.rightFixedColumns.value;
    if (rightFixedColumns.length > 0) {
      let rightFixedWidth = 0;
      rightFixedColumns.forEach((column) => {
        rightFixedWidth += Number(column.realWidth || column.width);
      });
      this.rightFixedWidth.value = rightFixedWidth;
    }
    this.notifyObservers("columns");
  }
  addObserver(observer) {
    this.observers.push(observer);
  }
  removeObserver(observer) {
    const index = this.observers.indexOf(observer);
    if (index !== -1) {
      this.observers.splice(index, 1);
    }
  }
  notifyObservers(event) {
    const observers = this.observers;
    observers.forEach((observer) => {
      var _a, _b;
      switch (event) {
        case "columns":
          (_a = observer.state) == null ? void 0 : _a.onColumnsChange(this);
          break;
        case "scrollable":
          (_b = observer.state) == null ? void 0 : _b.onScrollableChange(this);
          break;
        default:
          throw new Error(`Table Layout don't have event ${event}.`);
      }
    });
  }
}


//# sourceMappingURL=table-layout.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table/src/filter-panel.mjs













const { CheckboxGroup: ElCheckboxGroup } = components_checkbox/* ElCheckbox */.Xb;
const filter_panel_sfc_main = (0,external_Vue_.defineComponent)({
  name: "ElTableFilterPanel",
  components: {
    ElCheckbox: components_checkbox/* ElCheckbox */.Xb,
    ElCheckboxGroup,
    ElScrollbar: ElScrollbar,
    ElTooltip: ElTooltip,
    ElIcon: components_icon/* ElIcon */.gn,
    ArrowDown: dist/* ArrowDown */.K5e,
    ArrowUp: dist/* ArrowUp */.a2Z
  },
  directives: { ClickOutside: ClickOutside },
  props: {
    placement: {
      type: String,
      default: "bottom-start"
    },
    store: {
      type: Object
    },
    column: {
      type: Object
    },
    upDataColumn: {
      type: Function
    }
  },
  setup(props) {
    const instance = (0,external_Vue_.getCurrentInstance)();
    const { t } = useLocale();
    const ns = (0,use_namespace/* useNamespace */.s)("table-filter");
    const parent = instance == null ? void 0 : instance.parent;
    if (!parent.filterPanels.value[props.column.id]) {
      parent.filterPanels.value[props.column.id] = instance;
    }
    const tooltipVisible = (0,external_Vue_.ref)(false);
    const tooltip = (0,external_Vue_.ref)(null);
    const filters = (0,external_Vue_.computed)(() => {
      return props.column && props.column.filters;
    });
    const filterValue = (0,external_Vue_.computed)({
      get: () => {
        var _a;
        return (((_a = props.column) == null ? void 0 : _a.filteredValue) || [])[0];
      },
      set: (value) => {
        if (filteredValue.value) {
          if (typeof value !== "undefined" && value !== null) {
            filteredValue.value.splice(0, 1, value);
          } else {
            filteredValue.value.splice(0, 1);
          }
        }
      }
    });
    const filteredValue = (0,external_Vue_.computed)({
      get() {
        if (props.column) {
          return props.column.filteredValue || [];
        }
        return [];
      },
      set(value) {
        if (props.column) {
          props.upDataColumn("filteredValue", value);
        }
      }
    });
    const multiple = (0,external_Vue_.computed)(() => {
      if (props.column) {
        return props.column.filterMultiple;
      }
      return true;
    });
    const isActive = (filter) => {
      return filter.value === filterValue.value;
    };
    const hidden = () => {
      tooltipVisible.value = false;
    };
    const showFilterPanel = (e) => {
      e.stopPropagation();
      tooltipVisible.value = !tooltipVisible.value;
    };
    const hideFilterPanel = () => {
      tooltipVisible.value = false;
    };
    const handleConfirm = () => {
      confirmFilter(filteredValue.value);
      hidden();
    };
    const handleReset = () => {
      filteredValue.value = [];
      confirmFilter(filteredValue.value);
      hidden();
    };
    const handleSelect = (_filterValue) => {
      filterValue.value = _filterValue;
      if (typeof _filterValue !== "undefined" && _filterValue !== null) {
        confirmFilter(filteredValue.value);
      } else {
        confirmFilter([]);
      }
      hidden();
    };
    const confirmFilter = (filteredValue2) => {
      props.store.commit("filterChange", {
        column: props.column,
        values: filteredValue2
      });
      props.store.updateAllSelected();
    };
    (0,external_Vue_.watch)(tooltipVisible, (value) => {
      if (props.column) {
        props.upDataColumn("filterOpened", value);
      }
    }, {
      immediate: true
    });
    const popperPaneRef = (0,external_Vue_.computed)(() => {
      var _a, _b;
      return (_b = (_a = tooltip.value) == null ? void 0 : _a.popperRef) == null ? void 0 : _b.contentRef;
    });
    return {
      tooltipVisible,
      multiple,
      filteredValue,
      filterValue,
      filters,
      handleConfirm,
      handleReset,
      handleSelect,
      isActive,
      t,
      ns,
      showFilterPanel,
      hideFilterPanel,
      popperPaneRef,
      tooltip
    };
  }
});
const filter_panel_hoisted_1 = { key: 0 };
const filter_panel_hoisted_2 = ["disabled"];
const filter_panel_hoisted_3 = ["label", "onClick"];
function filter_panel_sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_el_checkbox = (0,external_Vue_.resolveComponent)("el-checkbox");
  const _component_el_checkbox_group = (0,external_Vue_.resolveComponent)("el-checkbox-group");
  const _component_el_scrollbar = (0,external_Vue_.resolveComponent)("el-scrollbar");
  const _component_arrow_up = (0,external_Vue_.resolveComponent)("arrow-up");
  const _component_arrow_down = (0,external_Vue_.resolveComponent)("arrow-down");
  const _component_el_icon = (0,external_Vue_.resolveComponent)("el-icon");
  const _component_el_tooltip = (0,external_Vue_.resolveComponent)("el-tooltip");
  const _directive_click_outside = (0,external_Vue_.resolveDirective)("click-outside");
  return (0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(_component_el_tooltip, {
    ref: "tooltip",
    visible: _ctx.tooltipVisible,
    "onUpdate:visible": _cache[5] || (_cache[5] = ($event) => _ctx.tooltipVisible = $event),
    offset: 0,
    placement: _ctx.placement,
    "show-arrow": false,
    "stop-popper-mouse-event": false,
    teleported: "",
    effect: "light",
    pure: "",
    "popper-class": _ctx.ns.b(),
    persistent: ""
  }, {
    content: (0,external_Vue_.withCtx)(() => [
      _ctx.multiple ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", filter_panel_hoisted_1, [
        (0,external_Vue_.createElementVNode)("div", {
          class: (0,external_Vue_.normalizeClass)(_ctx.ns.e("content"))
        }, [
          (0,external_Vue_.createVNode)(_component_el_scrollbar, {
            "wrap-class": _ctx.ns.e("wrap")
          }, {
            default: (0,external_Vue_.withCtx)(() => [
              (0,external_Vue_.createVNode)(_component_el_checkbox_group, {
                modelValue: _ctx.filteredValue,
                "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => _ctx.filteredValue = $event),
                class: (0,external_Vue_.normalizeClass)(_ctx.ns.e("checkbox-group"))
              }, {
                default: (0,external_Vue_.withCtx)(() => [
                  ((0,external_Vue_.openBlock)(true), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, null, (0,external_Vue_.renderList)(_ctx.filters, (filter) => {
                    return (0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(_component_el_checkbox, {
                      key: filter.value,
                      label: filter.value
                    }, {
                      default: (0,external_Vue_.withCtx)(() => [
                        (0,external_Vue_.createTextVNode)((0,external_Vue_.toDisplayString)(filter.text), 1)
                      ]),
                      _: 2
                    }, 1032, ["label"]);
                  }), 128))
                ]),
                _: 1
              }, 8, ["modelValue", "class"])
            ]),
            _: 1
          }, 8, ["wrap-class"])
        ], 2),
        (0,external_Vue_.createElementVNode)("div", {
          class: (0,external_Vue_.normalizeClass)(_ctx.ns.e("bottom"))
        }, [
          (0,external_Vue_.createElementVNode)("button", {
            class: (0,external_Vue_.normalizeClass)({ [_ctx.ns.is("disabled")]: _ctx.filteredValue.length === 0 }),
            disabled: _ctx.filteredValue.length === 0,
            type: "button",
            onClick: _cache[1] || (_cache[1] = (...args) => _ctx.handleConfirm && _ctx.handleConfirm(...args))
          }, (0,external_Vue_.toDisplayString)(_ctx.t("el.table.confirmFilter")), 11, filter_panel_hoisted_2),
          (0,external_Vue_.createElementVNode)("button", {
            type: "button",
            onClick: _cache[2] || (_cache[2] = (...args) => _ctx.handleReset && _ctx.handleReset(...args))
          }, (0,external_Vue_.toDisplayString)(_ctx.t("el.table.resetFilter")), 1)
        ], 2)
      ])) : ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("ul", {
        key: 1,
        class: (0,external_Vue_.normalizeClass)(_ctx.ns.e("list"))
      }, [
        (0,external_Vue_.createElementVNode)("li", {
          class: (0,external_Vue_.normalizeClass)([
            _ctx.ns.e("list-item"),
            {
              [_ctx.ns.is("active")]: _ctx.filterValue === void 0 || _ctx.filterValue === null
            }
          ]),
          onClick: _cache[3] || (_cache[3] = ($event) => _ctx.handleSelect(null))
        }, (0,external_Vue_.toDisplayString)(_ctx.t("el.table.clearFilter")), 3),
        ((0,external_Vue_.openBlock)(true), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, null, (0,external_Vue_.renderList)(_ctx.filters, (filter) => {
          return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("li", {
            key: filter.value,
            class: (0,external_Vue_.normalizeClass)([_ctx.ns.e("list-item"), _ctx.ns.is("active", _ctx.isActive(filter))]),
            label: filter.value,
            onClick: ($event) => _ctx.handleSelect(filter.value)
          }, (0,external_Vue_.toDisplayString)(filter.text), 11, filter_panel_hoisted_3);
        }), 128))
      ], 2))
    ]),
    default: (0,external_Vue_.withCtx)(() => [
      (0,external_Vue_.withDirectives)(((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("span", {
        class: (0,external_Vue_.normalizeClass)([
          `${_ctx.ns.namespace.value}-table__column-filter-trigger`,
          `${_ctx.ns.namespace.value}-none-outline`
        ]),
        onClick: _cache[4] || (_cache[4] = (...args) => _ctx.showFilterPanel && _ctx.showFilterPanel(...args))
      }, [
        (0,external_Vue_.createVNode)(_component_el_icon, null, {
          default: (0,external_Vue_.withCtx)(() => [
            _ctx.column.filterOpened ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(_component_arrow_up, { key: 0 })) : ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(_component_arrow_down, { key: 1 }))
          ]),
          _: 1
        })
      ], 2)), [
        [_directive_click_outside, _ctx.hideFilterPanel, _ctx.popperPaneRef]
      ])
    ]),
    _: 1
  }, 8, ["visible", "placement", "popper-class"]);
}
var FilterPanel = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(filter_panel_sfc_main, [["render", filter_panel_sfc_render], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/table/src/filter-panel.vue"]]);


//# sourceMappingURL=filter-panel.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table/src/layout-observer.mjs


function useLayoutObserver(root) {
  const instance = (0,external_Vue_.getCurrentInstance)();
  (0,external_Vue_.onBeforeMount)(() => {
    tableLayout.value.addObserver(instance);
  });
  (0,external_Vue_.onMounted)(() => {
    onColumnsChange(tableLayout.value);
    onScrollableChange(tableLayout.value);
  });
  (0,external_Vue_.onUpdated)(() => {
    onColumnsChange(tableLayout.value);
    onScrollableChange(tableLayout.value);
  });
  (0,external_Vue_.onUnmounted)(() => {
    tableLayout.value.removeObserver(instance);
  });
  const tableLayout = (0,external_Vue_.computed)(() => {
    const layout = root.layout;
    if (!layout) {
      throw new Error("Can not find table layout.");
    }
    return layout;
  });
  const onColumnsChange = (layout) => {
    var _a;
    const cols = ((_a = root.vnode.el) == null ? void 0 : _a.querySelectorAll("colgroup > col")) || [];
    if (!cols.length)
      return;
    const flattenColumns = layout.getFlattenColumns();
    const columnsMap = {};
    flattenColumns.forEach((column) => {
      columnsMap[column.id] = column;
    });
    for (let i = 0, j = cols.length; i < j; i++) {
      const col = cols[i];
      const name = col.getAttribute("name");
      const column = columnsMap[name];
      if (column) {
        col.setAttribute("width", column.realWidth || column.width);
      }
    }
  };
  const onScrollableChange = (layout) => {
    var _a, _b;
    const cols = ((_a = root.vnode.el) == null ? void 0 : _a.querySelectorAll("colgroup > col[name=gutter]")) || [];
    for (let i = 0, j = cols.length; i < j; i++) {
      const col = cols[i];
      col.setAttribute("width", layout.scrollY.value ? layout.gutterWidth : "0");
    }
    const ths = ((_b = root.vnode.el) == null ? void 0 : _b.querySelectorAll("th.gutter")) || [];
    for (let i = 0, j = ths.length; i < j; i++) {
      const th = ths[i];
      th.style.width = layout.scrollY.value ? `${layout.gutterWidth}px` : "0";
      th.style.display = layout.scrollY.value ? "" : "none";
    }
  };
  return {
    tableLayout: tableLayout.value,
    onColumnsChange,
    onScrollableChange
  };
}


//# sourceMappingURL=layout-observer.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table/src/tokens.mjs
const TABLE_INJECTION_KEY = Symbol("ElTable");


//# sourceMappingURL=tokens.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table/src/table-header/event-helper.mjs






function useEvent(props, emit) {
  const instance = (0,external_Vue_.getCurrentInstance)();
  const parent = (0,external_Vue_.inject)(TABLE_INJECTION_KEY);
  const handleFilterClick = (event) => {
    event.stopPropagation();
    return;
  };
  const handleHeaderClick = (event, column) => {
    if (!column.filters && column.sortable) {
      handleSortClick(event, column, false);
    } else if (column.filterable && !column.sortable) {
      handleFilterClick(event);
    }
    parent == null ? void 0 : parent.emit("header-click", column, event);
  };
  const handleHeaderContextMenu = (event, column) => {
    parent == null ? void 0 : parent.emit("header-contextmenu", column, event);
  };
  const draggingColumn = (0,external_Vue_.ref)(null);
  const dragging = (0,external_Vue_.ref)(false);
  const dragState = (0,external_Vue_.ref)({});
  const handleMouseDown = (event, column) => {
    if (!shared/* isClient */.C5)
      return;
    if (column.children && column.children.length > 0)
      return;
    if (draggingColumn.value && props.border) {
      dragging.value = true;
      const table = parent;
      emit("set-drag-visible", true);
      const tableEl = table == null ? void 0 : table.vnode.el;
      const tableLeft = tableEl.getBoundingClientRect().left;
      const columnEl = instance.vnode.el.querySelector(`th.${column.id}`);
      const columnRect = columnEl.getBoundingClientRect();
      const minLeft = columnRect.left - tableLeft + 30;
      (0,dom_style/* addClass */.cn)(columnEl, "noclick");
      dragState.value = {
        startMouseLeft: event.clientX,
        startLeft: columnRect.right - tableLeft,
        startColumnLeft: columnRect.left - tableLeft,
        tableLeft
      };
      const resizeProxy = table == null ? void 0 : table.refs.resizeProxy;
      resizeProxy.style.left = `${dragState.value.startLeft}px`;
      document.onselectstart = function() {
        return false;
      };
      document.ondragstart = function() {
        return false;
      };
      const handleMouseMove2 = (event2) => {
        const deltaLeft = event2.clientX - dragState.value.startMouseLeft;
        const proxyLeft = dragState.value.startLeft + deltaLeft;
        resizeProxy.style.left = `${Math.max(minLeft, proxyLeft)}px`;
      };
      const handleMouseUp = () => {
        if (dragging.value) {
          const { startColumnLeft, startLeft } = dragState.value;
          const finalLeft = Number.parseInt(resizeProxy.style.left, 10);
          const columnWidth = finalLeft - startColumnLeft;
          column.width = column.realWidth = columnWidth;
          table == null ? void 0 : table.emit("header-dragend", column.width, startLeft - startColumnLeft, column, event);
          requestAnimationFrame(() => {
            props.store.scheduleLayout(false, true);
          });
          document.body.style.cursor = "";
          dragging.value = false;
          draggingColumn.value = null;
          dragState.value = {};
          emit("set-drag-visible", false);
        }
        document.removeEventListener("mousemove", handleMouseMove2);
        document.removeEventListener("mouseup", handleMouseUp);
        document.onselectstart = null;
        document.ondragstart = null;
        setTimeout(() => {
          (0,dom_style/* removeClass */.IV)(columnEl, "noclick");
        }, 0);
      };
      document.addEventListener("mousemove", handleMouseMove2);
      document.addEventListener("mouseup", handleMouseUp);
    }
  };
  const handleMouseMove = (event, column) => {
    if (column.children && column.children.length > 0)
      return;
    let target = event.target;
    while (target && target.tagName !== "TH") {
      target = target.parentNode;
    }
    if (!column || !column.resizable)
      return;
    if (!dragging.value && props.border) {
      const rect = target.getBoundingClientRect();
      const bodyStyle = document.body.style;
      if (rect.width > 12 && rect.right - event.pageX < 8) {
        bodyStyle.cursor = "col-resize";
        if ((0,dom_style/* hasClass */.pv)(target, "is-sortable")) {
          target.style.cursor = "col-resize";
        }
        draggingColumn.value = column;
      } else if (!dragging.value) {
        bodyStyle.cursor = "";
        if ((0,dom_style/* hasClass */.pv)(target, "is-sortable")) {
          target.style.cursor = "pointer";
        }
        draggingColumn.value = null;
      }
    }
  };
  const handleMouseOut = () => {
    if (!shared/* isClient */.C5)
      return;
    document.body.style.cursor = "";
  };
  const toggleOrder = ({ order, sortOrders }) => {
    if (order === "")
      return sortOrders[0];
    const index = sortOrders.indexOf(order || null);
    return sortOrders[index > sortOrders.length - 2 ? 0 : index + 1];
  };
  const handleSortClick = (event, column, givenOrder) => {
    event.stopPropagation();
    const order = column.order === givenOrder ? null : givenOrder || toggleOrder(column);
    let target = event.target;
    while (target && target.tagName !== "TH") {
      target = target.parentNode;
    }
    if (target && target.tagName === "TH") {
      if ((0,dom_style/* hasClass */.pv)(target, "noclick")) {
        (0,dom_style/* removeClass */.IV)(target, "noclick");
        return;
      }
    }
    if (!column.sortable)
      return;
    const states = props.store.states;
    let sortProp = states.sortProp.value;
    let sortOrder;
    const sortingColumn = states.sortingColumn.value;
    if (sortingColumn !== column || sortingColumn === column && sortingColumn.order === null) {
      if (sortingColumn) {
        sortingColumn.order = null;
      }
      states.sortingColumn.value = column;
      sortProp = column.property;
    }
    if (!order) {
      sortOrder = column.order = null;
    } else {
      sortOrder = column.order = order;
    }
    states.sortProp.value = sortProp;
    states.sortOrder.value = sortOrder;
    parent == null ? void 0 : parent.store.commit("changeSortCondition");
  };
  return {
    handleHeaderClick,
    handleHeaderContextMenu,
    handleMouseDown,
    handleMouseMove,
    handleMouseOut,
    handleSortClick,
    handleFilterClick
  };
}


//# sourceMappingURL=event-helper.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table/src/table-header/style.helper.mjs






function useStyle(props) {
  const parent = (0,external_Vue_.inject)(TABLE_INJECTION_KEY);
  const ns = (0,use_namespace/* useNamespace */.s)("table");
  const getHeaderRowStyle = (rowIndex) => {
    const headerRowStyle = parent == null ? void 0 : parent.props.headerRowStyle;
    if (typeof headerRowStyle === "function") {
      return headerRowStyle.call(null, { rowIndex });
    }
    return headerRowStyle;
  };
  const getHeaderRowClass = (rowIndex) => {
    const classes = [];
    const headerRowClassName = parent == null ? void 0 : parent.props.headerRowClassName;
    if (typeof headerRowClassName === "string") {
      classes.push(headerRowClassName);
    } else if (typeof headerRowClassName === "function") {
      classes.push(headerRowClassName.call(null, { rowIndex }));
    }
    return classes.join(" ");
  };
  const getHeaderCellStyle = (rowIndex, columnIndex, row, column) => {
    var _a;
    let headerCellStyles = (_a = parent == null ? void 0 : parent.props.headerCellStyle) != null ? _a : {};
    if (typeof headerCellStyles === "function") {
      headerCellStyles = headerCellStyles.call(null, {
        rowIndex,
        columnIndex,
        row,
        column
      });
    }
    const fixedStyle = column.isSubColumn ? null : getFixedColumnOffset(columnIndex, column.fixed, props.store, row);
    ensurePosition(fixedStyle, "left");
    ensurePosition(fixedStyle, "right");
    return Object.assign({}, headerCellStyles, fixedStyle);
  };
  const getHeaderCellClass = (rowIndex, columnIndex, row, column) => {
    const fixedClasses = column.isSubColumn ? [] : getFixedColumnsClass(ns.b(), columnIndex, column.fixed, props.store, row);
    const classes = [
      column.id,
      column.order,
      column.headerAlign,
      column.className,
      column.labelClassName,
      ...fixedClasses
    ];
    if (!column.children) {
      classes.push("is-leaf");
    }
    if (column.sortable) {
      classes.push("is-sortable");
    }
    const headerCellClassName = parent == null ? void 0 : parent.props.headerCellClassName;
    if (typeof headerCellClassName === "string") {
      classes.push(headerCellClassName);
    } else if (typeof headerCellClassName === "function") {
      classes.push(headerCellClassName.call(null, {
        rowIndex,
        columnIndex,
        row,
        column
      }));
    }
    classes.push(ns.e("cell"));
    return classes.filter((className) => Boolean(className)).join(" ");
  };
  return {
    getHeaderRowStyle,
    getHeaderRowClass,
    getHeaderCellStyle,
    getHeaderCellClass
  };
}


//# sourceMappingURL=style.helper.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table/src/table-header/utils-helper.mjs



const getAllColumns = (columns) => {
  const result = [];
  columns.forEach((column) => {
    if (column.children) {
      result.push(column);
      result.push.apply(result, getAllColumns(column.children));
    } else {
      result.push(column);
    }
  });
  return result;
};
const convertToRows = (originColumns) => {
  let maxLevel = 1;
  const traverse = (column, parent) => {
    if (parent) {
      column.level = parent.level + 1;
      if (maxLevel < column.level) {
        maxLevel = column.level;
      }
    }
    if (column.children) {
      let colSpan = 0;
      column.children.forEach((subColumn) => {
        traverse(subColumn, column);
        colSpan += subColumn.colSpan;
      });
      column.colSpan = colSpan;
    } else {
      column.colSpan = 1;
    }
  };
  originColumns.forEach((column) => {
    column.level = 1;
    traverse(column, void 0);
  });
  const rows = [];
  for (let i = 0; i < maxLevel; i++) {
    rows.push([]);
  }
  const allColumns = getAllColumns(originColumns);
  allColumns.forEach((column) => {
    if (!column.children) {
      column.rowSpan = maxLevel - column.level + 1;
    } else {
      column.rowSpan = 1;
      column.children.forEach((col) => col.isSubColumn = true);
    }
    rows[column.level - 1].push(column);
  });
  return rows;
};
function useUtils(props) {
  const parent = (0,external_Vue_.inject)(TABLE_INJECTION_KEY);
  const columnRows = (0,external_Vue_.computed)(() => {
    return convertToRows(props.store.states.originColumns.value);
  });
  const isGroup = (0,external_Vue_.computed)(() => {
    const result = columnRows.value.length > 1;
    if (result && parent) {
      parent.state.isGroup.value = true;
    }
    return result;
  });
  const toggleAllSelection = (event) => {
    event.stopPropagation();
    parent == null ? void 0 : parent.store.commit("toggleAllSelection");
  };
  return {
    isGroup,
    toggleAllSelection,
    columnRows
  };
}


//# sourceMappingURL=utils-helper.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table/src/table-header/index.mjs











var TableHeader = (0,external_Vue_.defineComponent)({
  name: "ElTableHeader",
  components: {
    ElCheckbox: components_checkbox/* ElCheckbox */.Xb
  },
  props: {
    fixed: {
      type: String,
      default: ""
    },
    store: {
      required: true,
      type: Object
    },
    border: Boolean,
    defaultSort: {
      type: Object,
      default: () => {
        return {
          prop: "",
          order: ""
        };
      }
    }
  },
  setup(props, { emit }) {
    const instance = (0,external_Vue_.getCurrentInstance)();
    const parent = (0,external_Vue_.inject)(TABLE_INJECTION_KEY);
    const ns = (0,use_namespace/* useNamespace */.s)("table");
    const filterPanels = (0,external_Vue_.ref)({});
    const { onColumnsChange, onScrollableChange } = useLayoutObserver(parent);
    (0,external_Vue_.onMounted)(async () => {
      await (0,external_Vue_.nextTick)();
      await (0,external_Vue_.nextTick)();
      const { prop, order } = props.defaultSort;
      parent == null ? void 0 : parent.store.commit("sort", { prop, order, init: true });
    });
    const {
      handleHeaderClick,
      handleHeaderContextMenu,
      handleMouseDown,
      handleMouseMove,
      handleMouseOut,
      handleSortClick,
      handleFilterClick
    } = useEvent(props, emit);
    const {
      getHeaderRowStyle,
      getHeaderRowClass,
      getHeaderCellStyle,
      getHeaderCellClass
    } = useStyle(props);
    const { isGroup, toggleAllSelection, columnRows } = useUtils(props);
    instance.state = {
      onColumnsChange,
      onScrollableChange
    };
    instance.filterPanels = filterPanels;
    return {
      ns,
      filterPanels,
      onColumnsChange,
      onScrollableChange,
      columnRows,
      getHeaderRowClass,
      getHeaderRowStyle,
      getHeaderCellClass,
      getHeaderCellStyle,
      handleHeaderClick,
      handleHeaderContextMenu,
      handleMouseDown,
      handleMouseMove,
      handleMouseOut,
      handleSortClick,
      handleFilterClick,
      isGroup,
      toggleAllSelection
    };
  },
  render() {
    const {
      ns,
      isGroup,
      columnRows,
      getHeaderCellStyle,
      getHeaderCellClass,
      getHeaderRowClass,
      getHeaderRowStyle,
      handleHeaderClick,
      handleHeaderContextMenu,
      handleMouseDown,
      handleMouseMove,
      handleSortClick,
      handleMouseOut,
      store,
      $parent
    } = this;
    let rowSpan = 1;
    return (0,external_Vue_.h)("thead", {
      class: { [ns.is("group")]: isGroup }
    }, columnRows.map((subColumns, rowIndex) => (0,external_Vue_.h)("tr", {
      class: getHeaderRowClass(rowIndex),
      key: rowIndex,
      style: getHeaderRowStyle(rowIndex)
    }, subColumns.map((column, cellIndex) => {
      if (column.rowSpan > rowSpan) {
        rowSpan = column.rowSpan;
      }
      return (0,external_Vue_.h)("th", {
        class: getHeaderCellClass(rowIndex, cellIndex, subColumns, column),
        colspan: column.colSpan,
        key: `${column.id}-thead`,
        rowspan: column.rowSpan,
        style: getHeaderCellStyle(rowIndex, cellIndex, subColumns, column),
        onClick: ($event) => handleHeaderClick($event, column),
        onContextmenu: ($event) => handleHeaderContextMenu($event, column),
        onMousedown: ($event) => handleMouseDown($event, column),
        onMousemove: ($event) => handleMouseMove($event, column),
        onMouseout: handleMouseOut
      }, [
        (0,external_Vue_.h)("div", {
          class: [
            "cell",
            column.filteredValue && column.filteredValue.length > 0 ? "highlight" : "",
            column.labelClassName
          ]
        }, [
          column.renderHeader ? column.renderHeader({
            column,
            $index: cellIndex,
            store,
            _self: $parent
          }) : column.label,
          column.sortable && (0,external_Vue_.h)("span", {
            onClick: ($event) => handleSortClick($event, column),
            class: "caret-wrapper"
          }, [
            (0,external_Vue_.h)("i", {
              onClick: ($event) => handleSortClick($event, column, "ascending"),
              class: "sort-caret ascending"
            }),
            (0,external_Vue_.h)("i", {
              onClick: ($event) => handleSortClick($event, column, "descending"),
              class: "sort-caret descending"
            })
          ]),
          column.filterable && (0,external_Vue_.h)(FilterPanel, {
            store,
            placement: column.filterPlacement || "bottom-start",
            column,
            upDataColumn: (key, value) => {
              column[key] = value;
            }
          })
        ])
      ]);
    }))));
  }
});


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table/src/table-body/events-helper.mjs







function useEvents(props) {
  const parent = (0,external_Vue_.inject)(TABLE_INJECTION_KEY);
  const tooltipContent = (0,external_Vue_.ref)("");
  const tooltipTrigger = (0,external_Vue_.ref)((0,external_Vue_.h)("div"));
  const handleEvent = (event, row, name) => {
    var _a;
    const table = parent;
    const cell = getCell(event);
    let column;
    const namespace = (_a = table == null ? void 0 : table.vnode.el) == null ? void 0 : _a.dataset.prefix;
    if (cell) {
      column = getColumnByCell({
        columns: props.store.states.columns.value
      }, cell, namespace);
      if (column) {
        table == null ? void 0 : table.emit(`cell-${name}`, row, column, cell, event);
      }
    }
    table == null ? void 0 : table.emit(`row-${name}`, row, column, event);
  };
  const handleDoubleClick = (event, row) => {
    handleEvent(event, row, "dblclick");
  };
  const handleClick = (event, row) => {
    props.store.commit("setCurrentRow", row);
    handleEvent(event, row, "click");
  };
  const handleContextMenu = (event, row) => {
    handleEvent(event, row, "contextmenu");
  };
  const handleMouseEnter = (0,debounce/* default */.Z)((index) => {
    props.store.commit("setHoverRow", index);
  }, 30);
  const handleMouseLeave = (0,debounce/* default */.Z)(() => {
    props.store.commit("setHoverRow", null);
  }, 30);
  const handleCellMouseEnter = (event, row) => {
    var _a;
    const table = parent;
    const cell = getCell(event);
    const namespace = (_a = table == null ? void 0 : table.vnode.el) == null ? void 0 : _a.dataset.prefix;
    if (cell) {
      const column = getColumnByCell({
        columns: props.store.states.columns.value
      }, cell, namespace);
      const hoverState = table.hoverState = { cell, column, row };
      table == null ? void 0 : table.emit("cell-mouse-enter", hoverState.row, hoverState.column, hoverState.cell, event);
    }
    const cellChild = event.target.querySelector(".cell");
    if (!((0,dom_style/* hasClass */.pv)(cellChild, `${namespace}-tooltip`) && cellChild.childNodes.length)) {
      return;
    }
    const range = document.createRange();
    range.setStart(cellChild, 0);
    range.setEnd(cellChild, cellChild.childNodes.length);
    const rangeWidth = range.getBoundingClientRect().width;
    const padding = (Number.parseInt((0,dom_style/* getStyle */.C2)(cellChild, "paddingLeft"), 10) || 0) + (Number.parseInt((0,dom_style/* getStyle */.C2)(cellChild, "paddingRight"), 10) || 0);
    if (rangeWidth + padding > cellChild.offsetWidth || cellChild.scrollWidth > cellChild.offsetWidth) {
      createTablePopper(parent == null ? void 0 : parent.refs.tableWrapper, cell, cell.innerText || cell.textContent, {
        placement: "top",
        strategy: "fixed"
      }, row.tooltipEffect);
    }
  };
  const handleCellMouseLeave = (event) => {
    const cell = getCell(event);
    if (!cell)
      return;
    const oldHoverState = parent == null ? void 0 : parent.hoverState;
    parent == null ? void 0 : parent.emit("cell-mouse-leave", oldHoverState == null ? void 0 : oldHoverState.row, oldHoverState == null ? void 0 : oldHoverState.column, oldHoverState == null ? void 0 : oldHoverState.cell, event);
  };
  return {
    handleDoubleClick,
    handleClick,
    handleContextMenu,
    handleMouseEnter,
    handleMouseLeave,
    handleCellMouseEnter,
    handleCellMouseLeave,
    tooltipContent,
    tooltipTrigger
  };
}


//# sourceMappingURL=events-helper.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table/src/table-body/styles-helper.mjs






function useStyles(props) {
  const parent = (0,external_Vue_.inject)(TABLE_INJECTION_KEY);
  const ns = (0,use_namespace/* useNamespace */.s)("table");
  const getRowStyle = (row, rowIndex) => {
    const rowStyle = parent == null ? void 0 : parent.props.rowStyle;
    if (typeof rowStyle === "function") {
      return rowStyle.call(null, {
        row,
        rowIndex
      });
    }
    return rowStyle || null;
  };
  const getRowClass = (row, rowIndex) => {
    const classes = [ns.e("row")];
    if ((parent == null ? void 0 : parent.props.highlightCurrentRow) && row === props.store.states.currentRow.value) {
      classes.push("current-row");
    }
    if (props.stripe && rowIndex % 2 === 1) {
      classes.push(ns.em("row", "striped"));
    }
    const rowClassName = parent == null ? void 0 : parent.props.rowClassName;
    if (typeof rowClassName === "string") {
      classes.push(rowClassName);
    } else if (typeof rowClassName === "function") {
      classes.push(rowClassName.call(null, {
        row,
        rowIndex
      }));
    }
    return classes;
  };
  const getCellStyle = (rowIndex, columnIndex, row, column) => {
    const cellStyle = parent == null ? void 0 : parent.props.cellStyle;
    let cellStyles = cellStyle != null ? cellStyle : {};
    if (typeof cellStyle === "function") {
      cellStyles = cellStyle.call(null, {
        rowIndex,
        columnIndex,
        row,
        column
      });
    }
    const fixedStyle = column.isSubColumn ? null : getFixedColumnOffset(columnIndex, props == null ? void 0 : props.fixed, props.store);
    ensurePosition(fixedStyle, "left");
    ensurePosition(fixedStyle, "right");
    return Object.assign({}, cellStyles, fixedStyle);
  };
  const getCellClass = (rowIndex, columnIndex, row, column) => {
    const fixedClasses = column.isSubColumn ? [] : getFixedColumnsClass(ns.b(), columnIndex, props == null ? void 0 : props.fixed, props.store);
    const classes = [column.id, column.align, column.className, ...fixedClasses];
    const cellClassName = parent == null ? void 0 : parent.props.cellClassName;
    if (typeof cellClassName === "string") {
      classes.push(cellClassName);
    } else if (typeof cellClassName === "function") {
      classes.push(cellClassName.call(null, {
        rowIndex,
        columnIndex,
        row,
        column
      }));
    }
    classes.push(ns.e("cell"));
    return classes.filter((className) => Boolean(className)).join(" ");
  };
  const getSpan = (row, column, rowIndex, columnIndex) => {
    let rowspan = 1;
    let colspan = 1;
    const fn = parent == null ? void 0 : parent.props.spanMethod;
    if (typeof fn === "function") {
      const result = fn({
        row,
        column,
        rowIndex,
        columnIndex
      });
      if (Array.isArray(result)) {
        rowspan = result[0];
        colspan = result[1];
      } else if (typeof result === "object") {
        rowspan = result.rowspan;
        colspan = result.colspan;
      }
    }
    return { rowspan, colspan };
  };
  const getColspanRealWidth = (columns, colspan, index) => {
    if (colspan < 1) {
      return columns[index].realWidth;
    }
    const widthArr = columns.map(({ realWidth, width }) => realWidth || width).slice(index, index + colspan);
    return Number(widthArr.reduce((acc, width) => Number(acc) + Number(width), -1));
  };
  return {
    getRowStyle,
    getRowClass,
    getCellStyle,
    getCellClass,
    getSpan,
    getColspanRealWidth
  };
}


//# sourceMappingURL=styles-helper.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table/src/table-body/render-helper.mjs








function useRender(props) {
  const parent = (0,external_Vue_.inject)(TABLE_INJECTION_KEY);
  const ns = (0,use_namespace/* useNamespace */.s)("table");
  const {
    handleDoubleClick,
    handleClick,
    handleContextMenu,
    handleMouseEnter,
    handleMouseLeave,
    handleCellMouseEnter,
    handleCellMouseLeave,
    tooltipContent,
    tooltipTrigger
  } = useEvents(props);
  const {
    getRowStyle,
    getRowClass,
    getCellStyle,
    getCellClass,
    getSpan,
    getColspanRealWidth
  } = useStyles(props);
  const firstDefaultColumnIndex = (0,external_Vue_.computed)(() => {
    return props.store.states.columns.value.findIndex(({ type }) => type === "default");
  });
  const getKeyOfRow = (row, index) => {
    const rowKey = parent.props.rowKey;
    if (rowKey) {
      return getRowIdentity(row, rowKey);
    }
    return index;
  };
  const rowRender = (row, $index, treeRowData, expanded = false) => {
    const { tooltipEffect, store } = props;
    const { indent, columns } = store.states;
    const rowClasses = getRowClass(row, $index);
    let display = true;
    if (treeRowData) {
      rowClasses.push(ns.em("row", `level-${treeRowData.level}`));
      display = treeRowData.display;
    }
    const displayStyle = display ? null : {
      display: "none"
    };
    return (0,external_Vue_.h)("tr", {
      style: [displayStyle, getRowStyle(row, $index)],
      class: rowClasses,
      key: getKeyOfRow(row, $index),
      onDblclick: ($event) => handleDoubleClick($event, row),
      onClick: ($event) => handleClick($event, row),
      onContextmenu: ($event) => handleContextMenu($event, row),
      onMouseenter: () => handleMouseEnter($index),
      onMouseleave: handleMouseLeave
    }, columns.value.map((column, cellIndex) => {
      const { rowspan, colspan } = getSpan(row, column, $index, cellIndex);
      if (!rowspan || !colspan) {
        return null;
      }
      const columnData = { ...column };
      columnData.realWidth = getColspanRealWidth(columns.value, colspan, cellIndex);
      const data = {
        store: props.store,
        _self: props.context || parent,
        column: columnData,
        row,
        $index,
        cellIndex,
        expanded
      };
      if (cellIndex === firstDefaultColumnIndex.value && treeRowData) {
        data.treeNode = {
          indent: treeRowData.level * indent.value,
          level: treeRowData.level
        };
        if (typeof treeRowData.expanded === "boolean") {
          data.treeNode.expanded = treeRowData.expanded;
          if ("loading" in treeRowData) {
            data.treeNode.loading = treeRowData.loading;
          }
          if ("noLazyChildren" in treeRowData) {
            data.treeNode.noLazyChildren = treeRowData.noLazyChildren;
          }
        }
      }
      const baseKey = `${$index},${cellIndex}`;
      const patchKey = columnData.columnKey || columnData.rawColumnKey || "";
      const tdChildren = cellChildren(cellIndex, column, data);
      return (0,external_Vue_.h)("td", {
        style: getCellStyle($index, cellIndex, row, column),
        class: getCellClass($index, cellIndex, row, column),
        key: `${patchKey}${baseKey}`,
        rowspan,
        colspan,
        onMouseenter: ($event) => handleCellMouseEnter($event, { ...row, tooltipEffect }),
        onMouseleave: handleCellMouseLeave
      }, [tdChildren]);
    }));
  };
  const cellChildren = (cellIndex, column, data) => {
    return column.renderCell(data);
  };
  const wrappedRowRender = (row, $index) => {
    const store = props.store;
    const { isRowExpanded, assertRowKey } = store;
    const { treeData, lazyTreeNodeMap, childrenColumnName, rowKey } = store.states;
    const columns = store.states.columns.value;
    const hasExpandColumn = columns.some(({ type }) => type === "expand");
    if (hasExpandColumn) {
      const expanded = isRowExpanded(row);
      const tr = rowRender(row, $index, void 0, expanded);
      const renderExpanded = parent.renderExpanded;
      if (expanded) {
        if (!renderExpanded) {
          console.error("[Element Error]renderExpanded is required.");
          return tr;
        }
        return [
          [
            tr,
            (0,external_Vue_.h)("tr", {
              key: `expanded-row__${tr.key}`
            }, [
              (0,external_Vue_.h)("td", {
                colspan: columns.length,
                class: "el-table__cell el-table__expanded-cell"
              }, [renderExpanded({ row, $index, store, expanded })])
            ])
          ]
        ];
      } else {
        return [[tr]];
      }
    } else if (Object.keys(treeData.value).length) {
      assertRowKey();
      const key = getRowIdentity(row, rowKey.value);
      let cur = treeData.value[key];
      let treeRowData = null;
      if (cur) {
        treeRowData = {
          expanded: cur.expanded,
          level: cur.level,
          display: true
        };
        if (typeof cur.lazy === "boolean") {
          if (typeof cur.loaded === "boolean" && cur.loaded) {
            treeRowData.noLazyChildren = !(cur.children && cur.children.length);
          }
          treeRowData.loading = cur.loading;
        }
      }
      const tmp = [rowRender(row, $index, treeRowData)];
      if (cur) {
        let i = 0;
        const traverse = (children, parent2) => {
          if (!(children && children.length && parent2))
            return;
          children.forEach((node) => {
            const innerTreeRowData = {
              display: parent2.display && parent2.expanded,
              level: parent2.level + 1,
              expanded: false,
              noLazyChildren: false,
              loading: false
            };
            const childKey = getRowIdentity(node, rowKey.value);
            if (childKey === void 0 || childKey === null) {
              throw new Error("For nested data item, row-key is required.");
            }
            cur = { ...treeData.value[childKey] };
            if (cur) {
              innerTreeRowData.expanded = cur.expanded;
              cur.level = cur.level || innerTreeRowData.level;
              cur.display = !!(cur.expanded && innerTreeRowData.display);
              if (typeof cur.lazy === "boolean") {
                if (typeof cur.loaded === "boolean" && cur.loaded) {
                  innerTreeRowData.noLazyChildren = !(cur.children && cur.children.length);
                }
                innerTreeRowData.loading = cur.loading;
              }
            }
            i++;
            tmp.push(rowRender(node, $index + i, innerTreeRowData));
            if (cur) {
              const nodes2 = lazyTreeNodeMap.value[childKey] || node[childrenColumnName.value];
              traverse(nodes2, cur);
            }
          });
        };
        cur.display = true;
        const nodes = lazyTreeNodeMap.value[key] || row[childrenColumnName.value];
        traverse(nodes, cur);
      }
      return tmp;
    } else {
      return rowRender(row, $index, void 0);
    }
  };
  return {
    wrappedRowRender,
    tooltipContent,
    tooltipTrigger
  };
}


//# sourceMappingURL=render-helper.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table/src/table-body/defaults.mjs
const defaultProps = {
  store: {
    required: true,
    type: Object
  },
  stripe: Boolean,
  tooltipEffect: String,
  context: {
    default: () => ({}),
    type: Object
  },
  rowClassName: [String, Function],
  rowStyle: [Object, Function],
  fixed: {
    type: String,
    default: ""
  },
  highlight: Boolean
};


//# sourceMappingURL=defaults.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table/src/table-body/index.mjs












var TableBody = (0,external_Vue_.defineComponent)({
  name: "ElTableBody",
  props: defaultProps,
  setup(props) {
    const instance = (0,external_Vue_.getCurrentInstance)();
    const parent = (0,external_Vue_.inject)(TABLE_INJECTION_KEY);
    const ns = (0,use_namespace/* useNamespace */.s)("table");
    const { wrappedRowRender, tooltipContent, tooltipTrigger } = useRender(props);
    const { onColumnsChange, onScrollableChange } = useLayoutObserver(parent);
    (0,external_Vue_.watch)(props.store.states.hoverRow, (newVal, oldVal) => {
      if (!props.store.states.isComplex.value || !shared/* isClient */.C5)
        return;
      let raf = window.requestAnimationFrame;
      if (!raf) {
        raf = (fn) => window.setTimeout(fn, 16);
      }
      raf(() => {
        var _a;
        const rows = (_a = instance == null ? void 0 : instance.vnode.el) == null ? void 0 : _a.querySelectorAll(`.${ns.e("row")}`);
        const oldRow = rows[oldVal];
        const newRow = rows[newVal];
        if (oldRow) {
          (0,dom_style/* removeClass */.IV)(oldRow, "hover-row");
        }
        if (newRow) {
          (0,dom_style/* addClass */.cn)(newRow, "hover-row");
        }
      });
    });
    (0,external_Vue_.onUnmounted)(() => {
      var _a;
      (_a = removePopper) == null ? void 0 : _a();
    });
    (0,external_Vue_.onUpdated)(() => {
      var _a;
      (_a = removePopper) == null ? void 0 : _a();
    });
    return {
      ns,
      onColumnsChange,
      onScrollableChange,
      wrappedRowRender,
      tooltipContent,
      tooltipTrigger
    };
  },
  render() {
    const { wrappedRowRender, store } = this;
    const data = store.states.data.value || [];
    return (0,external_Vue_.h)("tbody", {}, [
      data.reduce((acc, row) => {
        return acc.concat(wrappedRowRender(row, acc.length));
      }, [])
    ]);
  }
});


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table/src/h-helper.mjs


function hColgroup(props) {
  const isAuto = props.tableLayout === "auto";
  let columns = props.columns || [];
  if (isAuto) {
    if (columns.every((column) => column.width === void 0)) {
      columns = [];
    }
  }
  const getPropsData = (column) => {
    const propsData = {
      key: `${props.tableLayout}_${column.id}`,
      style: {},
      name: void 0
    };
    if (isAuto) {
      propsData.style = {
        width: `${column.width}px`
      };
    } else {
      propsData.name = column.id;
    }
    return propsData;
  };
  return (0,external_Vue_.h)("colgroup", {}, columns.map((column) => (0,external_Vue_.h)("col", getPropsData(column))));
}
hColgroup.props = ["columns", "tableLayout"];


//# sourceMappingURL=h-helper.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table/src/table-footer/mapState-helper.mjs



function useMapState() {
  const table = (0,external_Vue_.inject)(TABLE_INJECTION_KEY);
  const store = table == null ? void 0 : table.store;
  const leftFixedLeafCount = (0,external_Vue_.computed)(() => {
    return store.states.fixedLeafColumnsLength.value;
  });
  const rightFixedLeafCount = (0,external_Vue_.computed)(() => {
    return store.states.rightFixedColumns.value.length;
  });
  const columnsCount = (0,external_Vue_.computed)(() => {
    return store.states.columns.value.length;
  });
  const leftFixedCount = (0,external_Vue_.computed)(() => {
    return store.states.fixedColumns.value.length;
  });
  const rightFixedCount = (0,external_Vue_.computed)(() => {
    return store.states.rightFixedColumns.value.length;
  });
  return {
    leftFixedLeafCount,
    rightFixedLeafCount,
    columnsCount,
    leftFixedCount,
    rightFixedCount,
    columns: store.states.columns
  };
}


//# sourceMappingURL=mapState-helper.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table/src/table-footer/style-helper.mjs





function style_helper_useStyle(props) {
  const { columns } = useMapState();
  const ns = (0,use_namespace/* useNamespace */.s)("table");
  const getCellClasses = (columns2, cellIndex) => {
    const column = columns2[cellIndex];
    const classes = [
      ns.e("cell"),
      column.id,
      column.align,
      column.labelClassName,
      ...getFixedColumnsClass(ns.b(), cellIndex, column.fixed, props.store)
    ];
    if (column.className) {
      classes.push(column.className);
    }
    if (!column.children) {
      classes.push(ns.is("leaf"));
    }
    return classes;
  };
  const getCellStyles = (column, cellIndex) => {
    const fixedStyle = getFixedColumnOffset(cellIndex, column.fixed, props.store);
    ensurePosition(fixedStyle, "left");
    ensurePosition(fixedStyle, "right");
    return fixedStyle;
  };
  return {
    getCellClasses,
    getCellStyles,
    columns
  };
}


//# sourceMappingURL=style-helper.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table/src/table-footer/index.mjs






var TableFooter = (0,external_Vue_.defineComponent)({
  name: "ElTableFooter",
  props: {
    fixed: {
      type: String,
      default: ""
    },
    store: {
      required: true,
      type: Object
    },
    summaryMethod: Function,
    sumText: String,
    border: Boolean,
    defaultSort: {
      type: Object,
      default: () => {
        return {
          prop: "",
          order: ""
        };
      }
    }
  },
  setup(props) {
    const { getCellClasses, getCellStyles, columns } = style_helper_useStyle(props);
    const ns = (0,use_namespace/* useNamespace */.s)("table");
    return {
      ns,
      getCellClasses,
      getCellStyles,
      columns
    };
  },
  render() {
    const {
      columns,
      getCellStyles,
      getCellClasses,
      summaryMethod,
      sumText,
      ns
    } = this;
    const data = this.store.states.data.value;
    let sums = [];
    if (summaryMethod) {
      sums = summaryMethod({
        columns,
        data
      });
    } else {
      columns.forEach((column, index) => {
        if (index === 0) {
          sums[index] = sumText;
          return;
        }
        const values = data.map((item) => Number(item[column.property]));
        const precisions = [];
        let notNumber = true;
        values.forEach((value) => {
          if (!Number.isNaN(+value)) {
            notNumber = false;
            const decimal = `${value}`.split(".")[1];
            precisions.push(decimal ? decimal.length : 0);
          }
        });
        const precision = Math.max.apply(null, precisions);
        if (!notNumber) {
          sums[index] = values.reduce((prev, curr) => {
            const value = Number(curr);
            if (!Number.isNaN(+value)) {
              return Number.parseFloat((prev + curr).toFixed(Math.min(precision, 20)));
            } else {
              return prev;
            }
          }, 0);
        } else {
          sums[index] = "";
        }
      });
    }
    return (0,external_Vue_.h)("table", {
      class: ns.e("footer"),
      cellspacing: "0",
      cellpadding: "0",
      border: "0"
    }, [
      hColgroup({
        columns
      }),
      (0,external_Vue_.h)("tbody", [
        (0,external_Vue_.h)("tr", {}, [
          ...columns.map((column, cellIndex) => (0,external_Vue_.h)("td", {
            key: cellIndex,
            colspan: column.colSpan,
            rowspan: column.rowSpan,
            class: getCellClasses(columns, cellIndex),
            style: getCellStyles(column, cellIndex)
          }, [
            (0,external_Vue_.h)("div", {
              class: ["cell", column.labelClassName]
            }, [sums[cellIndex]])
          ]))
        ])
      ])
    ]);
  }
});


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table/src/table/utils-helper.mjs
function utils_helper_useUtils(store) {
  const setCurrentRow = (row) => {
    store.commit("setCurrentRow", row);
  };
  const getSelectionRows = () => {
    return store.getSelectionRows();
  };
  const toggleRowSelection = (row, selected) => {
    store.toggleRowSelection(row, selected, false);
    store.updateAllSelected();
  };
  const clearSelection = () => {
    store.clearSelection();
  };
  const clearFilter = (columnKeys) => {
    store.clearFilter(columnKeys);
  };
  const toggleAllSelection = () => {
    store.commit("toggleAllSelection");
  };
  const toggleRowExpansion = (row, expanded) => {
    store.toggleRowExpansionAdapter(row, expanded);
  };
  const clearSort = () => {
    store.clearSort();
  };
  const sort = (prop, order) => {
    store.commit("sort", { prop, order });
  };
  return {
    setCurrentRow,
    getSelectionRows,
    toggleRowSelection,
    clearSelection,
    clearFilter,
    toggleAllSelection,
    toggleRowExpansion,
    clearSort,
    sort
  };
}


//# sourceMappingURL=utils-helper.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table/src/table/style-helper.mjs








function table_style_helper_useStyle(props, layout, store, table) {
  const isHidden = (0,external_Vue_.ref)(false);
  const renderExpanded = (0,external_Vue_.ref)(null);
  const resizeProxyVisible = (0,external_Vue_.ref)(false);
  const setDragVisible = (visible) => {
    resizeProxyVisible.value = visible;
  };
  const resizeState = (0,external_Vue_.ref)({
    width: null,
    height: null
  });
  const isGroup = (0,external_Vue_.ref)(false);
  const scrollbarViewStyle = {
    display: "block",
    verticalAlign: "middle"
  };
  const tableWidth = (0,external_Vue_.ref)();
  (0,external_Vue_.watchEffect)(() => {
    layout.setHeight(props.height);
  });
  (0,external_Vue_.watchEffect)(() => {
    layout.setMaxHeight(props.maxHeight);
  });
  (0,external_Vue_.watch)(() => [props.currentRowKey, store.states.rowKey], ([currentRowKey, rowKey]) => {
    if (!(0,external_Vue_.unref)(rowKey))
      return;
    store.setCurrentRowKey(`${currentRowKey}`);
  }, {
    immediate: true
  });
  (0,external_Vue_.watch)(() => props.data, (data) => {
    table.store.commit("setData", data);
  }, {
    immediate: true,
    deep: true
  });
  (0,external_Vue_.watchEffect)(() => {
    if (props.expandRowKeys) {
      store.setExpandRowKeysAdapter(props.expandRowKeys);
    }
  });
  const handleMouseLeave = () => {
    table.store.commit("setHoverRow", null);
    if (table.hoverState)
      table.hoverState = null;
  };
  const handleHeaderFooterMousewheel = (event, data) => {
    const { pixelX, pixelY } = data;
    if (Math.abs(pixelX) >= Math.abs(pixelY)) {
      table.refs.bodyWrapper.scrollLeft += data.pixelX / 5;
    }
  };
  const shouldUpdateHeight = (0,external_Vue_.computed)(() => {
    return props.height || props.maxHeight || store.states.fixedColumns.value.length > 0 || store.states.rightFixedColumns.value.length > 0;
  });
  const tableBodyStyles = (0,external_Vue_.computed)(() => {
    return {
      width: layout.bodyWidth.value ? `${layout.bodyWidth.value}px` : ""
    };
  });
  const doLayout = () => {
    if (shouldUpdateHeight.value) {
      layout.updateElsHeight();
    }
    layout.updateColumnsWidth();
    requestAnimationFrame(syncPostion);
  };
  (0,external_Vue_.onMounted)(async () => {
    await (0,external_Vue_.nextTick)();
    store.updateColumns();
    bindEvents();
    requestAnimationFrame(doLayout);
    const el = table.vnode.el;
    if (props.flexible && el && el.parentElement) {
      el.parentElement.style.minWidth = "0";
    }
    resizeState.value = {
      width: tableWidth.value = el.offsetWidth,
      height: el.offsetHeight
    };
    store.states.columns.value.forEach((column) => {
      if (column.filteredValue && column.filteredValue.length) {
        table.store.commit("filterChange", {
          column,
          values: column.filteredValue,
          silent: true
        });
      }
    });
    table.$ready = true;
  });
  const setScrollClassByEl = (el, className) => {
    if (!el)
      return;
    const classList = Array.from(el.classList).filter((item) => !item.startsWith("is-scrolling-"));
    classList.push(layout.scrollX.value ? className : "is-scrolling-none");
    el.className = classList.join(" ");
  };
  const setScrollClass = (className) => {
    const { tableWrapper } = table.refs;
    setScrollClassByEl(tableWrapper, className);
  };
  const hasScrollClass = (className) => {
    const { tableWrapper } = table.refs;
    return !!(tableWrapper && tableWrapper.classList.contains(className));
  };
  const syncPostion = function() {
    if (!table.refs.scrollBarRef)
      return;
    if (!layout.scrollX.value) {
      const scrollingNoneClass = "is-scrolling-none";
      if (!hasScrollClass(scrollingNoneClass)) {
        setScrollClass(scrollingNoneClass);
      }
      return;
    }
    const scrollContainer = table.refs.scrollBarRef.wrap$;
    if (!scrollContainer)
      return;
    const { scrollLeft, offsetWidth, scrollWidth } = scrollContainer;
    const { headerWrapper, footerWrapper } = table.refs;
    if (headerWrapper)
      headerWrapper.scrollLeft = scrollLeft;
    if (footerWrapper)
      footerWrapper.scrollLeft = scrollLeft;
    const maxScrollLeftPosition = scrollWidth - offsetWidth - 1;
    if (scrollLeft >= maxScrollLeftPosition) {
      setScrollClass("is-scrolling-right");
    } else if (scrollLeft === 0) {
      setScrollClass("is-scrolling-left");
    } else {
      setScrollClass("is-scrolling-middle");
    }
  };
  const bindEvents = () => {
    if (!table.refs.scrollBarRef)
      return;
    if (table.refs.scrollBarRef.wrap$) {
      (0,core/* useEventListener */.ORN)(table.refs.scrollBarRef.wrap$, "scroll", syncPostion, {
        passive: true
      });
    }
    if (props.fit) {
      (0,core/* useResizeObserver */.yU7)(table.vnode.el, resizeListener);
    } else {
      (0,core/* useEventListener */.ORN)(window, "resize", resizeListener);
    }
  };
  const resizeListener = () => {
    if (!table.$ready)
      return;
    let shouldUpdateLayout = false;
    const el = table.vnode.el;
    const { width: oldWidth, height: oldHeight } = resizeState.value;
    const width = tableWidth.value = el.offsetWidth;
    if (oldWidth !== width) {
      shouldUpdateLayout = true;
    }
    const height2 = el.offsetHeight;
    if ((props.height || shouldUpdateHeight.value) && oldHeight !== height2) {
      shouldUpdateLayout = true;
    }
    if (shouldUpdateLayout) {
      resizeState.value = {
        width,
        height: height2
      };
      doLayout();
    }
  };
  const tableSize = (0,use_common_props/* useSize */.tH)();
  const bodyWidth = (0,external_Vue_.computed)(() => {
    const { bodyWidth: bodyWidth_, scrollY, gutterWidth } = layout;
    return bodyWidth_.value ? `${bodyWidth_.value - (scrollY.value ? gutterWidth : 0)}px` : "";
  });
  const tableLayout = (0,external_Vue_.computed)(() => {
    if (props.maxHeight)
      return "fixed";
    return props.tableLayout;
  });
  function calcMaxHeight(maxHeight, footerHeight, headerHeight) {
    const parsedMaxHeight = parseHeight(maxHeight);
    const tableHeaderHeight = props.showHeader ? headerHeight : 0;
    if (parsedMaxHeight === null)
      return;
    if ((0,shared_esm_bundler/* isString */.HD)(parsedMaxHeight)) {
      return `calc(${parsedMaxHeight} - ${footerHeight}px - ${tableHeaderHeight}px)`;
    }
    return parsedMaxHeight - footerHeight - tableHeaderHeight;
  }
  const height = (0,external_Vue_.computed)(() => {
    const headerHeight = layout.headerHeight.value || 0;
    const bodyHeight2 = layout.bodyHeight.value;
    const footerHeight = layout.footerHeight.value || 0;
    if (props.height) {
      return bodyHeight2 ? bodyHeight2 : void 0;
    } else if (props.maxHeight) {
      return calcMaxHeight(props.maxHeight, footerHeight, headerHeight);
    }
    return void 0;
  });
  const bodyHeight = (0,external_Vue_.computed)(() => {
    const headerHeight = layout.headerHeight.value || 0;
    const bodyHeight2 = layout.bodyHeight.value;
    const footerHeight = layout.footerHeight.value || 0;
    if (props.height) {
      return {
        height: bodyHeight2 ? `${bodyHeight2}px` : ""
      };
    } else if (props.maxHeight) {
      const maxHeight = calcMaxHeight(props.maxHeight, footerHeight, headerHeight);
      if (maxHeight !== null) {
        return {
          "max-height": `${maxHeight}${(0,shared/* isNumber */.hj)(maxHeight) ? "px" : ""}`
        };
      }
    }
    return {};
  });
  const emptyBlockStyle = (0,external_Vue_.computed)(() => {
    if (props.data && props.data.length)
      return null;
    let height2 = "100%";
    if (layout.appendHeight.value) {
      height2 = `calc(100% - ${layout.appendHeight.value}px)`;
    }
    return {
      width: tableWidth.value ? `${tableWidth.value}px` : "",
      height: height2
    };
  });
  const handleFixedMousewheel = (event, data) => {
    const bodyWrapper = table.refs.bodyWrapper;
    if (Math.abs(data.spinY) > 0) {
      const currentScrollTop = bodyWrapper.scrollTop;
      if (data.pixelY < 0 && currentScrollTop !== 0) {
        event.preventDefault();
      }
      if (data.pixelY > 0 && bodyWrapper.scrollHeight - bodyWrapper.clientHeight > currentScrollTop) {
        event.preventDefault();
      }
      bodyWrapper.scrollTop += Math.ceil(data.pixelY / 5);
    } else {
      bodyWrapper.scrollLeft += Math.ceil(data.pixelX / 5);
    }
  };
  const fixedHeight = (0,external_Vue_.computed)(() => {
    if (props.maxHeight) {
      if (props.showSummary) {
        return {
          bottom: 0
        };
      }
      return {
        bottom: layout.scrollX.value && props.data.length ? `${layout.gutterWidth}px` : ""
      };
    } else {
      if (props.showSummary) {
        return {
          height: layout.tableHeight.value ? `${layout.tableHeight.value}px` : ""
        };
      }
      return {
        height: layout.viewportHeight.value ? `${layout.viewportHeight.value}px` : ""
      };
    }
  });
  const fixedBodyHeight = (0,external_Vue_.computed)(() => {
    if (props.height) {
      return {
        height: layout.fixedBodyHeight.value ? `${layout.fixedBodyHeight.value}px` : ""
      };
    } else if (props.maxHeight) {
      let maxHeight = parseHeight(props.maxHeight);
      if (typeof maxHeight === "number") {
        maxHeight = layout.scrollX.value ? maxHeight - layout.gutterWidth : maxHeight;
        if (props.showHeader) {
          maxHeight -= layout.headerHeight.value;
        }
        maxHeight -= layout.footerHeight.value;
        return {
          "max-height": `${maxHeight}px`
        };
      }
    }
    return {};
  });
  return {
    isHidden,
    renderExpanded,
    setDragVisible,
    isGroup,
    handleMouseLeave,
    handleHeaderFooterMousewheel,
    tableSize,
    bodyHeight,
    height,
    emptyBlockStyle,
    handleFixedMousewheel,
    fixedHeight,
    fixedBodyHeight,
    resizeProxyVisible,
    bodyWidth,
    resizeState,
    doLayout,
    tableBodyStyles,
    tableLayout,
    scrollbarViewStyle
  };
}


//# sourceMappingURL=style-helper.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table/src/table/defaults.mjs
var defaults_defaultProps = {
  data: {
    type: Array,
    default: () => {
      return [];
    }
  },
  size: String,
  width: [String, Number],
  height: [String, Number],
  maxHeight: [String, Number],
  fit: {
    type: Boolean,
    default: true
  },
  stripe: Boolean,
  border: Boolean,
  rowKey: [String, Function],
  showHeader: {
    type: Boolean,
    default: true
  },
  showSummary: Boolean,
  sumText: String,
  summaryMethod: Function,
  rowClassName: [String, Function],
  rowStyle: [Object, Function],
  cellClassName: [String, Function],
  cellStyle: [Object, Function],
  headerRowClassName: [String, Function],
  headerRowStyle: [Object, Function],
  headerCellClassName: [String, Function],
  headerCellStyle: [Object, Function],
  highlightCurrentRow: Boolean,
  currentRowKey: [String, Number],
  emptyText: String,
  expandRowKeys: Array,
  defaultExpandAll: Boolean,
  defaultSort: Object,
  tooltipEffect: String,
  spanMethod: Function,
  selectOnIndeterminate: {
    type: Boolean,
    default: true
  },
  indent: {
    type: Number,
    default: 16
  },
  treeProps: {
    type: Object,
    default: () => {
      return {
        hasChildren: "hasChildren",
        children: "children"
      };
    }
  },
  lazy: Boolean,
  load: Function,
  style: {
    type: Object,
    default: () => ({})
  },
  className: {
    type: String,
    default: ""
  },
  tableLayout: {
    type: String,
    default: "fixed"
  },
  scrollbarAlwaysOn: {
    type: Boolean,
    default: false
  },
  flexible: Boolean
};


//# sourceMappingURL=defaults.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table/src/composables/use-scrollbar.mjs




const useScrollbar = () => {
  const scrollBarRef = (0,external_Vue_.ref)();
  const scrollTo = (options, yCoord) => {
    const scrollbar = scrollBarRef.value;
    if (scrollbar) {
      scrollbar.scrollTo(options, yCoord);
    }
  };
  const setScrollPosition = (position, offset) => {
    const scrollbar = scrollBarRef.value;
    if (scrollbar && (0,shared/* isNumber */.hj)(offset) && ["Top", "Left"].includes(position)) {
      scrollbar[`setScroll${position}`](offset);
    }
  };
  const setScrollTop = (top) => setScrollPosition("Top", top);
  const setScrollLeft = (left) => setScrollPosition("Left", left);
  return {
    scrollBarRef,
    scrollTo,
    setScrollTop,
    setScrollLeft
  };
};


//# sourceMappingURL=use-scrollbar.mjs.map

// EXTERNAL MODULE: ./node_modules/normalize-wheel-es/dist/index.mjs
var normalize_wheel_es_dist = __webpack_require__(69693);
;// CONCATENATED MODULE: ./node_modules/element-plus/es/directives/mousewheel/index.mjs


const mousewheel = function(element, callback) {
  if (element && element.addEventListener) {
    const fn = function(event) {
      const normalized = (0,normalize_wheel_es_dist/* default */.Z)(event);
      callback && Reflect.apply(callback, this, [event, normalized]);
    };
    element.addEventListener("wheel", fn, { passive: true });
  }
};
const Mousewheel = {
  beforeMount(el, binding) {
    mousewheel(el, binding.value);
  }
};


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table/src/table.mjs





















let tableIdSeed = 1;
const table_sfc_main = (0,external_Vue_.defineComponent)({
  name: "ElTable",
  directives: {
    Mousewheel: Mousewheel
  },
  components: {
    TableHeader: TableHeader,
    TableBody: TableBody,
    TableFooter: TableFooter,
    ElScrollbar: ElScrollbar,
    hColgroup: hColgroup
  },
  props: defaults_defaultProps,
  emits: [
    "select",
    "select-all",
    "selection-change",
    "cell-mouse-enter",
    "cell-mouse-leave",
    "cell-contextmenu",
    "cell-click",
    "cell-dblclick",
    "row-click",
    "row-contextmenu",
    "row-dblclick",
    "header-click",
    "header-contextmenu",
    "sort-change",
    "filter-change",
    "current-change",
    "header-dragend",
    "expand-change"
  ],
  setup(props) {
    const { t } = useLocale();
    const ns = (0,use_namespace/* useNamespace */.s)("table");
    const table = (0,external_Vue_.getCurrentInstance)();
    (0,external_Vue_.provide)(TABLE_INJECTION_KEY, table);
    const store = createStore(table, props);
    table.store = store;
    const layout = new TableLayout({
      store: table.store,
      table,
      fit: props.fit,
      showHeader: props.showHeader
    });
    table.layout = layout;
    const isEmpty = (0,external_Vue_.computed)(() => (store.states.data.value || []).length === 0);
    const {
      setCurrentRow,
      getSelectionRows,
      toggleRowSelection,
      clearSelection,
      clearFilter,
      toggleAllSelection,
      toggleRowExpansion,
      clearSort,
      sort
    } = utils_helper_useUtils(store);
    const {
      isHidden,
      renderExpanded,
      setDragVisible,
      isGroup,
      handleMouseLeave,
      handleHeaderFooterMousewheel,
      tableSize,
      bodyHeight,
      height,
      emptyBlockStyle,
      handleFixedMousewheel,
      fixedHeight,
      fixedBodyHeight,
      resizeProxyVisible,
      bodyWidth,
      resizeState,
      doLayout,
      tableBodyStyles,
      tableLayout,
      scrollbarViewStyle
    } = table_style_helper_useStyle(props, layout, store, table);
    const { scrollBarRef, scrollTo, setScrollLeft, setScrollTop } = useScrollbar();
    const debouncedUpdateLayout = (0,debounce/* default */.Z)(doLayout, 50);
    const tableId = `el-table_${tableIdSeed++}`;
    table.tableId = tableId;
    table.state = {
      isGroup,
      resizeState,
      doLayout,
      debouncedUpdateLayout
    };
    const computedSumText = (0,external_Vue_.computed)(() => props.sumText || t("el.table.sumText"));
    const computedEmptyText = (0,external_Vue_.computed)(() => {
      return props.emptyText || t("el.table.emptyText");
    });
    return {
      ns,
      layout,
      store,
      handleHeaderFooterMousewheel,
      handleMouseLeave,
      tableId,
      tableSize,
      isHidden,
      isEmpty,
      renderExpanded,
      resizeProxyVisible,
      resizeState,
      isGroup,
      bodyWidth,
      bodyHeight,
      height,
      tableBodyStyles,
      emptyBlockStyle,
      debouncedUpdateLayout,
      handleFixedMousewheel,
      fixedHeight,
      fixedBodyHeight,
      setCurrentRow,
      getSelectionRows,
      toggleRowSelection,
      clearSelection,
      clearFilter,
      toggleAllSelection,
      toggleRowExpansion,
      clearSort,
      doLayout,
      sort,
      t,
      setDragVisible,
      context: table,
      computedSumText,
      computedEmptyText,
      tableLayout,
      scrollbarViewStyle,
      scrollBarRef,
      scrollTo,
      setScrollLeft,
      setScrollTop
    };
  }
});
const table_hoisted_1 = ["data-prefix"];
const table_hoisted_2 = {
  ref: "hiddenColumns",
  class: "hidden-columns"
};
function table_sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_hColgroup = (0,external_Vue_.resolveComponent)("hColgroup");
  const _component_table_header = (0,external_Vue_.resolveComponent)("table-header");
  const _component_table_body = (0,external_Vue_.resolveComponent)("table-body");
  const _component_el_scrollbar = (0,external_Vue_.resolveComponent)("el-scrollbar");
  const _component_table_footer = (0,external_Vue_.resolveComponent)("table-footer");
  const _directive_mousewheel = (0,external_Vue_.resolveDirective)("mousewheel");
  return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
    ref: "tableWrapper",
    class: (0,external_Vue_.normalizeClass)([
      {
        [_ctx.ns.m("fit")]: _ctx.fit,
        [_ctx.ns.m("striped")]: _ctx.stripe,
        [_ctx.ns.m("border")]: _ctx.border || _ctx.isGroup,
        [_ctx.ns.m("hidden")]: _ctx.isHidden,
        [_ctx.ns.m("group")]: _ctx.isGroup,
        [_ctx.ns.m("fluid-height")]: _ctx.maxHeight,
        [_ctx.ns.m("scrollable-x")]: _ctx.layout.scrollX.value,
        [_ctx.ns.m("scrollable-y")]: _ctx.layout.scrollY.value,
        [_ctx.ns.m("enable-row-hover")]: !_ctx.store.states.isComplex.value,
        [_ctx.ns.m("enable-row-transition")]: (_ctx.store.states.data.value || []).length !== 0 && (_ctx.store.states.data.value || []).length < 100,
        "has-footer": _ctx.showSummary
      },
      _ctx.ns.m(_ctx.tableSize),
      _ctx.className,
      _ctx.ns.b(),
      _ctx.ns.m(`layout-${_ctx.tableLayout}`)
    ]),
    style: (0,external_Vue_.normalizeStyle)(_ctx.style),
    "data-prefix": _ctx.ns.namespace.value,
    onMouseleave: _cache[0] || (_cache[0] = ($event) => _ctx.handleMouseLeave())
  }, [
    (0,external_Vue_.createElementVNode)("div", {
      class: (0,external_Vue_.normalizeClass)(_ctx.ns.e("inner-wrapper"))
    }, [
      (0,external_Vue_.createElementVNode)("div", table_hoisted_2, [
        (0,external_Vue_.renderSlot)(_ctx.$slots, "default")
      ], 512),
      _ctx.showHeader && _ctx.tableLayout === "fixed" ? (0,external_Vue_.withDirectives)(((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
        key: 0,
        ref: "headerWrapper",
        class: (0,external_Vue_.normalizeClass)(_ctx.ns.e("header-wrapper"))
      }, [
        (0,external_Vue_.createElementVNode)("table", {
          ref: "tableHeader",
          class: (0,external_Vue_.normalizeClass)(_ctx.ns.e("header")),
          style: (0,external_Vue_.normalizeStyle)(_ctx.tableBodyStyles),
          border: "0",
          cellpadding: "0",
          cellspacing: "0"
        }, [
          (0,external_Vue_.createVNode)(_component_hColgroup, {
            columns: _ctx.store.states.columns.value,
            "table-layout": _ctx.tableLayout
          }, null, 8, ["columns", "table-layout"]),
          (0,external_Vue_.createVNode)(_component_table_header, {
            ref: "tableHeaderRef",
            border: _ctx.border,
            "default-sort": _ctx.defaultSort,
            store: _ctx.store,
            onSetDragVisible: _ctx.setDragVisible
          }, null, 8, ["border", "default-sort", "store", "onSetDragVisible"])
        ], 6)
      ], 2)), [
        [_directive_mousewheel, _ctx.handleHeaderFooterMousewheel]
      ]) : (0,external_Vue_.createCommentVNode)("v-if", true),
      (0,external_Vue_.createElementVNode)("div", {
        ref: "bodyWrapper",
        style: (0,external_Vue_.normalizeStyle)(_ctx.bodyHeight),
        class: (0,external_Vue_.normalizeClass)(_ctx.ns.e("body-wrapper"))
      }, [
        (0,external_Vue_.createVNode)(_component_el_scrollbar, {
          ref: "scrollBarRef",
          height: _ctx.maxHeight ? void 0 : _ctx.height,
          "max-height": _ctx.maxHeight ? _ctx.height : void 0,
          "view-style": _ctx.scrollbarViewStyle,
          always: _ctx.scrollbarAlwaysOn
        }, {
          default: (0,external_Vue_.withCtx)(() => [
            (0,external_Vue_.createElementVNode)("table", {
              ref: "tableBody",
              class: (0,external_Vue_.normalizeClass)(_ctx.ns.e("body")),
              cellspacing: "0",
              cellpadding: "0",
              border: "0",
              style: (0,external_Vue_.normalizeStyle)({
                width: _ctx.bodyWidth,
                tableLayout: _ctx.tableLayout
              })
            }, [
              (0,external_Vue_.createVNode)(_component_hColgroup, {
                columns: _ctx.store.states.columns.value,
                "table-layout": _ctx.tableLayout
              }, null, 8, ["columns", "table-layout"]),
              _ctx.showHeader && _ctx.tableLayout === "auto" ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(_component_table_header, {
                key: 0,
                border: _ctx.border,
                "default-sort": _ctx.defaultSort,
                store: _ctx.store,
                onSetDragVisible: _ctx.setDragVisible
              }, null, 8, ["border", "default-sort", "store", "onSetDragVisible"])) : (0,external_Vue_.createCommentVNode)("v-if", true),
              (0,external_Vue_.createVNode)(_component_table_body, {
                context: _ctx.context,
                highlight: _ctx.highlightCurrentRow,
                "row-class-name": _ctx.rowClassName,
                "tooltip-effect": _ctx.tooltipEffect,
                "row-style": _ctx.rowStyle,
                store: _ctx.store,
                stripe: _ctx.stripe
              }, null, 8, ["context", "highlight", "row-class-name", "tooltip-effect", "row-style", "store", "stripe"])
            ], 6),
            _ctx.isEmpty ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
              key: 0,
              ref: "emptyBlock",
              style: (0,external_Vue_.normalizeStyle)(_ctx.emptyBlockStyle),
              class: (0,external_Vue_.normalizeClass)(_ctx.ns.e("empty-block"))
            }, [
              (0,external_Vue_.createElementVNode)("span", {
                class: (0,external_Vue_.normalizeClass)(_ctx.ns.e("empty-text"))
              }, [
                (0,external_Vue_.renderSlot)(_ctx.$slots, "empty", {}, () => [
                  (0,external_Vue_.createTextVNode)((0,external_Vue_.toDisplayString)(_ctx.computedEmptyText), 1)
                ])
              ], 2)
            ], 6)) : (0,external_Vue_.createCommentVNode)("v-if", true),
            _ctx.$slots.append ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
              key: 1,
              ref: "appendWrapper",
              class: (0,external_Vue_.normalizeClass)(_ctx.ns.e("append-wrapper"))
            }, [
              (0,external_Vue_.renderSlot)(_ctx.$slots, "append")
            ], 2)) : (0,external_Vue_.createCommentVNode)("v-if", true)
          ]),
          _: 3
        }, 8, ["height", "max-height", "view-style", "always"])
      ], 6),
      _ctx.border || _ctx.isGroup ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
        key: 1,
        class: (0,external_Vue_.normalizeClass)(_ctx.ns.e("border-left-patch"))
      }, null, 2)) : (0,external_Vue_.createCommentVNode)("v-if", true)
    ], 2),
    _ctx.showSummary ? (0,external_Vue_.withDirectives)(((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
      key: 0,
      ref: "footerWrapper",
      class: (0,external_Vue_.normalizeClass)(_ctx.ns.e("footer-wrapper"))
    }, [
      (0,external_Vue_.createVNode)(_component_table_footer, {
        border: _ctx.border,
        "default-sort": _ctx.defaultSort,
        store: _ctx.store,
        style: (0,external_Vue_.normalizeStyle)(_ctx.tableBodyStyles),
        "sum-text": _ctx.computedSumText,
        "summary-method": _ctx.summaryMethod
      }, null, 8, ["border", "default-sort", "store", "style", "sum-text", "summary-method"])
    ], 2)), [
      [external_Vue_.vShow, !_ctx.isEmpty],
      [_directive_mousewheel, _ctx.handleHeaderFooterMousewheel]
    ]) : (0,external_Vue_.createCommentVNode)("v-if", true),
    (0,external_Vue_.withDirectives)((0,external_Vue_.createElementVNode)("div", {
      ref: "resizeProxy",
      class: (0,external_Vue_.normalizeClass)(_ctx.ns.e("column-resize-proxy"))
    }, null, 2), [
      [external_Vue_.vShow, _ctx.resizeProxyVisible]
    ])
  ], 46, table_hoisted_1);
}
var Table = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(table_sfc_main, [["render", table_sfc_render], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/table/src/table.vue"]]);


//# sourceMappingURL=table.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table/src/config.mjs







const defaultClassNames = {
  selection: "table-column--selection",
  expand: "table__expand-column"
};
const cellStarts = {
  default: {
    order: ""
  },
  selection: {
    width: 48,
    minWidth: 48,
    realWidth: 48,
    order: ""
  },
  expand: {
    width: 48,
    minWidth: 48,
    realWidth: 48,
    order: ""
  },
  index: {
    width: 48,
    minWidth: 48,
    realWidth: 48,
    order: ""
  }
};
const getDefaultClassName = (type) => {
  return defaultClassNames[type] || "";
};
const cellForced = {
  selection: {
    renderHeader({ store }) {
      function isDisabled() {
        return store.states.data.value && store.states.data.value.length === 0;
      }
      return (0,external_Vue_.h)(components_checkbox/* ElCheckbox */.Xb, {
        disabled: isDisabled(),
        size: store.states.tableSize.value,
        indeterminate: store.states.selection.value.length > 0 && !store.states.isAllSelected.value,
        "onUpdate:modelValue": store.toggleAllSelection,
        modelValue: store.states.isAllSelected.value
      });
    },
    renderCell({
      row,
      column,
      store,
      $index
    }) {
      return (0,external_Vue_.h)(components_checkbox/* ElCheckbox */.Xb, {
        disabled: column.selectable ? !column.selectable.call(null, row, $index) : false,
        size: store.states.tableSize.value,
        onChange: () => {
          store.commit("rowSelectedChanged", row);
        },
        onClick: (event) => event.stopPropagation(),
        modelValue: store.isSelected(row)
      });
    },
    sortable: false,
    resizable: false
  },
  index: {
    renderHeader({ column }) {
      return column.label || "#";
    },
    renderCell({
      column,
      $index
    }) {
      let i = $index + 1;
      const index = column.index;
      if (typeof index === "number") {
        i = $index + index;
      } else if (typeof index === "function") {
        i = index($index);
      }
      return (0,external_Vue_.h)("div", {}, [i]);
    },
    sortable: false
  },
  expand: {
    renderHeader({ column }) {
      return column.label || "";
    },
    renderCell({
      row,
      store,
      expanded
    }) {
      const { ns } = store;
      const classes = [ns.e("expand-icon")];
      if (expanded) {
        classes.push(ns.em("expand-icon", "expanded"));
      }
      const callback = function(e) {
        e.stopPropagation();
        store.toggleRowExpansion(row);
      };
      return (0,external_Vue_.h)("div", {
        class: classes,
        onClick: callback
      }, {
        default: () => {
          return [
            (0,external_Vue_.h)(components_icon/* ElIcon */.gn, null, {
              default: () => {
                return [(0,external_Vue_.h)(dist/* ArrowRight */.olP)];
              }
            })
          ];
        }
      });
    },
    sortable: false,
    resizable: false
  }
};
function defaultRenderCell({
  row,
  column,
  $index
}) {
  var _a;
  const property = column.property;
  const value = property && (0,objects/* getProp */.WJ)(row, property).value;
  if (column && column.formatter) {
    return column.formatter(row, column, value, $index);
  }
  return ((_a = value == null ? void 0 : value.toString) == null ? void 0 : _a.call(value)) || "";
}
function treeCellPrefix({
  row,
  treeNode,
  store
}, createPlacehoder = false) {
  const { ns } = store;
  if (!treeNode) {
    if (createPlacehoder) {
      return [
        (0,external_Vue_.h)("span", {
          class: ns.e("placeholder")
        })
      ];
    }
    return null;
  }
  const ele = [];
  const callback = function(e) {
    e.stopPropagation();
    store.loadOrToggle(row);
  };
  if (treeNode.indent) {
    ele.push((0,external_Vue_.h)("span", {
      class: ns.e("indent"),
      style: { "padding-left": `${treeNode.indent}px` }
    }));
  }
  if (typeof treeNode.expanded === "boolean" && !treeNode.noLazyChildren) {
    const expandClasses = [
      ns.e("expand-icon"),
      treeNode.expanded ? ns.em("expand-icon", "expanded") : ""
    ];
    let icon = dist/* ArrowRight */.olP;
    if (treeNode.loading) {
      icon = dist/* Loading */.gbz;
    }
    ele.push((0,external_Vue_.h)("div", {
      class: expandClasses,
      onClick: callback
    }, {
      default: () => {
        return [
          (0,external_Vue_.h)(components_icon/* ElIcon */.gn, { class: { [ns.is("loading")]: treeNode.loading } }, {
            default: () => [(0,external_Vue_.h)(icon)]
          })
        ];
      }
    }));
  } else {
    ele.push((0,external_Vue_.h)("span", {
      class: ns.e("placeholder")
    }));
  }
  return ele;
}


//# sourceMappingURL=config.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table/src/table-column/watcher-helper.mjs





function getAllAliases(props, aliases) {
  return props.reduce((prev, cur) => {
    prev[cur] = cur;
    return prev;
  }, aliases);
}
function watcher_helper_useWatcher(owner, props_) {
  const instance = (0,external_Vue_.getCurrentInstance)();
  const registerComplexWatchers = () => {
    const props = ["fixed"];
    const aliases = {
      realWidth: "width",
      realMinWidth: "minWidth"
    };
    const allAliases = getAllAliases(props, aliases);
    Object.keys(allAliases).forEach((key) => {
      const columnKey = aliases[key];
      if ((0,shared_esm_bundler/* hasOwn */.RI)(props_, columnKey)) {
        (0,external_Vue_.watch)(() => props_[columnKey], (newVal) => {
          let value = newVal;
          if (columnKey === "width" && key === "realWidth") {
            value = parseWidth(newVal);
          }
          if (columnKey === "minWidth" && key === "realMinWidth") {
            value = parseMinWidth(newVal);
          }
          instance.columnConfig.value[columnKey] = value;
          instance.columnConfig.value[key] = value;
          const updateColumns = columnKey === "fixed";
          owner.value.store.scheduleLayout(updateColumns);
        });
      }
    });
  };
  const registerNormalWatchers = () => {
    const props = [
      "label",
      "filters",
      "filterMultiple",
      "sortable",
      "index",
      "formatter",
      "className",
      "labelClassName",
      "showOverflowTooltip"
    ];
    const aliases = {
      property: "prop",
      align: "realAlign",
      headerAlign: "realHeaderAlign"
    };
    const allAliases = getAllAliases(props, aliases);
    Object.keys(allAliases).forEach((key) => {
      const columnKey = aliases[key];
      if ((0,shared_esm_bundler/* hasOwn */.RI)(props_, columnKey)) {
        (0,external_Vue_.watch)(() => props_[columnKey], (newVal) => {
          instance.columnConfig.value[key] = newVal;
        });
      }
    });
  };
  return {
    registerComplexWatchers,
    registerNormalWatchers
  };
}


//# sourceMappingURL=watcher-helper.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table/src/table-column/render-helper.mjs








function render_helper_useRender(props, slots, owner) {
  const instance = (0,external_Vue_.getCurrentInstance)();
  const columnId = (0,external_Vue_.ref)("");
  const isSubColumn = (0,external_Vue_.ref)(false);
  const realAlign = (0,external_Vue_.ref)();
  const realHeaderAlign = (0,external_Vue_.ref)();
  const ns = (0,use_namespace/* useNamespace */.s)("table");
  (0,external_Vue_.watchEffect)(() => {
    realAlign.value = props.align ? `is-${props.align}` : null;
    realAlign.value;
  });
  (0,external_Vue_.watchEffect)(() => {
    realHeaderAlign.value = props.headerAlign ? `is-${props.headerAlign}` : realAlign.value;
    realHeaderAlign.value;
  });
  const columnOrTableParent = (0,external_Vue_.computed)(() => {
    let parent = instance.vnode.vParent || instance.parent;
    while (parent && !parent.tableId && !parent.columnId) {
      parent = parent.vnode.vParent || parent.parent;
    }
    return parent;
  });
  const hasTreeColumn = (0,external_Vue_.computed)(() => {
    const { store } = instance.parent;
    if (!store)
      return false;
    const { treeData } = store.states;
    const treeDataValue = treeData.value;
    return treeDataValue && Object.keys(treeDataValue).length > 0;
  });
  const realWidth = (0,external_Vue_.ref)(parseWidth(props.width));
  const realMinWidth = (0,external_Vue_.ref)(parseMinWidth(props.minWidth));
  const setColumnWidth = (column) => {
    if (realWidth.value)
      column.width = realWidth.value;
    if (realMinWidth.value) {
      column.minWidth = realMinWidth.value;
    }
    if (!column.minWidth) {
      column.minWidth = 80;
    }
    column.realWidth = Number(column.width === void 0 ? column.minWidth : column.width);
    return column;
  };
  const setColumnForcedProps = (column) => {
    const type = column.type;
    const source = cellForced[type] || {};
    Object.keys(source).forEach((prop) => {
      const value = source[prop];
      if (prop !== "className" && value !== void 0) {
        column[prop] = value;
      }
    });
    const className = getDefaultClassName(type);
    if (className) {
      const forceClass = `${(0,external_Vue_.unref)(ns.namespace)}-${className}`;
      column.className = column.className ? `${column.className} ${forceClass}` : forceClass;
    }
    return column;
  };
  const checkSubColumn = (children) => {
    if (Array.isArray(children)) {
      children.forEach((child) => check(child));
    } else {
      check(children);
    }
    function check(item) {
      var _a;
      if (((_a = item == null ? void 0 : item.type) == null ? void 0 : _a.name) === "ElTableColumn") {
        item.vParent = instance;
      }
    }
  };
  const setColumnRenders = (column) => {
    if (props.renderHeader) {
      (0,error/* debugWarn */.N)("TableColumn", "Comparing to render-header, scoped-slot header is easier to use. We recommend users to use scoped-slot header.");
    } else if (column.type !== "selection") {
      column.renderHeader = (scope) => {
        instance.columnConfig.value["label"];
        const renderHeader = slots.header;
        return renderHeader ? renderHeader(scope) : column.label;
      };
    }
    let originRenderCell = column.renderCell;
    const hasTreeColumnValue = hasTreeColumn.value;
    if (column.type === "expand") {
      column.renderCell = (data) => (0,external_Vue_.h)("div", {
        class: "cell"
      }, [originRenderCell(data)]);
      owner.value.renderExpanded = (data) => {
        return slots.default ? slots.default(data) : slots.default;
      };
    } else {
      originRenderCell = originRenderCell || defaultRenderCell;
      column.renderCell = (data) => {
        let children = null;
        if (slots.default) {
          const vnodes = slots.default(data);
          children = vnodes.some((v) => v.type !== external_Vue_.Comment) ? vnodes : originRenderCell(data);
        } else {
          children = originRenderCell(data);
        }
        const shouldCreatePlaceholder = hasTreeColumnValue && data.cellIndex === 0;
        const prefix = treeCellPrefix(data, shouldCreatePlaceholder);
        const props2 = {
          class: "cell",
          style: {}
        };
        if (column.showOverflowTooltip) {
          props2.class = `${props2.class} ${(0,external_Vue_.unref)(ns.namespace)}-tooltip`;
          props2.style = {
            width: `${(data.column.realWidth || Number(data.column.width)) - 1}px`
          };
        }
        checkSubColumn(children);
        return (0,external_Vue_.h)("div", props2, [prefix, children]);
      };
    }
    return column;
  };
  const getPropsData = (...propsKey) => {
    return propsKey.reduce((prev, cur) => {
      if (Array.isArray(cur)) {
        cur.forEach((key) => {
          prev[key] = props[key];
        });
      }
      return prev;
    }, {});
  };
  const getColumnElIndex = (children, child) => {
    return Array.prototype.indexOf.call(children, child);
  };
  return {
    columnId,
    realAlign,
    isSubColumn,
    realHeaderAlign,
    columnOrTableParent,
    setColumnWidth,
    setColumnForcedProps,
    setColumnRenders,
    getPropsData,
    getColumnElIndex
  };
}


//# sourceMappingURL=render-helper.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table/src/table-column/defaults.mjs
var table_column_defaults_defaultProps = {
  type: {
    type: String,
    default: "default"
  },
  label: String,
  className: String,
  labelClassName: String,
  property: String,
  prop: String,
  width: {
    type: [String, Number],
    default: ""
  },
  minWidth: {
    type: [String, Number],
    default: ""
  },
  renderHeader: Function,
  sortable: {
    type: [Boolean, String],
    default: false
  },
  sortMethod: Function,
  sortBy: [String, Function, Array],
  resizable: {
    type: Boolean,
    default: true
  },
  columnKey: String,
  align: String,
  headerAlign: String,
  showTooltipWhenOverflow: Boolean,
  showOverflowTooltip: Boolean,
  fixed: [Boolean, String],
  formatter: Function,
  selectable: Function,
  reserveSelection: Boolean,
  filterMethod: Function,
  filteredValue: Array,
  filters: Array,
  filterPlacement: String,
  filterMultiple: {
    type: Boolean,
    default: true
  },
  index: [Number, Function],
  sortOrders: {
    type: Array,
    default: () => {
      return ["ascending", "descending", null];
    },
    validator: (val) => {
      return val.every((order) => ["ascending", "descending", null].includes(order));
    }
  }
};


//# sourceMappingURL=defaults.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table/src/table-column/index.mjs










let columnIdSeed = 1;
var ElTableColumn = (0,external_Vue_.defineComponent)({
  name: "ElTableColumn",
  components: {
    ElCheckbox: components_checkbox/* ElCheckbox */.Xb
  },
  props: table_column_defaults_defaultProps,
  setup(props, { slots }) {
    const instance = (0,external_Vue_.getCurrentInstance)();
    const columnConfig = (0,external_Vue_.ref)({});
    const owner = (0,external_Vue_.computed)(() => {
      let parent2 = instance.parent;
      while (parent2 && !parent2.tableId) {
        parent2 = parent2.parent;
      }
      return parent2;
    });
    const { registerNormalWatchers, registerComplexWatchers } = watcher_helper_useWatcher(owner, props);
    const {
      columnId,
      isSubColumn,
      realHeaderAlign,
      columnOrTableParent,
      setColumnWidth,
      setColumnForcedProps,
      setColumnRenders,
      getPropsData,
      getColumnElIndex,
      realAlign
    } = render_helper_useRender(props, slots, owner);
    const parent = columnOrTableParent.value;
    columnId.value = `${parent.tableId || parent.columnId}_column_${columnIdSeed++}`;
    (0,external_Vue_.onBeforeMount)(() => {
      isSubColumn.value = owner.value !== parent;
      const type = props.type || "default";
      const sortable = props.sortable === "" ? true : props.sortable;
      const defaults = {
        ...cellStarts[type],
        id: columnId.value,
        type,
        property: props.prop || props.property,
        align: realAlign,
        headerAlign: realHeaderAlign,
        showOverflowTooltip: props.showOverflowTooltip || props.showTooltipWhenOverflow,
        filterable: props.filters || props.filterMethod,
        filteredValue: [],
        filterPlacement: "",
        isColumnGroup: false,
        isSubColumn: false,
        filterOpened: false,
        sortable,
        index: props.index,
        rawColumnKey: instance.vnode.key
      };
      const basicProps = [
        "columnKey",
        "label",
        "className",
        "labelClassName",
        "type",
        "renderHeader",
        "formatter",
        "fixed",
        "resizable"
      ];
      const sortProps = ["sortMethod", "sortBy", "sortOrders"];
      const selectProps = ["selectable", "reserveSelection"];
      const filterProps = [
        "filterMethod",
        "filters",
        "filterMultiple",
        "filterOpened",
        "filteredValue",
        "filterPlacement"
      ];
      let column = getPropsData(basicProps, sortProps, selectProps, filterProps);
      column = mergeOptions(defaults, column);
      const chains = compose(setColumnRenders, setColumnWidth, setColumnForcedProps);
      column = chains(column);
      columnConfig.value = column;
      registerNormalWatchers();
      registerComplexWatchers();
    });
    (0,external_Vue_.onMounted)(() => {
      var _a;
      const parent2 = columnOrTableParent.value;
      const children = isSubColumn.value ? parent2.vnode.el.children : (_a = parent2.refs.hiddenColumns) == null ? void 0 : _a.children;
      const getColumnIndex = () => getColumnElIndex(children || [], instance.vnode.el);
      columnConfig.value.getColumnIndex = getColumnIndex;
      const columnIndex = getColumnIndex();
      columnIndex > -1 && owner.value.store.commit("insertColumn", columnConfig.value, isSubColumn.value ? parent2.columnConfig.value : null);
    });
    (0,external_Vue_.onBeforeUnmount)(() => {
      owner.value.store.commit("removeColumn", columnConfig.value, isSubColumn.value ? parent.columnConfig.value : null);
    });
    instance.columnId = columnId.value;
    instance.columnConfig = columnConfig;
    return;
  },
  render() {
    var _a, _b, _c;
    try {
      const renderDefault = (_b = (_a = this.$slots).default) == null ? void 0 : _b.call(_a, {
        row: {},
        column: {},
        $index: -1
      });
      const children = [];
      if (Array.isArray(renderDefault)) {
        for (const childNode of renderDefault) {
          if (((_c = childNode.type) == null ? void 0 : _c.name) === "ElTableColumn" || childNode.shapeFlag & 2) {
            children.push(childNode);
          } else if (childNode.type === external_Vue_.Fragment && Array.isArray(childNode.children)) {
            childNode.children.forEach((vnode2) => {
              if ((vnode2 == null ? void 0 : vnode2.patchFlag) !== 1024 && !(0,shared_esm_bundler/* isString */.HD)(vnode2 == null ? void 0 : vnode2.children)) {
                children.push(vnode2);
              }
            });
          }
        }
      }
      const vnode = (0,external_Vue_.h)("div", children);
      return vnode;
    } catch (e) {
      return (0,external_Vue_.h)("div", []);
    }
  }
});


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table/index.mjs






const ElTable = (0,install/* withInstall */.nz)(Table, {
  TableColumn: ElTableColumn
});
const table_ElTableColumn = (0,install/* withNoopInstall */.dp)(ElTableColumn);


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table-v2/src/constants.mjs
var SortOrder = /* @__PURE__ */ ((SortOrder2) => {
  SortOrder2["ASC"] = "asc";
  SortOrder2["DESC"] = "desc";
  return SortOrder2;
})(SortOrder || {});
var Alignment = /* @__PURE__ */ ((Alignment2) => {
  Alignment2["CENTER"] = "center";
  Alignment2["RIGHT"] = "right";
  return Alignment2;
})(Alignment || {});
var FixedDir = /* @__PURE__ */ ((FixedDir2) => {
  FixedDir2["LEFT"] = "left";
  FixedDir2["RIGHT"] = "right";
  return FixedDir2;
})(FixedDir || {});
const oppositeOrderMap = {
  ["asc" /* ASC */]: "desc" /* DESC */,
  ["desc" /* DESC */]: "asc" /* ASC */
};
const sortOrders = (/* unused pure expression or super */ null && (["asc" /* ASC */, "desc" /* DESC */]));


//# sourceMappingURL=constants.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table-v2/src/private.mjs
const placeholderSign = Symbol("placeholder");


//# sourceMappingURL=private.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table-v2/src/composables/utils.mjs
const calcColumnStyle = (column, fixedColumn, fixed) => {
  var _a;
  const flex = {
    flexGrow: 0,
    flexShrink: 0,
    ...fixed ? {} : {
      flexGrow: column.flexGrow || 0,
      flexShrink: column.flexShrink || 1
    }
  };
  if (!fixed) {
    flex.flexShrink = 1;
  }
  const style = {
    ...(_a = column.style) != null ? _a : {},
    ...flex,
    flexBasis: "auto",
    width: column.width
  };
  if (!fixedColumn) {
    if (column.maxWidth)
      style.maxWidth = column.maxWidth;
    if (column.minWidth)
      style.minWidth = column.minWidth;
  }
  return style;
};


//# sourceMappingURL=utils.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table-v2/src/composables/use-columns.mjs







function useColumns(props, columns, fixed) {
  const visibleColumns = (0,external_Vue_.computed)(() => {
    return (0,external_Vue_.unref)(columns).filter((column) => !column.hidden);
  });
  const fixedColumnsOnLeft = (0,external_Vue_.computed)(() => (0,external_Vue_.unref)(visibleColumns).filter((column) => column.fixed === "left" || column.fixed === true));
  const fixedColumnsOnRight = (0,external_Vue_.computed)(() => (0,external_Vue_.unref)(visibleColumns).filter((column) => column.fixed === "right"));
  const normalColumns = (0,external_Vue_.computed)(() => (0,external_Vue_.unref)(visibleColumns).filter((column) => !column.fixed));
  const mainColumns = (0,external_Vue_.computed)(() => {
    const ret = [];
    (0,external_Vue_.unref)(fixedColumnsOnLeft).forEach((column) => {
      ret.push({
        ...column,
        placeholderSign: placeholderSign
      });
    });
    (0,external_Vue_.unref)(normalColumns).forEach((column) => {
      ret.push(column);
    });
    (0,external_Vue_.unref)(fixedColumnsOnRight).forEach((column) => {
      ret.push({
        ...column,
        placeholderSign: placeholderSign
      });
    });
    return ret;
  });
  const hasFixedColumns = (0,external_Vue_.computed)(() => {
    return (0,external_Vue_.unref)(fixedColumnsOnLeft).length || (0,external_Vue_.unref)(fixedColumnsOnRight).length;
  });
  const columnsStyles = (0,external_Vue_.computed)(() => {
    const _columns = (0,external_Vue_.unref)(columns);
    return _columns.reduce((style, column) => {
      style[column.key] = calcColumnStyle(column, (0,external_Vue_.unref)(fixed), props.fixed);
      return style;
    }, {});
  });
  const columnsTotalWidth = (0,external_Vue_.computed)(() => {
    return (0,external_Vue_.unref)(visibleColumns).reduce((width, column) => width + column.width, 0);
  });
  const getColumn = (key) => {
    return (0,external_Vue_.unref)(columns).find((column) => column.key === key);
  };
  const getColumnStyle = (key) => {
    return (0,external_Vue_.unref)(columnsStyles)[key];
  };
  const updateColumnWidth = (column, width) => {
    column.width = width;
  };
  function onColumnSorted(e) {
    var _a;
    const { key } = e.currentTarget.dataset;
    if (!key)
      return;
    const { sortState, sortBy } = props;
    let order = SortOrder.ASC;
    if ((0,shared_esm_bundler/* isObject */.Kn)(sortState)) {
      order = oppositeOrderMap[sortState[key]];
    } else {
      order = oppositeOrderMap[sortBy.order];
    }
    (_a = props.onColumnSort) == null ? void 0 : _a.call(props, { column: getColumn(key), key, order });
  }
  return {
    columns,
    columnsStyles,
    columnsTotalWidth,
    fixedColumnsOnLeft,
    fixedColumnsOnRight,
    hasFixedColumns,
    mainColumns,
    normalColumns,
    visibleColumns,
    getColumn,
    getColumnStyle,
    updateColumnWidth,
    onColumnSorted
  };
}


//# sourceMappingURL=use-columns.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table-v2/src/composables/use-scrollbar.mjs


const use_scrollbar_useScrollbar = (props, {
  mainTableRef,
  leftTableRef,
  rightTableRef,
  onMaybeEndReached
}) => {
  const scrollPos = (0,external_Vue_.ref)({ scrollLeft: 0, scrollTop: 0 });
  function doScroll(params) {
    var _a, _b, _c;
    const { scrollTop } = params;
    (_a = mainTableRef.value) == null ? void 0 : _a.scrollTo(params);
    (_b = leftTableRef.value) == null ? void 0 : _b.scrollToTop(scrollTop);
    (_c = rightTableRef.value) == null ? void 0 : _c.scrollToTop(scrollTop);
  }
  function scrollTo(params) {
    scrollPos.value = params;
    doScroll(params);
  }
  function scrollToTop(scrollTop) {
    scrollPos.value.scrollTop = scrollTop;
    doScroll((0,external_Vue_.unref)(scrollPos));
  }
  function scrollToLeft(scrollLeft) {
    var _a, _b;
    scrollPos.value.scrollLeft = scrollLeft;
    (_b = (_a = mainTableRef.value) == null ? void 0 : _a.scrollTo) == null ? void 0 : _b.call(_a, (0,external_Vue_.unref)(scrollPos));
  }
  function onScroll(params) {
    var _a;
    scrollTo(params);
    (_a = props.onScroll) == null ? void 0 : _a.call(props, params);
  }
  function onVerticalScroll({ scrollTop }) {
    const { scrollTop: currentScrollTop } = (0,external_Vue_.unref)(scrollPos);
    if (scrollTop !== currentScrollTop)
      scrollToTop(scrollTop);
  }
  function scrollToRow(row, strategy = "auto") {
    var _a;
    (_a = mainTableRef.value) == null ? void 0 : _a.scrollToRow(row, strategy);
  }
  (0,external_Vue_.watch)(() => (0,external_Vue_.unref)(scrollPos).scrollTop, (cur, prev) => {
    if (cur > prev)
      onMaybeEndReached();
  });
  return {
    scrollPos,
    scrollTo,
    scrollToLeft,
    scrollToTop,
    scrollToRow,
    onScroll,
    onVerticalScroll
  };
};


//# sourceMappingURL=use-scrollbar.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table-v2/src/composables/use-row.mjs






const useRow = (props, { mainTableRef, leftTableRef, rightTableRef, onMaybeEndReached }) => {
  const vm = (0,external_Vue_.getCurrentInstance)();
  const { emit } = vm;
  const isResetting = (0,external_Vue_.shallowRef)(false);
  const hoveringRowKey = (0,external_Vue_.shallowRef)(null);
  const expandedRowKeys = (0,external_Vue_.ref)(props.defaultExpandedRowKeys || []);
  const lastRenderedRowIndex = (0,external_Vue_.ref)(-1);
  const resetIndex = (0,external_Vue_.shallowRef)(null);
  const rowHeights = (0,external_Vue_.ref)({});
  const pendingRowHeights = (0,external_Vue_.ref)({});
  const leftTableHeights = (0,external_Vue_.shallowRef)({});
  const mainTableHeights = (0,external_Vue_.shallowRef)({});
  const rightTableHeights = (0,external_Vue_.shallowRef)({});
  const isDynamic = (0,external_Vue_.computed)(() => (0,shared/* isNumber */.hj)(props.estimatedRowHeight));
  function onRowsRendered(params) {
    var _a;
    (_a = props.onRowsRendered) == null ? void 0 : _a.call(props, params);
    if (params.rowCacheEnd > (0,external_Vue_.unref)(lastRenderedRowIndex)) {
      lastRenderedRowIndex.value = params.rowCacheEnd;
    }
  }
  function onRowHovered({ hovered, rowKey }) {
    hoveringRowKey.value = hovered ? rowKey : null;
  }
  function onRowExpanded({
    expanded,
    rowData,
    rowIndex,
    rowKey
  }) {
    var _a, _b;
    const _expandedRowKeys = [...(0,external_Vue_.unref)(expandedRowKeys)];
    const currentKeyIndex = _expandedRowKeys.indexOf(rowKey);
    if (expanded) {
      if (currentKeyIndex === -1)
        _expandedRowKeys.push(rowKey);
    } else {
      if (currentKeyIndex > -1)
        _expandedRowKeys.splice(currentKeyIndex, 1);
    }
    expandedRowKeys.value = _expandedRowKeys;
    emit("update:expandedRowKeys", _expandedRowKeys);
    (_a = props.onRowExpand) == null ? void 0 : _a.call(props, {
      expanded,
      rowData,
      rowIndex,
      rowKey
    });
    (_b = props.onExpandedRowsChange) == null ? void 0 : _b.call(props, _expandedRowKeys);
  }
  const flushingRowHeights = (0,debounce/* default */.Z)(() => {
    var _a, _b, _c, _d;
    isResetting.value = true;
    rowHeights.value = { ...(0,external_Vue_.unref)(rowHeights), ...(0,external_Vue_.unref)(pendingRowHeights) };
    resetAfterIndex((0,external_Vue_.unref)(resetIndex), false);
    pendingRowHeights.value = {};
    resetIndex.value = null;
    (_a = mainTableRef.value) == null ? void 0 : _a.forceUpdate();
    (_b = leftTableRef.value) == null ? void 0 : _b.forceUpdate();
    (_c = rightTableRef.value) == null ? void 0 : _c.forceUpdate();
    (_d = vm.proxy) == null ? void 0 : _d.$forceUpdate();
    isResetting.value = false;
  }, 0);
  function resetAfterIndex(index, forceUpdate = false) {
    if (!(0,external_Vue_.unref)(isDynamic))
      return;
    [mainTableRef, leftTableRef, rightTableRef].forEach((tableRef) => {
      const table = (0,external_Vue_.unref)(tableRef);
      if (table)
        table.resetAfterRowIndex(index, forceUpdate);
    });
  }
  function resetHeights(rowKey, height, rowIdx) {
    const resetIdx = (0,external_Vue_.unref)(resetIndex);
    if (resetIdx === null) {
      resetIndex.value = rowIdx;
    } else {
      if (resetIdx > rowIdx) {
        resetIndex.value = rowIdx;
      }
    }
    pendingRowHeights.value[rowKey] = height;
  }
  function onRowHeightChange({ rowKey, height, rowIndex }, fixedDir) {
    if (!fixedDir) {
      mainTableHeights.value[rowKey] = height;
    } else {
      if (fixedDir === FixedDir.RIGHT) {
        rightTableHeights.value[rowKey] = height;
      } else {
        leftTableHeights.value[rowKey] = height;
      }
    }
    const maximumHeight = Math.max(...[leftTableHeights, rightTableHeights, mainTableHeights].map((records) => records.value[rowKey] || 0));
    if ((0,external_Vue_.unref)(rowHeights)[rowKey] !== maximumHeight) {
      resetHeights(rowKey, maximumHeight, rowIndex);
      flushingRowHeights();
    }
  }
  (0,external_Vue_.watch)(lastRenderedRowIndex, () => onMaybeEndReached());
  return {
    hoveringRowKey,
    expandedRowKeys,
    lastRenderedRowIndex,
    isDynamic,
    isResetting,
    rowHeights,
    resetAfterIndex,
    onRowExpanded,
    onRowHovered,
    onRowsRendered,
    onRowHeightChange
  };
};


//# sourceMappingURL=use-row.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table-v2/src/composables/use-data.mjs


const useData = (props, { expandedRowKeys, lastRenderedRowIndex, resetAfterIndex }) => {
  const depthMap = (0,external_Vue_.ref)({});
  const flattenedData = (0,external_Vue_.computed)(() => {
    const depths = {};
    const { data: data2, rowKey } = props;
    const _expandedRowKeys = (0,external_Vue_.unref)(expandedRowKeys);
    if (!_expandedRowKeys || !_expandedRowKeys.length)
      return data2;
    const array = [];
    const keysSet = /* @__PURE__ */ new Set();
    _expandedRowKeys.forEach((x) => keysSet.add(x));
    let copy = data2.slice();
    copy.forEach((x) => depths[x[rowKey]] = 0);
    while (copy.length > 0) {
      const item = copy.shift();
      array.push(item);
      if (keysSet.has(item[rowKey]) && Array.isArray(item.children) && item.children.length > 0) {
        copy = [...item.children, ...copy];
        item.children.forEach((child) => depths[child[rowKey]] = depths[item[rowKey]] + 1);
      }
    }
    depthMap.value = depths;
    return array;
  });
  const data = (0,external_Vue_.computed)(() => {
    const { data: data2, expandColumnKey } = props;
    return expandColumnKey ? (0,external_Vue_.unref)(flattenedData) : data2;
  });
  (0,external_Vue_.watch)(data, (val, prev) => {
    if (val !== prev) {
      lastRenderedRowIndex.value = -1;
      resetAfterIndex(0, true);
    }
  });
  return {
    data,
    depthMap
  };
};


//# sourceMappingURL=use-data.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table-v2/src/utils.mjs





const sumReducer = (sum2, num) => sum2 + num;
const sum = (listLike) => {
  return (0,shared_esm_bundler/* isArray */.kJ)(listLike) ? listLike.reduce(sumReducer, 0) : listLike;
};
const tryCall = (fLike, params, defaultRet = {}) => {
  return (0,shared_esm_bundler/* isFunction */.mf)(fLike) ? fLike(params) : fLike != null ? fLike : defaultRet;
};
const enforceUnit = (style) => {
  ;
  ["width", "maxWidth", "minWidth", "height"].forEach((key) => {
    style[key] = (0,dom_style/* addUnit */.Nn)(style[key]);
  });
  return style;
};
const componentToSlot = (ComponentLike) => (0,external_Vue_.isVNode)(ComponentLike) ? (props) => (0,external_Vue_.h)(ComponentLike, props) : ComponentLike;


//# sourceMappingURL=utils.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table-v2/src/composables/use-styles.mjs






const use_styles_useStyles = (props, {
  columnsTotalWidth,
  data,
  fixedColumnsOnLeft,
  fixedColumnsOnRight
}) => {
  const bodyWidth = (0,external_Vue_.computed)(() => {
    const { fixed, width, vScrollbarSize } = props;
    const ret = width - vScrollbarSize;
    return fixed ? Math.max(Math.round((0,external_Vue_.unref)(columnsTotalWidth)), ret) : ret;
  });
  const headerWidth = (0,external_Vue_.computed)(() => (0,external_Vue_.unref)(bodyWidth) + (props.fixed ? props.vScrollbarSize : 0));
  const mainTableHeight = (0,external_Vue_.computed)(() => {
    const { height = 0, maxHeight = 0, footerHeight: footerHeight2, hScrollbarSize } = props;
    if (maxHeight > 0) {
      const _fixedRowsHeight = (0,external_Vue_.unref)(fixedRowsHeight);
      const _rowsHeight = (0,external_Vue_.unref)(rowsHeight);
      const _headerHeight = (0,external_Vue_.unref)(headerHeight);
      const total = _headerHeight + _fixedRowsHeight + _rowsHeight + hScrollbarSize;
      return Math.min(total, maxHeight - footerHeight2);
    }
    return height - footerHeight2;
  });
  const rowsHeight = (0,external_Vue_.computed)(() => {
    const { rowHeight, estimatedRowHeight } = props;
    const _data = (0,external_Vue_.unref)(data);
    if ((0,shared/* isNumber */.hj)(estimatedRowHeight)) {
      return _data.length * estimatedRowHeight;
    }
    return _data.length * rowHeight;
  });
  const fixedTableHeight = (0,external_Vue_.computed)(() => {
    const { maxHeight } = props;
    const tableHeight = (0,external_Vue_.unref)(mainTableHeight);
    if ((0,shared/* isNumber */.hj)(maxHeight) && maxHeight > 0)
      return tableHeight;
    const totalHeight = (0,external_Vue_.unref)(rowsHeight) + (0,external_Vue_.unref)(headerHeight) + (0,external_Vue_.unref)(fixedRowsHeight);
    return Math.min(tableHeight, totalHeight);
  });
  const mapColumn = (column) => column.width;
  const leftTableWidth = (0,external_Vue_.computed)(() => sum((0,external_Vue_.unref)(fixedColumnsOnLeft).map(mapColumn)));
  const rightTableWidth = (0,external_Vue_.computed)(() => sum((0,external_Vue_.unref)(fixedColumnsOnRight).map(mapColumn)));
  const headerHeight = (0,external_Vue_.computed)(() => sum(props.headerHeight));
  const fixedRowsHeight = (0,external_Vue_.computed)(() => {
    var _a;
    return (((_a = props.fixedData) == null ? void 0 : _a.length) || 0) * props.rowHeight;
  });
  const windowHeight = (0,external_Vue_.computed)(() => {
    return (0,external_Vue_.unref)(mainTableHeight) - (0,external_Vue_.unref)(headerHeight) - (0,external_Vue_.unref)(fixedRowsHeight);
  });
  const rootStyle = (0,external_Vue_.computed)(() => {
    const { style = {}, height, width } = props;
    return enforceUnit({
      ...style,
      height,
      width
    });
  });
  const footerHeight = (0,external_Vue_.computed)(() => enforceUnit({ height: props.footerHeight }));
  const emptyStyle = (0,external_Vue_.computed)(() => ({
    top: (0,dom_style/* addUnit */.Nn)((0,external_Vue_.unref)(headerHeight)),
    bottom: (0,dom_style/* addUnit */.Nn)(props.footerHeight),
    width: (0,dom_style/* addUnit */.Nn)(props.width)
  }));
  return {
    bodyWidth,
    fixedTableHeight,
    mainTableHeight,
    leftTableWidth,
    rightTableWidth,
    headerWidth,
    rowsHeight,
    windowHeight,
    footerHeight,
    emptyStyle,
    rootStyle
  };
};


//# sourceMappingURL=use-styles.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table-v2/src/use-table.mjs










function useTable(props) {
  const mainTableRef = (0,external_Vue_.ref)();
  const leftTableRef = (0,external_Vue_.ref)();
  const rightTableRef = (0,external_Vue_.ref)();
  const {
    columns,
    columnsStyles,
    columnsTotalWidth,
    fixedColumnsOnLeft,
    fixedColumnsOnRight,
    hasFixedColumns,
    mainColumns,
    onColumnSorted
  } = useColumns(props, (0,external_Vue_.toRef)(props, "columns"), (0,external_Vue_.toRef)(props, "fixed"));
  const {
    scrollTo,
    scrollToLeft,
    scrollToTop,
    scrollToRow,
    onScroll,
    onVerticalScroll,
    scrollPos
  } = use_scrollbar_useScrollbar(props, {
    mainTableRef,
    leftTableRef,
    rightTableRef,
    onMaybeEndReached
  });
  const {
    expandedRowKeys,
    hoveringRowKey,
    lastRenderedRowIndex,
    isDynamic,
    isResetting,
    rowHeights,
    resetAfterIndex,
    onRowExpanded,
    onRowHeightChange,
    onRowHovered,
    onRowsRendered
  } = useRow(props, {
    mainTableRef,
    leftTableRef,
    rightTableRef,
    onMaybeEndReached
  });
  const { data, depthMap } = useData(props, {
    expandedRowKeys,
    lastRenderedRowIndex,
    resetAfterIndex
  });
  const {
    bodyWidth,
    fixedTableHeight,
    mainTableHeight,
    leftTableWidth,
    rightTableWidth,
    headerWidth,
    rowsHeight,
    windowHeight,
    footerHeight,
    emptyStyle,
    rootStyle
  } = use_styles_useStyles(props, {
    columnsTotalWidth,
    data,
    fixedColumnsOnLeft,
    fixedColumnsOnRight
  });
  const isScrolling = (0,external_Vue_.shallowRef)(false);
  const containerRef = (0,external_Vue_.ref)();
  const showEmpty = (0,external_Vue_.computed)(() => {
    const noData = (0,external_Vue_.unref)(data).length === 0;
    return (0,shared_esm_bundler/* isArray */.kJ)(props.fixedData) ? props.fixedData.length === 0 && noData : noData;
  });
  function getRowHeight(rowIndex) {
    const { estimatedRowHeight, rowHeight, rowKey } = props;
    if (!estimatedRowHeight)
      return rowHeight;
    return (0,external_Vue_.unref)(rowHeights)[(0,external_Vue_.unref)(data)[rowIndex][rowKey]] || estimatedRowHeight;
  }
  function onMaybeEndReached() {
    const { onEndReached } = props;
    if (!onEndReached)
      return;
    const { scrollTop } = (0,external_Vue_.unref)(scrollPos);
    const _totalHeight = (0,external_Vue_.unref)(rowsHeight);
    const clientHeight = (0,external_Vue_.unref)(windowHeight);
    const heightUntilEnd = _totalHeight - (scrollTop + clientHeight) + props.hScrollbarSize;
    if ((0,external_Vue_.unref)(lastRenderedRowIndex) >= 0 && _totalHeight !== (0,external_Vue_.unref)(rowsHeight)) {
      onEndReached(heightUntilEnd);
    }
  }
  (0,external_Vue_.watch)(() => props.expandedRowKeys, (val) => expandedRowKeys.value = val, {
    deep: true
  });
  return {
    columns,
    containerRef,
    mainTableRef,
    leftTableRef,
    rightTableRef,
    isDynamic,
    isResetting,
    isScrolling,
    hoveringRowKey,
    hasFixedColumns,
    columnsStyles,
    columnsTotalWidth,
    data,
    expandedRowKeys,
    depthMap,
    fixedColumnsOnLeft,
    fixedColumnsOnRight,
    mainColumns,
    bodyWidth,
    emptyStyle,
    rootStyle,
    headerWidth,
    footerHeight,
    mainTableHeight,
    fixedTableHeight,
    leftTableWidth,
    rightTableWidth,
    showEmpty,
    getRowHeight,
    onColumnSorted,
    onRowHovered,
    onRowExpanded,
    onRowsRendered,
    onRowHeightChange,
    scrollTo,
    scrollToLeft,
    scrollToTop,
    scrollToRow,
    onScroll,
    onVerticalScroll
  };
}


//# sourceMappingURL=use-table.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table-v2/src/tokens.mjs
const TableV2InjectionKey = Symbol("tableV2");


//# sourceMappingURL=tokens.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table-v2/src/common.mjs




const classType = String;
const columns = {
  type: (0,runtime/* definePropType */.Cq)(Array),
  required: true
};
const column = {
  type: (0,runtime/* definePropType */.Cq)(Object)
};
const fixedDataType = {
  type: (0,runtime/* definePropType */.Cq)(Array)
};
const dataType = {
  ...fixedDataType,
  required: true
};
const expandColumnKey = String;
const expandKeys = {
  type: (0,runtime/* definePropType */.Cq)(Array),
  default: () => (0,typescript/* mutable */.N)([])
};
const requiredNumber = {
  type: Number,
  required: true
};
const rowKey = {
  type: (0,runtime/* definePropType */.Cq)([String, Number, Symbol]),
  default: "id"
};
const styleType = {
  type: (0,runtime/* definePropType */.Cq)(Object)
};


//# sourceMappingURL=common.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table-v2/src/row.mjs






const tableV2RowProps = (0,runtime/* buildProps */.o8)({
  class: String,
  columns: columns,
  columnsStyles: {
    type: (0,runtime/* definePropType */.Cq)(Object),
    required: true
  },
  depth: Number,
  expandColumnKey: expandColumnKey,
  estimatedRowHeight: {
    ...virtualizedGridProps.estimatedRowHeight,
    default: void 0
  },
  isScrolling: Boolean,
  onRowExpand: {
    type: (0,runtime/* definePropType */.Cq)(Function)
  },
  onRowHover: {
    type: (0,runtime/* definePropType */.Cq)(Function)
  },
  onRowHeightChange: {
    type: (0,runtime/* definePropType */.Cq)(Function)
  },
  rowData: {
    type: (0,runtime/* definePropType */.Cq)(Object),
    required: true
  },
  rowEventHandlers: {
    type: (0,runtime/* definePropType */.Cq)(Object)
  },
  rowIndex: {
    type: Number,
    required: true
  },
  rowKey: rowKey,
  style: {
    type: (0,runtime/* definePropType */.Cq)(Object)
  }
});


//# sourceMappingURL=row.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table-v2/src/header.mjs




const requiredNumberType = {
  type: Number,
  required: true
};
const tableV2HeaderProps = (0,runtime/* buildProps */.o8)({
  class: String,
  columns: columns,
  fixedHeaderData: {
    type: (0,runtime/* definePropType */.Cq)(Array)
  },
  headerData: {
    type: (0,runtime/* definePropType */.Cq)(Array),
    required: true
  },
  headerHeight: {
    type: (0,runtime/* definePropType */.Cq)([Number, Array]),
    default: 50
  },
  rowWidth: requiredNumberType,
  rowHeight: {
    type: Number,
    default: 50
  },
  height: requiredNumberType,
  width: requiredNumberType
});


//# sourceMappingURL=header.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table-v2/src/grid.mjs








const tableV2GridProps = (0,runtime/* buildProps */.o8)({
  columns: columns,
  data: dataType,
  fixedData: fixedDataType,
  estimatedRowHeight: tableV2RowProps.estimatedRowHeight,
  width: requiredNumber,
  height: requiredNumber,
  headerWidth: requiredNumber,
  headerHeight: tableV2HeaderProps.headerHeight,
  bodyWidth: requiredNumber,
  rowHeight: requiredNumber,
  cache: virtualizedListProps.cache,
  useIsScrolling: Boolean,
  scrollbarAlwaysOn: virtualizedGridProps.scrollbarAlwaysOn,
  scrollbarStartGap: virtualizedGridProps.scrollbarStartGap,
  scrollbarEndGap: virtualizedGridProps.scrollbarEndGap,
  class: classType,
  style: styleType,
  containerStyle: styleType,
  getRowHeight: {
    type: (0,runtime/* definePropType */.Cq)(Function),
    required: true
  },
  rowKey: tableV2RowProps.rowKey,
  onRowsRendered: {
    type: (0,runtime/* definePropType */.Cq)(Function)
  },
  onScroll: {
    type: (0,runtime/* definePropType */.Cq)(Function)
  }
});


//# sourceMappingURL=grid.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table-v2/src/table.mjs









const tableV2Props = (0,runtime/* buildProps */.o8)({
  cache: tableV2GridProps.cache,
  estimatedRowHeight: tableV2RowProps.estimatedRowHeight,
  rowKey: rowKey,
  headerClass: {
    type: (0,runtime/* definePropType */.Cq)([
      String,
      Function
    ])
  },
  headerProps: {
    type: (0,runtime/* definePropType */.Cq)([
      Object,
      Function
    ])
  },
  headerCellProps: {
    type: (0,runtime/* definePropType */.Cq)([
      Object,
      Function
    ])
  },
  headerHeight: tableV2HeaderProps.headerHeight,
  footerHeight: {
    type: Number,
    default: 0
  },
  rowClass: {
    type: (0,runtime/* definePropType */.Cq)([String, Function])
  },
  rowProps: {
    type: (0,runtime/* definePropType */.Cq)([Object, Function])
  },
  rowHeight: {
    type: Number,
    default: 50
  },
  cellProps: {
    type: (0,runtime/* definePropType */.Cq)([
      Object,
      Function
    ])
  },
  columns: columns,
  data: dataType,
  dataGetter: {
    type: (0,runtime/* definePropType */.Cq)(Function)
  },
  fixedData: fixedDataType,
  expandColumnKey: tableV2RowProps.expandColumnKey,
  expandedRowKeys: expandKeys,
  defaultExpandedRowKeys: expandKeys,
  class: classType,
  fixed: Boolean,
  style: {
    type: (0,runtime/* definePropType */.Cq)(Object)
  },
  width: requiredNumber,
  height: requiredNumber,
  maxHeight: Number,
  useIsScrolling: Boolean,
  indentSize: {
    type: Number,
    default: 12
  },
  iconSize: {
    type: Number,
    default: 12
  },
  hScrollbarSize: virtualizedGridProps.hScrollbarSize,
  vScrollbarSize: virtualizedGridProps.vScrollbarSize,
  scrollbarAlwaysOn: virtualizedScrollbarProps.alwaysOn,
  sortBy: {
    type: (0,runtime/* definePropType */.Cq)(Object),
    default: () => ({})
  },
  sortState: {
    type: (0,runtime/* definePropType */.Cq)(Object),
    default: void 0
  },
  onColumnSort: {
    type: (0,runtime/* definePropType */.Cq)(Function)
  },
  onExpandedRowsChange: {
    type: (0,runtime/* definePropType */.Cq)(Function)
  },
  onEndReached: {
    type: (0,runtime/* definePropType */.Cq)(Function)
  },
  onRowExpand: tableV2RowProps.onRowExpand,
  onScroll: tableV2GridProps.onScroll,
  onRowsRendered: tableV2GridProps.onRowsRendered,
  rowEventHandlers: tableV2RowProps.rowEventHandlers
});


//# sourceMappingURL=table.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/virtual-list/src/hooks/use-grid-wheel.mjs




const useGridWheel = ({ atXEndEdge, atXStartEdge, atYEndEdge, atYStartEdge }, onWheelDelta) => {
  let frameHandle = null;
  let xOffset = 0;
  let yOffset = 0;
  const hasReachedEdge = (x, y) => {
    const xEdgeReached = x < 0 && atXStartEdge.value || x > 0 && atXEndEdge.value;
    const yEdgeReached = y < 0 && atYStartEdge.value || y > 0 && atYEndEdge.value;
    return xEdgeReached && yEdgeReached;
  };
  const onWheel = (e) => {
    cAF(frameHandle);
    let x = e.deltaX;
    let y = e.deltaY;
    if (Math.abs(x) > Math.abs(y)) {
      y = 0;
    } else {
      x = 0;
    }
    if (e.shiftKey && y !== 0) {
      x = y;
      y = 0;
    }
    if (hasReachedEdge(xOffset, yOffset) && hasReachedEdge(xOffset + x, yOffset + y))
      return;
    xOffset += x;
    yOffset += y;
    if (!isFirefox()) {
      e.preventDefault();
    }
    frameHandle = rAF(() => {
      onWheelDelta(xOffset, yOffset);
      xOffset = 0;
      yOffset = 0;
    });
  };
  return {
    hasReachedEdge,
    onWheel
  };
};


//# sourceMappingURL=use-grid-wheel.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/virtual-list/src/builders/build-grid.mjs














const createGrid = ({
  name,
  clearCache,
  getColumnPosition,
  getColumnStartIndexForOffset,
  getColumnStopIndexForStartIndex,
  getEstimatedTotalHeight,
  getEstimatedTotalWidth,
  getColumnOffset,
  getRowOffset,
  getRowPosition,
  getRowStartIndexForOffset,
  getRowStopIndexForStartIndex,
  initCache,
  injectToInstance,
  validateProps
}) => {
  return (0,external_Vue_.defineComponent)({
    name: name != null ? name : "ElVirtualList",
    props: virtualizedGridProps,
    emits: [ITEM_RENDER_EVT, SCROLL_EVT],
    setup(props, { emit, expose, slots }) {
      const ns = (0,use_namespace/* useNamespace */.s)("vl");
      validateProps(props);
      const instance = (0,external_Vue_.getCurrentInstance)();
      const cache = (0,external_Vue_.ref)(initCache(props, instance));
      injectToInstance == null ? void 0 : injectToInstance(instance, cache);
      const windowRef = (0,external_Vue_.ref)();
      const hScrollbar = (0,external_Vue_.ref)();
      const vScrollbar = (0,external_Vue_.ref)();
      const innerRef = (0,external_Vue_.ref)(null);
      const states = (0,external_Vue_.ref)({
        isScrolling: false,
        scrollLeft: (0,shared/* isNumber */.hj)(props.initScrollLeft) ? props.initScrollLeft : 0,
        scrollTop: (0,shared/* isNumber */.hj)(props.initScrollTop) ? props.initScrollTop : 0,
        updateRequested: false,
        xAxisScrollDir: FORWARD,
        yAxisScrollDir: FORWARD
      });
      const getItemStyleCache = useCache();
      const parsedHeight = (0,external_Vue_.computed)(() => Number.parseInt(`${props.height}`, 10));
      const parsedWidth = (0,external_Vue_.computed)(() => Number.parseInt(`${props.width}`, 10));
      const columnsToRender = (0,external_Vue_.computed)(() => {
        const { totalColumn, totalRow, columnCache } = props;
        const { isScrolling, xAxisScrollDir, scrollLeft } = (0,external_Vue_.unref)(states);
        if (totalColumn === 0 || totalRow === 0) {
          return [0, 0, 0, 0];
        }
        const startIndex = getColumnStartIndexForOffset(props, scrollLeft, (0,external_Vue_.unref)(cache));
        const stopIndex = getColumnStopIndexForStartIndex(props, startIndex, scrollLeft, (0,external_Vue_.unref)(cache));
        const cacheBackward = !isScrolling || xAxisScrollDir === BACKWARD ? Math.max(1, columnCache) : 1;
        const cacheForward = !isScrolling || xAxisScrollDir === FORWARD ? Math.max(1, columnCache) : 1;
        return [
          Math.max(0, startIndex - cacheBackward),
          Math.max(0, Math.min(totalColumn - 1, stopIndex + cacheForward)),
          startIndex,
          stopIndex
        ];
      });
      const rowsToRender = (0,external_Vue_.computed)(() => {
        const { totalColumn, totalRow, rowCache } = props;
        const { isScrolling, yAxisScrollDir, scrollTop } = (0,external_Vue_.unref)(states);
        if (totalColumn === 0 || totalRow === 0) {
          return [0, 0, 0, 0];
        }
        const startIndex = getRowStartIndexForOffset(props, scrollTop, (0,external_Vue_.unref)(cache));
        const stopIndex = getRowStopIndexForStartIndex(props, startIndex, scrollTop, (0,external_Vue_.unref)(cache));
        const cacheBackward = !isScrolling || yAxisScrollDir === BACKWARD ? Math.max(1, rowCache) : 1;
        const cacheForward = !isScrolling || yAxisScrollDir === FORWARD ? Math.max(1, rowCache) : 1;
        return [
          Math.max(0, startIndex - cacheBackward),
          Math.max(0, Math.min(totalRow - 1, stopIndex + cacheForward)),
          startIndex,
          stopIndex
        ];
      });
      const estimatedTotalHeight = (0,external_Vue_.computed)(() => getEstimatedTotalHeight(props, (0,external_Vue_.unref)(cache)));
      const estimatedTotalWidth = (0,external_Vue_.computed)(() => getEstimatedTotalWidth(props, (0,external_Vue_.unref)(cache)));
      const windowStyle = (0,external_Vue_.computed)(() => {
        var _a;
        return [
          {
            position: "relative",
            overflow: "hidden",
            WebkitOverflowScrolling: "touch",
            willChange: "transform"
          },
          {
            direction: props.direction,
            height: (0,shared/* isNumber */.hj)(props.height) ? `${props.height}px` : props.height,
            width: (0,shared/* isNumber */.hj)(props.width) ? `${props.width}px` : props.width
          },
          (_a = props.style) != null ? _a : {}
        ];
      });
      const innerStyle = (0,external_Vue_.computed)(() => {
        const width = `${(0,external_Vue_.unref)(estimatedTotalWidth)}px`;
        const height = `${(0,external_Vue_.unref)(estimatedTotalHeight)}px`;
        return {
          height,
          pointerEvents: (0,external_Vue_.unref)(states).isScrolling ? "none" : void 0,
          width
        };
      });
      const emitEvents = () => {
        const { totalColumn, totalRow } = props;
        if (totalColumn > 0 && totalRow > 0) {
          const [
            columnCacheStart,
            columnCacheEnd,
            columnVisibleStart,
            columnVisibleEnd
          ] = (0,external_Vue_.unref)(columnsToRender);
          const [rowCacheStart, rowCacheEnd, rowVisibleStart, rowVisibleEnd] = (0,external_Vue_.unref)(rowsToRender);
          emit(ITEM_RENDER_EVT, {
            columnCacheStart,
            columnCacheEnd,
            rowCacheStart,
            rowCacheEnd,
            columnVisibleStart,
            columnVisibleEnd,
            rowVisibleStart,
            rowVisibleEnd
          });
        }
        const {
          scrollLeft,
          scrollTop,
          updateRequested,
          xAxisScrollDir,
          yAxisScrollDir
        } = (0,external_Vue_.unref)(states);
        emit(SCROLL_EVT, {
          xAxisScrollDir,
          scrollLeft,
          yAxisScrollDir,
          scrollTop,
          updateRequested
        });
      };
      const onScroll = (e) => {
        const {
          clientHeight,
          clientWidth,
          scrollHeight,
          scrollLeft,
          scrollTop,
          scrollWidth
        } = e.currentTarget;
        const _states = (0,external_Vue_.unref)(states);
        if (_states.scrollTop === scrollTop && _states.scrollLeft === scrollLeft) {
          return;
        }
        let _scrollLeft = scrollLeft;
        if (isRTL(props.direction)) {
          switch (getRTLOffsetType()) {
            case RTL_OFFSET_NAG:
              _scrollLeft = -scrollLeft;
              break;
            case RTL_OFFSET_POS_DESC:
              _scrollLeft = scrollWidth - clientWidth - scrollLeft;
              break;
          }
        }
        states.value = {
          ..._states,
          isScrolling: true,
          scrollLeft: _scrollLeft,
          scrollTop: Math.max(0, Math.min(scrollTop, scrollHeight - clientHeight)),
          updateRequested: true,
          xAxisScrollDir: getScrollDir(_states.scrollLeft, _scrollLeft),
          yAxisScrollDir: getScrollDir(_states.scrollTop, scrollTop)
        };
        (0,external_Vue_.nextTick)(() => resetIsScrolling());
        onUpdated();
        emitEvents();
      };
      const onVerticalScroll = (distance, totalSteps) => {
        const height = (0,external_Vue_.unref)(parsedHeight);
        const offset = (estimatedTotalHeight.value - height) / totalSteps * distance;
        scrollTo({
          scrollTop: Math.min(estimatedTotalHeight.value - height, offset)
        });
      };
      const onHorizontalScroll = (distance, totalSteps) => {
        const width = (0,external_Vue_.unref)(parsedWidth);
        const offset = (estimatedTotalWidth.value - width) / totalSteps * distance;
        scrollTo({
          scrollLeft: Math.min(estimatedTotalWidth.value - width, offset)
        });
      };
      const { onWheel } = useGridWheel({
        atXStartEdge: (0,external_Vue_.computed)(() => states.value.scrollLeft <= 0),
        atXEndEdge: (0,external_Vue_.computed)(() => states.value.scrollLeft >= estimatedTotalWidth.value),
        atYStartEdge: (0,external_Vue_.computed)(() => states.value.scrollTop <= 0),
        atYEndEdge: (0,external_Vue_.computed)(() => states.value.scrollTop >= estimatedTotalHeight.value)
      }, (x, y) => {
        var _a, _b, _c, _d;
        (_b = (_a = hScrollbar.value) == null ? void 0 : _a.onMouseUp) == null ? void 0 : _b.call(_a);
        (_d = (_c = hScrollbar.value) == null ? void 0 : _c.onMouseUp) == null ? void 0 : _d.call(_c);
        const width = (0,external_Vue_.unref)(parsedWidth);
        const height = (0,external_Vue_.unref)(parsedHeight);
        scrollTo({
          scrollLeft: Math.min(states.value.scrollLeft + x, estimatedTotalWidth.value - width),
          scrollTop: Math.min(states.value.scrollTop + y, estimatedTotalHeight.value - height)
        });
      });
      const scrollTo = ({
        scrollLeft = states.value.scrollLeft,
        scrollTop = states.value.scrollTop
      }) => {
        scrollLeft = Math.max(scrollLeft, 0);
        scrollTop = Math.max(scrollTop, 0);
        const _states = (0,external_Vue_.unref)(states);
        if (scrollTop === _states.scrollTop && scrollLeft === _states.scrollLeft) {
          return;
        }
        states.value = {
          ..._states,
          xAxisScrollDir: getScrollDir(_states.scrollLeft, scrollLeft),
          yAxisScrollDir: getScrollDir(_states.scrollTop, scrollTop),
          scrollLeft,
          scrollTop,
          updateRequested: true
        };
        (0,external_Vue_.nextTick)(() => resetIsScrolling());
        onUpdated();
        emitEvents();
      };
      const scrollToItem = (rowIndex = 0, columnIdx = 0, alignment = AUTO_ALIGNMENT) => {
        const _states = (0,external_Vue_.unref)(states);
        columnIdx = Math.max(0, Math.min(columnIdx, props.totalColumn - 1));
        rowIndex = Math.max(0, Math.min(rowIndex, props.totalRow - 1));
        const scrollBarWidth = getScrollBarWidth();
        const _cache = (0,external_Vue_.unref)(cache);
        const estimatedHeight = getEstimatedTotalHeight(props, _cache);
        const estimatedWidth = getEstimatedTotalWidth(props, _cache);
        scrollTo({
          scrollLeft: getColumnOffset(props, columnIdx, alignment, _states.scrollLeft, _cache, estimatedWidth > props.width ? scrollBarWidth : 0),
          scrollTop: getRowOffset(props, rowIndex, alignment, _states.scrollTop, _cache, estimatedHeight > props.height ? scrollBarWidth : 0)
        });
      };
      const getItemStyle = (rowIndex, columnIndex) => {
        const { columnWidth, direction, rowHeight } = props;
        const itemStyleCache = getItemStyleCache.value(clearCache && columnWidth, clearCache && rowHeight, clearCache && direction);
        const key = `${rowIndex},${columnIndex}`;
        if ((0,shared_esm_bundler/* hasOwn */.RI)(itemStyleCache, key)) {
          return itemStyleCache[key];
        } else {
          const [, left] = getColumnPosition(props, columnIndex, (0,external_Vue_.unref)(cache));
          const _cache = (0,external_Vue_.unref)(cache);
          const rtl = isRTL(direction);
          const [height, top] = getRowPosition(props, rowIndex, _cache);
          const [width] = getColumnPosition(props, columnIndex, _cache);
          itemStyleCache[key] = {
            position: "absolute",
            left: rtl ? void 0 : `${left}px`,
            right: rtl ? `${left}px` : void 0,
            top: `${top}px`,
            height: `${height}px`,
            width: `${width}px`
          };
          return itemStyleCache[key];
        }
      };
      const resetIsScrolling = () => {
        states.value.isScrolling = false;
        (0,external_Vue_.nextTick)(() => {
          getItemStyleCache.value(-1, null, null);
        });
      };
      (0,external_Vue_.onMounted)(() => {
        if (!shared/* isClient */.C5)
          return;
        const { initScrollLeft, initScrollTop } = props;
        const windowElement = (0,external_Vue_.unref)(windowRef);
        if (windowElement) {
          if ((0,shared/* isNumber */.hj)(initScrollLeft)) {
            windowElement.scrollLeft = initScrollLeft;
          }
          if ((0,shared/* isNumber */.hj)(initScrollTop)) {
            windowElement.scrollTop = initScrollTop;
          }
        }
        emitEvents();
      });
      const onUpdated = () => {
        const { direction } = props;
        const { scrollLeft, scrollTop, updateRequested } = (0,external_Vue_.unref)(states);
        const windowElement = (0,external_Vue_.unref)(windowRef);
        if (updateRequested && windowElement) {
          if (direction === RTL) {
            switch (getRTLOffsetType()) {
              case RTL_OFFSET_NAG: {
                windowElement.scrollLeft = -scrollLeft;
                break;
              }
              case RTL_OFFSET_POS_ASC: {
                windowElement.scrollLeft = scrollLeft;
                break;
              }
              default: {
                const { clientWidth, scrollWidth } = windowElement;
                windowElement.scrollLeft = scrollWidth - clientWidth - scrollLeft;
                break;
              }
            }
          } else {
            windowElement.scrollLeft = Math.max(0, scrollLeft);
          }
          windowElement.scrollTop = Math.max(0, scrollTop);
        }
      };
      const { resetAfterColumnIndex, resetAfterRowIndex, resetAfter } = instance.proxy;
      expose({
        windowRef,
        innerRef,
        getItemStyleCache,
        scrollTo,
        scrollToItem,
        states,
        resetAfterColumnIndex,
        resetAfterRowIndex,
        resetAfter
      });
      const renderScrollbars = () => {
        const {
          scrollbarAlwaysOn,
          scrollbarStartGap,
          scrollbarEndGap,
          totalColumn,
          totalRow
        } = props;
        const width = (0,external_Vue_.unref)(parsedWidth);
        const height = (0,external_Vue_.unref)(parsedHeight);
        const estimatedWidth = (0,external_Vue_.unref)(estimatedTotalWidth);
        const estimatedHeight = (0,external_Vue_.unref)(estimatedTotalHeight);
        const { scrollLeft, scrollTop } = (0,external_Vue_.unref)(states);
        const horizontalScrollbar = (0,external_Vue_.h)(ScrollBar, {
          ref: hScrollbar,
          alwaysOn: scrollbarAlwaysOn,
          startGap: scrollbarStartGap,
          endGap: scrollbarEndGap,
          class: ns.e("horizontal"),
          clientSize: width,
          layout: "horizontal",
          onScroll: onHorizontalScroll,
          ratio: width * 100 / estimatedWidth,
          scrollFrom: scrollLeft / (estimatedWidth - width),
          total: totalRow,
          visible: true
        });
        const verticalScrollbar = (0,external_Vue_.h)(ScrollBar, {
          ref: vScrollbar,
          alwaysOn: scrollbarAlwaysOn,
          startGap: scrollbarStartGap,
          endGap: scrollbarEndGap,
          class: ns.e("vertical"),
          clientSize: height,
          layout: "vertical",
          onScroll: onVerticalScroll,
          ratio: height * 100 / estimatedHeight,
          scrollFrom: scrollTop / (estimatedHeight - height),
          total: totalColumn,
          visible: true
        });
        return {
          horizontalScrollbar,
          verticalScrollbar
        };
      };
      const renderItems = () => {
        var _a;
        const [columnStart, columnEnd] = (0,external_Vue_.unref)(columnsToRender);
        const [rowStart, rowEnd] = (0,external_Vue_.unref)(rowsToRender);
        const { data, totalColumn, totalRow, useIsScrolling, itemKey } = props;
        const children = [];
        if (totalRow > 0 && totalColumn > 0) {
          for (let row = rowStart; row <= rowEnd; row++) {
            for (let column = columnStart; column <= columnEnd; column++) {
              children.push((_a = slots.default) == null ? void 0 : _a.call(slots, {
                columnIndex: column,
                data,
                key: itemKey({ columnIndex: column, data, rowIndex: row }),
                isScrolling: useIsScrolling ? (0,external_Vue_.unref)(states).isScrolling : void 0,
                style: getItemStyle(row, column),
                rowIndex: row
              }));
            }
          }
        }
        return children;
      };
      const renderInner = () => {
        const Inner = (0,external_Vue_.resolveDynamicComponent)(props.innerElement);
        const children = renderItems();
        return [
          (0,external_Vue_.h)(Inner, {
            style: (0,external_Vue_.unref)(innerStyle),
            ref: innerRef
          }, !(0,shared_esm_bundler/* isString */.HD)(Inner) ? {
            default: () => children
          } : children)
        ];
      };
      const renderWindow = () => {
        const Container = (0,external_Vue_.resolveDynamicComponent)(props.containerElement);
        const { horizontalScrollbar, verticalScrollbar } = renderScrollbars();
        const Inner = renderInner();
        return (0,external_Vue_.h)("div", {
          key: 0,
          class: ns.e("wrapper")
        }, [
          (0,external_Vue_.h)(Container, {
            class: props.className,
            style: (0,external_Vue_.unref)(windowStyle),
            onScroll,
            onWheel,
            ref: windowRef
          }, !(0,shared_esm_bundler/* isString */.HD)(Container) ? { default: () => Inner } : Inner),
          horizontalScrollbar,
          verticalScrollbar
        ]);
      };
      return renderWindow;
    }
  });
};


//# sourceMappingURL=build-grid.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/virtual-list/src/components/dynamic-size-grid.mjs








const { max, min, floor } = Math;
const dynamic_size_grid_SCOPE = "ElDynamicSizeGrid";
const ACCESS_SIZER_KEY_MAP = {
  column: "columnWidth",
  row: "rowHeight"
};
const ACCESS_LAST_VISITED_KEY_MAP = {
  column: "lastVisitedColumnIndex",
  row: "lastVisitedRowIndex"
};
const dynamic_size_grid_getItemFromCache = (props, index, gridCache, type) => {
  const [cachedItems, sizer, lastVisited] = [
    gridCache[type],
    props[ACCESS_SIZER_KEY_MAP[type]],
    gridCache[ACCESS_LAST_VISITED_KEY_MAP[type]]
  ];
  if (index > lastVisited) {
    let offset = 0;
    if (lastVisited >= 0) {
      const item = cachedItems[lastVisited];
      offset = item.offset + item.size;
    }
    for (let i = lastVisited + 1; i <= index; i++) {
      const size = sizer(i);
      cachedItems[i] = {
        offset,
        size
      };
      offset += size;
    }
    gridCache[ACCESS_LAST_VISITED_KEY_MAP[type]] = index;
  }
  return cachedItems[index];
};
const dynamic_size_grid_bs = (props, gridCache, low, high, offset, type) => {
  while (low <= high) {
    const mid = low + floor((high - low) / 2);
    const currentOffset = dynamic_size_grid_getItemFromCache(props, mid, gridCache, type).offset;
    if (currentOffset === offset) {
      return mid;
    } else if (currentOffset < offset) {
      low = mid + 1;
    } else {
      high = mid - 1;
    }
  }
  return max(0, low - 1);
};
const dynamic_size_grid_es = (props, gridCache, idx, offset, type) => {
  const total = type === "column" ? props.totalColumn : props.totalRow;
  let exponent = 1;
  while (idx < total && dynamic_size_grid_getItemFromCache(props, idx, gridCache, type).offset < offset) {
    idx += exponent;
    exponent *= 2;
  }
  return dynamic_size_grid_bs(props, gridCache, floor(idx / 2), min(idx, total - 1), offset, type);
};
const dynamic_size_grid_findItem = (props, gridCache, offset, type) => {
  const [cache, lastVisitedIndex] = [
    gridCache[type],
    gridCache[ACCESS_LAST_VISITED_KEY_MAP[type]]
  ];
  const lastVisitedItemOffset = lastVisitedIndex > 0 ? cache[lastVisitedIndex].offset : 0;
  if (lastVisitedItemOffset >= offset) {
    return dynamic_size_grid_bs(props, gridCache, 0, lastVisitedIndex, offset, type);
  }
  return dynamic_size_grid_es(props, gridCache, max(0, lastVisitedIndex), offset, type);
};
const getEstimatedTotalHeight = ({ totalRow }, { estimatedRowHeight, lastVisitedRowIndex, row }) => {
  let sizeOfVisitedRows = 0;
  if (lastVisitedRowIndex >= totalRow) {
    lastVisitedRowIndex = totalRow - 1;
  }
  if (lastVisitedRowIndex >= 0) {
    const item = row[lastVisitedRowIndex];
    sizeOfVisitedRows = item.offset + item.size;
  }
  const unvisitedItems = totalRow - lastVisitedRowIndex - 1;
  const sizeOfUnvisitedItems = unvisitedItems * estimatedRowHeight;
  return sizeOfVisitedRows + sizeOfUnvisitedItems;
};
const getEstimatedTotalWidth = ({ totalColumn }, { column, estimatedColumnWidth, lastVisitedColumnIndex }) => {
  let sizeOfVisitedColumns = 0;
  if (lastVisitedColumnIndex > totalColumn) {
    lastVisitedColumnIndex = totalColumn - 1;
  }
  if (lastVisitedColumnIndex >= 0) {
    const item = column[lastVisitedColumnIndex];
    sizeOfVisitedColumns = item.offset + item.size;
  }
  const unvisitedItems = totalColumn - lastVisitedColumnIndex - 1;
  const sizeOfUnvisitedItems = unvisitedItems * estimatedColumnWidth;
  return sizeOfVisitedColumns + sizeOfUnvisitedItems;
};
const ACCESS_ESTIMATED_SIZE_KEY_MAP = {
  column: getEstimatedTotalWidth,
  row: getEstimatedTotalHeight
};
const dynamic_size_grid_getOffset = (props, index, alignment, scrollOffset, cache, type, scrollBarWidth) => {
  const [size, estimatedSizeAssociates] = [
    type === "row" ? props.height : props.width,
    ACCESS_ESTIMATED_SIZE_KEY_MAP[type]
  ];
  const item = dynamic_size_grid_getItemFromCache(props, index, cache, type);
  const estimatedSize = estimatedSizeAssociates(props, cache);
  const maxOffset = max(0, min(estimatedSize - size, item.offset));
  const minOffset = max(0, item.offset - size + scrollBarWidth + item.size);
  if (alignment === SMART_ALIGNMENT) {
    if (scrollOffset >= minOffset - size && scrollOffset <= maxOffset + size) {
      alignment = AUTO_ALIGNMENT;
    } else {
      alignment = CENTERED_ALIGNMENT;
    }
  }
  switch (alignment) {
    case START_ALIGNMENT: {
      return maxOffset;
    }
    case END_ALIGNMENT: {
      return minOffset;
    }
    case CENTERED_ALIGNMENT: {
      return Math.round(minOffset + (maxOffset - minOffset) / 2);
    }
    case AUTO_ALIGNMENT:
    default: {
      if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {
        return scrollOffset;
      } else if (minOffset > maxOffset) {
        return minOffset;
      } else if (scrollOffset < minOffset) {
        return minOffset;
      } else {
        return maxOffset;
      }
    }
  }
};
const DynamicSizeGrid = createGrid({
  name: "ElDynamicSizeGrid",
  getColumnPosition: (props, idx, cache) => {
    const item = dynamic_size_grid_getItemFromCache(props, idx, cache, "column");
    return [item.size, item.offset];
  },
  getRowPosition: (props, idx, cache) => {
    const item = dynamic_size_grid_getItemFromCache(props, idx, cache, "row");
    return [item.size, item.offset];
  },
  getColumnOffset: (props, columnIndex, alignment, scrollLeft, cache, scrollBarWidth) => dynamic_size_grid_getOffset(props, columnIndex, alignment, scrollLeft, cache, "column", scrollBarWidth),
  getRowOffset: (props, rowIndex, alignment, scrollTop, cache, scrollBarWidth) => dynamic_size_grid_getOffset(props, rowIndex, alignment, scrollTop, cache, "row", scrollBarWidth),
  getColumnStartIndexForOffset: (props, scrollLeft, cache) => dynamic_size_grid_findItem(props, cache, scrollLeft, "column"),
  getColumnStopIndexForStartIndex: (props, startIndex, scrollLeft, cache) => {
    const item = dynamic_size_grid_getItemFromCache(props, startIndex, cache, "column");
    const maxOffset = scrollLeft + props.width;
    let offset = item.offset + item.size;
    let stopIndex = startIndex;
    while (stopIndex < props.totalColumn - 1 && offset < maxOffset) {
      stopIndex++;
      offset += dynamic_size_grid_getItemFromCache(props, startIndex, cache, "column").size;
    }
    return stopIndex;
  },
  getEstimatedTotalHeight,
  getEstimatedTotalWidth,
  getRowStartIndexForOffset: (props, scrollTop, cache) => dynamic_size_grid_findItem(props, cache, scrollTop, "row"),
  getRowStopIndexForStartIndex: (props, startIndex, scrollTop, cache) => {
    const { totalRow, height } = props;
    const item = dynamic_size_grid_getItemFromCache(props, startIndex, cache, "row");
    const maxOffset = scrollTop + height;
    let offset = item.size + item.offset;
    let stopIndex = startIndex;
    while (stopIndex < totalRow - 1 && offset < maxOffset) {
      stopIndex++;
      offset += dynamic_size_grid_getItemFromCache(props, stopIndex, cache, "row").size;
    }
    return stopIndex;
  },
  injectToInstance: (instance, cache) => {
    const resetAfter = ({ columnIndex, rowIndex }, forceUpdate) => {
      var _a, _b;
      forceUpdate = (0,types/* isUndefined */.o8)(forceUpdate) ? true : forceUpdate;
      if ((0,shared/* isNumber */.hj)(columnIndex)) {
        cache.value.lastVisitedColumnIndex = Math.min(cache.value.lastVisitedColumnIndex, columnIndex - 1);
      }
      if ((0,shared/* isNumber */.hj)(rowIndex)) {
        cache.value.lastVisitedRowIndex = Math.min(cache.value.lastVisitedRowIndex, rowIndex - 1);
      }
      (_a = instance.exposed) == null ? void 0 : _a.getItemStyleCache.value(-1, null, null);
      if (forceUpdate)
        (_b = instance.proxy) == null ? void 0 : _b.$forceUpdate();
    };
    const resetAfterColumnIndex = (columnIndex, forceUpdate) => {
      resetAfter({
        columnIndex
      }, forceUpdate);
    };
    const resetAfterRowIndex = (rowIndex, forceUpdate) => {
      resetAfter({
        rowIndex
      }, forceUpdate);
    };
    Object.assign(instance.proxy, {
      resetAfterColumnIndex,
      resetAfterRowIndex,
      resetAfter
    });
  },
  initCache: ({
    estimatedColumnWidth = DEFAULT_DYNAMIC_LIST_ITEM_SIZE,
    estimatedRowHeight = DEFAULT_DYNAMIC_LIST_ITEM_SIZE
  }) => {
    const cache = {
      column: {},
      estimatedColumnWidth,
      estimatedRowHeight,
      lastVisitedColumnIndex: -1,
      lastVisitedRowIndex: -1,
      row: {}
    };
    return cache;
  },
  clearCache: false,
  validateProps: ({ columnWidth, rowHeight }) => {
    if (false) {}
  }
});


//# sourceMappingURL=dynamic-size-grid.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/virtual-list/src/components/fixed-size-grid.mjs






const fixed_size_grid_SCOPE = "ElFixedSizeGrid";
const FixedSizeGrid = createGrid({
  name: "ElFixedSizeGrid",
  getColumnPosition: ({ columnWidth }, index) => [
    columnWidth,
    index * columnWidth
  ],
  getRowPosition: ({ rowHeight }, index) => [
    rowHeight,
    index * rowHeight
  ],
  getEstimatedTotalHeight: ({ totalRow, rowHeight }) => rowHeight * totalRow,
  getEstimatedTotalWidth: ({ totalColumn, columnWidth }) => columnWidth * totalColumn,
  getColumnOffset: ({ totalColumn, columnWidth, width }, columnIndex, alignment, scrollLeft, _, scrollBarWidth) => {
    width = Number(width);
    const lastColumnOffset = Math.max(0, totalColumn * columnWidth - width);
    const maxOffset = Math.min(lastColumnOffset, columnIndex * columnWidth);
    const minOffset = Math.max(0, columnIndex * columnWidth - width + scrollBarWidth + columnWidth);
    if (alignment === "smart") {
      if (scrollLeft >= minOffset - width && scrollLeft <= maxOffset + width) {
        alignment = AUTO_ALIGNMENT;
      } else {
        alignment = CENTERED_ALIGNMENT;
      }
    }
    switch (alignment) {
      case START_ALIGNMENT:
        return maxOffset;
      case END_ALIGNMENT:
        return minOffset;
      case CENTERED_ALIGNMENT: {
        const middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);
        if (middleOffset < Math.ceil(width / 2)) {
          return 0;
        } else if (middleOffset > lastColumnOffset + Math.floor(width / 2)) {
          return lastColumnOffset;
        } else {
          return middleOffset;
        }
      }
      case AUTO_ALIGNMENT:
      default:
        if (scrollLeft >= minOffset && scrollLeft <= maxOffset) {
          return scrollLeft;
        } else if (minOffset > maxOffset) {
          return minOffset;
        } else if (scrollLeft < minOffset) {
          return minOffset;
        } else {
          return maxOffset;
        }
    }
  },
  getRowOffset: ({ rowHeight, height, totalRow }, rowIndex, align, scrollTop, _, scrollBarWidth) => {
    height = Number(height);
    const lastRowOffset = Math.max(0, totalRow * rowHeight - height);
    const maxOffset = Math.min(lastRowOffset, rowIndex * rowHeight);
    const minOffset = Math.max(0, rowIndex * rowHeight - height + scrollBarWidth + rowHeight);
    if (align === SMART_ALIGNMENT) {
      if (scrollTop >= minOffset - height && scrollTop <= maxOffset + height) {
        align = AUTO_ALIGNMENT;
      } else {
        align = CENTERED_ALIGNMENT;
      }
    }
    switch (align) {
      case START_ALIGNMENT:
        return maxOffset;
      case END_ALIGNMENT:
        return minOffset;
      case CENTERED_ALIGNMENT: {
        const middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);
        if (middleOffset < Math.ceil(height / 2)) {
          return 0;
        } else if (middleOffset > lastRowOffset + Math.floor(height / 2)) {
          return lastRowOffset;
        } else {
          return middleOffset;
        }
      }
      case AUTO_ALIGNMENT:
      default:
        if (scrollTop >= minOffset && scrollTop <= maxOffset) {
          return scrollTop;
        } else if (minOffset > maxOffset) {
          return minOffset;
        } else if (scrollTop < minOffset) {
          return minOffset;
        } else {
          return maxOffset;
        }
    }
  },
  getColumnStartIndexForOffset: ({ columnWidth, totalColumn }, scrollLeft) => Math.max(0, Math.min(totalColumn - 1, Math.floor(scrollLeft / columnWidth))),
  getColumnStopIndexForStartIndex: ({ columnWidth, totalColumn, width }, startIndex, scrollLeft) => {
    const left = startIndex * columnWidth;
    const visibleColumnsCount = Math.ceil((width + scrollLeft - left) / columnWidth);
    return Math.max(0, Math.min(totalColumn - 1, startIndex + visibleColumnsCount - 1));
  },
  getRowStartIndexForOffset: ({ rowHeight, totalRow }, scrollTop) => Math.max(0, Math.min(totalRow - 1, Math.floor(scrollTop / rowHeight))),
  getRowStopIndexForStartIndex: ({ rowHeight, totalRow, height }, startIndex, scrollTop) => {
    const top = startIndex * rowHeight;
    const numVisibleRows = Math.ceil((height + scrollTop - top) / rowHeight);
    return Math.max(0, Math.min(totalRow - 1, startIndex + numVisibleRows - 1));
  },
  initCache: () => void 0,
  clearCache: true,
  validateProps: ({ columnWidth, rowHeight }) => {
    if (false) {}
  }
});


//# sourceMappingURL=fixed-size-grid.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table-v2/src/components/header.mjs








const header_COMPONENT_NAME = "ElTableV2Header";
const TableV2Header = (0,external_Vue_.defineComponent)({
  name: header_COMPONENT_NAME,
  props: tableV2HeaderProps,
  setup(props, {
    slots,
    expose
  }) {
    const ns = (0,use_namespace/* useNamespace */.s)("table-v2");
    const headerRef = (0,external_Vue_.ref)();
    const headerStyle = (0,external_Vue_.computed)(() => enforceUnit({
      width: props.width,
      height: props.height
    }));
    const rowStyle = (0,external_Vue_.computed)(() => enforceUnit({
      width: props.rowWidth,
      height: props.height
    }));
    const headerHeights = (0,external_Vue_.computed)(() => (0,lodash_es_castArray/* default */.Z)((0,external_Vue_.unref)(props.headerHeight)));
    const scrollToLeft = (left) => {
      const headerEl = (0,external_Vue_.unref)(headerRef);
      (0,external_Vue_.nextTick)(() => {
        headerEl == null ? void 0 : headerEl.scroll({
          left
        });
      });
    };
    const renderFixedRows = () => {
      const fixedRowClassName = ns.e("fixed-header-row");
      const {
        columns,
        fixedHeaderData,
        rowHeight
      } = props;
      return fixedHeaderData == null ? void 0 : fixedHeaderData.map((fixedRowData, fixedRowIndex) => {
        var _a;
        const style = enforceUnit({
          height: rowHeight,
          width: "100%"
        });
        return (_a = slots.fixed) == null ? void 0 : _a.call(slots, {
          class: fixedRowClassName,
          columns,
          rowData: fixedRowData,
          rowIndex: -(fixedRowIndex + 1),
          style
        });
      });
    };
    const renderDynamicRows = () => {
      const dynamicRowClassName = ns.e("dynamic-header-row");
      const {
        columns
      } = props;
      return (0,external_Vue_.unref)(headerHeights).map((rowHeight, rowIndex) => {
        var _a;
        const style = enforceUnit({
          width: "100%",
          height: rowHeight
        });
        return (_a = slots.dynamic) == null ? void 0 : _a.call(slots, {
          class: dynamicRowClassName,
          columns,
          headerIndex: rowIndex,
          style
        });
      });
    };
    expose({
      scrollToLeft
    });
    return () => {
      if (props.height <= 0)
        return;
      return (0,external_Vue_.createVNode)("div", {
        "ref": headerRef,
        "class": props.class,
        "style": (0,external_Vue_.unref)(headerStyle)
      }, [(0,external_Vue_.createVNode)("div", {
        "style": (0,external_Vue_.unref)(rowStyle),
        "class": ns.e("header")
      }, [renderDynamicRows(), renderFixedRows()])]);
    };
  }
});


//# sourceMappingURL=header.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table-v2/src/table-grid.mjs













const table_grid_COMPONENT_NAME = "ElTableV2Grid";
const useTableGrid = (props) => {
  const headerRef = (0,external_Vue_.ref)();
  const bodyRef = (0,external_Vue_.ref)();
  const totalHeight = (0,external_Vue_.computed)(() => {
    const {
      data,
      rowHeight,
      estimatedRowHeight
    } = props;
    if (estimatedRowHeight) {
      return;
    }
    return data.length * rowHeight;
  });
  const fixedRowHeight = (0,external_Vue_.computed)(() => {
    const {
      fixedData,
      rowHeight
    } = props;
    return ((fixedData == null ? void 0 : fixedData.length) || 0) * rowHeight;
  });
  const headerHeight = (0,external_Vue_.computed)(() => sum(props.headerHeight));
  const gridHeight = (0,external_Vue_.computed)(() => {
    const {
      height
    } = props;
    return Math.max(0, height - (0,external_Vue_.unref)(headerHeight) - (0,external_Vue_.unref)(fixedRowHeight));
  });
  const hasHeader = (0,external_Vue_.computed)(() => {
    return (0,external_Vue_.unref)(headerHeight) + (0,external_Vue_.unref)(fixedRowHeight) > 0;
  });
  const itemKey = ({
    data,
    rowIndex
  }) => data[rowIndex][props.rowKey];
  function onItemRendered({
    rowCacheStart,
    rowCacheEnd,
    rowVisibleStart,
    rowVisibleEnd
  }) {
    var _a;
    (_a = props.onRowsRendered) == null ? void 0 : _a.call(props, {
      rowCacheStart,
      rowCacheEnd,
      rowVisibleStart,
      rowVisibleEnd
    });
  }
  function resetAfterRowIndex(index, forceUpdate2) {
    var _a;
    (_a = bodyRef.value) == null ? void 0 : _a.resetAfterRowIndex(index, forceUpdate2);
  }
  function scrollTo(leftOrOptions, top) {
    const header$ = (0,external_Vue_.unref)(headerRef);
    const body$ = (0,external_Vue_.unref)(bodyRef);
    if (!header$ || !body$)
      return;
    if ((0,shared_esm_bundler/* isObject */.Kn)(leftOrOptions)) {
      header$.scrollToLeft(leftOrOptions.scrollLeft);
      body$.scrollTo(leftOrOptions);
    } else {
      header$.scrollToLeft(leftOrOptions);
      body$.scrollTo({
        scrollLeft: leftOrOptions,
        scrollTop: top
      });
    }
  }
  function scrollToTop(scrollTop) {
    var _a;
    (_a = (0,external_Vue_.unref)(bodyRef)) == null ? void 0 : _a.scrollTo({
      scrollTop
    });
  }
  function scrollToRow(row, strategy) {
    var _a;
    (_a = (0,external_Vue_.unref)(bodyRef)) == null ? void 0 : _a.scrollToItem(row, 1, strategy);
  }
  function forceUpdate() {
    var _a, _b;
    (_a = (0,external_Vue_.unref)(bodyRef)) == null ? void 0 : _a.$forceUpdate();
    (_b = (0,external_Vue_.unref)(headerRef)) == null ? void 0 : _b.$forceUpdate();
  }
  return {
    bodyRef,
    forceUpdate,
    fixedRowHeight,
    gridHeight,
    hasHeader,
    headerHeight,
    headerRef,
    totalHeight,
    itemKey,
    onItemRendered,
    resetAfterRowIndex,
    scrollTo,
    scrollToTop,
    scrollToRow
  };
};
const TableGrid = (0,external_Vue_.defineComponent)({
  name: table_grid_COMPONENT_NAME,
  props: tableV2GridProps,
  setup(props, {
    slots,
    expose
  }) {
    const {
      ns
    } = (0,external_Vue_.inject)(TableV2InjectionKey);
    const {
      bodyRef,
      fixedRowHeight,
      gridHeight,
      hasHeader,
      headerRef,
      headerHeight,
      totalHeight,
      forceUpdate,
      itemKey,
      onItemRendered,
      resetAfterRowIndex,
      scrollTo,
      scrollToTop,
      scrollToRow
    } = useTableGrid(props);
    expose({
      forceUpdate,
      totalHeight,
      scrollTo,
      scrollToTop,
      scrollToRow,
      resetAfterRowIndex
    });
    const getColumnWidth = () => props.bodyWidth;
    return () => {
      const {
        cache,
        columns,
        data,
        fixedData,
        useIsScrolling,
        scrollbarAlwaysOn,
        scrollbarEndGap,
        scrollbarStartGap,
        style,
        rowHeight,
        bodyWidth,
        estimatedRowHeight,
        headerWidth,
        height,
        width,
        getRowHeight,
        onScroll
      } = props;
      const isDynamicRowEnabled = (0,shared/* isNumber */.hj)(estimatedRowHeight);
      const Grid = isDynamicRowEnabled ? DynamicSizeGrid : FixedSizeGrid;
      const _headerHeight = (0,external_Vue_.unref)(headerHeight);
      return (0,external_Vue_.createVNode)("div", {
        "role": "table",
        "class": [ns.e("table"), props.class],
        "style": style
      }, [(0,external_Vue_.createVNode)(Grid, {
        "ref": bodyRef,
        "data": data,
        "useIsScrolling": useIsScrolling,
        "itemKey": itemKey,
        "columnCache": 0,
        "columnWidth": isDynamicRowEnabled ? getColumnWidth : bodyWidth,
        "totalColumn": 1,
        "totalRow": data.length,
        "rowCache": cache,
        "rowHeight": isDynamicRowEnabled ? getRowHeight : rowHeight,
        "width": width,
        "height": (0,external_Vue_.unref)(gridHeight),
        "class": ns.e("body"),
        "scrollbarStartGap": scrollbarStartGap,
        "scrollbarEndGap": scrollbarEndGap,
        "scrollbarAlwaysOn": scrollbarAlwaysOn,
        "onScroll": onScroll,
        "onItemRendered": onItemRendered,
        "perfMode": false
      }, {
        default: (params) => {
          var _a;
          const rowData = data[params.rowIndex];
          return (_a = slots.row) == null ? void 0 : _a.call(slots, {
            ...params,
            columns,
            rowData
          });
        }
      }), (0,external_Vue_.unref)(hasHeader) && (0,external_Vue_.createVNode)(TableV2Header, {
        "ref": headerRef,
        "class": ns.e("header-wrapper"),
        "columns": columns,
        "headerData": data,
        "headerHeight": props.headerHeight,
        "fixedHeaderData": fixedData,
        "rowWidth": headerWidth,
        "rowHeight": rowHeight,
        "width": width,
        "height": Math.min(_headerHeight + (0,external_Vue_.unref)(fixedRowHeight), height)
      }, {
        dynamic: slots.header,
        fixed: slots.row
      })]);
    };
  }
});


//# sourceMappingURL=table-grid.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table-v2/src/renderers/main-table.mjs



function _isSlot(s) {
  return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !(0,external_Vue_.isVNode)(s);
}
const MainTable = (props, {
  slots
}) => {
  const {
    mainTableRef,
    ...rest
  } = props;
  return (0,external_Vue_.createVNode)(TableGrid, (0,external_Vue_.mergeProps)({
    "ref": mainTableRef
  }, rest), _isSlot(slots) ? slots : {
    default: () => [slots]
  });
};


//# sourceMappingURL=main-table.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table-v2/src/renderers/left-table.mjs



function left_table_isSlot(s) {
  return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !(0,external_Vue_.isVNode)(s);
}
const LeftTable = (props, {
  slots
}) => {
  if (!props.columns.length)
    return;
  const {
    leftTableRef,
    ...rest
  } = props;
  return (0,external_Vue_.createVNode)(TableGrid, (0,external_Vue_.mergeProps)({
    "ref": leftTableRef
  }, rest), left_table_isSlot(slots) ? slots : {
    default: () => [slots]
  });
};


//# sourceMappingURL=left-table.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table-v2/src/renderers/right-table.mjs



function right_table_isSlot(s) {
  return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !(0,external_Vue_.isVNode)(s);
}
const right_table_LeftTable = (props, {
  slots
}) => {
  if (!props.columns.length)
    return;
  const {
    rightTableRef,
    ...rest
  } = props;
  return (0,external_Vue_.createVNode)(TableGrid, (0,external_Vue_.mergeProps)({
    "ref": rightTableRef
  }, rest), right_table_isSlot(slots) ? slots : {
    default: () => [slots]
  });
};


//# sourceMappingURL=right-table.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table-v2/src/components/row.mjs








const useTableRow = (props) => {
  const {
    isScrolling
  } = (0,external_Vue_.inject)(TableV2InjectionKey);
  const measured = (0,external_Vue_.ref)(false);
  const rowRef = (0,external_Vue_.ref)();
  const measurable = (0,external_Vue_.computed)(() => {
    return (0,shared/* isNumber */.hj)(props.estimatedRowHeight) && props.rowIndex >= 0;
  });
  const doMeasure = (isInit = false) => {
    const $rowRef = (0,external_Vue_.unref)(rowRef);
    if (!$rowRef)
      return;
    const {
      columns,
      onRowHeightChange,
      rowKey,
      rowIndex,
      style
    } = props;
    const {
      height
    } = $rowRef.getBoundingClientRect();
    measured.value = true;
    (0,external_Vue_.nextTick)(() => {
      if (isInit || height !== Number.parseInt(style.height)) {
        const firstColumn = columns[0];
        const isPlaceholder = (firstColumn == null ? void 0 : firstColumn.placeholderSign) === placeholderSign;
        onRowHeightChange == null ? void 0 : onRowHeightChange({
          rowKey,
          height,
          rowIndex
        }, firstColumn && !isPlaceholder && firstColumn.fixed);
      }
    });
  };
  const eventHandlers = (0,external_Vue_.computed)(() => {
    const {
      rowData,
      rowIndex,
      rowKey,
      onRowHover
    } = props;
    const handlers = props.rowEventHandlers || {};
    const eventHandlers2 = {};
    Object.entries(handlers).forEach(([eventName, handler]) => {
      if ((0,shared_esm_bundler/* isFunction */.mf)(handler)) {
        eventHandlers2[eventName] = (event) => {
          handler({
            event,
            rowData,
            rowIndex,
            rowKey
          });
        };
      }
    });
    if (onRowHover) {
      ;
      [{
        name: "onMouseleave",
        hovered: false
      }, {
        name: "onMouseenter",
        hovered: true
      }].forEach(({
        name,
        hovered
      }) => {
        const existedHandler = eventHandlers2[name];
        eventHandlers2[name] = (event) => {
          onRowHover({
            event,
            hovered,
            rowData,
            rowIndex,
            rowKey
          });
          existedHandler == null ? void 0 : existedHandler(event);
        };
      });
    }
    return eventHandlers2;
  });
  const onExpand = (expanded) => {
    const {
      onRowExpand,
      rowData,
      rowIndex,
      rowKey
    } = props;
    onRowExpand == null ? void 0 : onRowExpand({
      expanded,
      rowData,
      rowIndex,
      rowKey
    });
  };
  (0,external_Vue_.onMounted)(() => {
    if ((0,external_Vue_.unref)(measurable)) {
      doMeasure(true);
    }
  });
  return {
    isScrolling,
    measurable,
    measured,
    rowRef,
    eventHandlers,
    onExpand
  };
};
const row_COMPONENT_NAME = "ElTableV2TableRow";
const TableV2Row = (0,external_Vue_.defineComponent)({
  name: row_COMPONENT_NAME,
  props: tableV2RowProps,
  setup(props, {
    expose,
    slots,
    attrs
  }) {
    const {
      eventHandlers,
      isScrolling,
      measurable,
      measured,
      rowRef,
      onExpand
    } = useTableRow(props);
    expose({
      onExpand
    });
    return () => {
      const {
        columns,
        columnsStyles,
        expandColumnKey,
        depth,
        rowData,
        rowIndex,
        style
      } = props;
      let ColumnCells = columns.map((column, columnIndex) => {
        const expandable = (0,shared_esm_bundler/* isArray */.kJ)(rowData.children) && rowData.children.length > 0 && column.key === expandColumnKey;
        return slots.cell({
          column,
          columns,
          columnIndex,
          depth,
          style: columnsStyles[column.key],
          rowData,
          rowIndex,
          isScrolling: (0,external_Vue_.unref)(isScrolling),
          expandIconProps: expandable ? {
            rowData,
            rowIndex,
            onExpand
          } : void 0
        });
      });
      if (slots.row) {
        ColumnCells = slots.row({
          cells: ColumnCells.map((node) => {
            if ((0,shared_esm_bundler/* isArray */.kJ)(node) && node.length === 1) {
              return node[0];
            }
            return node;
          }),
          style,
          columns,
          depth,
          rowData,
          rowIndex,
          isScrolling: (0,external_Vue_.unref)(isScrolling)
        });
      }
      if ((0,external_Vue_.unref)(measurable)) {
        const {
          height,
          ...exceptHeightStyle
        } = style || {};
        const _measured = (0,external_Vue_.unref)(measured);
        return (0,external_Vue_.createVNode)("div", (0,external_Vue_.mergeProps)({
          "ref": rowRef,
          "class": props.class,
          "style": _measured ? style : exceptHeightStyle
        }, attrs, (0,external_Vue_.unref)(eventHandlers)), [ColumnCells]);
      }
      return (0,external_Vue_.createVNode)("div", (0,external_Vue_.mergeProps)(attrs, {
        "ref": rowRef,
        "class": props.class,
        "style": style
      }, (0,external_Vue_.unref)(eventHandlers)), [ColumnCells]);
    };
  }
});


//# sourceMappingURL=row.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table-v2/src/renderers/row.mjs





function row_isSlot(s) {
  return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !(0,external_Vue_.isVNode)(s);
}
const RowRenderer = (props, {
  slots
}) => {
  const {
    columns,
    columnsStyles,
    depthMap,
    expandColumnKey,
    expandedRowKeys,
    estimatedRowHeight,
    hasFixedColumns,
    hoveringRowKey,
    rowData,
    rowIndex,
    style,
    isScrolling,
    rowProps,
    rowClass,
    rowKey,
    rowEventHandlers,
    ns,
    onRowHovered,
    onRowExpanded
  } = props;
  const rowKls = tryCall(rowClass, {
    columns,
    rowData,
    rowIndex
  }, "");
  const additionalProps = tryCall(rowProps, {
    columns,
    rowData,
    rowIndex
  });
  const _rowKey = rowData[rowKey];
  const depth = depthMap[_rowKey] || 0;
  const canExpand = Boolean(expandColumnKey);
  const isFixedRow = rowIndex < 0;
  const kls = [ns.e("row"), rowKls, {
    [ns.e(`row-depth-${depth}`)]: canExpand && rowIndex >= 0,
    [ns.is("expanded")]: canExpand && expandedRowKeys.includes(_rowKey),
    [ns.is("hovered")]: !isScrolling && _rowKey === hoveringRowKey,
    [ns.is("fixed")]: !depth && isFixedRow,
    [ns.is("customized")]: Boolean(slots.row)
  }];
  const onRowHover = hasFixedColumns ? onRowHovered : void 0;
  const _rowProps = {
    ...additionalProps,
    columns,
    columnsStyles,
    class: kls,
    depth,
    expandColumnKey,
    estimatedRowHeight: isFixedRow ? void 0 : estimatedRowHeight,
    isScrolling,
    rowIndex,
    rowData,
    rowKey: _rowKey,
    rowEventHandlers,
    style
  };
  return (0,external_Vue_.createVNode)(TableV2Row, (0,external_Vue_.mergeProps)(_rowProps, {
    "onRowHover": onRowHover,
    "onRowExpand": onRowExpanded
  }), row_isSlot(slots) ? slots : {
    default: () => [slots]
  });
};


//# sourceMappingURL=row.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table-v2/src/components/cell.mjs


const TableV2Cell = (props, {
  slots
}) => {
  var _a;
  const {
    cellData,
    style
  } = props;
  const displayText = ((_a = cellData == null ? void 0 : cellData.toString) == null ? void 0 : _a.call(cellData)) || "";
  return (0,external_Vue_.createVNode)("div", {
    "class": props.class,
    "title": displayText,
    "style": style
  }, [slots.default ? slots.default(props) : displayText]);
};
TableV2Cell.displayName = "ElTableV2Cell";
TableV2Cell.inheritAttrs = false;


//# sourceMappingURL=cell.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table-v2/src/components/expand-icon.mjs




const ExpandIcon = (props) => {
  const {
    expanded,
    expandable,
    onExpand,
    style,
    size
  } = props;
  const expandIconProps = {
    onClick: expandable ? () => onExpand(!expanded) : void 0,
    class: props.class
  };
  return (0,external_Vue_.createVNode)(components_icon/* ElIcon */.gn, (0,external_Vue_.mergeProps)(expandIconProps, {
    "size": size,
    "style": style
  }), {
    default: () => [(0,external_Vue_.createVNode)(dist/* ArrowRight */.olP, null, null)]
  });
};


//# sourceMappingURL=expand-icon.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table-v2/src/renderers/cell.mjs











const CellRenderer = ({
  columns,
  column,
  columnIndex,
  depth,
  expandIconProps,
  isScrolling,
  rowData,
  rowIndex,
  style,
  expandedRowKeys,
  ns,
  cellProps: _cellProps,
  expandColumnKey,
  indentSize,
  iconSize,
  rowKey
}, {
  slots
}) => {
  const cellStyle = enforceUnit(style);
  if (column.placeholderSign === placeholderSign) {
    return (0,external_Vue_.createVNode)("div", {
      "class": ns.em("row-cell", "placeholder"),
      "style": cellStyle
    }, null);
  }
  const {
    cellRenderer,
    dataKey,
    dataGetter
  } = column;
  const columnCellRenderer = componentToSlot(cellRenderer);
  const CellComponent = columnCellRenderer || slots.default || ((props) => (0,external_Vue_.createVNode)(TableV2Cell, props, null));
  const cellData = (0,shared_esm_bundler/* isFunction */.mf)(dataGetter) ? dataGetter({
    columns,
    column,
    columnIndex,
    rowData,
    rowIndex
  }) : (0,get/* default */.Z)(rowData, dataKey != null ? dataKey : "");
  const extraCellProps = tryCall(_cellProps, {
    cellData,
    columns,
    column,
    columnIndex,
    rowIndex,
    rowData
  });
  const cellProps = {
    class: ns.e("cell-text"),
    columns,
    column,
    columnIndex,
    cellData,
    isScrolling,
    rowData,
    rowIndex
  };
  const Cell = CellComponent(cellProps);
  const kls = [ns.e("row-cell"), column.align === Alignment.CENTER && ns.is("align-center"), column.align === Alignment.RIGHT && ns.is("align-right")];
  const expandable = rowIndex >= 0 && column.key === expandColumnKey;
  const expanded = rowIndex >= 0 && expandedRowKeys.includes(rowData[rowKey]);
  let IconOrPlaceholder;
  const iconStyle = `margin-inline-start: ${depth * indentSize}px;`;
  if (expandable) {
    if ((0,shared_esm_bundler/* isObject */.Kn)(expandIconProps)) {
      IconOrPlaceholder = (0,external_Vue_.createVNode)(ExpandIcon, (0,external_Vue_.mergeProps)(expandIconProps, {
        "class": [ns.e("expand-icon"), ns.is("expanded", expanded)],
        "size": iconSize,
        "expanded": expanded,
        "style": iconStyle,
        "expandable": true
      }), null);
    } else {
      IconOrPlaceholder = (0,external_Vue_.createVNode)("div", {
        "style": [iconStyle, `width: ${iconSize}px; height: ${iconSize}px;`].join(" ")
      }, null);
    }
  }
  return (0,external_Vue_.createVNode)("div", (0,external_Vue_.mergeProps)({
    "class": kls,
    "style": cellStyle
  }, extraCellProps), [IconOrPlaceholder, Cell]);
};
CellRenderer.inheritAttrs = false;


//# sourceMappingURL=cell.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table-v2/src/header-row.mjs




const tableV2HeaderRowProps = (0,runtime/* buildProps */.o8)({
  class: String,
  columns: columns,
  columnsStyles: {
    type: (0,runtime/* definePropType */.Cq)(Object),
    required: true
  },
  headerIndex: Number,
  style: { type: (0,runtime/* definePropType */.Cq)(Object) }
});


//# sourceMappingURL=header-row.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table-v2/src/components/header-row.mjs





const TableV2HeaderRow = (0,external_Vue_.defineComponent)({
  name: "ElTableV2HeaderRow",
  props: tableV2HeaderRowProps,
  setup(props, {
    slots
  }) {
    return () => {
      const {
        columns,
        columnsStyles,
        headerIndex,
        style
      } = props;
      let Cells = columns.map((column, columnIndex) => {
        return slots.cell({
          columns,
          column,
          columnIndex,
          headerIndex,
          style: columnsStyles[column.key]
        });
      });
      if (slots.header) {
        Cells = slots.header({
          cells: Cells.map((node) => {
            if ((0,shared_esm_bundler/* isArray */.kJ)(node) && node.length === 1) {
              return node[0];
            }
            return node;
          }),
          columns,
          headerIndex
        });
      }
      return (0,external_Vue_.createVNode)("div", {
        "class": props.class,
        "style": style
      }, [Cells]);
    };
  }
});


//# sourceMappingURL=header-row.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table-v2/src/renderers/header.mjs





function header_isSlot(s) {
  return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !(0,external_Vue_.isVNode)(s);
}
const HeaderRenderer = ({
  columns,
  columnsStyles,
  headerIndex,
  style,
  headerClass,
  headerProps,
  ns
}, {
  slots
}) => {
  const param = {
    columns,
    headerIndex
  };
  const kls = [ns.e("header-row"), tryCall(headerClass, param, ""), {
    [ns.is("customized")]: Boolean(slots.header)
  }];
  const extraProps = {
    ...tryCall(headerProps, param),
    columnsStyles,
    class: kls,
    columns,
    headerIndex,
    style
  };
  return (0,external_Vue_.createVNode)(TableV2HeaderRow, extraProps, header_isSlot(slots) ? slots : {
    default: () => [slots]
  });
};


//# sourceMappingURL=header.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table-v2/src/components/header-cell.mjs


const HeaderCell = (props, {
  slots
}) => {
  var _a, _b;
  return slots.default ? slots.default(props) : (0,external_Vue_.createVNode)("div", {
    "class": props.class,
    "title": (_a = props.column) == null ? void 0 : _a.title
  }, [(_b = props.column) == null ? void 0 : _b.title]);
};
HeaderCell.displayName = "ElTableV2HeaderCell";
HeaderCell.inheritAttrs = false;


//# sourceMappingURL=header-cell.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table-v2/src/components/sort-icon.mjs





const SortIcon = (props) => {
  const {
    sortOrder
  } = props;
  return (0,external_Vue_.createVNode)(components_icon/* ElIcon */.gn, {
    "size": 14,
    "class": props.class
  }, {
    default: () => [sortOrder === SortOrder.ASC ? (0,external_Vue_.createVNode)(dist/* SortUp */.Ncu, null, null) : (0,external_Vue_.createVNode)(dist/* SortDown */.laI, null, null)]
  });
};


//# sourceMappingURL=sort-icon.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table-v2/src/renderers/header-cell.mjs








const HeaderCellRenderer = (props, {
  slots
}) => {
  const {
    column,
    ns,
    style,
    onColumnSorted
  } = props;
  const cellStyle = enforceUnit(style);
  if (column.placeholderSign === placeholderSign) {
    return (0,external_Vue_.createVNode)("div", {
      "class": ns.em("header-row-cell", "placeholder"),
      "style": cellStyle
    }, null);
  }
  const {
    headerCellRenderer,
    headerClass,
    sortable
  } = column;
  const cellProps = {
    ...props,
    class: ns.e("header-cell-text")
  };
  const cellRenderer = componentToSlot(headerCellRenderer) || slots.default || ((props2) => (0,external_Vue_.createVNode)(HeaderCell, props2, null));
  const Cell = cellRenderer(cellProps);
  const {
    sortBy,
    sortState,
    headerCellProps
  } = props;
  let sorting, sortOrder;
  if (sortState) {
    const order = sortState[column.key];
    sorting = Boolean(oppositeOrderMap[order]);
    sortOrder = sorting ? order : SortOrder.ASC;
  } else {
    sorting = column.key === sortBy.key;
    sortOrder = sorting ? sortBy.order : SortOrder.ASC;
  }
  const cellKls = [ns.e("header-cell"), tryCall(headerClass, props, ""), column.align === Alignment.CENTER && ns.is("align-center"), column.align === Alignment.RIGHT && ns.is("align-right"), sortable && ns.is("sortable")];
  const cellWrapperProps = {
    ...tryCall(headerCellProps, props),
    onClick: column.sortable ? onColumnSorted : void 0,
    class: cellKls,
    style: cellStyle,
    ["data-key"]: column.key
  };
  return (0,external_Vue_.createVNode)("div", cellWrapperProps, [Cell, sortable && (0,external_Vue_.createVNode)(SortIcon, {
    "class": [ns.e("sort-icon"), sorting && ns.is("sorting")],
    "sortOrder": sortOrder
  }, null)]);
};


//# sourceMappingURL=header-cell.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table-v2/src/renderers/footer.mjs


const footer_Footer = (props, {
  slots
}) => {
  var _a;
  return (0,external_Vue_.createVNode)("div", {
    "class": props.class,
    "style": props.style
  }, [(_a = slots.default) == null ? void 0 : _a.call(slots)]);
};
footer_Footer.displayName = "ElTableV2Footer";


//# sourceMappingURL=footer.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table-v2/src/renderers/empty.mjs



const empty_Footer = (props, {
  slots
}) => {
  return (0,external_Vue_.createVNode)("div", {
    "class": props.class,
    "style": props.style
  }, [slots.default ? slots.default() : (0,external_Vue_.createVNode)(ElEmpty, null, null)]);
};
empty_Footer.displayName = "ElTableV2Empty";


//# sourceMappingURL=empty.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table-v2/src/renderers/overlay.mjs


const overlay_Overlay = (props, {
  slots
}) => {
  var _a;
  return (0,external_Vue_.createVNode)("div", {
    "class": props.class,
    "style": props.style
  }, [(_a = slots.default) == null ? void 0 : _a.call(slots)]);
};
overlay_Overlay.displayName = "ElTableV2Overlay";


//# sourceMappingURL=overlay.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table-v2/src/table-v2.mjs

















function table_v2_isSlot(s) {
  return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !(0,external_Vue_.isVNode)(s);
}
const table_v2_COMPONENT_NAME = "ElTableV2";
const TableV2 = (0,external_Vue_.defineComponent)({
  name: table_v2_COMPONENT_NAME,
  props: tableV2Props,
  setup(props, {
    slots,
    expose
  }) {
    const ns = (0,use_namespace/* useNamespace */.s)("table-v2");
    const {
      columnsStyles,
      fixedColumnsOnLeft,
      fixedColumnsOnRight,
      mainColumns,
      mainTableHeight,
      fixedTableHeight,
      leftTableWidth,
      rightTableWidth,
      data,
      depthMap,
      expandedRowKeys,
      hasFixedColumns,
      hoveringRowKey,
      mainTableRef,
      leftTableRef,
      rightTableRef,
      isDynamic,
      isResetting,
      isScrolling,
      bodyWidth,
      emptyStyle,
      rootStyle,
      headerWidth,
      footerHeight,
      showEmpty,
      scrollTo,
      scrollToLeft,
      scrollToTop,
      scrollToRow,
      getRowHeight,
      onColumnSorted,
      onRowHeightChange,
      onRowHovered,
      onRowExpanded,
      onRowsRendered,
      onScroll,
      onVerticalScroll
    } = useTable(props);
    expose({
      scrollTo,
      scrollToLeft,
      scrollToTop,
      scrollToRow
    });
    (0,external_Vue_.provide)(TableV2InjectionKey, {
      ns,
      isResetting,
      hoveringRowKey,
      isScrolling
    });
    return () => {
      const {
        cache,
        cellProps,
        estimatedRowHeight,
        expandColumnKey,
        fixedData,
        headerHeight,
        headerClass,
        headerProps,
        headerCellProps,
        sortBy,
        sortState,
        rowHeight,
        rowClass,
        rowEventHandlers,
        rowKey,
        rowProps,
        scrollbarAlwaysOn,
        indentSize,
        iconSize,
        useIsScrolling,
        vScrollbarSize,
        width
      } = props;
      const _data = (0,external_Vue_.unref)(data);
      const mainTableProps = {
        cache,
        class: ns.e("main"),
        columns: (0,external_Vue_.unref)(mainColumns),
        data: _data,
        fixedData,
        estimatedRowHeight,
        bodyWidth: (0,external_Vue_.unref)(bodyWidth),
        headerHeight,
        headerWidth: (0,external_Vue_.unref)(headerWidth),
        height: (0,external_Vue_.unref)(mainTableHeight),
        mainTableRef,
        rowKey,
        rowHeight,
        scrollbarAlwaysOn,
        scrollbarStartGap: 2,
        scrollbarEndGap: vScrollbarSize,
        useIsScrolling,
        width,
        getRowHeight,
        onRowsRendered,
        onScroll
      };
      const leftColumnsWidth = (0,external_Vue_.unref)(leftTableWidth);
      const _fixedTableHeight = (0,external_Vue_.unref)(fixedTableHeight);
      const leftTableProps = {
        cache,
        class: ns.e("left"),
        columns: (0,external_Vue_.unref)(fixedColumnsOnLeft),
        data: _data,
        estimatedRowHeight,
        leftTableRef,
        rowHeight,
        bodyWidth: leftColumnsWidth,
        headerWidth: leftColumnsWidth,
        headerHeight,
        height: _fixedTableHeight,
        rowKey,
        scrollbarAlwaysOn,
        scrollbarStartGap: 2,
        scrollbarEndGap: vScrollbarSize,
        useIsScrolling,
        width: leftColumnsWidth,
        getRowHeight,
        onScroll: onVerticalScroll
      };
      const rightColumnsWidth = (0,external_Vue_.unref)(rightTableWidth);
      const rightColumnsWidthWithScrollbar = rightColumnsWidth + vScrollbarSize;
      const rightTableProps = {
        cache,
        class: ns.e("right"),
        columns: (0,external_Vue_.unref)(fixedColumnsOnRight),
        data: _data,
        estimatedRowHeight,
        rightTableRef,
        rowHeight,
        bodyWidth: rightColumnsWidthWithScrollbar,
        headerWidth: rightColumnsWidthWithScrollbar,
        headerHeight,
        height: _fixedTableHeight,
        rowKey,
        scrollbarAlwaysOn,
        scrollbarStartGap: 2,
        scrollbarEndGap: vScrollbarSize,
        width: rightColumnsWidthWithScrollbar,
        style: `--${(0,external_Vue_.unref)(ns.namespace)}-table-scrollbar-size: ${vScrollbarSize}px`,
        useIsScrolling,
        getRowHeight,
        onScroll: onVerticalScroll
      };
      const _columnsStyles = (0,external_Vue_.unref)(columnsStyles);
      const tableRowProps = {
        ns,
        depthMap: (0,external_Vue_.unref)(depthMap),
        columnsStyles: _columnsStyles,
        expandColumnKey,
        expandedRowKeys: (0,external_Vue_.unref)(expandedRowKeys),
        estimatedRowHeight,
        hasFixedColumns: (0,external_Vue_.unref)(hasFixedColumns),
        hoveringRowKey: (0,external_Vue_.unref)(hoveringRowKey),
        rowProps,
        rowClass,
        rowKey,
        rowEventHandlers,
        onRowHovered,
        onRowExpanded,
        onRowHeightChange
      };
      const tableCellProps = {
        cellProps,
        expandColumnKey,
        indentSize,
        iconSize,
        rowKey,
        expandedRowKeys: (0,external_Vue_.unref)(expandedRowKeys),
        ns
      };
      const tableHeaderProps = {
        ns,
        headerClass,
        headerProps,
        columnsStyles: _columnsStyles
      };
      const tableHeaderCellProps = {
        ns,
        sortBy,
        sortState,
        headerCellProps,
        onColumnSorted
      };
      const tableSlots = {
        row: (props2) => (0,external_Vue_.createVNode)(RowRenderer, (0,external_Vue_.mergeProps)(props2, tableRowProps), {
          row: slots.row,
          cell: (props3) => slots.cell ? (0,external_Vue_.createVNode)(CellRenderer, (0,external_Vue_.mergeProps)(props3, tableCellProps, {
            "style": _columnsStyles[props3.column.key]
          }), {
            default: () => [slots.cell]
          }) : (0,external_Vue_.createVNode)(CellRenderer, (0,external_Vue_.mergeProps)(props3, tableCellProps, {
            "style": _columnsStyles[props3.column.key]
          }), null)
        }),
        header: (props2) => (0,external_Vue_.createVNode)(HeaderRenderer, (0,external_Vue_.mergeProps)(props2, tableHeaderProps), {
          header: slots.header,
          cell: (props3) => slots["header-cell"] ? (0,external_Vue_.createVNode)(HeaderCellRenderer, (0,external_Vue_.mergeProps)(props3, tableHeaderCellProps, {
            "style": _columnsStyles[props3.column.key]
          }), {
            default: () => [slots["header-cell"]]
          }) : (0,external_Vue_.createVNode)(HeaderCellRenderer, (0,external_Vue_.mergeProps)(props3, tableHeaderCellProps, {
            "style": _columnsStyles[props3.column.key]
          }), null)
        })
      };
      const rootKls = [props.class, ns.b(), ns.e("root"), {
        [ns.is("dynamic")]: (0,external_Vue_.unref)(isDynamic)
      }];
      const footerProps = {
        class: ns.e("footer"),
        style: (0,external_Vue_.unref)(footerHeight)
      };
      return (0,external_Vue_.createVNode)("div", {
        "class": rootKls,
        "style": (0,external_Vue_.unref)(rootStyle)
      }, [(0,external_Vue_.createVNode)(MainTable, mainTableProps, table_v2_isSlot(tableSlots) ? tableSlots : {
        default: () => [tableSlots]
      }), (0,external_Vue_.createVNode)(LeftTable, leftTableProps, table_v2_isSlot(tableSlots) ? tableSlots : {
        default: () => [tableSlots]
      }), (0,external_Vue_.createVNode)(right_table_LeftTable, rightTableProps, table_v2_isSlot(tableSlots) ? tableSlots : {
        default: () => [tableSlots]
      }), slots.footer && (0,external_Vue_.createVNode)(footer_Footer, footerProps, {
        default: slots.footer
      }), (0,external_Vue_.unref)(showEmpty) && (0,external_Vue_.createVNode)(empty_Footer, {
        "class": ns.e("empty"),
        "style": (0,external_Vue_.unref)(emptyStyle)
      }, {
        default: slots.empty
      }), slots.overlay && (0,external_Vue_.createVNode)(overlay_Overlay, {
        "class": ns.e("overlay")
      }, {
        default: slots.overlay
      })]);
    };
  }
});


//# sourceMappingURL=table-v2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table-v2/src/auto-resizer.mjs



const autoResizerProps = (0,runtime/* buildProps */.o8)({
  disableWidth: Boolean,
  disableHeight: Boolean,
  onResize: {
    type: (0,runtime/* definePropType */.Cq)(Function)
  }
});


//# sourceMappingURL=auto-resizer.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table-v2/src/composables/use-auto-resize.mjs



const useAutoResize = (props) => {
  const sizer = (0,external_Vue_.ref)();
  const width$ = (0,external_Vue_.ref)(0);
  const height$ = (0,external_Vue_.ref)(0);
  let resizerStopper;
  (0,external_Vue_.onMounted)(() => {
    resizerStopper = (0,core/* useResizeObserver */.yU7)(sizer, ([entry]) => {
      const { width, height } = entry.contentRect;
      const { paddingLeft, paddingRight, paddingTop, paddingBottom } = getComputedStyle(entry.target);
      const left = Number.parseInt(paddingLeft) || 0;
      const right = Number.parseInt(paddingRight) || 0;
      const top = Number.parseInt(paddingTop) || 0;
      const bottom = Number.parseInt(paddingBottom) || 0;
      width$.value = width - left - right;
      height$.value = height - top - bottom;
    }).stop;
  });
  (0,external_Vue_.onBeforeUnmount)(() => {
    resizerStopper == null ? void 0 : resizerStopper();
  });
  (0,external_Vue_.watch)([width$, height$], ([width, height]) => {
    var _a;
    (_a = props.onResize) == null ? void 0 : _a.call(props, {
      width,
      height
    });
  });
  return {
    sizer,
    width: width$,
    height: height$
  };
};


//# sourceMappingURL=use-auto-resize.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table-v2/src/components/auto-resizer.mjs







const AutoResizer = (0,external_Vue_.defineComponent)({
  name: "ElAutoResizer",
  props: autoResizerProps,
  setup(props, {
    slots
  }) {
    const ns = (0,use_namespace/* useNamespace */.s)("auto-resizer");
    const {
      height,
      width,
      sizer
    } = useAutoResize(props);
    const style = {
      width: "100%",
      height: "100%"
    };
    return () => {
      var _a;
      return (0,external_Vue_.createVNode)("div", {
        "ref": sizer,
        "class": ns.b(),
        "style": style
      }, [(_a = slots.default) == null ? void 0 : _a.call(slots, {
        height: height.value,
        width: width.value
      })]);
    };
  }
});


//# sourceMappingURL=auto-resizer.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/table-v2/index.mjs











const ElTableV2 = (0,install/* withInstall */.nz)(TableV2);
const ElAutoResizer = (0,install/* withInstall */.nz)(AutoResizer);


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/tabs/src/tab-bar.mjs




const tabBarProps = (0,runtime/* buildProps */.o8)({
  tabs: {
    type: (0,runtime/* definePropType */.Cq)(Array),
    default: () => (0,typescript/* mutable */.N)([])
  }
});


//# sourceMappingURL=tab-bar.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/tokens/tabs.mjs
const tabsRootContextKey = Symbol("tabsRootContextKey");


//# sourceMappingURL=tabs.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/tabs/src/tab-bar2.mjs












const tab_bar2_default_ = {
  name: "ElTabBar"
};
const tab_bar2_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...tab_bar2_default_,
  props: tabBarProps,
  setup(__props, { expose }) {
    const props = __props;
    const COMPONENT_NAME = "ElTabBar";
    const instance = (0,external_Vue_.getCurrentInstance)();
    const rootTabs = (0,external_Vue_.inject)(tabsRootContextKey);
    if (!rootTabs)
      (0,error/* throwError */._)(COMPONENT_NAME, "<el-tabs><el-tab-bar /></el-tabs>");
    const ns = (0,use_namespace/* useNamespace */.s)("tabs");
    const barRef = (0,external_Vue_.ref)();
    const barStyle = (0,external_Vue_.ref)();
    const getBarStyle = () => {
      let offset = 0;
      let tabSize = 0;
      const sizeName = ["top", "bottom"].includes(rootTabs.props.tabPosition) ? "width" : "height";
      const sizeDir = sizeName === "width" ? "x" : "y";
      props.tabs.every((tab) => {
        var _a, _b, _c, _d;
        const $el = (_b = (_a = instance.parent) == null ? void 0 : _a.refs) == null ? void 0 : _b[`tab-${tab.paneName}`];
        if (!$el)
          return false;
        if (!tab.active) {
          return true;
        }
        tabSize = $el[`client${(0,shared_esm_bundler/* capitalize */.kC)(sizeName)}`];
        const position = sizeDir === "x" ? "left" : "top";
        offset = $el.getBoundingClientRect()[position] - ((_d = (_c = $el.parentElement) == null ? void 0 : _c.getBoundingClientRect()[position]) != null ? _d : 0);
        const tabStyles = window.getComputedStyle($el);
        if (sizeName === "width") {
          if (props.tabs.length > 1) {
            tabSize -= Number.parseFloat(tabStyles.paddingLeft) + Number.parseFloat(tabStyles.paddingRight);
          }
          offset += Number.parseFloat(tabStyles.paddingLeft);
        }
        return false;
      });
      return {
        [sizeName]: `${tabSize}px`,
        transform: `translate${(0,shared_esm_bundler/* capitalize */.kC)(sizeDir)}(${offset}px)`
      };
    };
    const update = () => barStyle.value = getBarStyle();
    (0,external_Vue_.watch)(() => props.tabs, async () => {
      await (0,external_Vue_.nextTick)();
      update();
    }, { immediate: true });
    (0,core/* useResizeObserver */.yU7)(barRef, () => update());
    expose({
      ref: barRef,
      update
    });
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
        ref_key: "barRef",
        ref: barRef,
        class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(ns).e("active-bar"), (0,external_Vue_.unref)(ns).is((0,external_Vue_.unref)(rootTabs).props.tabPosition)]),
        style: (0,external_Vue_.normalizeStyle)(barStyle.value)
      }, null, 6);
    };
  }
});
var TabBar = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(tab_bar2_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/tabs/src/tab-bar.vue"]]);


//# sourceMappingURL=tab-bar2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/tabs/src/tab-nav.mjs

















const tabNavProps = (0,runtime/* buildProps */.o8)({
  panes: {
    type: (0,runtime/* definePropType */.Cq)(Array),
    default: () => (0,typescript/* mutable */.N)([])
  },
  currentName: {
    type: [String, Number],
    default: ""
  },
  editable: Boolean,
  onTabClick: {
    type: (0,runtime/* definePropType */.Cq)(Function),
    default: shared_esm_bundler/* NOOP */.dG
  },
  onTabRemove: {
    type: (0,runtime/* definePropType */.Cq)(Function),
    default: shared_esm_bundler/* NOOP */.dG
  },
  type: {
    type: String,
    values: ["card", "border-card", ""],
    default: ""
  },
  stretch: Boolean
});
const tab_nav_COMPONENT_NAME = "ElTabNav";
const TabNav = (0,external_Vue_.defineComponent)({
  name: tab_nav_COMPONENT_NAME,
  props: tabNavProps,
  setup(props, {
    expose
  }) {
    const vm = (0,external_Vue_.getCurrentInstance)();
    const rootTabs = (0,external_Vue_.inject)(tabsRootContextKey);
    if (!rootTabs)
      (0,error/* throwError */._)(tab_nav_COMPONENT_NAME, `<el-tabs><tab-nav /></el-tabs>`);
    const ns = (0,use_namespace/* useNamespace */.s)("tabs");
    const visibility = (0,core/* useDocumentVisibility */.xKQ)();
    const focused = (0,core/* useWindowFocus */.vou)();
    const navScroll$ = (0,external_Vue_.ref)();
    const nav$ = (0,external_Vue_.ref)();
    const el$ = (0,external_Vue_.ref)();
    const scrollable = (0,external_Vue_.ref)(false);
    const navOffset = (0,external_Vue_.ref)(0);
    const isFocus = (0,external_Vue_.ref)(false);
    const focusable = (0,external_Vue_.ref)(true);
    const sizeName = (0,external_Vue_.computed)(() => ["top", "bottom"].includes(rootTabs.props.tabPosition) ? "width" : "height");
    const navStyle = (0,external_Vue_.computed)(() => {
      const dir = sizeName.value === "width" ? "X" : "Y";
      return {
        transform: `translate${dir}(-${navOffset.value}px)`
      };
    });
    const scrollPrev = () => {
      if (!navScroll$.value)
        return;
      const containerSize = navScroll$.value[`offset${(0,shared_esm_bundler/* capitalize */.kC)(sizeName.value)}`];
      const currentOffset = navOffset.value;
      if (!currentOffset)
        return;
      const newOffset = currentOffset > containerSize ? currentOffset - containerSize : 0;
      navOffset.value = newOffset;
    };
    const scrollNext = () => {
      if (!navScroll$.value || !nav$.value)
        return;
      const navSize = nav$.value[`offset${(0,shared_esm_bundler/* capitalize */.kC)(sizeName.value)}`];
      const containerSize = navScroll$.value[`offset${(0,shared_esm_bundler/* capitalize */.kC)(sizeName.value)}`];
      const currentOffset = navOffset.value;
      if (navSize - currentOffset <= containerSize)
        return;
      const newOffset = navSize - currentOffset > containerSize * 2 ? currentOffset + containerSize : navSize - containerSize;
      navOffset.value = newOffset;
    };
    const scrollToActiveTab = async () => {
      const nav = nav$.value;
      if (!scrollable.value || !el$.value || !navScroll$.value || !nav)
        return;
      await (0,external_Vue_.nextTick)();
      const activeTab = el$.value.querySelector(".is-active");
      if (!activeTab)
        return;
      const navScroll = navScroll$.value;
      const isHorizontal = ["top", "bottom"].includes(rootTabs.props.tabPosition);
      const activeTabBounding = activeTab.getBoundingClientRect();
      const navScrollBounding = navScroll.getBoundingClientRect();
      const maxOffset = isHorizontal ? nav.offsetWidth - navScrollBounding.width : nav.offsetHeight - navScrollBounding.height;
      const currentOffset = navOffset.value;
      let newOffset = currentOffset;
      if (isHorizontal) {
        if (activeTabBounding.left < navScrollBounding.left) {
          newOffset = currentOffset - (navScrollBounding.left - activeTabBounding.left);
        }
        if (activeTabBounding.right > navScrollBounding.right) {
          newOffset = currentOffset + activeTabBounding.right - navScrollBounding.right;
        }
      } else {
        if (activeTabBounding.top < navScrollBounding.top) {
          newOffset = currentOffset - (navScrollBounding.top - activeTabBounding.top);
        }
        if (activeTabBounding.bottom > navScrollBounding.bottom) {
          newOffset = currentOffset + (activeTabBounding.bottom - navScrollBounding.bottom);
        }
      }
      newOffset = Math.max(newOffset, 0);
      navOffset.value = Math.min(newOffset, maxOffset);
    };
    const update = () => {
      if (!nav$.value || !navScroll$.value)
        return;
      const navSize = nav$.value[`offset${(0,shared_esm_bundler/* capitalize */.kC)(sizeName.value)}`];
      const containerSize = navScroll$.value[`offset${(0,shared_esm_bundler/* capitalize */.kC)(sizeName.value)}`];
      const currentOffset = navOffset.value;
      if (containerSize < navSize) {
        const currentOffset2 = navOffset.value;
        scrollable.value = scrollable.value || {};
        scrollable.value.prev = currentOffset2;
        scrollable.value.next = currentOffset2 + containerSize < navSize;
        if (navSize - currentOffset2 < containerSize) {
          navOffset.value = navSize - containerSize;
        }
      } else {
        scrollable.value = false;
        if (currentOffset > 0) {
          navOffset.value = 0;
        }
      }
    };
    const changeTab = (e) => {
      const code = e.code;
      const {
        up,
        down,
        left,
        right
      } = aria_EVENT_CODE;
      if (![up, down, left, right].includes(code))
        return;
      const tabList = Array.from(e.currentTarget.querySelectorAll("[role=tab]"));
      const currentIndex = tabList.indexOf(e.target);
      let nextIndex;
      if (code === left || code === up) {
        if (currentIndex === 0) {
          nextIndex = tabList.length - 1;
        } else {
          nextIndex = currentIndex - 1;
        }
      } else {
        if (currentIndex < tabList.length - 1) {
          nextIndex = currentIndex + 1;
        } else {
          nextIndex = 0;
        }
      }
      tabList[nextIndex].focus();
      tabList[nextIndex].click();
      setFocus();
    };
    const setFocus = () => {
      if (focusable.value)
        isFocus.value = true;
    };
    const removeFocus = () => isFocus.value = false;
    (0,external_Vue_.watch)(visibility, (visibility2) => {
      if (visibility2 === "hidden") {
        focusable.value = false;
      } else if (visibility2 === "visible") {
        setTimeout(() => focusable.value = true, 50);
      }
    });
    (0,external_Vue_.watch)(focused, (focused2) => {
      if (focused2) {
        setTimeout(() => focusable.value = true, 50);
      } else {
        focusable.value = false;
      }
    });
    (0,core/* useResizeObserver */.yU7)(el$, update);
    (0,external_Vue_.onMounted)(() => setTimeout(() => scrollToActiveTab(), 0));
    (0,external_Vue_.onUpdated)(() => update());
    expose({
      scrollToActiveTab,
      removeFocus
    });
    (0,external_Vue_.watch)(() => props.panes, () => vm.update(), {
      flush: "post"
    });
    return () => {
      const scrollBtn = scrollable.value ? [(0,external_Vue_.createVNode)("span", {
        "class": [ns.e("nav-prev"), ns.is("disabled", !scrollable.value.prev)],
        "onClick": scrollPrev
      }, [(0,external_Vue_.createVNode)(components_icon/* ElIcon */.gn, null, {
        default: () => [(0,external_Vue_.createVNode)(dist/* ArrowLeft */.XdH, null, null)]
      })]), (0,external_Vue_.createVNode)("span", {
        "class": [ns.e("nav-next"), ns.is("disabled", !scrollable.value.next)],
        "onClick": scrollNext
      }, [(0,external_Vue_.createVNode)(components_icon/* ElIcon */.gn, null, {
        default: () => [(0,external_Vue_.createVNode)(dist/* ArrowRight */.olP, null, null)]
      })])] : null;
      const tabs = props.panes.map((pane, index) => {
        var _a, _b, _c, _d;
        const tabName = (_b = (_a = pane.props.name) != null ? _a : pane.index) != null ? _b : `${index}`;
        const closable = pane.isClosable || props.editable;
        pane.index = `${index}`;
        const btnClose = closable ? (0,external_Vue_.createVNode)(components_icon/* ElIcon */.gn, {
          "class": "is-icon-close",
          "onClick": (ev) => props.onTabRemove(pane, ev)
        }, {
          default: () => [(0,external_Vue_.createVNode)(dist/* Close */.x8P, null, null)]
        }) : null;
        const tabLabelContent = ((_d = (_c = pane.slots).label) == null ? void 0 : _d.call(_c)) || pane.props.label;
        const tabindex = pane.active ? 0 : -1;
        return (0,external_Vue_.createVNode)("div", {
          "ref": `tab-${tabName}`,
          "class": [ns.e("item"), ns.is(rootTabs.props.tabPosition), ns.is("active", pane.active), ns.is("disabled", pane.props.disabled), ns.is("closable", closable), ns.is("focus", isFocus.value)],
          "id": `tab-${tabName}`,
          "key": `tab-${tabName}`,
          "aria-controls": `pane-${tabName}`,
          "role": "tab",
          "aria-selected": pane.active,
          "tabindex": tabindex,
          "onFocus": () => setFocus(),
          "onBlur": () => removeFocus(),
          "onClick": (ev) => {
            removeFocus();
            props.onTabClick(pane, tabName, ev);
          },
          "onKeydown": (ev) => {
            if (closable && (ev.code === aria_EVENT_CODE["delete"] || ev.code === aria_EVENT_CODE.backspace)) {
              props.onTabRemove(pane, ev);
            }
          }
        }, [...[tabLabelContent, btnClose]]);
      });
      return (0,external_Vue_.createVNode)("div", {
        "ref": el$,
        "class": [ns.e("nav-wrap"), ns.is("scrollable", !!scrollable.value), ns.is(rootTabs.props.tabPosition)]
      }, [scrollBtn, (0,external_Vue_.createVNode)("div", {
        "class": ns.e("nav-scroll"),
        "ref": navScroll$
      }, [(0,external_Vue_.createVNode)("div", {
        "class": [ns.e("nav"), ns.is(rootTabs.props.tabPosition), ns.is("stretch", props.stretch && ["top", "bottom"].includes(rootTabs.props.tabPosition))],
        "ref": nav$,
        "style": navStyle.value,
        "role": "tablist",
        "onKeydown": changeTab
      }, [...[!props.type ? (0,external_Vue_.createVNode)(TabBar, {
        "tabs": [...props.panes]
      }, null) : null, tabs]])])]);
    };
  }
});


//# sourceMappingURL=tab-nav.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/tabs/src/tabs.mjs

















const tabsProps = (0,runtime/* buildProps */.o8)({
  type: {
    type: String,
    values: ["card", "border-card", ""],
    default: ""
  },
  activeName: {
    type: [String, Number]
  },
  closable: Boolean,
  addable: Boolean,
  modelValue: {
    type: [String, Number]
  },
  editable: Boolean,
  tabPosition: {
    type: String,
    values: ["top", "right", "bottom", "left"],
    default: "top"
  },
  beforeLeave: {
    type: (0,runtime/* definePropType */.Cq)(Function),
    default: () => true
  },
  stretch: Boolean
});
const isPanelName = (value) => (0,shared_esm_bundler/* isString */.HD)(value) || (0,shared/* isNumber */.hj)(value);
const tabsEmits = {
  [constants_event/* UPDATE_MODEL_EVENT */.f_]: (name) => isPanelName(name),
  "tab-click": (pane, ev) => ev instanceof Event,
  "tab-change": (name) => isPanelName(name),
  edit: (paneName, action) => ["remove", "add"].includes(action),
  "tab-remove": (name) => isPanelName(name),
  "tab-add": () => true
};
var Tabs = (0,external_Vue_.defineComponent)({
  name: "ElTabs",
  props: tabsProps,
  emits: tabsEmits,
  setup(props, {
    emit,
    slots,
    expose
  }) {
    var _a, _b;
    const ns = (0,use_namespace/* useNamespace */.s)("tabs");
    const nav$ = (0,external_Vue_.ref)();
    const panes = (0,external_Vue_.reactive)({});
    const currentName = (0,external_Vue_.ref)((_b = (_a = props.modelValue) != null ? _a : props.activeName) != null ? _b : "0");
    const changeCurrentName = (value) => {
      currentName.value = value;
      emit(constants_event/* UPDATE_MODEL_EVENT */.f_, value);
      emit("tab-change", value);
    };
    const setCurrentName = async (value) => {
      var _a2, _b2, _c;
      if (currentName.value === value || (0,types/* isUndefined */.o8)(value))
        return;
      try {
        const canLeave = await ((_a2 = props.beforeLeave) == null ? void 0 : _a2.call(props, value, currentName.value));
        if (canLeave !== false) {
          changeCurrentName(value);
          (_c = (_b2 = nav$.value) == null ? void 0 : _b2.removeFocus) == null ? void 0 : _c.call(_b2);
        }
      } catch (e) {
      }
    };
    const handleTabClick = (tab, tabName, event) => {
      if (tab.props.disabled)
        return;
      setCurrentName(tabName);
      emit("tab-click", tab, event);
    };
    const handleTabRemove = (pane, ev) => {
      if (pane.props.disabled || (0,types/* isUndefined */.o8)(pane.props.name))
        return;
      ev.stopPropagation();
      emit("edit", pane.props.name, "remove");
      emit("tab-remove", pane.props.name);
    };
    const handleTabAdd = () => {
      emit("edit", void 0, "add");
      emit("tab-add");
    };
    (0,external_Vue_.watch)(() => props.activeName, (modelValue) => setCurrentName(modelValue));
    (0,external_Vue_.watch)(() => props.modelValue, (modelValue) => setCurrentName(modelValue));
    (0,external_Vue_.watch)(currentName, async () => {
      var _a2;
      await (0,external_Vue_.nextTick)();
      (_a2 = nav$.value) == null ? void 0 : _a2.scrollToActiveTab();
    });
    {
      const registerPane = (pane) => panes[pane.uid] = pane;
      const unregisterPane = (uid) => delete panes[uid];
      (0,external_Vue_.provide)(tabsRootContextKey, {
        props,
        currentName,
        registerPane,
        unregisterPane
      });
    }
    expose({
      currentName
    });
    return () => {
      const newButton = props.editable || props.addable ? (0,external_Vue_.createVNode)("span", {
        "class": ns.e("new-tab"),
        "tabindex": "0",
        "onClick": handleTabAdd,
        "onKeydown": (ev) => {
          if (ev.code === aria_EVENT_CODE.enter)
            handleTabAdd();
        }
      }, [(0,external_Vue_.createVNode)(components_icon/* ElIcon */.gn, {
        "class": ns.is("icon-plus")
      }, {
        default: () => [(0,external_Vue_.createVNode)(dist/* Plus */.v37, null, null)]
      })]) : null;
      const header = (0,external_Vue_.createVNode)("div", {
        "class": [ns.e("header"), ns.is(props.tabPosition)]
      }, [newButton, (0,external_Vue_.createVNode)(TabNav, {
        "ref": nav$,
        "currentName": currentName.value,
        "editable": props.editable,
        "type": props.type,
        "panes": Object.values(panes),
        "stretch": props.stretch,
        "onTabClick": handleTabClick,
        "onTabRemove": handleTabRemove
      }, null)]);
      const panels = (0,external_Vue_.createVNode)("div", {
        "class": ns.e("content")
      }, [(0,external_Vue_.renderSlot)(slots, "default")]);
      return (0,external_Vue_.createVNode)("div", {
        "class": [ns.b(), ns.m(props.tabPosition), {
          [ns.m("card")]: props.type === "card",
          [ns.m("border-card")]: props.type === "border-card"
        }]
      }, [...props.tabPosition !== "bottom" ? [header, panels] : [panels, header]]);
    };
  }
});


//# sourceMappingURL=tabs.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/tabs/src/tab-pane.mjs



const tabPaneProps = (0,runtime/* buildProps */.o8)({
  label: {
    type: String,
    default: ""
  },
  name: {
    type: [String, Number]
  },
  closable: Boolean,
  disabled: Boolean,
  lazy: Boolean
});


//# sourceMappingURL=tab-pane.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/tabs/src/tab-pane2.mjs











const tab_pane2_hoisted_1 = ["id", "aria-hidden", "aria-labelledby"];
const tab_pane2_default_ = {
  name: "ElTabPane"
};
const tab_pane2_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...tab_pane2_default_,
  props: tabPaneProps,
  setup(__props) {
    const props = __props;
    const COMPONENT_NAME = "ElTabPane";
    const instance = (0,external_Vue_.getCurrentInstance)();
    const slots = (0,external_Vue_.useSlots)();
    const tabsRoot = (0,external_Vue_.inject)(tabsRootContextKey);
    if (!tabsRoot)
      (0,error/* throwError */._)(COMPONENT_NAME, "usage: <el-tabs><el-tab-pane /></el-tabs/>");
    const ns = (0,use_namespace/* useNamespace */.s)("tab-pane");
    const index = (0,external_Vue_.ref)();
    const isClosable = (0,external_Vue_.computed)(() => props.closable || tabsRoot.props.closable);
    const active = (0,shared/* eagerComputed */.Rc)(() => {
      var _a;
      return tabsRoot.currentName.value === ((_a = props.name) != null ? _a : index.value);
    });
    const loaded = (0,external_Vue_.ref)(active.value);
    const paneName = (0,external_Vue_.computed)(() => {
      var _a;
      return (_a = props.name) != null ? _a : index.value;
    });
    const shouldBeRender = (0,shared/* eagerComputed */.Rc)(() => !props.lazy || loaded.value || active.value);
    (0,external_Vue_.watch)(active, (val) => {
      if (val)
        loaded.value = true;
    });
    const pane = (0,external_Vue_.reactive)({
      uid: instance.uid,
      slots,
      props,
      paneName,
      active,
      index,
      isClosable
    });
    (0,external_Vue_.onMounted)(() => {
      tabsRoot.registerPane(pane);
    });
    (0,external_Vue_.onUnmounted)(() => {
      tabsRoot.unregisterPane(pane.uid);
    });
    return (_ctx, _cache) => {
      return (0,external_Vue_.unref)(shouldBeRender) ? (0,external_Vue_.withDirectives)(((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
        key: 0,
        id: `pane-${(0,external_Vue_.unref)(paneName)}`,
        class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).b()),
        role: "tabpanel",
        "aria-hidden": !(0,external_Vue_.unref)(active),
        "aria-labelledby": `tab-${(0,external_Vue_.unref)(paneName)}`
      }, [
        (0,external_Vue_.renderSlot)(_ctx.$slots, "default")
      ], 10, tab_pane2_hoisted_1)), [
        [external_Vue_.vShow, (0,external_Vue_.unref)(active)]
      ]) : (0,external_Vue_.createCommentVNode)("v-if", true);
    };
  }
});
var TabPane = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(tab_pane2_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/tabs/src/tab-pane.vue"]]);


//# sourceMappingURL=tab-pane2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/tabs/index.mjs









const ElTabs = (0,install/* withInstall */.nz)(Tabs, {
  TabPane: TabPane
});
const ElTabPane = (0,install/* withNoopInstall */.dp)(TabPane);


//# sourceMappingURL=index.mjs.map

// EXTERNAL MODULE: ./node_modules/lodash-es/union.js + 11 modules
var union = __webpack_require__(50093);
;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/time-picker/src/props/panel-time-range.mjs




const panelTimeRangeProps = (0,runtime/* buildProps */.o8)({
  ...timePanelSharedProps,
  parsedValue: {
    type: (0,runtime/* definePropType */.Cq)(Array)
  }
});


//# sourceMappingURL=panel-time-range.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/time-picker/src/time-picker-com/panel-time-range.mjs
















const panel_time_range_hoisted_1 = ["disabled"];
const panel_time_range_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  __name: "panel-time-range",
  props: panelTimeRangeProps,
  emits: ["pick", "select-range", "set-picker-option"],
  setup(__props, { emit }) {
    const props = __props;
    const makeSelectRange = (start, end) => {
      const result = [];
      for (let i = start; i <= end; i++) {
        result.push(i);
      }
      return result;
    };
    const { t, lang } = useLocale();
    const nsTime = (0,use_namespace/* useNamespace */.s)("time");
    const nsPicker = (0,use_namespace/* useNamespace */.s)("picker");
    const pickerBase = (0,external_Vue_.inject)("EP_PICKER_BASE");
    const {
      arrowControl,
      disabledHours,
      disabledMinutes,
      disabledSeconds,
      defaultValue
    } = pickerBase.props;
    const startTime = (0,external_Vue_.computed)(() => props.parsedValue[0]);
    const endTime = (0,external_Vue_.computed)(() => props.parsedValue[1]);
    const oldValue = useOldValue(props);
    const handleCancel = () => {
      emit("pick", oldValue.value, false);
    };
    const showSeconds = (0,external_Vue_.computed)(() => {
      return props.format.includes("ss");
    });
    const amPmMode = (0,external_Vue_.computed)(() => {
      if (props.format.includes("A"))
        return "A";
      if (props.format.includes("a"))
        return "a";
      return "";
    });
    const handleConfirm = (visible = false) => {
      emit("pick", [startTime.value, endTime.value], visible);
    };
    const handleMinChange = (date) => {
      handleChange(date.millisecond(0), endTime.value);
    };
    const handleMaxChange = (date) => {
      handleChange(startTime.value, date.millisecond(0));
    };
    const isValidValue = (_date) => {
      const parsedDate = _date.map((_) => dayjs_min(_).locale(lang.value));
      const result = getRangeAvailableTime(parsedDate);
      return parsedDate[0].isSame(result[0]) && parsedDate[1].isSame(result[1]);
    };
    const handleChange = (start, end) => {
      emit("pick", [start, end], true);
    };
    const btnConfirmDisabled = (0,external_Vue_.computed)(() => {
      return startTime.value > endTime.value;
    });
    const selectionRange = (0,external_Vue_.ref)([0, 2]);
    const setMinSelectionRange = (start, end) => {
      emit("select-range", start, end, "min");
      selectionRange.value = [start, end];
    };
    const offset = (0,external_Vue_.computed)(() => showSeconds.value ? 11 : 8);
    const setMaxSelectionRange = (start, end) => {
      emit("select-range", start, end, "max");
      const _offset = (0,external_Vue_.unref)(offset);
      selectionRange.value = [start + _offset, end + _offset];
    };
    const changeSelectionRange = (step) => {
      const list = showSeconds.value ? [0, 3, 6, 11, 14, 17] : [0, 3, 8, 11];
      const mapping = ["hours", "minutes"].concat(showSeconds.value ? ["seconds"] : []);
      const index = list.indexOf(selectionRange.value[0]);
      const next = (index + step + list.length) % list.length;
      const half = list.length / 2;
      if (next < half) {
        timePickerOptions["start_emitSelectRange"](mapping[next]);
      } else {
        timePickerOptions["end_emitSelectRange"](mapping[next - half]);
      }
    };
    const handleKeydown = (event) => {
      const code = event.code;
      const { left, right, up, down } = aria_EVENT_CODE;
      if ([left, right].includes(code)) {
        const step = code === left ? -1 : 1;
        changeSelectionRange(step);
        event.preventDefault();
        return;
      }
      if ([up, down].includes(code)) {
        const step = code === up ? -1 : 1;
        const role = selectionRange.value[0] < offset.value ? "start" : "end";
        timePickerOptions[`${role}_scrollDown`](step);
        event.preventDefault();
        return;
      }
    };
    const disabledHours_ = (role, compare) => {
      const defaultDisable = disabledHours ? disabledHours(role) : [];
      const isStart = role === "start";
      const compareDate = compare || (isStart ? endTime.value : startTime.value);
      const compareHour = compareDate.hour();
      const nextDisable = isStart ? makeSelectRange(compareHour + 1, 23) : makeSelectRange(0, compareHour - 1);
      return (0,union/* default */.Z)(defaultDisable, nextDisable);
    };
    const disabledMinutes_ = (hour, role, compare) => {
      const defaultDisable = disabledMinutes ? disabledMinutes(hour, role) : [];
      const isStart = role === "start";
      const compareDate = compare || (isStart ? endTime.value : startTime.value);
      const compareHour = compareDate.hour();
      if (hour !== compareHour) {
        return defaultDisable;
      }
      const compareMinute = compareDate.minute();
      const nextDisable = isStart ? makeSelectRange(compareMinute + 1, 59) : makeSelectRange(0, compareMinute - 1);
      return (0,union/* default */.Z)(defaultDisable, nextDisable);
    };
    const disabledSeconds_ = (hour, minute, role, compare) => {
      const defaultDisable = disabledSeconds ? disabledSeconds(hour, minute, role) : [];
      const isStart = role === "start";
      const compareDate = compare || (isStart ? endTime.value : startTime.value);
      const compareHour = compareDate.hour();
      const compareMinute = compareDate.minute();
      if (hour !== compareHour || minute !== compareMinute) {
        return defaultDisable;
      }
      const compareSecond = compareDate.second();
      const nextDisable = isStart ? makeSelectRange(compareSecond + 1, 59) : makeSelectRange(0, compareSecond - 1);
      return (0,union/* default */.Z)(defaultDisable, nextDisable);
    };
    const getRangeAvailableTime = ([start, end]) => {
      return [
        getAvailableTime(start, "start", true, end),
        getAvailableTime(end, "end", false, start)
      ];
    };
    const { getAvailableHours, getAvailableMinutes, getAvailableSeconds } = buildAvailableTimeSlotGetter(disabledHours_, disabledMinutes_, disabledSeconds_);
    const {
      timePickerOptions,
      getAvailableTime,
      onSetOption
    } = useTimePanel({
      getAvailableHours,
      getAvailableMinutes,
      getAvailableSeconds
    });
    const parseUserInput = (days) => {
      if (!days)
        return null;
      if ((0,shared_esm_bundler/* isArray */.kJ)(days)) {
        return days.map((d) => dayjs_min(d, props.format).locale(lang.value));
      }
      return dayjs_min(days, props.format).locale(lang.value);
    };
    const formatToString = (days) => {
      if (!days)
        return null;
      if ((0,shared_esm_bundler/* isArray */.kJ)(days)) {
        return days.map((d) => d.format(props.format));
      }
      return days.format(props.format);
    };
    const getDefaultValue = () => {
      if ((0,shared_esm_bundler/* isArray */.kJ)(defaultValue)) {
        return defaultValue.map((d) => dayjs_min(d).locale(lang.value));
      }
      const defaultDay = dayjs_min(defaultValue).locale(lang.value);
      return [defaultDay, defaultDay.add(60, "m")];
    };
    emit("set-picker-option", ["formatToString", formatToString]);
    emit("set-picker-option", ["parseUserInput", parseUserInput]);
    emit("set-picker-option", ["isValidValue", isValidValue]);
    emit("set-picker-option", ["handleKeydownInput", handleKeydown]);
    emit("set-picker-option", ["getDefaultValue", getDefaultValue]);
    emit("set-picker-option", ["getRangeAvailableTime", getRangeAvailableTime]);
    return (_ctx, _cache) => {
      return _ctx.actualVisible ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
        key: 0,
        class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(nsTime).b("range-picker"), (0,external_Vue_.unref)(nsPicker).b("panel")])
      }, [
        (0,external_Vue_.createElementVNode)("div", {
          class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(nsTime).be("range-picker", "content"))
        }, [
          (0,external_Vue_.createElementVNode)("div", {
            class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(nsTime).be("range-picker", "cell"))
          }, [
            (0,external_Vue_.createElementVNode)("div", {
              class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(nsTime).be("range-picker", "header"))
            }, (0,external_Vue_.toDisplayString)((0,external_Vue_.unref)(t)("el.datepicker.startTime")), 3),
            (0,external_Vue_.createElementVNode)("div", {
              class: (0,external_Vue_.normalizeClass)([
                (0,external_Vue_.unref)(nsTime).be("range-picker", "body"),
                (0,external_Vue_.unref)(nsTime).be("panel", "content"),
                (0,external_Vue_.unref)(nsTime).is("arrow", (0,external_Vue_.unref)(arrowControl)),
                { "has-seconds": (0,external_Vue_.unref)(showSeconds) }
              ])
            }, [
              (0,external_Vue_.createVNode)(TimeSpinner, {
                ref: "minSpinner",
                role: "start",
                "show-seconds": (0,external_Vue_.unref)(showSeconds),
                "am-pm-mode": (0,external_Vue_.unref)(amPmMode),
                "arrow-control": (0,external_Vue_.unref)(arrowControl),
                "spinner-date": (0,external_Vue_.unref)(startTime),
                "disabled-hours": disabledHours_,
                "disabled-minutes": disabledMinutes_,
                "disabled-seconds": disabledSeconds_,
                onChange: handleMinChange,
                onSetOption: (0,external_Vue_.unref)(onSetOption),
                onSelectRange: setMinSelectionRange
              }, null, 8, ["show-seconds", "am-pm-mode", "arrow-control", "spinner-date", "onSetOption"])
            ], 2)
          ], 2),
          (0,external_Vue_.createElementVNode)("div", {
            class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(nsTime).be("range-picker", "cell"))
          }, [
            (0,external_Vue_.createElementVNode)("div", {
              class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(nsTime).be("range-picker", "header"))
            }, (0,external_Vue_.toDisplayString)((0,external_Vue_.unref)(t)("el.datepicker.endTime")), 3),
            (0,external_Vue_.createElementVNode)("div", {
              class: (0,external_Vue_.normalizeClass)([
                (0,external_Vue_.unref)(nsTime).be("range-picker", "body"),
                (0,external_Vue_.unref)(nsTime).be("panel", "content"),
                (0,external_Vue_.unref)(nsTime).is("arrow", (0,external_Vue_.unref)(arrowControl)),
                { "has-seconds": (0,external_Vue_.unref)(showSeconds) }
              ])
            }, [
              (0,external_Vue_.createVNode)(TimeSpinner, {
                ref: "maxSpinner",
                role: "end",
                "show-seconds": (0,external_Vue_.unref)(showSeconds),
                "am-pm-mode": (0,external_Vue_.unref)(amPmMode),
                "arrow-control": (0,external_Vue_.unref)(arrowControl),
                "spinner-date": (0,external_Vue_.unref)(endTime),
                "disabled-hours": disabledHours_,
                "disabled-minutes": disabledMinutes_,
                "disabled-seconds": disabledSeconds_,
                onChange: handleMaxChange,
                onSetOption: (0,external_Vue_.unref)(onSetOption),
                onSelectRange: setMaxSelectionRange
              }, null, 8, ["show-seconds", "am-pm-mode", "arrow-control", "spinner-date", "onSetOption"])
            ], 2)
          ], 2)
        ], 2),
        (0,external_Vue_.createElementVNode)("div", {
          class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(nsTime).be("panel", "footer"))
        }, [
          (0,external_Vue_.createElementVNode)("button", {
            type: "button",
            class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(nsTime).be("panel", "btn"), "cancel"]),
            onClick: _cache[0] || (_cache[0] = ($event) => handleCancel())
          }, (0,external_Vue_.toDisplayString)((0,external_Vue_.unref)(t)("el.datepicker.cancel")), 3),
          (0,external_Vue_.createElementVNode)("button", {
            type: "button",
            class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(nsTime).be("panel", "btn"), "confirm"]),
            disabled: (0,external_Vue_.unref)(btnConfirmDisabled),
            onClick: _cache[1] || (_cache[1] = ($event) => handleConfirm())
          }, (0,external_Vue_.toDisplayString)((0,external_Vue_.unref)(t)("el.datepicker.confirm")), 11, panel_time_range_hoisted_1)
        ], 2)
      ], 2)) : (0,external_Vue_.createCommentVNode)("v-if", true);
    };
  }
});
var TimeRangePanel = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(panel_time_range_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/time-picker/src/time-picker-com/panel-time-range.vue"]]);


//# sourceMappingURL=panel-time-range.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/time-picker/src/time-picker.mjs









dayjs_min.extend(customParseFormat);
var TimePicker = (0,external_Vue_.defineComponent)({
  name: "ElTimePicker",
  install: null,
  props: {
    ...timePickerDefaultProps,
    isRange: {
      type: Boolean,
      default: false
    }
  },
  emits: ["update:modelValue"],
  setup(props, ctx) {
    const commonPicker = (0,external_Vue_.ref)();
    const [type, Panel] = props.isRange ? ["timerange", TimeRangePanel] : ["time", TimePickPanel];
    const modelUpdater = (value) => ctx.emit("update:modelValue", value);
    (0,external_Vue_.provide)("ElPopperOptions", props.popperOptions);
    ctx.expose({
      focus: (e) => {
        var _a;
        (_a = commonPicker.value) == null ? void 0 : _a.handleFocusInput(e);
      },
      blur: (e) => {
        var _a;
        (_a = commonPicker.value) == null ? void 0 : _a.handleBlurInput(e);
      }
    });
    return () => {
      var _a;
      const format = (_a = props.format) != null ? _a : DEFAULT_FORMATS_TIME;
      return (0,external_Vue_.createVNode)(CommonPicker, (0,external_Vue_.mergeProps)(props, {
        "ref": commonPicker,
        "type": type,
        "format": format,
        "onUpdate:modelValue": modelUpdater
      }), {
        default: (props2) => (0,external_Vue_.createVNode)(Panel, props2, null)
      });
    };
  }
});


//# sourceMappingURL=time-picker.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/time-picker/index.mjs







const _TimePicker = TimePicker;
_TimePicker.install = (app) => {
  app.component(_TimePicker.name, _TimePicker);
};
const ElTimePicker = _TimePicker;


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/time-select/src/time-select.mjs






const timeSelectProps = (0,runtime/* buildProps */.o8)({
  format: {
    type: String,
    default: "HH:mm"
  },
  modelValue: String,
  disabled: Boolean,
  editable: {
    type: Boolean,
    default: true
  },
  effect: {
    type: String,
    default: "light"
  },
  clearable: {
    type: Boolean,
    default: true
  },
  size: use_common_props/* useSizeProp */.Pp,
  placeholder: String,
  start: {
    type: String,
    default: "09:00"
  },
  end: {
    type: String,
    default: "18:00"
  },
  step: {
    type: String,
    default: "00:30"
  },
  minTime: String,
  maxTime: String,
  name: String,
  prefixIcon: {
    type: (0,runtime/* definePropType */.Cq)([String, Object]),
    default: () => dist/* Clock */.SUY
  },
  clearIcon: {
    type: (0,runtime/* definePropType */.Cq)([String, Object]),
    default: () => dist/* CircleClose */.K41
  }
});


//# sourceMappingURL=time-select.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/time-select/src/utils.mjs
const parseTime = (time) => {
  const values = (time || "").split(":");
  if (values.length >= 2) {
    let hours = Number.parseInt(values[0], 10);
    const minutes = Number.parseInt(values[1], 10);
    const timeUpper = time.toUpperCase();
    if (timeUpper.includes("AM") && hours === 12) {
      hours = 0;
    } else if (timeUpper.includes("PM") && hours !== 12) {
      hours += 12;
    }
    return {
      hours,
      minutes
    };
  }
  return null;
};
const compareTime = (time1, time2) => {
  const value1 = parseTime(time1);
  if (!value1)
    return -1;
  const value2 = parseTime(time2);
  if (!value2)
    return -1;
  const minutes1 = value1.minutes + value1.hours * 60;
  const minutes2 = value2.minutes + value2.hours * 60;
  if (minutes1 === minutes2) {
    return 0;
  }
  return minutes1 > minutes2 ? 1 : -1;
};
const padTime = (time) => {
  return `${time}`.padStart(2, "0");
};
const formatTime = (time) => {
  return `${padTime(time.hours)}:${padTime(time.minutes)}`;
};
const nextTime = (time, step) => {
  const timeValue = parseTime(time);
  if (!timeValue)
    return "";
  const stepValue = parseTime(step);
  if (!stepValue)
    return "";
  const next = {
    hours: timeValue.hours,
    minutes: timeValue.minutes
  };
  next.minutes += stepValue.minutes;
  next.hours += stepValue.hours;
  next.hours += Math.floor(next.minutes / 60);
  next.minutes = next.minutes % 60;
  return formatTime(next);
};


//# sourceMappingURL=utils.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/time-select/src/time-select2.mjs











const time_select2_default_ = {
  name: "ElTimeSelect"
};
const time_select2_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...time_select2_default_,
  props: timeSelectProps,
  emits: ["change", "blur", "focus", "update:modelValue"],
  setup(__props, { expose }) {
    const props = __props;
    dayjs_min.extend(customParseFormat);
    const { Option: ElOption } = ElSelect;
    const nsInput = (0,use_namespace/* useNamespace */.s)("input");
    const select = (0,external_Vue_.ref)();
    const value = (0,external_Vue_.computed)(() => props.modelValue);
    const start = (0,external_Vue_.computed)(() => {
      const time = parseTime(props.start);
      return time ? formatTime(time) : null;
    });
    const end = (0,external_Vue_.computed)(() => {
      const time = parseTime(props.end);
      return time ? formatTime(time) : null;
    });
    const step = (0,external_Vue_.computed)(() => {
      const time = parseTime(props.step);
      return time ? formatTime(time) : null;
    });
    const minTime = (0,external_Vue_.computed)(() => {
      const time = parseTime(props.minTime || "");
      return time ? formatTime(time) : null;
    });
    const maxTime = (0,external_Vue_.computed)(() => {
      const time = parseTime(props.maxTime || "");
      return time ? formatTime(time) : null;
    });
    const items = (0,external_Vue_.computed)(() => {
      const result = [];
      if (props.start && props.end && props.step) {
        let current = start.value;
        let currentTime;
        while (current && end.value && compareTime(current, end.value) <= 0) {
          currentTime = dayjs_min(current, "HH:mm").format(props.format);
          result.push({
            value: currentTime,
            disabled: compareTime(current, minTime.value || "-1:-1") <= 0 || compareTime(current, maxTime.value || "100:100") >= 0
          });
          current = nextTime(current, step.value);
        }
      }
      return result;
    });
    const blur = () => {
      var _a, _b;
      (_b = (_a = select.value) == null ? void 0 : _a.blur) == null ? void 0 : _b.call(_a);
    };
    const focus = () => {
      var _a, _b;
      (_b = (_a = select.value) == null ? void 0 : _a.focus) == null ? void 0 : _b.call(_a);
    };
    expose({
      blur,
      focus
    });
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.unref)(ElSelect), {
        ref_key: "select",
        ref: select,
        "model-value": (0,external_Vue_.unref)(value),
        disabled: _ctx.disabled,
        clearable: _ctx.clearable,
        "clear-icon": _ctx.clearIcon,
        size: _ctx.size,
        effect: _ctx.effect,
        placeholder: _ctx.placeholder,
        "default-first-option": "",
        filterable: _ctx.editable,
        "onUpdate:modelValue": _cache[0] || (_cache[0] = (event) => _ctx.$emit("update:modelValue", event)),
        onChange: _cache[1] || (_cache[1] = (event) => _ctx.$emit("change", event)),
        onBlur: _cache[2] || (_cache[2] = (event) => _ctx.$emit("blur", event)),
        onFocus: _cache[3] || (_cache[3] = (event) => _ctx.$emit("focus", event))
      }, {
        prefix: (0,external_Vue_.withCtx)(() => [
          _ctx.prefixIcon ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.unref)(components_icon/* ElIcon */.gn), {
            key: 0,
            class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(nsInput).e("prefix-icon"))
          }, {
            default: (0,external_Vue_.withCtx)(() => [
              ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.resolveDynamicComponent)(_ctx.prefixIcon)))
            ]),
            _: 1
          }, 8, ["class"])) : (0,external_Vue_.createCommentVNode)("v-if", true)
        ]),
        default: (0,external_Vue_.withCtx)(() => [
          ((0,external_Vue_.openBlock)(true), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, null, (0,external_Vue_.renderList)((0,external_Vue_.unref)(items), (item) => {
            return (0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.unref)(ElOption), {
              key: item.value,
              label: item.value,
              value: item.value,
              disabled: item.disabled
            }, null, 8, ["label", "value", "disabled"]);
          }), 128))
        ]),
        _: 1
      }, 8, ["model-value", "disabled", "clearable", "clear-icon", "size", "effect", "placeholder", "filterable"]);
    };
  }
});
var TimeSelect = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(time_select2_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/time-select/src/time-select.vue"]]);


//# sourceMappingURL=time-select2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/time-select/index.mjs


TimeSelect.install = (app) => {
  app.component(TimeSelect.name, TimeSelect);
};
const _TimeSelect = TimeSelect;
const ElTimeSelect = _TimeSelect;


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/timeline/src/timeline.mjs




const Timeline = (0,external_Vue_.defineComponent)({
  name: "ElTimeline",
  setup(_, { slots }) {
    const ns = (0,use_namespace/* useNamespace */.s)("timeline");
    (0,external_Vue_.provide)("timeline", slots);
    return () => {
      return (0,external_Vue_.h)("ul", { class: [ns.b()] }, [(0,external_Vue_.renderSlot)(slots, "default")]);
    };
  }
});


//# sourceMappingURL=timeline.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/timeline/src/timeline-item.mjs




const timelineItemProps = (0,runtime/* buildProps */.o8)({
  timestamp: {
    type: String,
    default: ""
  },
  hideTimestamp: {
    type: Boolean,
    default: false
  },
  center: {
    type: Boolean,
    default: false
  },
  placement: {
    type: String,
    values: ["top", "bottom"],
    default: "bottom"
  },
  type: {
    type: String,
    values: ["primary", "success", "warning", "danger", "info"],
    default: ""
  },
  color: {
    type: String,
    default: ""
  },
  size: {
    type: String,
    values: ["normal", "large"],
    default: "normal"
  },
  icon: {
    type: icon/* iconPropType */.AA,
    default: ""
  },
  hollow: {
    type: Boolean,
    default: false
  }
});


//# sourceMappingURL=timeline-item.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/timeline/src/timeline-item2.mjs







const timeline_item2_default_ = {
  name: "ElTimelineItem"
};
const timeline_item2_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...timeline_item2_default_,
  props: timelineItemProps,
  setup(__props) {
    const ns = (0,use_namespace/* useNamespace */.s)("timeline-item");
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("li", {
        class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(ns).b(), { [(0,external_Vue_.unref)(ns).e("center")]: _ctx.center }])
      }, [
        (0,external_Vue_.createElementVNode)("div", {
          class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("tail"))
        }, null, 2),
        !_ctx.$slots.dot ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
          key: 0,
          class: (0,external_Vue_.normalizeClass)([
            (0,external_Vue_.unref)(ns).e("node"),
            (0,external_Vue_.unref)(ns).em("node", _ctx.size || ""),
            (0,external_Vue_.unref)(ns).em("node", _ctx.type || ""),
            (0,external_Vue_.unref)(ns).is("hollow", _ctx.hollow)
          ]),
          style: (0,external_Vue_.normalizeStyle)({
            backgroundColor: _ctx.color
          })
        }, [
          _ctx.icon ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.unref)(components_icon/* ElIcon */.gn), {
            key: 0,
            class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("icon"))
          }, {
            default: (0,external_Vue_.withCtx)(() => [
              ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.resolveDynamicComponent)(_ctx.icon)))
            ]),
            _: 1
          }, 8, ["class"])) : (0,external_Vue_.createCommentVNode)("v-if", true)
        ], 6)) : (0,external_Vue_.createCommentVNode)("v-if", true),
        _ctx.$slots.dot ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
          key: 1,
          class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("dot"))
        }, [
          (0,external_Vue_.renderSlot)(_ctx.$slots, "dot")
        ], 2)) : (0,external_Vue_.createCommentVNode)("v-if", true),
        (0,external_Vue_.createElementVNode)("div", {
          class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("wrapper"))
        }, [
          !_ctx.hideTimestamp && _ctx.placement === "top" ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
            key: 0,
            class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(ns).e("timestamp"), (0,external_Vue_.unref)(ns).is("top")])
          }, (0,external_Vue_.toDisplayString)(_ctx.timestamp), 3)) : (0,external_Vue_.createCommentVNode)("v-if", true),
          (0,external_Vue_.createElementVNode)("div", {
            class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("content"))
          }, [
            (0,external_Vue_.renderSlot)(_ctx.$slots, "default")
          ], 2),
          !_ctx.hideTimestamp && _ctx.placement === "bottom" ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
            key: 1,
            class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(ns).e("timestamp"), (0,external_Vue_.unref)(ns).is("bottom")])
          }, (0,external_Vue_.toDisplayString)(_ctx.timestamp), 3)) : (0,external_Vue_.createCommentVNode)("v-if", true)
        ], 2)
      ], 2);
    };
  }
});
var TimelineItem = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(timeline_item2_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/timeline/src/timeline-item.vue"]]);


//# sourceMappingURL=timeline-item2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/timeline/index.mjs






const ElTimeline = (0,install/* withInstall */.nz)(Timeline, {
  TimelineItem: TimelineItem
});
const ElTimelineItem = (0,install/* withNoopInstall */.dp)(TimelineItem);


//# sourceMappingURL=index.mjs.map

// EXTERNAL MODULE: ./node_modules/lodash-es/pick.js + 7 modules
var pick = __webpack_require__(33095);
;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/tooltip-v2/src/common.mjs



const tooltipV2CommonProps = (0,runtime/* buildProps */.o8)({
  nowrap: Boolean
});
var TooltipV2Sides = /* @__PURE__ */ ((TooltipV2Sides2) => {
  TooltipV2Sides2["top"] = "top";
  TooltipV2Sides2["bottom"] = "bottom";
  TooltipV2Sides2["left"] = "left";
  TooltipV2Sides2["right"] = "right";
  return TooltipV2Sides2;
})(TooltipV2Sides || {});
const tooltipV2Sides = Object.values(TooltipV2Sides);
const tooltipV2OppositeSide = {
  ["top" /* top */]: "bottom" /* bottom */,
  ["bottom" /* bottom */]: "top" /* top */,
  ["left" /* left */]: "right" /* right */,
  ["right" /* right */]: "left" /* left */
};
const tooltipV2ArrowBorders = {
  ["top" /* top */]: ["left" /* left */, "top" /* top */],
  ["bottom" /* bottom */]: ["bottom" /* bottom */, "right" /* right */],
  ["left" /* left */]: ["bottom" /* bottom */, "left" /* left */],
  ["right" /* right */]: ["top" /* top */, "right" /* right */]
};


//# sourceMappingURL=common.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/tooltip-v2/src/arrow.mjs




const tooltipV2ArrowProps = (0,runtime/* buildProps */.o8)({
  width: {
    type: Number,
    default: 10
  },
  height: {
    type: Number,
    default: 10
  },
  style: {
    type: (0,runtime/* definePropType */.Cq)(Object),
    default: null
  }
});
const tooltipV2ArrowSpecialProps = (0,runtime/* buildProps */.o8)({
  side: {
    type: (0,runtime/* definePropType */.Cq)(String),
    values: tooltipV2Sides,
    required: true
  }
});


//# sourceMappingURL=arrow.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/tooltip-v2/src/content.mjs



const tooltipV2Strategies = ["absolute", "fixed"];
const tooltipV2Placements = [
  "top-start",
  "top-end",
  "top",
  "bottom-start",
  "bottom-end",
  "bottom",
  "left-start",
  "left-end",
  "left",
  "right-start",
  "right-end",
  "right"
];
const tooltipV2ContentProps = (0,runtime/* buildProps */.o8)({
  ariaLabel: String,
  arrowPadding: {
    type: (0,runtime/* definePropType */.Cq)(Number),
    default: 5
  },
  effect: {
    type: String,
    default: ""
  },
  contentClass: String,
  placement: {
    type: (0,runtime/* definePropType */.Cq)(String),
    values: tooltipV2Placements,
    default: "bottom"
  },
  reference: {
    type: (0,runtime/* definePropType */.Cq)(Object),
    default: null
  },
  offset: {
    type: Number,
    default: 8
  },
  strategy: {
    type: (0,runtime/* definePropType */.Cq)(String),
    values: tooltipV2Strategies,
    default: "absolute"
  },
  showArrow: {
    type: Boolean,
    default: false
  }
});


//# sourceMappingURL=content.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/tooltip-v2/src/root.mjs



const tooltipV2RootProps = (0,runtime/* buildProps */.o8)({
  delayDuration: {
    type: Number,
    default: 300
  },
  defaultOpen: Boolean,
  open: {
    type: Boolean,
    default: void 0
  },
  onOpenChange: {
    type: (0,runtime/* definePropType */.Cq)(Function)
  },
  "onUpdate:open": {
    type: (0,runtime/* definePropType */.Cq)(Function)
  }
});


//# sourceMappingURL=root.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/tooltip-v2/src/trigger.mjs



const EventHandler = {
  type: (0,runtime/* definePropType */.Cq)(Function)
};
const tooltipV2TriggerProps = (0,runtime/* buildProps */.o8)({
  onBlur: EventHandler,
  onClick: EventHandler,
  onFocus: EventHandler,
  onMouseDown: EventHandler,
  onMouseEnter: EventHandler,
  onMouseLeave: EventHandler
});


//# sourceMappingURL=trigger.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/tooltip-v2/src/tooltip.mjs







const tooltipV2Props = (0,runtime/* buildProps */.o8)({
  ...tooltipV2RootProps,
  ...tooltipV2ArrowProps,
  ...tooltipV2TriggerProps,
  ...tooltipV2ContentProps,
  alwaysOn: Boolean,
  fullTransition: Boolean,
  transitionProps: {
    type: (0,runtime/* definePropType */.Cq)(Object),
    default: null
  },
  teleported: Boolean,
  to: {
    type: (0,runtime/* definePropType */.Cq)(String),
    default: "body"
  }
});


//# sourceMappingURL=tooltip.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/tokens/tooltip-v2.mjs
const tooltipV2RootKey = Symbol("tooltipV2");
const tooltipV2ContentKey = Symbol("tooltipV2Content");
const TOOLTIP_V2_OPEN = "tooltip_v2.open";


//# sourceMappingURL=tooltip-v2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/tooltip-v2/src/root2.mjs












const root2_default_ = {
  name: "ElTooltipV2Root"
};
const root2_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...root2_default_,
  props: tooltipV2RootProps,
  setup(__props, { expose }) {
    const props = __props;
    const _open = (0,external_Vue_.ref)(props.defaultOpen);
    const triggerRef = (0,external_Vue_.ref)(null);
    const open = (0,external_Vue_.computed)({
      get: () => (0,types/* isPropAbsent */.Cl)(props.open) ? _open.value : props.open,
      set: (open2) => {
        var _a;
        _open.value = open2;
        (_a = props["onUpdate:open"]) == null ? void 0 : _a.call(props, open2);
      }
    });
    const isOpenDelayed = (0,external_Vue_.computed)(() => (0,shared/* isNumber */.hj)(props.delayDuration) && props.delayDuration > 0);
    const { start: onDelayedOpen, stop: clearTimer } = (0,shared/* useTimeoutFn */.eM)(() => {
      open.value = true;
    }, (0,external_Vue_.computed)(() => props.delayDuration), {
      immediate: false
    });
    const ns = (0,use_namespace/* useNamespace */.s)("tooltip-v2");
    const contentId = (0,use_id/* useId */.M)();
    const onNormalOpen = () => {
      clearTimer();
      open.value = true;
    };
    const onDelayOpen = () => {
      (0,external_Vue_.unref)(isOpenDelayed) ? onDelayedOpen() : onNormalOpen();
    };
    const onOpen = onNormalOpen;
    const onClose = () => {
      clearTimer();
      open.value = false;
    };
    const onChange = (open2) => {
      var _a;
      if (open2) {
        document.dispatchEvent(new CustomEvent(TOOLTIP_V2_OPEN));
        onOpen();
      }
      (_a = props.onOpenChange) == null ? void 0 : _a.call(props, open2);
    };
    (0,external_Vue_.watch)(open, onChange);
    (0,external_Vue_.onMounted)(() => {
      document.addEventListener(TOOLTIP_V2_OPEN, onClose);
    });
    (0,external_Vue_.onBeforeUnmount)(() => {
      clearTimer();
      document.removeEventListener(TOOLTIP_V2_OPEN, onClose);
    });
    (0,external_Vue_.provide)(tooltipV2RootKey, {
      contentId,
      triggerRef,
      ns,
      onClose,
      onDelayOpen,
      onOpen
    });
    expose({
      onOpen,
      onClose
    });
    return (_ctx, _cache) => {
      return (0,external_Vue_.renderSlot)(_ctx.$slots, "default", { open: (0,external_Vue_.unref)(open) });
    };
  }
});
var TooltipV2Root = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(root2_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/tooltip-v2/src/root.vue"]]);


//# sourceMappingURL=root2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/tooltip-v2/src/arrow2.mjs






const src_arrow2_default_ = {
  name: "ElTooltipV2Arrow"
};
const src_arrow2_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...src_arrow2_default_,
  props: {
    ...tooltipV2ArrowProps,
    ...tooltipV2ArrowSpecialProps
  },
  setup(__props) {
    const props = __props;
    const { ns } = (0,external_Vue_.inject)(tooltipV2RootKey);
    const { arrowRef } = (0,external_Vue_.inject)(tooltipV2ContentKey);
    const arrowStyle = (0,external_Vue_.computed)(() => {
      const { style, width, height } = props;
      const namespace = ns.namespace.value;
      return {
        [`--${namespace}-tooltip-v2-arrow-width`]: `${width}px`,
        [`--${namespace}-tooltip-v2-arrow-height`]: `${height}px`,
        [`--${namespace}-tooltip-v2-arrow-border-width`]: `${width / 2}px`,
        [`--${namespace}-tooltip-v2-arrow-cover-width`]: width / 2 - 1,
        ...style || {}
      };
    });
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("span", {
        ref_key: "arrowRef",
        ref: arrowRef,
        style: (0,external_Vue_.normalizeStyle)((0,external_Vue_.unref)(arrowStyle)),
        class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("arrow"))
      }, null, 6);
    };
  }
});
var TooltipV2Arrow = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(src_arrow2_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/tooltip-v2/src/arrow.vue"]]);


//# sourceMappingURL=arrow2.mjs.map

// EXTERNAL MODULE: ./node_modules/@floating-ui/core/dist/floating-ui.core.browser.min.mjs
var floating_ui_core_browser_min = __webpack_require__(88301);
// EXTERNAL MODULE: ./node_modules/@floating-ui/dom/dist/floating-ui.dom.browser.min.mjs
var floating_ui_dom_browser_min = __webpack_require__(55863);
;// CONCATENATED MODULE: ./node_modules/element-plus/es/hooks/use-floating/index.mjs








const useFloatingProps = (0,runtime/* buildProps */.o8)({});
const unrefReference = (elRef) => {
  if (!shared/* isClient */.C5)
    return;
  if (!elRef)
    return elRef;
  const unrefEl = (0,core/* unrefElement */.NXq)(elRef);
  if (unrefEl)
    return unrefEl;
  return (0,external_Vue_.isRef)(elRef) ? unrefEl : elRef;
};
const getPositionDataWithUnit = (record, key) => {
  const value = record == null ? void 0 : record[key];
  return isNil(value) ? "" : `${value}px`;
};
const useFloating = ({
  middleware,
  placement,
  strategy
}) => {
  const referenceRef = (0,external_Vue_.ref)();
  const contentRef = (0,external_Vue_.ref)();
  const x = (0,external_Vue_.ref)();
  const y = (0,external_Vue_.ref)();
  const middlewareData = (0,external_Vue_.ref)({});
  const states = {
    x,
    y,
    placement,
    strategy,
    middlewareData
  };
  const update = async () => {
    if (!shared/* isClient */.C5)
      return;
    const referenceEl = unrefReference(referenceRef);
    const contentEl = (0,core/* unrefElement */.NXq)(contentRef);
    if (!referenceEl || !contentEl)
      return;
    const data = await (0,floating_ui_dom_browser_min/* computePosition */.oo)(referenceEl, contentEl, {
      placement: (0,external_Vue_.unref)(placement),
      strategy: (0,external_Vue_.unref)(strategy),
      middleware: (0,external_Vue_.unref)(middleware)
    });
    (0,objects/* keysOf */.uc)(states).forEach((key) => {
      states[key].value = data[key];
    });
  };
  (0,external_Vue_.onMounted)(() => {
    (0,external_Vue_.watchEffect)(() => {
      update();
    });
  });
  return {
    ...states,
    update,
    referenceRef,
    contentRef
  };
};
const arrowMiddleware = ({
  arrowRef,
  padding
}) => {
  return {
    name: "arrow",
    options: {
      element: arrowRef,
      padding
    },
    fn(args) {
      const arrowEl = (0,external_Vue_.unref)(arrowRef);
      if (!arrowEl)
        return {};
      return (0,floating_ui_core_browser_min/* arrow */.x7)({
        element: arrowEl,
        padding
      }).fn(args);
    }
  };
};


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/visual-hidden/src/visual-hidden.mjs



const visualHiddenProps = (0,runtime/* buildProps */.o8)({
  style: {
    type: (0,runtime/* definePropType */.Cq)([String, Object, Array]),
    default: () => ({})
  }
});


//# sourceMappingURL=visual-hidden.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/visual-hidden/src/visual-hidden2.mjs




const visual_hidden2_default_ = {
  name: "ElVisuallyHidden"
};
const visual_hidden2_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...visual_hidden2_default_,
  props: visualHiddenProps,
  setup(__props) {
    const props = __props;
    const computedStyle = (0,external_Vue_.computed)(() => {
      return [
        props.style,
        {
          position: "absolute",
          border: 0,
          width: 1,
          height: 1,
          padding: 0,
          margin: -1,
          overflow: "hidden",
          clip: "rect(0, 0, 0, 0)",
          whiteSpace: "nowrap",
          wordWrap: "normal"
        }
      ];
    });
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("span", (0,external_Vue_.mergeProps)(_ctx.$attrs, { style: (0,external_Vue_.unref)(computedStyle) }), [
        (0,external_Vue_.renderSlot)(_ctx.$slots, "default")
      ], 16);
    };
  }
});
var ElVisuallyHidden = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(visual_hidden2_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/visual-hidden/src/visual-hidden.vue"]]);


//# sourceMappingURL=visual-hidden2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/tooltip-v2/src/content2.mjs














const content2_hoisted_1 = ["data-side"];
const src_content2_default_ = {
  name: "ElTooltipV2Content"
};
const src_content2_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...src_content2_default_,
  props: { ...tooltipV2ContentProps, ...tooltipV2CommonProps },
  setup(__props) {
    const props = __props;
    const { triggerRef, contentId } = (0,external_Vue_.inject)(tooltipV2RootKey);
    const placement = (0,external_Vue_.ref)(props.placement);
    const strategy = (0,external_Vue_.ref)(props.strategy);
    const arrowRef = (0,external_Vue_.ref)(null);
    const { referenceRef, contentRef, middlewareData, x, y, update } = useFloating({
      placement,
      strategy,
      middleware: (0,external_Vue_.computed)(() => {
        const middleware = [(0,floating_ui_core_browser_min/* offset */.cv)(props.offset)];
        if (props.showArrow) {
          middleware.push(arrowMiddleware({
            arrowRef
          }));
        }
        return middleware;
      })
    });
    const zIndex = useZIndex().nextZIndex();
    const ns = (0,use_namespace/* useNamespace */.s)("tooltip-v2");
    const side = (0,external_Vue_.computed)(() => {
      return placement.value.split("-")[0];
    });
    const contentStyle = (0,external_Vue_.computed)(() => {
      return {
        position: (0,external_Vue_.unref)(strategy),
        top: `${(0,external_Vue_.unref)(y) || 0}px`,
        left: `${(0,external_Vue_.unref)(x) || 0}px`,
        zIndex
      };
    });
    const arrowStyle = (0,external_Vue_.computed)(() => {
      if (!props.showArrow)
        return {};
      const { arrow } = (0,external_Vue_.unref)(middlewareData);
      return {
        [`--${ns.namespace.value}-tooltip-v2-arrow-x`]: `${arrow == null ? void 0 : arrow.x}px` || "",
        [`--${ns.namespace.value}-tooltip-v2-arrow-y`]: `${arrow == null ? void 0 : arrow.y}px` || ""
      };
    });
    const contentClass = (0,external_Vue_.computed)(() => [
      ns.e("content"),
      ns.is("dark", props.effect === "dark"),
      ns.is((0,external_Vue_.unref)(strategy)),
      props.contentClass
    ]);
    (0,external_Vue_.watch)(arrowRef, () => update());
    (0,external_Vue_.watch)(() => props.placement, (val) => placement.value = val);
    (0,external_Vue_.onMounted)(() => {
      (0,external_Vue_.watch)(() => props.reference || triggerRef.value, (el) => {
        referenceRef.value = el || void 0;
      }, {
        immediate: true
      });
    });
    (0,external_Vue_.provide)(tooltipV2ContentKey, { arrowRef });
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
        ref_key: "contentRef",
        ref: contentRef,
        style: (0,external_Vue_.normalizeStyle)((0,external_Vue_.unref)(contentStyle)),
        "data-tooltip-v2-root": ""
      }, [
        !_ctx.nowrap ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
          key: 0,
          "data-side": (0,external_Vue_.unref)(side),
          class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(contentClass))
        }, [
          (0,external_Vue_.renderSlot)(_ctx.$slots, "default", {
            contentStyle: (0,external_Vue_.unref)(contentStyle),
            contentClass: (0,external_Vue_.unref)(contentClass)
          }),
          (0,external_Vue_.createVNode)((0,external_Vue_.unref)(ElVisuallyHidden), {
            id: (0,external_Vue_.unref)(contentId),
            role: "tooltip"
          }, {
            default: (0,external_Vue_.withCtx)(() => [
              _ctx.ariaLabel ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, { key: 0 }, [
                (0,external_Vue_.createTextVNode)((0,external_Vue_.toDisplayString)(_ctx.ariaLabel), 1)
              ], 64)) : (0,external_Vue_.renderSlot)(_ctx.$slots, "default", { key: 1 })
            ]),
            _: 3
          }, 8, ["id"]),
          (0,external_Vue_.renderSlot)(_ctx.$slots, "arrow", {
            style: (0,external_Vue_.normalizeStyle)((0,external_Vue_.unref)(arrowStyle)),
            side: (0,external_Vue_.unref)(side)
          })
        ], 10, content2_hoisted_1)) : (0,external_Vue_.createCommentVNode)("v-if", true)
      ], 4);
    };
  }
});
var TooltipV2Content = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(src_content2_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/tooltip-v2/src/content.vue"]]);


//# sourceMappingURL=content2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/tooltip-v2/src/forward-ref.mjs






const forwardRefProps = (0,runtime/* buildProps */.o8)({
  setRef: {
    type: (0,runtime/* definePropType */.Cq)(Function),
    required: true
  },
  onlyChild: Boolean
});
var ForwardRef = (0,external_Vue_.defineComponent)({
  props: forwardRefProps,
  setup(props, {
    slots
  }) {
    const fragmentRef = (0,external_Vue_.ref)();
    const setRef = composeRefs(fragmentRef, (el) => {
      if (el) {
        props.setRef(el.nextElementSibling);
      } else {
        props.setRef(null);
      }
    });
    return () => {
      var _a;
      const [firstChild] = ((_a = slots.default) == null ? void 0 : _a.call(slots)) || [];
      const child = props.onlyChild ? ensureOnlyChild(firstChild.children) : firstChild.children;
      return (0,external_Vue_.createVNode)(external_Vue_.Fragment, {
        "ref": setRef
      }, [child]);
    };
  }
});


//# sourceMappingURL=forward-ref.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/tooltip-v2/src/trigger2.mjs










const src_trigger2_default_ = {
  name: "ElTooltipV2Trigger"
};
const src_trigger2_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...src_trigger2_default_,
  props: {
    ...tooltipV2CommonProps,
    ...tooltipV2TriggerProps
  },
  setup(__props) {
    const props = __props;
    const { onClose, onOpen, onDelayOpen, triggerRef, contentId } = (0,external_Vue_.inject)(tooltipV2RootKey);
    let isMousedown = false;
    const setTriggerRef = (el) => {
      triggerRef.value = el;
    };
    const onMouseup = () => {
      isMousedown = false;
    };
    const onMouseenter = composeEventHandlers(props.onMouseEnter, onDelayOpen);
    const onMouseleave = composeEventHandlers(props.onMouseLeave, onClose);
    const onMousedown = composeEventHandlers(props.onMouseDown, () => {
      onClose();
      isMousedown = true;
      document.addEventListener("mouseup", onMouseup, { once: true });
    });
    const onFocus = composeEventHandlers(props.onFocus, () => {
      if (!isMousedown)
        onOpen();
    });
    const onBlur = composeEventHandlers(props.onBlur, onClose);
    const onClick = composeEventHandlers(props.onClick, (e) => {
      if (e.detail === 0)
        onClose();
    });
    const events = {
      blur: onBlur,
      click: onClick,
      focus: onFocus,
      mousedown: onMousedown,
      mouseenter: onMouseenter,
      mouseleave: onMouseleave
    };
    const setEvents = (el, events2, type) => {
      if (el) {
        Object.entries(events2).forEach(([name, handler]) => {
          el[type](name, handler);
        });
      }
    };
    (0,external_Vue_.watch)(triggerRef, (triggerEl, previousTriggerEl) => {
      setEvents(triggerEl, events, "addEventListener");
      setEvents(previousTriggerEl, events, "removeEventListener");
      if (triggerEl) {
        triggerEl.setAttribute("aria-describedby", contentId.value);
      }
    });
    (0,external_Vue_.onBeforeUnmount)(() => {
      setEvents(triggerRef.value, events, "removeEventListener");
      document.removeEventListener("mouseup", onMouseup);
    });
    return (_ctx, _cache) => {
      return _ctx.nowrap ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.unref)(ForwardRef), {
        key: 0,
        "set-ref": setTriggerRef,
        "only-child": ""
      }, {
        default: (0,external_Vue_.withCtx)(() => [
          (0,external_Vue_.renderSlot)(_ctx.$slots, "default")
        ]),
        _: 3
      })) : ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("button", (0,external_Vue_.mergeProps)({
        key: 1,
        ref_key: "triggerRef",
        ref: triggerRef
      }, _ctx.$attrs), [
        (0,external_Vue_.renderSlot)(_ctx.$slots, "default")
      ], 16));
    };
  }
});
var TooltipV2Trigger = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(src_trigger2_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/tooltip-v2/src/trigger.vue"]]);


//# sourceMappingURL=trigger2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/tooltip-v2/src/tooltip2.mjs













const tooltip2_default_ = {
  name: "ElTooltipV2"
};
const src_tooltip2_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...tooltip2_default_,
  props: tooltipV2Props,
  setup(__props) {
    const props = __props;
    const refedProps = (0,external_Vue_.toRefs)(props);
    const arrowProps = (0,external_Vue_.reactive)((0,pick/* default */.Z)(refedProps, Object.keys(tooltipV2ArrowProps)));
    const contentProps = (0,external_Vue_.reactive)((0,pick/* default */.Z)(refedProps, Object.keys(tooltipV2ContentProps)));
    const rootProps = (0,external_Vue_.reactive)((0,pick/* default */.Z)(refedProps, Object.keys(tooltipV2RootProps)));
    const triggerProps = (0,external_Vue_.reactive)((0,pick/* default */.Z)(refedProps, Object.keys(tooltipV2TriggerProps)));
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(TooltipV2Root, (0,external_Vue_.normalizeProps)((0,external_Vue_.guardReactiveProps)(rootProps)), {
        default: (0,external_Vue_.withCtx)(({ open }) => [
          (0,external_Vue_.createVNode)(TooltipV2Trigger, (0,external_Vue_.mergeProps)(triggerProps, { nowrap: "" }), {
            default: (0,external_Vue_.withCtx)(() => [
              (0,external_Vue_.renderSlot)(_ctx.$slots, "trigger")
            ]),
            _: 3
          }, 16),
          ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(external_Vue_.Teleport, {
            to: _ctx.to,
            disabled: !_ctx.teleported
          }, [
            _ctx.fullTransition ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(external_Vue_.Transition, (0,external_Vue_.normalizeProps)((0,external_Vue_.mergeProps)({ key: 0 }, _ctx.transitionProps)), {
              default: (0,external_Vue_.withCtx)(() => [
                _ctx.alwaysOn || open ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(TooltipV2Content, (0,external_Vue_.normalizeProps)((0,external_Vue_.mergeProps)({ key: 0 }, contentProps)), {
                  arrow: (0,external_Vue_.withCtx)(({ style, side }) => [
                    _ctx.showArrow ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(TooltipV2Arrow, (0,external_Vue_.mergeProps)({ key: 0 }, arrowProps, {
                      style,
                      side
                    }), null, 16, ["style", "side"])) : (0,external_Vue_.createCommentVNode)("v-if", true)
                  ]),
                  default: (0,external_Vue_.withCtx)(() => [
                    (0,external_Vue_.renderSlot)(_ctx.$slots, "default")
                  ]),
                  _: 3
                }, 16)) : (0,external_Vue_.createCommentVNode)("v-if", true)
              ]),
              _: 2
            }, 1040)) : ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, { key: 1 }, [
              _ctx.alwaysOn || open ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(TooltipV2Content, (0,external_Vue_.normalizeProps)((0,external_Vue_.mergeProps)({ key: 0 }, contentProps)), {
                arrow: (0,external_Vue_.withCtx)(({ style, side }) => [
                  _ctx.showArrow ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(TooltipV2Arrow, (0,external_Vue_.mergeProps)({ key: 0 }, arrowProps, {
                    style,
                    side
                  }), null, 16, ["style", "side"])) : (0,external_Vue_.createCommentVNode)("v-if", true)
                ]),
                default: (0,external_Vue_.withCtx)(() => [
                  (0,external_Vue_.renderSlot)(_ctx.$slots, "default")
                ]),
                _: 3
              }, 16)) : (0,external_Vue_.createCommentVNode)("v-if", true)
            ], 64))
          ], 8, ["to", "disabled"]))
        ]),
        _: 3
      }, 16);
    };
  }
});
var TooltipV2 = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(src_tooltip2_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/tooltip-v2/src/tooltip.vue"]]);


//# sourceMappingURL=tooltip2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/tooltip-v2/index.mjs









const ElTooltipV2 = (0,install/* withInstall */.nz)(TooltipV2);


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/transfer/src/transfer.mjs








const LEFT_CHECK_CHANGE_EVENT = "left-check-change";
const RIGHT_CHECK_CHANGE_EVENT = "right-check-change";
const transferProps = (0,runtime/* buildProps */.o8)({
  data: {
    type: (0,runtime/* definePropType */.Cq)(Array),
    default: () => []
  },
  titles: {
    type: (0,runtime/* definePropType */.Cq)(Array),
    default: () => []
  },
  buttonTexts: {
    type: (0,runtime/* definePropType */.Cq)(Array),
    default: () => []
  },
  filterPlaceholder: String,
  filterMethod: {
    type: (0,runtime/* definePropType */.Cq)(Function)
  },
  leftDefaultChecked: {
    type: (0,runtime/* definePropType */.Cq)(Array),
    default: () => []
  },
  rightDefaultChecked: {
    type: (0,runtime/* definePropType */.Cq)(Array),
    default: () => []
  },
  renderContent: {
    type: (0,runtime/* definePropType */.Cq)(Function)
  },
  modelValue: {
    type: (0,runtime/* definePropType */.Cq)(Array),
    default: () => []
  },
  format: {
    type: (0,runtime/* definePropType */.Cq)(Object),
    default: () => ({})
  },
  filterable: Boolean,
  props: {
    type: (0,runtime/* definePropType */.Cq)(Object),
    default: () => (0,typescript/* mutable */.N)({
      label: "label",
      key: "key",
      disabled: "disabled"
    })
  },
  targetOrder: {
    type: String,
    values: ["original", "push", "unshift"],
    default: "original"
  }
});
const transferCheckedChangeFn = (value, movedKeys) => [value, movedKeys].every(shared_esm_bundler/* isArray */.kJ) || (0,shared_esm_bundler/* isArray */.kJ)(value) && (0,lodash_es_isNil/* default */.Z)(movedKeys);
const transferEmits = {
  [constants_event/* CHANGE_EVENT */.O7]: (value, direction, movedKeys) => [value, movedKeys].every(shared_esm_bundler/* isArray */.kJ) && ["left", "right"].includes(direction),
  [constants_event/* UPDATE_MODEL_EVENT */.f_]: (value) => (0,shared_esm_bundler/* isArray */.kJ)(value),
  [LEFT_CHECK_CHANGE_EVENT]: transferCheckedChangeFn,
  [RIGHT_CHECK_CHANGE_EVENT]: transferCheckedChangeFn
};


//# sourceMappingURL=transfer.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/transfer/src/transfer-panel.mjs




const CHECKED_CHANGE_EVENT = "checked-change";
const transferPanelProps = (0,runtime/* buildProps */.o8)({
  data: transferProps.data,
  optionRender: {
    type: (0,runtime/* definePropType */.Cq)(Function)
  },
  placeholder: String,
  title: String,
  filterable: Boolean,
  format: transferProps.format,
  filterMethod: transferProps.filterMethod,
  defaultChecked: transferProps.leftDefaultChecked,
  props: transferProps.props
});
const transferPanelEmits = {
  [CHECKED_CHANGE_EVENT]: transferCheckedChangeFn
};


//# sourceMappingURL=transfer-panel.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/transfer/src/composables/use-props-alias.mjs


const usePropsAlias = (props) => {
  const initProps = {
    label: "label",
    key: "key",
    disabled: "disabled"
  };
  return (0,external_Vue_.computed)(() => ({
    ...initProps,
    ...props.props
  }));
};


//# sourceMappingURL=use-props-alias.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/transfer/src/composables/use-check.mjs






const useCheck = (props, panelState, emit) => {
  const propsAlias = usePropsAlias(props);
  const filteredData = (0,external_Vue_.computed)(() => {
    return props.data.filter((item) => {
      if ((0,shared_esm_bundler/* isFunction */.mf)(props.filterMethod)) {
        return props.filterMethod(panelState.query, item);
      } else {
        const label = String(item[propsAlias.value.label] || item[propsAlias.value.key]);
        return label.toLowerCase().includes(panelState.query.toLowerCase());
      }
    });
  });
  const checkableData = (0,external_Vue_.computed)(() => filteredData.value.filter((item) => !item[propsAlias.value.disabled]));
  const checkedSummary = (0,external_Vue_.computed)(() => {
    const checkedLength = panelState.checked.length;
    const dataLength = props.data.length;
    const { noChecked, hasChecked } = props.format;
    if (noChecked && hasChecked) {
      return checkedLength > 0 ? hasChecked.replace(/\${checked}/g, checkedLength.toString()).replace(/\${total}/g, dataLength.toString()) : noChecked.replace(/\${total}/g, dataLength.toString());
    } else {
      return `${checkedLength}/${dataLength}`;
    }
  });
  const isIndeterminate = (0,external_Vue_.computed)(() => {
    const checkedLength = panelState.checked.length;
    return checkedLength > 0 && checkedLength < checkableData.value.length;
  });
  const updateAllChecked = () => {
    const checkableDataKeys = checkableData.value.map((item) => item[propsAlias.value.key]);
    panelState.allChecked = checkableDataKeys.length > 0 && checkableDataKeys.every((item) => panelState.checked.includes(item));
  };
  const handleAllCheckedChange = (value) => {
    panelState.checked = value ? checkableData.value.map((item) => item[propsAlias.value.key]) : [];
  };
  (0,external_Vue_.watch)(() => panelState.checked, (val, oldVal) => {
    updateAllChecked();
    if (panelState.checkChangeByUser) {
      const movedKeys = val.concat(oldVal).filter((v) => !val.includes(v) || !oldVal.includes(v));
      emit(CHECKED_CHANGE_EVENT, val, movedKeys);
    } else {
      emit(CHECKED_CHANGE_EVENT, val);
      panelState.checkChangeByUser = true;
    }
  });
  (0,external_Vue_.watch)(checkableData, () => {
    updateAllChecked();
  });
  (0,external_Vue_.watch)(() => props.data, () => {
    const checked = [];
    const filteredDataKeys = filteredData.value.map((item) => item[propsAlias.value.key]);
    panelState.checked.forEach((item) => {
      if (filteredDataKeys.includes(item)) {
        checked.push(item);
      }
    });
    panelState.checkChangeByUser = false;
    panelState.checked = checked;
  });
  (0,external_Vue_.watch)(() => props.defaultChecked, (val, oldVal) => {
    if (oldVal && val.length === oldVal.length && val.every((item) => oldVal.includes(item)))
      return;
    const checked = [];
    const checkableDataKeys = checkableData.value.map((item) => item[propsAlias.value.key]);
    val.forEach((item) => {
      if (checkableDataKeys.includes(item)) {
        checked.push(item);
      }
    });
    panelState.checkChangeByUser = false;
    panelState.checked = checked;
  }, {
    immediate: true
  });
  return {
    filteredData,
    checkableData,
    checkedSummary,
    isIndeterminate,
    updateAllChecked,
    handleAllCheckedChange
  };
};


//# sourceMappingURL=use-check.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/transfer/src/transfer-panel2.mjs















const transfer_panel2_default_ = {
  name: "ElTransferPanel"
};
const transfer_panel2_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...transfer_panel2_default_,
  props: transferPanelProps,
  emits: transferPanelEmits,
  setup(__props, { expose, emit }) {
    const props = __props;
    const slots = (0,external_Vue_.useSlots)();
    const OptionContent = ({ option }) => option;
    const { t } = useLocale();
    const ns = (0,use_namespace/* useNamespace */.s)("transfer");
    const panelState = (0,external_Vue_.reactive)({
      checked: [],
      allChecked: false,
      query: "",
      inputHover: false,
      checkChangeByUser: true
    });
    const propsAlias = usePropsAlias(props);
    const {
      filteredData,
      checkedSummary,
      isIndeterminate,
      handleAllCheckedChange
    } = useCheck(props, panelState, emit);
    const hasNoMatch = (0,external_Vue_.computed)(() => !(0,types/* isEmpty */.xb)(panelState.query) && (0,types/* isEmpty */.xb)(filteredData.value));
    const hasFooter = (0,external_Vue_.computed)(() => !(0,types/* isEmpty */.xb)(slots.default()[0].children));
    const { checked, allChecked, query, inputHover } = (0,external_Vue_.toRefs)(panelState);
    expose({
      query
    });
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
        class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).b("panel"))
      }, [
        (0,external_Vue_.createElementVNode)("p", {
          class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).be("panel", "header"))
        }, [
          (0,external_Vue_.createVNode)((0,external_Vue_.unref)(components_checkbox/* ElCheckbox */.Xb), {
            modelValue: (0,external_Vue_.unref)(allChecked),
            "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => (0,external_Vue_.isRef)(allChecked) ? allChecked.value = $event : null),
            indeterminate: (0,external_Vue_.unref)(isIndeterminate),
            onChange: (0,external_Vue_.unref)(handleAllCheckedChange)
          }, {
            default: (0,external_Vue_.withCtx)(() => [
              (0,external_Vue_.createTextVNode)((0,external_Vue_.toDisplayString)(_ctx.title) + " ", 1),
              (0,external_Vue_.createElementVNode)("span", null, (0,external_Vue_.toDisplayString)((0,external_Vue_.unref)(checkedSummary)), 1)
            ]),
            _: 1
          }, 8, ["modelValue", "indeterminate", "onChange"])
        ], 2),
        (0,external_Vue_.createElementVNode)("div", {
          class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(ns).be("panel", "body"), (0,external_Vue_.unref)(ns).is("with-footer", (0,external_Vue_.unref)(hasFooter))])
        }, [
          _ctx.filterable ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.unref)(components_input/* ElInput */.EZ), {
            key: 0,
            modelValue: (0,external_Vue_.unref)(query),
            "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => (0,external_Vue_.isRef)(query) ? query.value = $event : null),
            class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).be("panel", "filter")),
            size: "default",
            placeholder: _ctx.placeholder,
            "prefix-icon": (0,external_Vue_.unref)(dist/* Search */.olm),
            clearable: "",
            onMouseenter: _cache[2] || (_cache[2] = ($event) => inputHover.value = true),
            onMouseleave: _cache[3] || (_cache[3] = ($event) => inputHover.value = false)
          }, null, 8, ["modelValue", "class", "placeholder", "prefix-icon"])) : (0,external_Vue_.createCommentVNode)("v-if", true),
          (0,external_Vue_.withDirectives)((0,external_Vue_.createVNode)((0,external_Vue_.unref)(components_checkbox/* ElCheckboxGroup */.z5), {
            modelValue: (0,external_Vue_.unref)(checked),
            "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => (0,external_Vue_.isRef)(checked) ? checked.value = $event : null),
            class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(ns).is("filterable", _ctx.filterable), (0,external_Vue_.unref)(ns).be("panel", "list")])
          }, {
            default: (0,external_Vue_.withCtx)(() => [
              ((0,external_Vue_.openBlock)(true), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, null, (0,external_Vue_.renderList)((0,external_Vue_.unref)(filteredData), (item) => {
                return (0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.unref)(components_checkbox/* ElCheckbox */.Xb), {
                  key: item[(0,external_Vue_.unref)(propsAlias).key],
                  class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).be("panel", "item")),
                  label: item[(0,external_Vue_.unref)(propsAlias).key],
                  disabled: item[(0,external_Vue_.unref)(propsAlias).disabled]
                }, {
                  default: (0,external_Vue_.withCtx)(() => {
                    var _a;
                    return [
                      (0,external_Vue_.createVNode)(OptionContent, {
                        option: (_a = _ctx.optionRender) == null ? void 0 : _a.call(_ctx, item)
                      }, null, 8, ["option"])
                    ];
                  }),
                  _: 2
                }, 1032, ["class", "label", "disabled"]);
              }), 128))
            ]),
            _: 1
          }, 8, ["modelValue", "class"]), [
            [external_Vue_.vShow, !(0,external_Vue_.unref)(hasNoMatch) && !(0,external_Vue_.unref)(types/* isEmpty */.xb)(_ctx.data)]
          ]),
          (0,external_Vue_.withDirectives)((0,external_Vue_.createElementVNode)("p", {
            class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).be("panel", "empty"))
          }, (0,external_Vue_.toDisplayString)((0,external_Vue_.unref)(hasNoMatch) ? (0,external_Vue_.unref)(t)("el.transfer.noMatch") : (0,external_Vue_.unref)(t)("el.transfer.noData")), 3), [
            [external_Vue_.vShow, (0,external_Vue_.unref)(hasNoMatch) || (0,external_Vue_.unref)(types/* isEmpty */.xb)(_ctx.data)]
          ])
        ], 2),
        (0,external_Vue_.unref)(hasFooter) ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("p", {
          key: 0,
          class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).be("panel", "footer"))
        }, [
          (0,external_Vue_.renderSlot)(_ctx.$slots, "default")
        ], 2)) : (0,external_Vue_.createCommentVNode)("v-if", true)
      ], 2);
    };
  }
});
var TransferPanel = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(transfer_panel2_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/transfer/src/transfer-panel.vue"]]);


//# sourceMappingURL=transfer-panel2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/transfer/src/composables/use-computed-data.mjs



const useComputedData = (props) => {
  const propsAlias = usePropsAlias(props);
  const dataObj = (0,external_Vue_.computed)(() => props.data.reduce((o, cur) => (o[cur[propsAlias.value.key]] = cur) && o, {}));
  const sourceData = (0,external_Vue_.computed)(() => props.data.filter((item) => !props.modelValue.includes(item[propsAlias.value.key])));
  const targetData = (0,external_Vue_.computed)(() => {
    if (props.targetOrder === "original") {
      return props.data.filter((item) => props.modelValue.includes(item[propsAlias.value.key]));
    } else {
      return props.modelValue.reduce((arr, cur) => {
        const val = dataObj.value[cur];
        if (val) {
          arr.push(val);
        }
        return arr;
      }, []);
    }
  });
  return {
    sourceData,
    targetData
  };
};


//# sourceMappingURL=use-computed-data.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/transfer/src/composables/use-checked-change.mjs


const useCheckedChange = (checkedState, emit) => {
  const onSourceCheckedChange = (val, movedKeys) => {
    checkedState.leftChecked = val;
    if (!movedKeys)
      return;
    emit(LEFT_CHECK_CHANGE_EVENT, val, movedKeys);
  };
  const onTargetCheckedChange = (val, movedKeys) => {
    checkedState.rightChecked = val;
    if (!movedKeys)
      return;
    emit(RIGHT_CHECK_CHANGE_EVENT, val, movedKeys);
  };
  return {
    onSourceCheckedChange,
    onTargetCheckedChange
  };
};


//# sourceMappingURL=use-checked-change.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/transfer/src/composables/use-move.mjs




const useMove = (props, checkedState, emit) => {
  const propsAlias = usePropsAlias(props);
  const _emit = (value, direction, movedKeys) => {
    emit(constants_event/* UPDATE_MODEL_EVENT */.f_, value);
    emit(constants_event/* CHANGE_EVENT */.O7, value, direction, movedKeys);
  };
  const addToLeft = () => {
    const currentValue = props.modelValue.slice();
    checkedState.rightChecked.forEach((item) => {
      const index = currentValue.indexOf(item);
      if (index > -1) {
        currentValue.splice(index, 1);
      }
    });
    _emit(currentValue, "left", checkedState.rightChecked);
  };
  const addToRight = () => {
    let currentValue = props.modelValue.slice();
    const itemsToBeMoved = props.data.filter((item) => {
      const itemKey = item[propsAlias.value.key];
      return checkedState.leftChecked.includes(itemKey) && !props.modelValue.includes(itemKey);
    }).map((item) => item[propsAlias.value.key]);
    currentValue = props.targetOrder === "unshift" ? itemsToBeMoved.concat(currentValue) : currentValue.concat(itemsToBeMoved);
    if (props.targetOrder === "original") {
      currentValue = props.data.filter((item) => currentValue.includes(item[propsAlias.value.key])).map((item) => item[propsAlias.value.key]);
    }
    _emit(currentValue, "right", checkedState.leftChecked);
  };
  return {
    addToLeft,
    addToRight
  };
};


//# sourceMappingURL=use-move.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/transfer/src/transfer2.mjs




















const transfer2_hoisted_1 = { key: 0 };
const transfer2_hoisted_2 = { key: 0 };
const transfer2_default_ = {
  name: "ElTransfer"
};
const transfer2_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...transfer2_default_,
  props: transferProps,
  emits: transferEmits,
  setup(__props, { expose, emit }) {
    const props = __props;
    const slots = (0,external_Vue_.useSlots)();
    const { t } = useLocale();
    const ns = (0,use_namespace/* useNamespace */.s)("transfer");
    const { formItem } = (0,use_form_item/* useFormItem */.A)();
    const checkedState = (0,external_Vue_.reactive)({
      leftChecked: [],
      rightChecked: []
    });
    const propsAlias = usePropsAlias(props);
    const { sourceData, targetData } = useComputedData(props);
    const { onSourceCheckedChange, onTargetCheckedChange } = useCheckedChange(checkedState, emit);
    const { addToLeft, addToRight } = useMove(props, checkedState, emit);
    const leftPanel = (0,external_Vue_.ref)();
    const rightPanel = (0,external_Vue_.ref)();
    const clearQuery = (which) => {
      switch (which) {
        case "left":
          leftPanel.value.query = "";
          break;
        case "right":
          rightPanel.value.query = "";
          break;
      }
    };
    const hasButtonTexts = (0,external_Vue_.computed)(() => props.buttonTexts.length === 2);
    const leftPanelTitle = (0,external_Vue_.computed)(() => props.titles[0] || t("el.transfer.titles.0"));
    const rightPanelTitle = (0,external_Vue_.computed)(() => props.titles[1] || t("el.transfer.titles.1"));
    const panelFilterPlaceholder = (0,external_Vue_.computed)(() => props.filterPlaceholder || t("el.transfer.filterPlaceholder"));
    (0,external_Vue_.watch)(() => props.modelValue, () => {
      var _a;
      (_a = formItem == null ? void 0 : formItem.validate) == null ? void 0 : _a.call(formItem, "change").catch((err) => (0,error/* debugWarn */.N)(err));
    });
    const optionRender = (0,external_Vue_.computed)(() => (option) => {
      if (props.renderContent)
        return props.renderContent(external_Vue_.h, option);
      if (slots.default)
        return slots.default({ option });
      return (0,external_Vue_.h)("span", option[propsAlias.value.label] || option[propsAlias.value.key]);
    });
    expose({
      clearQuery,
      leftPanel,
      rightPanel
    });
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
        class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).b())
      }, [
        (0,external_Vue_.createVNode)(TransferPanel, {
          ref_key: "leftPanel",
          ref: leftPanel,
          data: (0,external_Vue_.unref)(sourceData),
          "option-render": (0,external_Vue_.unref)(optionRender),
          placeholder: (0,external_Vue_.unref)(panelFilterPlaceholder),
          title: (0,external_Vue_.unref)(leftPanelTitle),
          filterable: _ctx.filterable,
          format: _ctx.format,
          "filter-method": _ctx.filterMethod,
          "default-checked": _ctx.leftDefaultChecked,
          props: props.props,
          onCheckedChange: (0,external_Vue_.unref)(onSourceCheckedChange)
        }, {
          default: (0,external_Vue_.withCtx)(() => [
            (0,external_Vue_.renderSlot)(_ctx.$slots, "left-footer")
          ]),
          _: 3
        }, 8, ["data", "option-render", "placeholder", "title", "filterable", "format", "filter-method", "default-checked", "props", "onCheckedChange"]),
        (0,external_Vue_.createElementVNode)("div", {
          class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("buttons"))
        }, [
          (0,external_Vue_.createVNode)((0,external_Vue_.unref)(ElButton), {
            type: "primary",
            class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(ns).e("button"), (0,external_Vue_.unref)(ns).is("with-texts", (0,external_Vue_.unref)(hasButtonTexts))]),
            disabled: (0,external_Vue_.unref)(types/* isEmpty */.xb)(checkedState.rightChecked),
            onClick: (0,external_Vue_.unref)(addToLeft)
          }, {
            default: (0,external_Vue_.withCtx)(() => [
              (0,external_Vue_.createVNode)((0,external_Vue_.unref)(components_icon/* ElIcon */.gn), null, {
                default: (0,external_Vue_.withCtx)(() => [
                  (0,external_Vue_.createVNode)((0,external_Vue_.unref)(dist/* ArrowLeft */.XdH))
                ]),
                _: 1
              }),
              !(0,external_Vue_.unref)(types/* isUndefined */.o8)(_ctx.buttonTexts[0]) ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("span", transfer2_hoisted_1, (0,external_Vue_.toDisplayString)(_ctx.buttonTexts[0]), 1)) : (0,external_Vue_.createCommentVNode)("v-if", true)
            ]),
            _: 1
          }, 8, ["class", "disabled", "onClick"]),
          (0,external_Vue_.createVNode)((0,external_Vue_.unref)(ElButton), {
            type: "primary",
            class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(ns).e("button"), (0,external_Vue_.unref)(ns).is("with-texts", (0,external_Vue_.unref)(hasButtonTexts))]),
            disabled: (0,external_Vue_.unref)(types/* isEmpty */.xb)(checkedState.leftChecked),
            onClick: (0,external_Vue_.unref)(addToRight)
          }, {
            default: (0,external_Vue_.withCtx)(() => [
              !(0,external_Vue_.unref)(types/* isUndefined */.o8)(_ctx.buttonTexts[1]) ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("span", transfer2_hoisted_2, (0,external_Vue_.toDisplayString)(_ctx.buttonTexts[1]), 1)) : (0,external_Vue_.createCommentVNode)("v-if", true),
              (0,external_Vue_.createVNode)((0,external_Vue_.unref)(components_icon/* ElIcon */.gn), null, {
                default: (0,external_Vue_.withCtx)(() => [
                  (0,external_Vue_.createVNode)((0,external_Vue_.unref)(dist/* ArrowRight */.olP))
                ]),
                _: 1
              })
            ]),
            _: 1
          }, 8, ["class", "disabled", "onClick"])
        ], 2),
        (0,external_Vue_.createVNode)(TransferPanel, {
          ref_key: "rightPanel",
          ref: rightPanel,
          data: (0,external_Vue_.unref)(targetData),
          "option-render": (0,external_Vue_.unref)(optionRender),
          placeholder: (0,external_Vue_.unref)(panelFilterPlaceholder),
          filterable: _ctx.filterable,
          format: _ctx.format,
          "filter-method": _ctx.filterMethod,
          title: (0,external_Vue_.unref)(rightPanelTitle),
          "default-checked": _ctx.rightDefaultChecked,
          props: props.props,
          onCheckedChange: (0,external_Vue_.unref)(onTargetCheckedChange)
        }, {
          default: (0,external_Vue_.withCtx)(() => [
            (0,external_Vue_.renderSlot)(_ctx.$slots, "right-footer")
          ]),
          _: 3
        }, 8, ["data", "option-render", "placeholder", "filterable", "format", "filter-method", "title", "default-checked", "props", "onCheckedChange"])
      ], 2);
    };
  }
});
var Transfer = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(transfer2_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/transfer/src/transfer.vue"]]);


//# sourceMappingURL=transfer2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/transfer/index.mjs





const ElTransfer = (0,install/* withInstall */.nz)(Transfer);


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/tree/src/model/util.mjs
const NODE_KEY = "$treeNodeId";
const markNodeData = function(node, data) {
  if (!data || data[NODE_KEY])
    return;
  Object.defineProperty(data, NODE_KEY, {
    value: node.id,
    enumerable: false,
    configurable: false,
    writable: false
  });
};
const getNodeKey = function(key, data) {
  if (!key)
    return data[NODE_KEY];
  return data[key];
};


//# sourceMappingURL=util.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/tree/src/model/node.mjs





const getChildState = (node) => {
  let all = true;
  let none = true;
  let allWithoutDisable = true;
  for (let i = 0, j = node.length; i < j; i++) {
    const n = node[i];
    if (n.checked !== true || n.indeterminate) {
      all = false;
      if (!n.disabled) {
        allWithoutDisable = false;
      }
    }
    if (n.checked !== false || n.indeterminate) {
      none = false;
    }
  }
  return { all, none, allWithoutDisable, half: !all && !none };
};
const reInitChecked = function(node) {
  if (node.childNodes.length === 0)
    return;
  const { all, none, half } = getChildState(node.childNodes);
  if (all) {
    node.checked = true;
    node.indeterminate = false;
  } else if (half) {
    node.checked = false;
    node.indeterminate = true;
  } else if (none) {
    node.checked = false;
    node.indeterminate = false;
  }
  const parent = node.parent;
  if (!parent || parent.level === 0)
    return;
  if (!node.store.checkStrictly) {
    reInitChecked(parent);
  }
};
const getPropertyFromData = function(node, prop) {
  const props = node.store.props;
  const data = node.data || {};
  const config = props[prop];
  if (typeof config === "function") {
    return config(data, node);
  } else if (typeof config === "string") {
    return data[config];
  } else if (typeof config === "undefined") {
    const dataProp = data[prop];
    return dataProp === void 0 ? "" : dataProp;
  }
};
let nodeIdSeed = 0;
class node_Node {
  constructor(options) {
    this.id = nodeIdSeed++;
    this.text = null;
    this.checked = false;
    this.indeterminate = false;
    this.data = null;
    this.expanded = false;
    this.parent = null;
    this.visible = true;
    this.isCurrent = false;
    this.canFocus = false;
    for (const name in options) {
      if ((0,shared_esm_bundler/* hasOwn */.RI)(options, name)) {
        this[name] = options[name];
      }
    }
    this.level = 0;
    this.loaded = false;
    this.childNodes = [];
    this.loading = false;
    if (this.parent) {
      this.level = this.parent.level + 1;
    }
  }
  initialize() {
    const store = this.store;
    if (!store) {
      throw new Error("[Node]store is required!");
    }
    store.registerNode(this);
    const props = store.props;
    if (props && typeof props.isLeaf !== "undefined") {
      const isLeaf = getPropertyFromData(this, "isLeaf");
      if (typeof isLeaf === "boolean") {
        this.isLeafByUser = isLeaf;
      }
    }
    if (store.lazy !== true && this.data) {
      this.setData(this.data);
      if (store.defaultExpandAll) {
        this.expanded = true;
        this.canFocus = true;
      }
    } else if (this.level > 0 && store.lazy && store.defaultExpandAll) {
      this.expand();
    }
    if (!Array.isArray(this.data)) {
      markNodeData(this, this.data);
    }
    if (!this.data)
      return;
    const defaultExpandedKeys = store.defaultExpandedKeys;
    const key = store.key;
    if (key && defaultExpandedKeys && defaultExpandedKeys.includes(this.key)) {
      this.expand(null, store.autoExpandParent);
    }
    if (key && store.currentNodeKey !== void 0 && this.key === store.currentNodeKey) {
      store.currentNode = this;
      store.currentNode.isCurrent = true;
    }
    if (store.lazy) {
      store._initDefaultCheckedNode(this);
    }
    this.updateLeafState();
    if (this.parent && (this.level === 1 || this.parent.expanded === true))
      this.canFocus = true;
  }
  setData(data) {
    if (!Array.isArray(data)) {
      markNodeData(this, data);
    }
    this.data = data;
    this.childNodes = [];
    let children;
    if (this.level === 0 && Array.isArray(this.data)) {
      children = this.data;
    } else {
      children = getPropertyFromData(this, "children") || [];
    }
    for (let i = 0, j = children.length; i < j; i++) {
      this.insertChild({ data: children[i] });
    }
  }
  get label() {
    return getPropertyFromData(this, "label");
  }
  get key() {
    const nodeKey = this.store.key;
    if (this.data)
      return this.data[nodeKey];
    return null;
  }
  get disabled() {
    return getPropertyFromData(this, "disabled");
  }
  get nextSibling() {
    const parent = this.parent;
    if (parent) {
      const index = parent.childNodes.indexOf(this);
      if (index > -1) {
        return parent.childNodes[index + 1];
      }
    }
    return null;
  }
  get previousSibling() {
    const parent = this.parent;
    if (parent) {
      const index = parent.childNodes.indexOf(this);
      if (index > -1) {
        return index > 0 ? parent.childNodes[index - 1] : null;
      }
    }
    return null;
  }
  contains(target, deep = true) {
    return (this.childNodes || []).some((child) => child === target || deep && child.contains(target));
  }
  remove() {
    const parent = this.parent;
    if (parent) {
      parent.removeChild(this);
    }
  }
  insertChild(child, index, batch) {
    if (!child)
      throw new Error("InsertChild error: child is required.");
    if (!(child instanceof node_Node)) {
      if (!batch) {
        const children = this.getChildren(true);
        if (!children.includes(child.data)) {
          if (typeof index === "undefined" || index < 0) {
            children.push(child.data);
          } else {
            children.splice(index, 0, child.data);
          }
        }
      }
      Object.assign(child, {
        parent: this,
        store: this.store
      });
      child = (0,external_Vue_.reactive)(new node_Node(child));
      if (child instanceof node_Node) {
        child.initialize();
      }
    }
    ;
    child.level = this.level + 1;
    if (typeof index === "undefined" || index < 0) {
      this.childNodes.push(child);
    } else {
      this.childNodes.splice(index, 0, child);
    }
    this.updateLeafState();
  }
  insertBefore(child, ref) {
    let index;
    if (ref) {
      index = this.childNodes.indexOf(ref);
    }
    this.insertChild(child, index);
  }
  insertAfter(child, ref) {
    let index;
    if (ref) {
      index = this.childNodes.indexOf(ref);
      if (index !== -1)
        index += 1;
    }
    this.insertChild(child, index);
  }
  removeChild(child) {
    const children = this.getChildren() || [];
    const dataIndex = children.indexOf(child.data);
    if (dataIndex > -1) {
      children.splice(dataIndex, 1);
    }
    const index = this.childNodes.indexOf(child);
    if (index > -1) {
      this.store && this.store.deregisterNode(child);
      child.parent = null;
      this.childNodes.splice(index, 1);
    }
    this.updateLeafState();
  }
  removeChildByData(data) {
    let targetNode = null;
    for (let i = 0; i < this.childNodes.length; i++) {
      if (this.childNodes[i].data === data) {
        targetNode = this.childNodes[i];
        break;
      }
    }
    if (targetNode) {
      this.removeChild(targetNode);
    }
  }
  expand(callback, expandParent) {
    const done = () => {
      if (expandParent) {
        let parent = this.parent;
        while (parent.level > 0) {
          parent.expanded = true;
          parent = parent.parent;
        }
      }
      this.expanded = true;
      if (callback)
        callback();
      this.childNodes.forEach((item) => {
        item.canFocus = true;
      });
    };
    if (this.shouldLoadData()) {
      this.loadData((data) => {
        if (Array.isArray(data)) {
          if (this.checked) {
            this.setChecked(true, true);
          } else if (!this.store.checkStrictly) {
            reInitChecked(this);
          }
          done();
        }
      });
    } else {
      done();
    }
  }
  doCreateChildren(array, defaultProps = {}) {
    array.forEach((item) => {
      this.insertChild(Object.assign({ data: item }, defaultProps), void 0, true);
    });
  }
  collapse() {
    this.expanded = false;
    this.childNodes.forEach((item) => {
      item.canFocus = false;
    });
  }
  shouldLoadData() {
    return this.store.lazy === true && this.store.load && !this.loaded;
  }
  updateLeafState() {
    if (this.store.lazy === true && this.loaded !== true && typeof this.isLeafByUser !== "undefined") {
      this.isLeaf = this.isLeafByUser;
      return;
    }
    const childNodes = this.childNodes;
    if (!this.store.lazy || this.store.lazy === true && this.loaded === true) {
      this.isLeaf = !childNodes || childNodes.length === 0;
      return;
    }
    this.isLeaf = false;
  }
  setChecked(value, deep, recursion, passValue) {
    this.indeterminate = value === "half";
    this.checked = value === true;
    if (this.store.checkStrictly)
      return;
    if (!(this.shouldLoadData() && !this.store.checkDescendants)) {
      const { all, allWithoutDisable } = getChildState(this.childNodes);
      if (!this.isLeaf && !all && allWithoutDisable) {
        this.checked = false;
        value = false;
      }
      const handleDescendants = () => {
        if (deep) {
          const childNodes = this.childNodes;
          for (let i = 0, j = childNodes.length; i < j; i++) {
            const child = childNodes[i];
            passValue = passValue || value !== false;
            const isCheck = child.disabled ? child.checked : passValue;
            child.setChecked(isCheck, deep, true, passValue);
          }
          const { half, all: all2 } = getChildState(childNodes);
          if (!all2) {
            this.checked = all2;
            this.indeterminate = half;
          }
        }
      };
      if (this.shouldLoadData()) {
        this.loadData(() => {
          handleDescendants();
          reInitChecked(this);
        }, {
          checked: value !== false
        });
        return;
      } else {
        handleDescendants();
      }
    }
    const parent = this.parent;
    if (!parent || parent.level === 0)
      return;
    if (!recursion) {
      reInitChecked(parent);
    }
  }
  getChildren(forceInit = false) {
    if (this.level === 0)
      return this.data;
    const data = this.data;
    if (!data)
      return null;
    const props = this.store.props;
    let children = "children";
    if (props) {
      children = props.children || "children";
    }
    if (data[children] === void 0) {
      data[children] = null;
    }
    if (forceInit && !data[children]) {
      data[children] = [];
    }
    return data[children];
  }
  updateChildren() {
    const newData = this.getChildren() || [];
    const oldData = this.childNodes.map((node) => node.data);
    const newDataMap = {};
    const newNodes = [];
    newData.forEach((item, index) => {
      const key = item[NODE_KEY];
      const isNodeExists = !!key && oldData.findIndex((data) => data[NODE_KEY] === key) >= 0;
      if (isNodeExists) {
        newDataMap[key] = { index, data: item };
      } else {
        newNodes.push({ index, data: item });
      }
    });
    if (!this.store.lazy) {
      oldData.forEach((item) => {
        if (!newDataMap[item[NODE_KEY]])
          this.removeChildByData(item);
      });
    }
    newNodes.forEach(({ index, data }) => {
      this.insertChild({ data }, index);
    });
    this.updateLeafState();
  }
  loadData(callback, defaultProps = {}) {
    if (this.store.lazy === true && this.store.load && !this.loaded && (!this.loading || Object.keys(defaultProps).length)) {
      this.loading = true;
      const resolve = (children) => {
        this.loaded = true;
        this.loading = false;
        this.childNodes = [];
        this.doCreateChildren(children, defaultProps);
        this.updateLeafState();
        if (callback) {
          callback.call(this, children);
        }
      };
      this.store.load(this, resolve);
    } else {
      if (callback) {
        callback.call(this);
      }
    }
  }
}


//# sourceMappingURL=node.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/tree/src/model/tree-store.mjs





class TreeStore {
  constructor(options) {
    this.currentNode = null;
    this.currentNodeKey = null;
    for (const option in options) {
      if ((0,shared_esm_bundler/* hasOwn */.RI)(options, option)) {
        this[option] = options[option];
      }
    }
    this.nodesMap = {};
  }
  initialize() {
    this.root = new node_Node({
      data: this.data,
      store: this
    });
    this.root.initialize();
    if (this.lazy && this.load) {
      const loadFn = this.load;
      loadFn(this.root, (data) => {
        this.root.doCreateChildren(data);
        this._initDefaultCheckedNodes();
      });
    } else {
      this._initDefaultCheckedNodes();
    }
  }
  filter(value) {
    const filterNodeMethod = this.filterNodeMethod;
    const lazy = this.lazy;
    const traverse = function(node) {
      const childNodes = node.root ? node.root.childNodes : node.childNodes;
      childNodes.forEach((child) => {
        child.visible = filterNodeMethod.call(child, value, child.data, child);
        traverse(child);
      });
      if (!node.visible && childNodes.length) {
        let allHidden = true;
        allHidden = !childNodes.some((child) => child.visible);
        if (node.root) {
          ;
          node.root.visible = allHidden === false;
        } else {
          ;
          node.visible = allHidden === false;
        }
      }
      if (!value)
        return;
      if (node.visible && !node.isLeaf && !lazy)
        node.expand();
    };
    traverse(this);
  }
  setData(newVal) {
    const instanceChanged = newVal !== this.root.data;
    if (instanceChanged) {
      this.root.setData(newVal);
      this._initDefaultCheckedNodes();
    } else {
      this.root.updateChildren();
    }
  }
  getNode(data) {
    if (data instanceof node_Node)
      return data;
    const key = typeof data !== "object" ? data : getNodeKey(this.key, data);
    return this.nodesMap[key] || null;
  }
  insertBefore(data, refData) {
    const refNode = this.getNode(refData);
    refNode.parent.insertBefore({ data }, refNode);
  }
  insertAfter(data, refData) {
    const refNode = this.getNode(refData);
    refNode.parent.insertAfter({ data }, refNode);
  }
  remove(data) {
    const node = this.getNode(data);
    if (node && node.parent) {
      if (node === this.currentNode) {
        this.currentNode = null;
      }
      node.parent.removeChild(node);
    }
  }
  append(data, parentData) {
    const parentNode = parentData ? this.getNode(parentData) : this.root;
    if (parentNode) {
      parentNode.insertChild({ data });
    }
  }
  _initDefaultCheckedNodes() {
    const defaultCheckedKeys = this.defaultCheckedKeys || [];
    const nodesMap = this.nodesMap;
    defaultCheckedKeys.forEach((checkedKey) => {
      const node = nodesMap[checkedKey];
      if (node) {
        node.setChecked(true, !this.checkStrictly);
      }
    });
  }
  _initDefaultCheckedNode(node) {
    const defaultCheckedKeys = this.defaultCheckedKeys || [];
    if (defaultCheckedKeys.includes(node.key)) {
      node.setChecked(true, !this.checkStrictly);
    }
  }
  setDefaultCheckedKey(newVal) {
    if (newVal !== this.defaultCheckedKeys) {
      this.defaultCheckedKeys = newVal;
      this._initDefaultCheckedNodes();
    }
  }
  registerNode(node) {
    const key = this.key;
    if (!node || !node.data)
      return;
    if (!key) {
      this.nodesMap[node.id] = node;
    } else {
      const nodeKey = node.key;
      if (nodeKey !== void 0)
        this.nodesMap[node.key] = node;
    }
  }
  deregisterNode(node) {
    const key = this.key;
    if (!key || !node || !node.data)
      return;
    node.childNodes.forEach((child) => {
      this.deregisterNode(child);
    });
    delete this.nodesMap[node.key];
  }
  getCheckedNodes(leafOnly = false, includeHalfChecked = false) {
    const checkedNodes = [];
    const traverse = function(node) {
      const childNodes = node.root ? node.root.childNodes : node.childNodes;
      childNodes.forEach((child) => {
        if ((child.checked || includeHalfChecked && child.indeterminate) && (!leafOnly || leafOnly && child.isLeaf)) {
          checkedNodes.push(child.data);
        }
        traverse(child);
      });
    };
    traverse(this);
    return checkedNodes;
  }
  getCheckedKeys(leafOnly = false) {
    return this.getCheckedNodes(leafOnly).map((data) => (data || {})[this.key]);
  }
  getHalfCheckedNodes() {
    const nodes = [];
    const traverse = function(node) {
      const childNodes = node.root ? node.root.childNodes : node.childNodes;
      childNodes.forEach((child) => {
        if (child.indeterminate) {
          nodes.push(child.data);
        }
        traverse(child);
      });
    };
    traverse(this);
    return nodes;
  }
  getHalfCheckedKeys() {
    return this.getHalfCheckedNodes().map((data) => (data || {})[this.key]);
  }
  _getAllNodes() {
    const allNodes = [];
    const nodesMap = this.nodesMap;
    for (const nodeKey in nodesMap) {
      if ((0,shared_esm_bundler/* hasOwn */.RI)(nodesMap, nodeKey)) {
        allNodes.push(nodesMap[nodeKey]);
      }
    }
    return allNodes;
  }
  updateChildren(key, data) {
    const node = this.nodesMap[key];
    if (!node)
      return;
    const childNodes = node.childNodes;
    for (let i = childNodes.length - 1; i >= 0; i--) {
      const child = childNodes[i];
      this.remove(child.data);
    }
    for (let i = 0, j = data.length; i < j; i++) {
      const child = data[i];
      this.append(child, node.data);
    }
  }
  _setCheckedKeys(key, leafOnly = false, checkedKeys) {
    const allNodes = this._getAllNodes().sort((a, b) => b.level - a.level);
    const cache = /* @__PURE__ */ Object.create(null);
    const keys = Object.keys(checkedKeys);
    allNodes.forEach((node) => node.setChecked(false, false));
    for (let i = 0, j = allNodes.length; i < j; i++) {
      const node = allNodes[i];
      const nodeKey = node.data[key].toString();
      const checked = keys.includes(nodeKey);
      if (!checked) {
        if (node.checked && !cache[nodeKey]) {
          node.setChecked(false, false);
        }
        continue;
      }
      let parent = node.parent;
      while (parent && parent.level > 0) {
        cache[parent.data[key]] = true;
        parent = parent.parent;
      }
      if (node.isLeaf || this.checkStrictly) {
        node.setChecked(true, false);
        continue;
      }
      node.setChecked(true, true);
      if (leafOnly) {
        node.setChecked(false, false);
        const traverse = function(node2) {
          const childNodes = node2.childNodes;
          childNodes.forEach((child) => {
            if (!child.isLeaf) {
              child.setChecked(false, false);
            }
            traverse(child);
          });
        };
        traverse(node);
      }
    }
  }
  setCheckedNodes(array, leafOnly = false) {
    const key = this.key;
    const checkedKeys = {};
    array.forEach((item) => {
      checkedKeys[(item || {})[key]] = true;
    });
    this._setCheckedKeys(key, leafOnly, checkedKeys);
  }
  setCheckedKeys(keys, leafOnly = false) {
    this.defaultCheckedKeys = keys;
    const key = this.key;
    const checkedKeys = {};
    keys.forEach((key2) => {
      checkedKeys[key2] = true;
    });
    this._setCheckedKeys(key, leafOnly, checkedKeys);
  }
  setDefaultExpandedKeys(keys) {
    keys = keys || [];
    this.defaultExpandedKeys = keys;
    keys.forEach((key) => {
      const node = this.getNode(key);
      if (node)
        node.expand(null, this.autoExpandParent);
    });
  }
  setChecked(data, checked, deep) {
    const node = this.getNode(data);
    if (node) {
      node.setChecked(!!checked, deep);
    }
  }
  getCurrentNode() {
    return this.currentNode;
  }
  setCurrentNode(currentNode) {
    const prevCurrentNode = this.currentNode;
    if (prevCurrentNode) {
      prevCurrentNode.isCurrent = false;
    }
    this.currentNode = currentNode;
    this.currentNode.isCurrent = true;
  }
  setUserCurrentNode(node, shouldAutoExpandParent = true) {
    const key = node[this.key];
    const currNode = this.nodesMap[key];
    this.setCurrentNode(currNode);
    if (shouldAutoExpandParent && this.currentNode.level > 1) {
      this.currentNode.parent.expand(null, true);
    }
  }
  setCurrentNodeKey(key, shouldAutoExpandParent = true) {
    if (key === null || key === void 0) {
      this.currentNode && (this.currentNode.isCurrent = false);
      this.currentNode = null;
      return;
    }
    const node = this.getNode(key);
    if (node) {
      this.setCurrentNode(node);
      if (shouldAutoExpandParent && this.currentNode.level > 1) {
        this.currentNode.parent.expand(null, true);
      }
    }
  }
}


//# sourceMappingURL=tree-store.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/tree/src/tree-node-content.mjs





const tree_node_content_sfc_main = (0,external_Vue_.defineComponent)({
  name: "ElTreeNodeContent",
  props: {
    node: {
      type: Object,
      required: true
    },
    renderContent: Function
  },
  setup(props) {
    const ns = (0,use_namespace/* useNamespace */.s)("tree");
    const nodeInstance = (0,external_Vue_.inject)("NodeInstance");
    const tree = (0,external_Vue_.inject)("RootTree");
    return () => {
      const node = props.node;
      const { data, store } = node;
      return props.renderContent ? props.renderContent(external_Vue_.h, { _self: nodeInstance, node, data, store }) : tree.ctx.slots.default ? tree.ctx.slots.default({ node, data }) : (0,external_Vue_.h)("span", { class: ns.be("node", "label") }, [node.label]);
    };
  }
});
var tree_node_content_NodeContent = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(tree_node_content_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/tree/src/tree-node-content.vue"]]);


//# sourceMappingURL=tree-node-content.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/tree/src/model/useNodeExpandEventBroadcast.mjs


function useNodeExpandEventBroadcast(props) {
  const parentNodeMap = (0,external_Vue_.inject)("TreeNodeMap", null);
  const currentNodeMap = {
    treeNodeExpand: (node) => {
      if (props.node !== node) {
        props.node.collapse();
      }
    },
    children: []
  };
  if (parentNodeMap) {
    parentNodeMap.children.push(currentNodeMap);
  }
  (0,external_Vue_.provide)("TreeNodeMap", currentNodeMap);
  return {
    broadcastExpanded: (node) => {
      if (!props.accordion)
        return;
      for (const childNode of currentNodeMap.children) {
        childNode.treeNodeExpand(node);
      }
    }
  };
}


//# sourceMappingURL=useNodeExpandEventBroadcast.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/tree/src/model/useDragNode.mjs






const dragEventsKey = Symbol("dragEvents");
function useDragNodeHandler({ props, ctx, el$, dropIndicator$, store }) {
  const ns = (0,use_namespace/* useNamespace */.s)("tree");
  const dragState = (0,external_Vue_.ref)({
    showDropIndicator: false,
    draggingNode: null,
    dropNode: null,
    allowDrop: true,
    dropType: null
  });
  const treeNodeDragStart = ({ event, treeNode }) => {
    if (typeof props.allowDrag === "function" && !props.allowDrag(treeNode.node)) {
      event.preventDefault();
      return false;
    }
    event.dataTransfer.effectAllowed = "move";
    try {
      event.dataTransfer.setData("text/plain", "");
    } catch (e) {
    }
    dragState.value.draggingNode = treeNode;
    ctx.emit("node-drag-start", treeNode.node, event);
  };
  const treeNodeDragOver = ({ event, treeNode }) => {
    const dropNode = treeNode;
    const oldDropNode = dragState.value.dropNode;
    if (oldDropNode && oldDropNode !== dropNode) {
      (0,dom_style/* removeClass */.IV)(oldDropNode.$el, ns.is("drop-inner"));
    }
    const draggingNode = dragState.value.draggingNode;
    if (!draggingNode || !dropNode)
      return;
    let dropPrev = true;
    let dropInner = true;
    let dropNext = true;
    let userAllowDropInner = true;
    if (typeof props.allowDrop === "function") {
      dropPrev = props.allowDrop(draggingNode.node, dropNode.node, "prev");
      userAllowDropInner = dropInner = props.allowDrop(draggingNode.node, dropNode.node, "inner");
      dropNext = props.allowDrop(draggingNode.node, dropNode.node, "next");
    }
    event.dataTransfer.dropEffect = dropInner || dropPrev || dropNext ? "move" : "none";
    if ((dropPrev || dropInner || dropNext) && oldDropNode !== dropNode) {
      if (oldDropNode) {
        ctx.emit("node-drag-leave", draggingNode.node, oldDropNode.node, event);
      }
      ctx.emit("node-drag-enter", draggingNode.node, dropNode.node, event);
    }
    if (dropPrev || dropInner || dropNext) {
      dragState.value.dropNode = dropNode;
    }
    if (dropNode.node.nextSibling === draggingNode.node) {
      dropNext = false;
    }
    if (dropNode.node.previousSibling === draggingNode.node) {
      dropPrev = false;
    }
    if (dropNode.node.contains(draggingNode.node, false)) {
      dropInner = false;
    }
    if (draggingNode.node === dropNode.node || draggingNode.node.contains(dropNode.node)) {
      dropPrev = false;
      dropInner = false;
      dropNext = false;
    }
    const targetPosition = dropNode.$el.getBoundingClientRect();
    const treePosition = el$.value.getBoundingClientRect();
    let dropType;
    const prevPercent = dropPrev ? dropInner ? 0.25 : dropNext ? 0.45 : 1 : -1;
    const nextPercent = dropNext ? dropInner ? 0.75 : dropPrev ? 0.55 : 0 : 1;
    let indicatorTop = -9999;
    const distance = event.clientY - targetPosition.top;
    if (distance < targetPosition.height * prevPercent) {
      dropType = "before";
    } else if (distance > targetPosition.height * nextPercent) {
      dropType = "after";
    } else if (dropInner) {
      dropType = "inner";
    } else {
      dropType = "none";
    }
    const iconPosition = dropNode.$el.querySelector(`.${ns.be("node", "expand-icon")}`).getBoundingClientRect();
    const dropIndicator = dropIndicator$.value;
    if (dropType === "before") {
      indicatorTop = iconPosition.top - treePosition.top;
    } else if (dropType === "after") {
      indicatorTop = iconPosition.bottom - treePosition.top;
    }
    dropIndicator.style.top = `${indicatorTop}px`;
    dropIndicator.style.left = `${iconPosition.right - treePosition.left}px`;
    if (dropType === "inner") {
      (0,dom_style/* addClass */.cn)(dropNode.$el, ns.is("drop-inner"));
    } else {
      (0,dom_style/* removeClass */.IV)(dropNode.$el, ns.is("drop-inner"));
    }
    dragState.value.showDropIndicator = dropType === "before" || dropType === "after";
    dragState.value.allowDrop = dragState.value.showDropIndicator || userAllowDropInner;
    dragState.value.dropType = dropType;
    ctx.emit("node-drag-over", draggingNode.node, dropNode.node, event);
  };
  const treeNodeDragEnd = (event) => {
    const { draggingNode, dropType, dropNode } = dragState.value;
    event.preventDefault();
    event.dataTransfer.dropEffect = "move";
    if (draggingNode && dropNode) {
      const draggingNodeCopy = { data: draggingNode.node.data };
      if (dropType !== "none") {
        draggingNode.node.remove();
      }
      if (dropType === "before") {
        dropNode.node.parent.insertBefore(draggingNodeCopy, dropNode.node);
      } else if (dropType === "after") {
        dropNode.node.parent.insertAfter(draggingNodeCopy, dropNode.node);
      } else if (dropType === "inner") {
        dropNode.node.insertChild(draggingNodeCopy);
      }
      if (dropType !== "none") {
        store.value.registerNode(draggingNodeCopy);
      }
      (0,dom_style/* removeClass */.IV)(dropNode.$el, ns.is("drop-inner"));
      ctx.emit("node-drag-end", draggingNode.node, dropNode.node, dropType, event);
      if (dropType !== "none") {
        ctx.emit("node-drop", draggingNode.node, dropNode.node, dropType, event);
      }
    }
    if (draggingNode && !dropNode) {
      ctx.emit("node-drag-end", draggingNode.node, null, dropType, event);
    }
    dragState.value.showDropIndicator = false;
    dragState.value.draggingNode = null;
    dragState.value.dropNode = null;
    dragState.value.allowDrop = true;
  };
  (0,external_Vue_.provide)(dragEventsKey, {
    treeNodeDragStart,
    treeNodeDragOver,
    treeNodeDragEnd
  });
  return {
    dragState
  };
}


//# sourceMappingURL=useDragNode.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/tree/src/tree-node.mjs

















const tree_node_sfc_main = (0,external_Vue_.defineComponent)({
  name: "ElTreeNode",
  components: {
    ElCollapseTransition: _CollapseTransition,
    ElCheckbox: components_checkbox/* ElCheckbox */.Xb,
    NodeContent: tree_node_content_NodeContent,
    ElIcon: components_icon/* ElIcon */.gn,
    Loading: dist/* Loading */.gbz
  },
  props: {
    node: {
      type: node_Node,
      default: () => ({})
    },
    props: {
      type: Object,
      default: () => ({})
    },
    accordion: Boolean,
    renderContent: Function,
    renderAfterExpand: Boolean,
    showCheckbox: {
      type: Boolean,
      default: false
    }
  },
  emits: ["node-expand"],
  setup(props, ctx) {
    const ns = (0,use_namespace/* useNamespace */.s)("tree");
    const { broadcastExpanded } = useNodeExpandEventBroadcast(props);
    const tree = (0,external_Vue_.inject)("RootTree");
    const expanded = (0,external_Vue_.ref)(false);
    const childNodeRendered = (0,external_Vue_.ref)(false);
    const oldChecked = (0,external_Vue_.ref)(null);
    const oldIndeterminate = (0,external_Vue_.ref)(null);
    const node$ = (0,external_Vue_.ref)(null);
    const dragEvents = (0,external_Vue_.inject)(dragEventsKey);
    const instance = (0,external_Vue_.getCurrentInstance)();
    (0,external_Vue_.provide)("NodeInstance", instance);
    if (!tree) {
      (0,error/* debugWarn */.N)("Tree", "Can not find node's tree.");
    }
    if (props.node.expanded) {
      expanded.value = true;
      childNodeRendered.value = true;
    }
    const childrenKey = tree.props["children"] || "children";
    (0,external_Vue_.watch)(() => {
      const children = props.node.data[childrenKey];
      return children && [...children];
    }, () => {
      props.node.updateChildren();
    });
    (0,external_Vue_.watch)(() => props.node.indeterminate, (val) => {
      handleSelectChange(props.node.checked, val);
    });
    (0,external_Vue_.watch)(() => props.node.checked, (val) => {
      handleSelectChange(val, props.node.indeterminate);
    });
    (0,external_Vue_.watch)(() => props.node.expanded, (val) => {
      (0,external_Vue_.nextTick)(() => expanded.value = val);
      if (val) {
        childNodeRendered.value = true;
      }
    });
    const getNodeKey$1 = (node) => {
      return getNodeKey(tree.props.nodeKey, node.data);
    };
    const getNodeClass = (node) => {
      const nodeClassFunc = props.props.class;
      if (!nodeClassFunc) {
        return {};
      }
      let className;
      if ((0,shared_esm_bundler/* isFunction */.mf)(nodeClassFunc)) {
        const { data } = node;
        className = nodeClassFunc(data, node);
      } else {
        className = nodeClassFunc;
      }
      if ((0,shared_esm_bundler/* isString */.HD)(className)) {
        return { [className]: true };
      } else {
        return className;
      }
    };
    const handleSelectChange = (checked, indeterminate) => {
      if (oldChecked.value !== checked || oldIndeterminate.value !== indeterminate) {
        tree.ctx.emit("check-change", props.node.data, checked, indeterminate);
      }
      oldChecked.value = checked;
      oldIndeterminate.value = indeterminate;
    };
    const handleClick = (e) => {
      const store = tree.store.value;
      store.setCurrentNode(props.node);
      tree.ctx.emit("current-change", store.currentNode ? store.currentNode.data : null, store.currentNode);
      tree.currentNode.value = props.node;
      if (tree.props.expandOnClickNode) {
        handleExpandIconClick();
      }
      if (tree.props.checkOnClickNode && !props.node.disabled) {
        handleCheckChange(null, {
          target: { checked: !props.node.checked }
        });
      }
      tree.ctx.emit("node-click", props.node.data, props.node, instance, e);
    };
    const handleContextMenu = (event) => {
      if (tree.instance.vnode.props["onNodeContextmenu"]) {
        event.stopPropagation();
        event.preventDefault();
      }
      tree.ctx.emit("node-contextmenu", event, props.node.data, props.node, instance);
    };
    const handleExpandIconClick = () => {
      if (props.node.isLeaf)
        return;
      if (expanded.value) {
        tree.ctx.emit("node-collapse", props.node.data, props.node, instance);
        props.node.collapse();
      } else {
        props.node.expand();
        ctx.emit("node-expand", props.node.data, props.node, instance);
      }
    };
    const handleCheckChange = (value, ev) => {
      props.node.setChecked(ev.target.checked, !tree.props.checkStrictly);
      (0,external_Vue_.nextTick)(() => {
        const store = tree.store.value;
        tree.ctx.emit("check", props.node.data, {
          checkedNodes: store.getCheckedNodes(),
          checkedKeys: store.getCheckedKeys(),
          halfCheckedNodes: store.getHalfCheckedNodes(),
          halfCheckedKeys: store.getHalfCheckedKeys()
        });
      });
    };
    const handleChildNodeExpand = (nodeData, node, instance2) => {
      broadcastExpanded(node);
      tree.ctx.emit("node-expand", nodeData, node, instance2);
    };
    const handleDragStart = (event) => {
      if (!tree.props.draggable)
        return;
      dragEvents.treeNodeDragStart({ event, treeNode: props });
    };
    const handleDragOver = (event) => {
      event.preventDefault();
      if (!tree.props.draggable)
        return;
      dragEvents.treeNodeDragOver({
        event,
        treeNode: { $el: node$.value, node: props.node }
      });
    };
    const handleDrop = (event) => {
      event.preventDefault();
    };
    const handleDragEnd = (event) => {
      if (!tree.props.draggable)
        return;
      dragEvents.treeNodeDragEnd(event);
    };
    return {
      ns,
      node$,
      tree,
      expanded,
      childNodeRendered,
      oldChecked,
      oldIndeterminate,
      getNodeKey: getNodeKey$1,
      getNodeClass,
      handleSelectChange,
      handleClick,
      handleContextMenu,
      handleExpandIconClick,
      handleCheckChange,
      handleChildNodeExpand,
      handleDragStart,
      handleDragOver,
      handleDrop,
      handleDragEnd,
      CaretRight: dist/* CaretRight */.TZ
    };
  }
});
const tree_node_hoisted_1 = ["aria-expanded", "aria-disabled", "aria-checked", "draggable", "data-key"];
const tree_node_hoisted_2 = ["aria-expanded"];
function tree_node_sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_el_icon = (0,external_Vue_.resolveComponent)("el-icon");
  const _component_el_checkbox = (0,external_Vue_.resolveComponent)("el-checkbox");
  const _component_loading = (0,external_Vue_.resolveComponent)("loading");
  const _component_node_content = (0,external_Vue_.resolveComponent)("node-content");
  const _component_el_tree_node = (0,external_Vue_.resolveComponent)("el-tree-node");
  const _component_el_collapse_transition = (0,external_Vue_.resolveComponent)("el-collapse-transition");
  return (0,external_Vue_.withDirectives)(((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
    ref: "node$",
    class: (0,external_Vue_.normalizeClass)([
      _ctx.ns.b("node"),
      _ctx.ns.is("expanded", _ctx.expanded),
      _ctx.ns.is("current", _ctx.node.isCurrent),
      _ctx.ns.is("hidden", !_ctx.node.visible),
      _ctx.ns.is("focusable", !_ctx.node.disabled),
      _ctx.ns.is("checked", !_ctx.node.disabled && _ctx.node.checked),
      _ctx.getNodeClass(_ctx.node)
    ]),
    role: "treeitem",
    tabindex: "-1",
    "aria-expanded": _ctx.expanded,
    "aria-disabled": _ctx.node.disabled,
    "aria-checked": _ctx.node.checked,
    draggable: _ctx.tree.props.draggable,
    "data-key": _ctx.getNodeKey(_ctx.node),
    onClick: _cache[1] || (_cache[1] = (0,external_Vue_.withModifiers)((...args) => _ctx.handleClick && _ctx.handleClick(...args), ["stop"])),
    onContextmenu: _cache[2] || (_cache[2] = (...args) => _ctx.handleContextMenu && _ctx.handleContextMenu(...args)),
    onDragstart: _cache[3] || (_cache[3] = (0,external_Vue_.withModifiers)((...args) => _ctx.handleDragStart && _ctx.handleDragStart(...args), ["stop"])),
    onDragover: _cache[4] || (_cache[4] = (0,external_Vue_.withModifiers)((...args) => _ctx.handleDragOver && _ctx.handleDragOver(...args), ["stop"])),
    onDragend: _cache[5] || (_cache[5] = (0,external_Vue_.withModifiers)((...args) => _ctx.handleDragEnd && _ctx.handleDragEnd(...args), ["stop"])),
    onDrop: _cache[6] || (_cache[6] = (0,external_Vue_.withModifiers)((...args) => _ctx.handleDrop && _ctx.handleDrop(...args), ["stop"]))
  }, [
    (0,external_Vue_.createElementVNode)("div", {
      class: (0,external_Vue_.normalizeClass)(_ctx.ns.be("node", "content")),
      style: (0,external_Vue_.normalizeStyle)({ paddingLeft: (_ctx.node.level - 1) * _ctx.tree.props.indent + "px" })
    }, [
      _ctx.tree.props.icon || _ctx.CaretRight ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(_component_el_icon, {
        key: 0,
        class: (0,external_Vue_.normalizeClass)([
          _ctx.ns.be("node", "expand-icon"),
          _ctx.ns.is("leaf", _ctx.node.isLeaf),
          {
            expanded: !_ctx.node.isLeaf && _ctx.expanded
          }
        ]),
        onClick: (0,external_Vue_.withModifiers)(_ctx.handleExpandIconClick, ["stop"])
      }, {
        default: (0,external_Vue_.withCtx)(() => [
          ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.resolveDynamicComponent)(_ctx.tree.props.icon || _ctx.CaretRight)))
        ]),
        _: 1
      }, 8, ["class", "onClick"])) : (0,external_Vue_.createCommentVNode)("v-if", true),
      _ctx.showCheckbox ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(_component_el_checkbox, {
        key: 1,
        "model-value": _ctx.node.checked,
        indeterminate: _ctx.node.indeterminate,
        disabled: !!_ctx.node.disabled,
        onClick: _cache[0] || (_cache[0] = (0,external_Vue_.withModifiers)(() => {
        }, ["stop"])),
        onChange: _ctx.handleCheckChange
      }, null, 8, ["model-value", "indeterminate", "disabled", "onChange"])) : (0,external_Vue_.createCommentVNode)("v-if", true),
      _ctx.node.loading ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(_component_el_icon, {
        key: 2,
        class: (0,external_Vue_.normalizeClass)([_ctx.ns.be("node", "loading-icon"), _ctx.ns.is("loading")])
      }, {
        default: (0,external_Vue_.withCtx)(() => [
          (0,external_Vue_.createVNode)(_component_loading)
        ]),
        _: 1
      }, 8, ["class"])) : (0,external_Vue_.createCommentVNode)("v-if", true),
      (0,external_Vue_.createVNode)(_component_node_content, {
        node: _ctx.node,
        "render-content": _ctx.renderContent
      }, null, 8, ["node", "render-content"])
    ], 6),
    (0,external_Vue_.createVNode)(_component_el_collapse_transition, null, {
      default: (0,external_Vue_.withCtx)(() => [
        !_ctx.renderAfterExpand || _ctx.childNodeRendered ? (0,external_Vue_.withDirectives)(((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
          key: 0,
          class: (0,external_Vue_.normalizeClass)(_ctx.ns.be("node", "children")),
          role: "group",
          "aria-expanded": _ctx.expanded
        }, [
          ((0,external_Vue_.openBlock)(true), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, null, (0,external_Vue_.renderList)(_ctx.node.childNodes, (child) => {
            return (0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(_component_el_tree_node, {
              key: _ctx.getNodeKey(child),
              "render-content": _ctx.renderContent,
              "render-after-expand": _ctx.renderAfterExpand,
              "show-checkbox": _ctx.showCheckbox,
              node: child,
              accordion: _ctx.accordion,
              props: _ctx.props,
              onNodeExpand: _ctx.handleChildNodeExpand
            }, null, 8, ["render-content", "render-after-expand", "show-checkbox", "node", "accordion", "props", "onNodeExpand"]);
          }), 128))
        ], 10, tree_node_hoisted_2)), [
          [external_Vue_.vShow, _ctx.expanded]
        ]) : (0,external_Vue_.createCommentVNode)("v-if", true)
      ]),
      _: 1
    })
  ], 42, tree_node_hoisted_1)), [
    [external_Vue_.vShow, _ctx.node.visible]
  ]);
}
var ElTreeNode = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(tree_node_sfc_main, [["render", tree_node_sfc_render], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/tree/src/tree-node.vue"]]);


//# sourceMappingURL=tree-node.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/tree/src/model/useKeydown.mjs








function useKeydown({ el$ }, store) {
  const ns = (0,use_namespace/* useNamespace */.s)("tree");
  const treeItems = (0,external_Vue_.shallowRef)([]);
  const checkboxItems = (0,external_Vue_.shallowRef)([]);
  (0,external_Vue_.onMounted)(() => {
    initTabIndex();
    event_on(el$.value, "keydown", handleKeydown);
  });
  (0,external_Vue_.onBeforeUnmount)(() => {
    off(el$.value, "keydown", handleKeydown);
  });
  (0,external_Vue_.onUpdated)(() => {
    treeItems.value = Array.from(el$.value.querySelectorAll("[role=treeitem]"));
    checkboxItems.value = Array.from(el$.value.querySelectorAll("input[type=checkbox]"));
  });
  (0,external_Vue_.watch)(checkboxItems, (val) => {
    val.forEach((checkbox) => {
      checkbox.setAttribute("tabindex", "-1");
    });
  });
  const handleKeydown = (ev) => {
    const currentItem = ev.target;
    if (!currentItem.className.includes(ns.b("node")))
      return;
    const code = ev.code;
    treeItems.value = Array.from(el$.value.querySelectorAll(`.${ns.is("focusable")}[role=treeitem]`));
    const currentIndex = treeItems.value.indexOf(currentItem);
    let nextIndex;
    if ([aria_EVENT_CODE.up, aria_EVENT_CODE.down].includes(code)) {
      ev.preventDefault();
      if (code === aria_EVENT_CODE.up) {
        nextIndex = currentIndex === -1 ? 0 : currentIndex !== 0 ? currentIndex - 1 : treeItems.value.length - 1;
        const startIndex = nextIndex;
        while (true) {
          if (store.value.getNode(treeItems.value[nextIndex].dataset.key).canFocus)
            break;
          nextIndex--;
          if (nextIndex === startIndex) {
            nextIndex = -1;
            break;
          }
          if (nextIndex < 0) {
            nextIndex = treeItems.value.length - 1;
          }
        }
      } else {
        nextIndex = currentIndex === -1 ? 0 : currentIndex < treeItems.value.length - 1 ? currentIndex + 1 : 0;
        const startIndex = nextIndex;
        while (true) {
          if (store.value.getNode(treeItems.value[nextIndex].dataset.key).canFocus)
            break;
          nextIndex++;
          if (nextIndex === startIndex) {
            nextIndex = -1;
            break;
          }
          if (nextIndex >= treeItems.value.length) {
            nextIndex = 0;
          }
        }
      }
      nextIndex !== -1 && treeItems.value[nextIndex].focus();
    }
    if ([aria_EVENT_CODE.left, aria_EVENT_CODE.right].includes(code)) {
      ev.preventDefault();
      currentItem.click();
    }
    const hasInput = currentItem.querySelector('[type="checkbox"]');
    if ([aria_EVENT_CODE.enter, aria_EVENT_CODE.space].includes(code) && hasInput) {
      ev.preventDefault();
      hasInput.click();
    }
  };
  const initTabIndex = () => {
    var _a;
    treeItems.value = Array.from(el$.value.querySelectorAll(`.${ns.is("focusable")}[role=treeitem]`));
    checkboxItems.value = Array.from(el$.value.querySelectorAll("input[type=checkbox]"));
    const checkedItem = el$.value.querySelectorAll(`.${ns.is("checked")}[role=treeitem]`);
    if (checkedItem.length) {
      checkedItem[0].setAttribute("tabindex", "0");
      return;
    }
    (_a = treeItems.value[0]) == null ? void 0 : _a.setAttribute("tabindex", "0");
  };
}


//# sourceMappingURL=useKeydown.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/tree/src/tree.mjs














const tree_sfc_main = (0,external_Vue_.defineComponent)({
  name: "ElTree",
  components: { ElTreeNode: ElTreeNode },
  props: {
    data: {
      type: Array,
      default: () => []
    },
    emptyText: {
      type: String
    },
    renderAfterExpand: {
      type: Boolean,
      default: true
    },
    nodeKey: String,
    checkStrictly: Boolean,
    defaultExpandAll: Boolean,
    expandOnClickNode: {
      type: Boolean,
      default: true
    },
    checkOnClickNode: Boolean,
    checkDescendants: {
      type: Boolean,
      default: false
    },
    autoExpandParent: {
      type: Boolean,
      default: true
    },
    defaultCheckedKeys: Array,
    defaultExpandedKeys: Array,
    currentNodeKey: [String, Number],
    renderContent: Function,
    showCheckbox: {
      type: Boolean,
      default: false
    },
    draggable: {
      type: Boolean,
      default: false
    },
    allowDrag: Function,
    allowDrop: Function,
    props: {
      type: Object,
      default: () => ({
        children: "children",
        label: "label",
        disabled: "disabled"
      })
    },
    lazy: {
      type: Boolean,
      default: false
    },
    highlightCurrent: Boolean,
    load: Function,
    filterNodeMethod: Function,
    accordion: Boolean,
    indent: {
      type: Number,
      default: 18
    },
    icon: [String, Object]
  },
  emits: [
    "check-change",
    "current-change",
    "node-click",
    "node-contextmenu",
    "node-collapse",
    "node-expand",
    "check",
    "node-drag-start",
    "node-drag-end",
    "node-drop",
    "node-drag-leave",
    "node-drag-enter",
    "node-drag-over"
  ],
  setup(props, ctx) {
    const { t } = useLocale();
    const ns = (0,use_namespace/* useNamespace */.s)("tree");
    const store = (0,external_Vue_.ref)(new TreeStore({
      key: props.nodeKey,
      data: props.data,
      lazy: props.lazy,
      props: props.props,
      load: props.load,
      currentNodeKey: props.currentNodeKey,
      checkStrictly: props.checkStrictly,
      checkDescendants: props.checkDescendants,
      defaultCheckedKeys: props.defaultCheckedKeys,
      defaultExpandedKeys: props.defaultExpandedKeys,
      autoExpandParent: props.autoExpandParent,
      defaultExpandAll: props.defaultExpandAll,
      filterNodeMethod: props.filterNodeMethod
    }));
    store.value.initialize();
    const root = (0,external_Vue_.ref)(store.value.root);
    const currentNode = (0,external_Vue_.ref)(null);
    const el$ = (0,external_Vue_.ref)(null);
    const dropIndicator$ = (0,external_Vue_.ref)(null);
    const { broadcastExpanded } = useNodeExpandEventBroadcast(props);
    const { dragState } = useDragNodeHandler({
      props,
      ctx,
      el$,
      dropIndicator$,
      store
    });
    useKeydown({ el$ }, store);
    const isEmpty = (0,external_Vue_.computed)(() => {
      const { childNodes } = root.value;
      return !childNodes || childNodes.length === 0 || childNodes.every(({ visible }) => !visible);
    });
    (0,external_Vue_.watch)(() => props.defaultCheckedKeys, (newVal) => {
      store.value.setDefaultCheckedKey(newVal);
    });
    (0,external_Vue_.watch)(() => props.defaultExpandedKeys, (newVal) => {
      store.value.setDefaultExpandedKeys(newVal);
    });
    (0,external_Vue_.watch)(() => props.data, (newVal) => {
      store.value.setData(newVal);
    }, { deep: true });
    (0,external_Vue_.watch)(() => props.checkStrictly, (newVal) => {
      store.value.checkStrictly = newVal;
    });
    const filter = (value) => {
      if (!props.filterNodeMethod)
        throw new Error("[Tree] filterNodeMethod is required when filter");
      store.value.filter(value);
    };
    const getNodeKey$1 = (node) => {
      return getNodeKey(props.nodeKey, node.data);
    };
    const getNodePath = (data) => {
      if (!props.nodeKey)
        throw new Error("[Tree] nodeKey is required in getNodePath");
      const node = store.value.getNode(data);
      if (!node)
        return [];
      const path = [node.data];
      let parent = node.parent;
      while (parent && parent !== root.value) {
        path.push(parent.data);
        parent = parent.parent;
      }
      return path.reverse();
    };
    const getCheckedNodes = (leafOnly, includeHalfChecked) => {
      return store.value.getCheckedNodes(leafOnly, includeHalfChecked);
    };
    const getCheckedKeys = (leafOnly) => {
      return store.value.getCheckedKeys(leafOnly);
    };
    const getCurrentNode = () => {
      const currentNode2 = store.value.getCurrentNode();
      return currentNode2 ? currentNode2.data : null;
    };
    const getCurrentKey = () => {
      if (!props.nodeKey)
        throw new Error("[Tree] nodeKey is required in getCurrentKey");
      const currentNode2 = getCurrentNode();
      return currentNode2 ? currentNode2[props.nodeKey] : null;
    };
    const setCheckedNodes = (nodes, leafOnly) => {
      if (!props.nodeKey)
        throw new Error("[Tree] nodeKey is required in setCheckedNodes");
      store.value.setCheckedNodes(nodes, leafOnly);
    };
    const setCheckedKeys = (keys, leafOnly) => {
      if (!props.nodeKey)
        throw new Error("[Tree] nodeKey is required in setCheckedKeys");
      store.value.setCheckedKeys(keys, leafOnly);
    };
    const setChecked = (data, checked, deep) => {
      store.value.setChecked(data, checked, deep);
    };
    const getHalfCheckedNodes = () => {
      return store.value.getHalfCheckedNodes();
    };
    const getHalfCheckedKeys = () => {
      return store.value.getHalfCheckedKeys();
    };
    const setCurrentNode = (node, shouldAutoExpandParent = true) => {
      if (!props.nodeKey)
        throw new Error("[Tree] nodeKey is required in setCurrentNode");
      store.value.setUserCurrentNode(node, shouldAutoExpandParent);
    };
    const setCurrentKey = (key, shouldAutoExpandParent = true) => {
      if (!props.nodeKey)
        throw new Error("[Tree] nodeKey is required in setCurrentKey");
      store.value.setCurrentNodeKey(key, shouldAutoExpandParent);
    };
    const getNode = (data) => {
      return store.value.getNode(data);
    };
    const remove = (data) => {
      store.value.remove(data);
    };
    const append = (data, parentNode) => {
      store.value.append(data, parentNode);
    };
    const insertBefore = (data, refNode) => {
      store.value.insertBefore(data, refNode);
    };
    const insertAfter = (data, refNode) => {
      store.value.insertAfter(data, refNode);
    };
    const handleNodeExpand = (nodeData, node, instance) => {
      broadcastExpanded(node);
      ctx.emit("node-expand", nodeData, node, instance);
    };
    const updateKeyChildren = (key, data) => {
      if (!props.nodeKey)
        throw new Error("[Tree] nodeKey is required in updateKeyChild");
      store.value.updateChildren(key, data);
    };
    (0,external_Vue_.provide)("RootTree", {
      ctx,
      props,
      store,
      root,
      currentNode,
      instance: (0,external_Vue_.getCurrentInstance)()
    });
    (0,external_Vue_.provide)(tokens_form/* formItemContextKey */.K, void 0);
    return {
      ns,
      store,
      root,
      currentNode,
      dragState,
      el$,
      dropIndicator$,
      isEmpty,
      filter,
      getNodeKey: getNodeKey$1,
      getNodePath,
      getCheckedNodes,
      getCheckedKeys,
      getCurrentNode,
      getCurrentKey,
      setCheckedNodes,
      setCheckedKeys,
      setChecked,
      getHalfCheckedNodes,
      getHalfCheckedKeys,
      setCurrentNode,
      setCurrentKey,
      t,
      getNode,
      remove,
      append,
      insertBefore,
      insertAfter,
      handleNodeExpand,
      updateKeyChildren
    };
  }
});
function tree_sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  var _a;
  const _component_el_tree_node = (0,external_Vue_.resolveComponent)("el-tree-node");
  return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
    ref: "el$",
    class: (0,external_Vue_.normalizeClass)([
      _ctx.ns.b(),
      _ctx.ns.is("dragging", !!_ctx.dragState.draggingNode),
      _ctx.ns.is("drop-not-allow", !_ctx.dragState.allowDrop),
      _ctx.ns.is("drop-inner", _ctx.dragState.dropType === "inner"),
      { [_ctx.ns.m("highlight-current")]: _ctx.highlightCurrent }
    ]),
    role: "tree"
  }, [
    ((0,external_Vue_.openBlock)(true), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, null, (0,external_Vue_.renderList)(_ctx.root.childNodes, (child) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(_component_el_tree_node, {
        key: _ctx.getNodeKey(child),
        node: child,
        props: _ctx.props,
        accordion: _ctx.accordion,
        "render-after-expand": _ctx.renderAfterExpand,
        "show-checkbox": _ctx.showCheckbox,
        "render-content": _ctx.renderContent,
        onNodeExpand: _ctx.handleNodeExpand
      }, null, 8, ["node", "props", "accordion", "render-after-expand", "show-checkbox", "render-content", "onNodeExpand"]);
    }), 128)),
    _ctx.isEmpty ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
      key: 0,
      class: (0,external_Vue_.normalizeClass)(_ctx.ns.e("empty-block"))
    }, [
      (0,external_Vue_.createElementVNode)("span", {
        class: (0,external_Vue_.normalizeClass)(_ctx.ns.e("empty-text"))
      }, (0,external_Vue_.toDisplayString)((_a = _ctx.emptyText) != null ? _a : _ctx.t("el.tree.emptyText")), 3)
    ], 2)) : (0,external_Vue_.createCommentVNode)("v-if", true),
    (0,external_Vue_.withDirectives)((0,external_Vue_.createElementVNode)("div", {
      ref: "dropIndicator$",
      class: (0,external_Vue_.normalizeClass)(_ctx.ns.e("drop-indicator"))
    }, null, 2), [
      [external_Vue_.vShow, _ctx.dragState.showDropIndicator]
    ])
  ], 2);
}
var Tree = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(tree_sfc_main, [["render", tree_sfc_render], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/tree/src/tree.vue"]]);


//# sourceMappingURL=tree.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/tree/index.mjs


Tree.install = (app) => {
  app.component(Tree.name, Tree);
};
const _Tree = Tree;
const ElTree = _Tree;


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/tree-select/src/select.mjs






const select_useSelect = (props, { attrs }, {
  tree,
  key
}) => {
  const ns = (0,use_namespace/* useNamespace */.s)("tree-select");
  const result = {
    ...(0,pick/* default */.Z)((0,external_Vue_.toRefs)(props), Object.keys(ElSelect.props)),
    ...attrs,
    valueKey: key,
    popperClass: (0,external_Vue_.computed)(() => {
      const classes = [ns.e("popper")];
      if (props.popperClass)
        classes.push(props.popperClass);
      return classes.join(" ");
    }),
    filterMethod: (keyword = "") => {
      if (props.filterMethod)
        props.filterMethod(keyword);
      (0,external_Vue_.nextTick)(() => {
        var _a;
        (_a = tree.value) == null ? void 0 : _a.filter(keyword);
      });
    },
    onVisibleChange: (visible) => {
      var _a;
      (_a = attrs.onVisibleChange) == null ? void 0 : _a.call(attrs, visible);
      if (props.filterable && visible) {
        result.filterMethod();
      }
    }
  };
  return result;
};


//# sourceMappingURL=select.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/tree-select/src/tree-select-option.mjs



const component = (0,external_Vue_.defineComponent)({
  extends: ElOption,
  setup(props, ctx) {
    const result = ElOption.setup(props, ctx);
    delete result.selectOptionClick;
    return result;
  },
  methods: {
    selectOptionClick() {
      this.$el.parentElement.click();
    }
  }
});


//# sourceMappingURL=tree-select-option.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/tree-select/src/tree.mjs









const tree_useTree = (props, { attrs, slots, emit }, {
  select,
  tree,
  key
}) => {
  (0,external_Vue_.watch)(() => props.modelValue, () => {
    if (props.showCheckbox) {
      (0,external_Vue_.nextTick)(() => {
        const treeInstance = tree.value;
        if (treeInstance && !(0,isEqual/* default */.Z)(treeInstance.getCheckedKeys(), toValidArray(props.modelValue))) {
          treeInstance.setCheckedKeys(toValidArray(props.modelValue));
        }
      });
    }
  }, {
    immediate: true,
    deep: true
  });
  const propsMap = (0,external_Vue_.computed)(() => ({
    value: key.value,
    ...props.props
  }));
  const getNodeValByProp = (prop, data) => {
    var _a;
    const propVal = propsMap.value[prop];
    if ((0,shared_esm_bundler/* isFunction */.mf)(propVal)) {
      return propVal(data, (_a = tree.value) == null ? void 0 : _a.getNode(getNodeValByProp("value", data)));
    } else {
      return data[propVal];
    }
  };
  return {
    ...(0,pick/* default */.Z)((0,external_Vue_.toRefs)(props), Object.keys(_Tree.props)),
    ...attrs,
    nodeKey: key,
    expandOnClickNode: (0,external_Vue_.computed)(() => {
      return !props.checkStrictly;
    }),
    defaultExpandedKeys: (0,external_Vue_.computed)(() => {
      const values = toValidArray(props.modelValue);
      const parentKeys = tree.value ? values.map((item) => {
        var _a, _b, _c;
        return (_c = (_b = (_a = tree.value) == null ? void 0 : _a.getNode(item)) == null ? void 0 : _b.parent) == null ? void 0 : _c.key;
      }).filter((item) => tree_isValidValue(item)) : values;
      return props.defaultExpandedKeys ? props.defaultExpandedKeys.concat(parentKeys) : parentKeys;
    }),
    renderContent: (h, { node, data, store }) => {
      return h(component, {
        value: getNodeValByProp("value", data),
        label: getNodeValByProp("label", data),
        disabled: getNodeValByProp("disabled", data)
      }, props.renderContent ? () => props.renderContent(h, { node, data, store }) : slots.default ? () => slots.default({ node, data, store }) : void 0);
    },
    filterNodeMethod: (value, data, node) => {
      var _a;
      if (props.filterNodeMethod)
        return props.filterNodeMethod(value, data, node);
      if (!value)
        return true;
      return (_a = getNodeValByProp("label", data)) == null ? void 0 : _a.includes(value);
    },
    onNodeClick: (data, node, e) => {
      var _a, _b, _c;
      (_a = attrs.onNodeClick) == null ? void 0 : _a.call(attrs, data, node, e);
      if ((props.checkStrictly ? props.showCheckbox ? props.checkOnClickNode : props.checkStrictly : props.checkStrictly) || node.isLeaf) {
        if (!getNodeValByProp("disabled", data)) {
          const option = (_b = select.value) == null ? void 0 : _b.options.get(getNodeValByProp("value", data));
          (_c = select.value) == null ? void 0 : _c.handleOptionSelect(option, true);
        }
      } else {
        e.proxy.handleExpandIconClick();
      }
    },
    onCheck: (data, params) => {
      var _a, _b;
      (_a = attrs.onCheck) == null ? void 0 : _a.call(attrs, data, params);
      const checkedKeys = !props.checkStrictly ? (_b = tree.value) == null ? void 0 : _b.getCheckedKeys(true) : params.checkedKeys;
      const value = getNodeValByProp("value", data);
      emit(constants_event/* UPDATE_MODEL_EVENT */.f_, props.multiple ? checkedKeys : checkedKeys.includes(value) ? value : void 0);
    }
  };
};
function tree_isValidValue(val) {
  return val || val === 0;
}
function toValidArray(val) {
  return Array.isArray(val) ? val : tree_isValidValue(val) ? [val] : [];
}


//# sourceMappingURL=tree.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/tree-select/src/tree-select.mjs








const tree_select_sfc_main = (0,external_Vue_.defineComponent)({
  name: "ElTreeSelect",
  inheritAttrs: false,
  props: {
    ...ElSelect.props,
    ..._Tree.props
  },
  setup(props, context) {
    const { slots, expose } = context;
    const select = (0,external_Vue_.ref)();
    const tree = (0,external_Vue_.ref)();
    const key = (0,external_Vue_.computed)(() => props.nodeKey || props.valueKey || "value");
    const selectProps = select_useSelect(props, context, { select, tree, key });
    const treeProps = tree_useTree(props, context, { select, tree, key });
    const methods = (0,external_Vue_.reactive)({});
    expose(methods);
    (0,external_Vue_.onMounted)(() => {
      Object.assign(methods, {
        ...(0,pick/* default */.Z)(tree.value, [
          "filter",
          "updateKeyChildren",
          "getCheckedNodes",
          "setCheckedNodes",
          "getCheckedKeys",
          "setCheckedKeys",
          "setChecked",
          "getHalfCheckedNodes",
          "getHalfCheckedKeys",
          "getCurrentKey",
          "getCurrentNode",
          "setCurrentKey",
          "setCurrentNode",
          "getNode",
          "remove",
          "append",
          "insertBefore",
          "insertAfter"
        ]),
        ...(0,pick/* default */.Z)(select.value, ["focus", "blur"])
      });
    });
    return () => (0,external_Vue_.h)(ElSelect, (0,external_Vue_.reactive)({
      ...selectProps,
      ref: (ref2) => select.value = ref2
    }), {
      ...slots,
      default: () => (0,external_Vue_.h)(_Tree, (0,external_Vue_.reactive)({
        ...treeProps,
        ref: (ref2) => tree.value = ref2
      }))
    });
  }
});
var TreeSelect = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(tree_select_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/tree-select/src/tree-select.vue"]]);


//# sourceMappingURL=tree-select.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/tree-select/index.mjs


TreeSelect.install = (app) => {
  app.component(TreeSelect.name, TreeSelect);
};
const _TreeSelect = TreeSelect;
const ElTreeSelect = _TreeSelect;


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/tree-v2/src/virtual-tree.mjs





const ROOT_TREE_INJECTION_KEY = Symbol();
const EMPTY_NODE = {
  key: -1,
  level: -1,
  data: {}
};
var TreeOptionsEnum = /* @__PURE__ */ ((TreeOptionsEnum2) => {
  TreeOptionsEnum2["KEY"] = "id";
  TreeOptionsEnum2["LABEL"] = "label";
  TreeOptionsEnum2["CHILDREN"] = "children";
  TreeOptionsEnum2["DISABLED"] = "disabled";
  return TreeOptionsEnum2;
})(TreeOptionsEnum || {});
var SetOperationEnum = /* @__PURE__ */ ((SetOperationEnum2) => {
  SetOperationEnum2["ADD"] = "add";
  SetOperationEnum2["DELETE"] = "delete";
  return SetOperationEnum2;
})(SetOperationEnum || {});
const treeProps = (0,runtime/* buildProps */.o8)({
  data: {
    type: (0,runtime/* definePropType */.Cq)(Array),
    default: () => (0,typescript/* mutable */.N)([])
  },
  emptyText: {
    type: String
  },
  height: {
    type: Number,
    default: 200
  },
  props: {
    type: (0,runtime/* definePropType */.Cq)(Object),
    default: () => (0,typescript/* mutable */.N)({
      children: "children" /* CHILDREN */,
      label: "label" /* LABEL */,
      disabled: "disabled" /* DISABLED */,
      value: "id" /* KEY */
    })
  },
  highlightCurrent: {
    type: Boolean,
    default: false
  },
  showCheckbox: {
    type: Boolean,
    default: false
  },
  defaultCheckedKeys: {
    type: (0,runtime/* definePropType */.Cq)(Array),
    default: () => (0,typescript/* mutable */.N)([])
  },
  checkStrictly: {
    type: Boolean,
    default: false
  },
  defaultExpandedKeys: {
    type: (0,runtime/* definePropType */.Cq)(Array),
    default: () => (0,typescript/* mutable */.N)([])
  },
  indent: {
    type: Number,
    default: 16
  },
  icon: {
    type: icon/* iconPropType */.AA
  },
  expandOnClickNode: {
    type: Boolean,
    default: true
  },
  checkOnClickNode: {
    type: Boolean,
    default: false
  },
  currentNodeKey: {
    type: (0,runtime/* definePropType */.Cq)([String, Number])
  },
  accordion: {
    type: Boolean,
    default: false
  },
  filterMethod: {
    type: (0,runtime/* definePropType */.Cq)(Function)
  },
  perfMode: {
    type: Boolean,
    default: true
  }
});
const treeNodeProps = (0,runtime/* buildProps */.o8)({
  node: {
    type: (0,runtime/* definePropType */.Cq)(Object),
    default: () => (0,typescript/* mutable */.N)(EMPTY_NODE)
  },
  expanded: {
    type: Boolean,
    default: false
  },
  checked: {
    type: Boolean,
    default: false
  },
  indeterminate: {
    type: Boolean,
    default: false
  },
  showCheckbox: {
    type: Boolean,
    default: false
  },
  disabled: {
    type: Boolean,
    default: false
  },
  current: {
    type: Boolean,
    default: false
  },
  hiddenExpandIcon: {
    type: Boolean,
    default: false
  }
});
const treeNodeContentProps = (0,runtime/* buildProps */.o8)({
  node: {
    type: (0,runtime/* definePropType */.Cq)(Object),
    required: true
  }
});
const NODE_CLICK = "node-click";
const NODE_EXPAND = "node-expand";
const NODE_COLLAPSE = "node-collapse";
const CURRENT_CHANGE = "current-change";
const NODE_CHECK = "check";
const NODE_CHECK_CHANGE = "check-change";
const NODE_CONTEXTMENU = "node-contextmenu";
const treeEmits = {
  [NODE_CLICK]: (data, node, e) => data && node && e,
  [NODE_EXPAND]: (data, node) => data && node,
  [NODE_COLLAPSE]: (data, node) => data && node,
  [CURRENT_CHANGE]: (data, node) => data && node,
  [NODE_CHECK]: (data, checkedInfo) => data && checkedInfo,
  [NODE_CHECK_CHANGE]: (data, checked) => data && typeof checked === "boolean",
  [NODE_CONTEXTMENU]: (event, data, node) => event && data && node
};
const treeNodeEmits = {
  click: (node, e) => !!(node && e),
  toggle: (node) => !!node,
  check: (node, checked) => node && typeof checked === "boolean"
};


//# sourceMappingURL=virtual-tree.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/tree-v2/src/composables/useCheck.mjs



function useCheck_useCheck(props, tree) {
  const checkedKeys = (0,external_Vue_.ref)(/* @__PURE__ */ new Set());
  const indeterminateKeys = (0,external_Vue_.ref)(/* @__PURE__ */ new Set());
  const { emit } = (0,external_Vue_.getCurrentInstance)();
  (0,external_Vue_.watch)(() => tree.value, () => {
    return (0,external_Vue_.nextTick)(() => {
      _setCheckedKeys(props.defaultCheckedKeys);
    });
  }, {
    immediate: true
  });
  const updateCheckedKeys = () => {
    if (!tree.value || !props.showCheckbox || props.checkStrictly) {
      return;
    }
    const { levelTreeNodeMap, maxLevel } = tree.value;
    const checkedKeySet = checkedKeys.value;
    const indeterminateKeySet = /* @__PURE__ */ new Set();
    for (let level = maxLevel - 1; level >= 1; --level) {
      const nodes = levelTreeNodeMap.get(level);
      if (!nodes)
        continue;
      nodes.forEach((node) => {
        const children = node.children;
        if (children) {
          let allChecked = true;
          let hasChecked = false;
          for (const childNode of children) {
            const key = childNode.key;
            if (checkedKeySet.has(key)) {
              hasChecked = true;
            } else if (indeterminateKeySet.has(key)) {
              allChecked = false;
              hasChecked = true;
              break;
            } else {
              allChecked = false;
            }
          }
          if (allChecked) {
            checkedKeySet.add(node.key);
          } else if (hasChecked) {
            indeterminateKeySet.add(node.key);
            checkedKeySet.delete(node.key);
          } else {
            checkedKeySet.delete(node.key);
            indeterminateKeySet.delete(node.key);
          }
        }
      });
    }
    indeterminateKeys.value = indeterminateKeySet;
  };
  const isChecked = (node) => checkedKeys.value.has(node.key);
  const isIndeterminate = (node) => indeterminateKeys.value.has(node.key);
  const toggleCheckbox = (node, isChecked2, nodeClick = true) => {
    const checkedKeySet = checkedKeys.value;
    const toggle = (node2, checked) => {
      checkedKeySet[checked ? SetOperationEnum.ADD : SetOperationEnum.DELETE](node2.key);
      const children = node2.children;
      if (!props.checkStrictly && children) {
        children.forEach((childNode) => {
          if (!childNode.disabled) {
            toggle(childNode, checked);
          }
        });
      }
    };
    toggle(node, isChecked2);
    updateCheckedKeys();
    if (nodeClick) {
      afterNodeCheck(node, isChecked2);
    }
  };
  const afterNodeCheck = (node, checked) => {
    const { checkedNodes, checkedKeys: checkedKeys2 } = getChecked();
    const { halfCheckedNodes, halfCheckedKeys } = getHalfChecked();
    emit(NODE_CHECK, node.data, {
      checkedKeys: checkedKeys2,
      checkedNodes,
      halfCheckedKeys,
      halfCheckedNodes
    });
    emit(NODE_CHECK_CHANGE, node.data, checked);
  };
  function getCheckedKeys(leafOnly = false) {
    return getChecked(leafOnly).checkedKeys;
  }
  function getCheckedNodes(leafOnly = false) {
    return getChecked(leafOnly).checkedNodes;
  }
  function getHalfCheckedKeys() {
    return getHalfChecked().halfCheckedKeys;
  }
  function getHalfCheckedNodes() {
    return getHalfChecked().halfCheckedNodes;
  }
  function getChecked(leafOnly = false) {
    const checkedNodes = [];
    const keys = [];
    if ((tree == null ? void 0 : tree.value) && props.showCheckbox) {
      const { treeNodeMap } = tree.value;
      checkedKeys.value.forEach((key) => {
        const node = treeNodeMap.get(key);
        if (node && (!leafOnly || leafOnly && node.isLeaf)) {
          keys.push(key);
          checkedNodes.push(node.data);
        }
      });
    }
    return {
      checkedKeys: keys,
      checkedNodes
    };
  }
  function getHalfChecked() {
    const halfCheckedNodes = [];
    const halfCheckedKeys = [];
    if ((tree == null ? void 0 : tree.value) && props.showCheckbox) {
      const { treeNodeMap } = tree.value;
      indeterminateKeys.value.forEach((key) => {
        const node = treeNodeMap.get(key);
        if (node) {
          halfCheckedKeys.push(key);
          halfCheckedNodes.push(node.data);
        }
      });
    }
    return {
      halfCheckedNodes,
      halfCheckedKeys
    };
  }
  function setCheckedKeys(keys) {
    checkedKeys.value.clear();
    indeterminateKeys.value.clear();
    _setCheckedKeys(keys);
  }
  function setChecked(key, isChecked2) {
    if ((tree == null ? void 0 : tree.value) && props.showCheckbox) {
      const node = tree.value.treeNodeMap.get(key);
      if (node) {
        toggleCheckbox(node, isChecked2, false);
      }
    }
  }
  function _setCheckedKeys(keys) {
    if (tree == null ? void 0 : tree.value) {
      const { treeNodeMap } = tree.value;
      if (props.showCheckbox && treeNodeMap && keys) {
        for (const key of keys) {
          const node = treeNodeMap.get(key);
          if (node && !isChecked(node)) {
            toggleCheckbox(node, true, false);
          }
        }
      }
    }
  }
  return {
    updateCheckedKeys,
    toggleCheckbox,
    isChecked,
    isIndeterminate,
    getCheckedKeys,
    getCheckedNodes,
    getHalfCheckedKeys,
    getHalfCheckedNodes,
    setChecked,
    setCheckedKeys
  };
}


//# sourceMappingURL=useCheck.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/tree-v2/src/composables/useFilter.mjs



function useFilter(props, tree) {
  const hiddenNodeKeySet = (0,external_Vue_.ref)(/* @__PURE__ */ new Set([]));
  const hiddenExpandIconKeySet = (0,external_Vue_.ref)(/* @__PURE__ */ new Set([]));
  const filterable = (0,external_Vue_.computed)(() => {
    return (0,shared_esm_bundler/* isFunction */.mf)(props.filterMethod);
  });
  function doFilter(query) {
    var _a;
    if (!filterable.value) {
      return;
    }
    const expandKeySet = /* @__PURE__ */ new Set();
    const hiddenExpandIconKeys = hiddenExpandIconKeySet.value;
    const hiddenKeys = hiddenNodeKeySet.value;
    const family = [];
    const nodes = ((_a = tree.value) == null ? void 0 : _a.treeNodes) || [];
    const filter = props.filterMethod;
    hiddenKeys.clear();
    function traverse(nodes2) {
      nodes2.forEach((node) => {
        family.push(node);
        if (filter == null ? void 0 : filter(query, node.data)) {
          family.forEach((member) => {
            expandKeySet.add(member.key);
          });
        } else if (node.isLeaf) {
          hiddenKeys.add(node.key);
        }
        const children = node.children;
        if (children) {
          traverse(children);
        }
        if (!node.isLeaf) {
          if (!expandKeySet.has(node.key)) {
            hiddenKeys.add(node.key);
          } else if (children) {
            let allHidden = true;
            for (const childNode of children) {
              if (!hiddenKeys.has(childNode.key)) {
                allHidden = false;
                break;
              }
            }
            if (allHidden) {
              hiddenExpandIconKeys.add(node.key);
            } else {
              hiddenExpandIconKeys.delete(node.key);
            }
          }
        }
        family.pop();
      });
    }
    traverse(nodes);
    return expandKeySet;
  }
  function isForceHiddenExpandIcon(node) {
    return hiddenExpandIconKeySet.value.has(node.key);
  }
  return {
    hiddenExpandIconKeySet,
    hiddenNodeKeySet,
    doFilter,
    isForceHiddenExpandIcon
  };
}


//# sourceMappingURL=useFilter.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/tree-v2/src/composables/useTree.mjs





function useTree_useTree(props, emit) {
  const expandedKeySet = (0,external_Vue_.ref)(new Set(props.defaultExpandedKeys));
  const currentKey = (0,external_Vue_.ref)();
  const tree = (0,external_Vue_.shallowRef)();
  (0,external_Vue_.watch)(() => props.currentNodeKey, (key) => {
    currentKey.value = key;
  }, {
    immediate: true
  });
  (0,external_Vue_.watch)(() => props.data, (data) => {
    setData(data);
  }, {
    immediate: true
  });
  const {
    isIndeterminate,
    isChecked,
    toggleCheckbox,
    getCheckedKeys,
    getCheckedNodes,
    getHalfCheckedKeys,
    getHalfCheckedNodes,
    setChecked,
    setCheckedKeys
  } = useCheck_useCheck(props, tree);
  const { doFilter, hiddenNodeKeySet, isForceHiddenExpandIcon } = useFilter(props, tree);
  const valueKey = (0,external_Vue_.computed)(() => {
    var _a;
    return ((_a = props.props) == null ? void 0 : _a.value) || TreeOptionsEnum.KEY;
  });
  const childrenKey = (0,external_Vue_.computed)(() => {
    var _a;
    return ((_a = props.props) == null ? void 0 : _a.children) || TreeOptionsEnum.CHILDREN;
  });
  const disabledKey = (0,external_Vue_.computed)(() => {
    var _a;
    return ((_a = props.props) == null ? void 0 : _a.disabled) || TreeOptionsEnum.DISABLED;
  });
  const labelKey = (0,external_Vue_.computed)(() => {
    var _a;
    return ((_a = props.props) == null ? void 0 : _a.label) || TreeOptionsEnum.LABEL;
  });
  const flattenTree = (0,external_Vue_.computed)(() => {
    const expandedKeys = expandedKeySet.value;
    const hiddenKeys = hiddenNodeKeySet.value;
    const flattenNodes = [];
    const nodes = tree.value && tree.value.treeNodes || [];
    function traverse() {
      const stack = [];
      for (let i = nodes.length - 1; i >= 0; --i) {
        stack.push(nodes[i]);
      }
      while (stack.length) {
        const node = stack.pop();
        if (!node)
          continue;
        if (!hiddenKeys.has(node.key)) {
          flattenNodes.push(node);
        }
        if (expandedKeys.has(node.key)) {
          const children = node.children;
          if (children) {
            const length = children.length;
            for (let i = length - 1; i >= 0; --i) {
              stack.push(children[i]);
            }
          }
        }
      }
    }
    traverse();
    return flattenNodes;
  });
  const isNotEmpty = (0,external_Vue_.computed)(() => {
    return flattenTree.value.length > 0;
  });
  function createTree(data) {
    const treeNodeMap = /* @__PURE__ */ new Map();
    const levelTreeNodeMap = /* @__PURE__ */ new Map();
    let maxLevel = 1;
    function traverse(nodes, level = 1, parent = void 0) {
      var _a;
      const siblings = [];
      for (const rawNode of nodes) {
        const value = getKey(rawNode);
        const node = {
          level,
          key: value,
          data: rawNode
        };
        node.label = getLabel(rawNode);
        node.parent = parent;
        const children = getChildren(rawNode);
        node.disabled = getDisabled(rawNode);
        node.isLeaf = !children || children.length === 0;
        if (children && children.length) {
          node.children = traverse(children, level + 1, node);
        }
        siblings.push(node);
        treeNodeMap.set(value, node);
        if (!levelTreeNodeMap.has(level)) {
          levelTreeNodeMap.set(level, []);
        }
        (_a = levelTreeNodeMap.get(level)) == null ? void 0 : _a.push(node);
      }
      if (level > maxLevel) {
        maxLevel = level;
      }
      return siblings;
    }
    const treeNodes = traverse(data);
    return {
      treeNodeMap,
      levelTreeNodeMap,
      maxLevel,
      treeNodes
    };
  }
  function filter(query) {
    const keys = doFilter(query);
    if (keys) {
      expandedKeySet.value = keys;
    }
  }
  function getChildren(node) {
    return node[childrenKey.value];
  }
  function getKey(node) {
    if (!node) {
      return "";
    }
    return node[valueKey.value];
  }
  function getDisabled(node) {
    return node[disabledKey.value];
  }
  function getLabel(node) {
    return node[labelKey.value];
  }
  function toggleExpand(node) {
    const expandedKeys = expandedKeySet.value;
    if (expandedKeys.has(node.key)) {
      collapse(node);
    } else {
      expand(node);
    }
  }
  function handleNodeClick(node, e) {
    emit(NODE_CLICK, node.data, node, e);
    handleCurrentChange(node);
    if (props.expandOnClickNode) {
      toggleExpand(node);
    }
    if (props.showCheckbox && props.checkOnClickNode && !node.disabled) {
      toggleCheckbox(node, !isChecked(node), true);
    }
  }
  function handleCurrentChange(node) {
    if (!isCurrent(node)) {
      currentKey.value = node.key;
      emit(CURRENT_CHANGE, node.data, node);
    }
  }
  function handleNodeCheck(node, checked) {
    toggleCheckbox(node, checked);
  }
  function expand(node) {
    const keySet = expandedKeySet.value;
    if ((tree == null ? void 0 : tree.value) && props.accordion) {
      const { treeNodeMap } = tree.value;
      keySet.forEach((key) => {
        const node2 = treeNodeMap.get(key);
        if (node2 && node2.level === node2.level) {
          keySet.delete(key);
        }
      });
    }
    keySet.add(node.key);
    emit(NODE_EXPAND, node.data, node);
  }
  function collapse(node) {
    expandedKeySet.value.delete(node.key);
    emit(NODE_COLLAPSE, node.data, node);
  }
  function isExpanded(node) {
    return expandedKeySet.value.has(node.key);
  }
  function isDisabled(node) {
    return !!node.disabled;
  }
  function isCurrent(node) {
    const current = currentKey.value;
    return !!current && current === node.key;
  }
  function getCurrentNode() {
    var _a, _b;
    if (!currentKey.value)
      return void 0;
    return (_b = (_a = tree == null ? void 0 : tree.value) == null ? void 0 : _a.treeNodeMap.get(currentKey.value)) == null ? void 0 : _b.data;
  }
  function getCurrentKey() {
    return currentKey.value;
  }
  function setCurrentKey(key) {
    currentKey.value = key;
  }
  function setData(data) {
    (0,external_Vue_.nextTick)(() => tree.value = createTree(data));
  }
  return {
    tree,
    flattenTree,
    isNotEmpty,
    getKey,
    getChildren,
    toggleExpand,
    toggleCheckbox,
    isExpanded,
    isChecked,
    isIndeterminate,
    isDisabled,
    isCurrent,
    isForceHiddenExpandIcon,
    handleNodeClick,
    handleNodeCheck,
    getCurrentNode,
    getCurrentKey,
    setCurrentKey,
    getCheckedKeys,
    getCheckedNodes,
    getHalfCheckedKeys,
    getHalfCheckedNodes,
    setChecked,
    setCheckedKeys,
    filter,
    setData
  };
}


//# sourceMappingURL=useTree.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/tree-v2/src/tree-node-content.mjs





var ElNodeContent = (0,external_Vue_.defineComponent)({
  name: "ElTreeNodeContent",
  props: treeNodeContentProps,
  setup(props) {
    const tree = (0,external_Vue_.inject)(ROOT_TREE_INJECTION_KEY);
    const ns = (0,use_namespace/* useNamespace */.s)("tree");
    return () => {
      const node = props.node;
      const { data } = node;
      return (tree == null ? void 0 : tree.ctx.slots.default) ? tree.ctx.slots.default({ node, data }) : (0,external_Vue_.h)("span", { class: ns.be("node", "label") }, [node == null ? void 0 : node.label]);
    };
  }
});


//# sourceMappingURL=tree-node-content.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/tree-v2/src/tree-node.mjs










const DEFAULT_ICON = "caret-right";
const src_tree_node_sfc_main = (0,external_Vue_.defineComponent)({
  name: "ElTreeNode",
  components: {
    ElIcon: components_icon/* ElIcon */.gn,
    CaretRight: dist/* CaretRight */.TZ,
    ElCheckbox: components_checkbox/* ElCheckbox */.Xb,
    ElNodeContent: ElNodeContent
  },
  props: treeNodeProps,
  emits: treeNodeEmits,
  setup(props, { emit }) {
    const tree = (0,external_Vue_.inject)(ROOT_TREE_INJECTION_KEY);
    const ns = (0,use_namespace/* useNamespace */.s)("tree");
    const indent = (0,external_Vue_.computed)(() => {
      var _a;
      return (_a = tree == null ? void 0 : tree.props.indent) != null ? _a : 16;
    });
    const icon = (0,external_Vue_.computed)(() => {
      var _a;
      return (_a = tree == null ? void 0 : tree.props.icon) != null ? _a : DEFAULT_ICON;
    });
    const handleClick = (e) => {
      emit("click", props.node, e);
    };
    const handleExpandIconClick = () => {
      emit("toggle", props.node);
    };
    const handleCheckChange = (value) => {
      emit("check", props.node, value);
    };
    const handleContextMenu = (event) => {
      var _a, _b, _c, _d;
      if ((_c = (_b = (_a = tree == null ? void 0 : tree.instance) == null ? void 0 : _a.vnode) == null ? void 0 : _b.props) == null ? void 0 : _c["onNodeContextmenu"]) {
        event.stopPropagation();
        event.preventDefault();
      }
      tree == null ? void 0 : tree.ctx.emit(NODE_CONTEXTMENU, event, (_d = props.node) == null ? void 0 : _d.data, props.node);
    };
    return {
      ns,
      indent,
      icon,
      handleClick,
      handleExpandIconClick,
      handleCheckChange,
      handleContextMenu
    };
  }
});
const src_tree_node_hoisted_1 = ["aria-expanded", "aria-disabled", "aria-checked", "data-key"];
function src_tree_node_sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  var _a, _b, _c;
  const _component_el_icon = (0,external_Vue_.resolveComponent)("el-icon");
  const _component_el_checkbox = (0,external_Vue_.resolveComponent)("el-checkbox");
  const _component_el_node_content = (0,external_Vue_.resolveComponent)("el-node-content");
  return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
    ref: "node$",
    class: (0,external_Vue_.normalizeClass)([
      _ctx.ns.b("node"),
      _ctx.ns.is("expanded", _ctx.expanded),
      _ctx.ns.is("current", _ctx.current),
      _ctx.ns.is("focusable", !_ctx.disabled),
      _ctx.ns.is("checked", !_ctx.disabled && _ctx.checked)
    ]),
    role: "treeitem",
    tabindex: "-1",
    "aria-expanded": _ctx.expanded,
    "aria-disabled": _ctx.disabled,
    "aria-checked": _ctx.checked,
    "data-key": (_a = _ctx.node) == null ? void 0 : _a.key,
    onClick: _cache[1] || (_cache[1] = (0,external_Vue_.withModifiers)((...args) => _ctx.handleClick && _ctx.handleClick(...args), ["stop"])),
    onContextmenu: _cache[2] || (_cache[2] = (...args) => _ctx.handleContextMenu && _ctx.handleContextMenu(...args))
  }, [
    (0,external_Vue_.createElementVNode)("div", {
      class: (0,external_Vue_.normalizeClass)(_ctx.ns.be("node", "content")),
      style: (0,external_Vue_.normalizeStyle)({ paddingLeft: `${(_ctx.node.level - 1) * _ctx.indent}px` })
    }, [
      _ctx.icon ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(_component_el_icon, {
        key: 0,
        class: (0,external_Vue_.normalizeClass)([
          _ctx.ns.is("leaf", !!((_b = _ctx.node) == null ? void 0 : _b.isLeaf)),
          _ctx.ns.is("hidden", _ctx.hiddenExpandIcon),
          {
            expanded: !((_c = _ctx.node) == null ? void 0 : _c.isLeaf) && _ctx.expanded
          },
          _ctx.ns.be("node", "expand-icon")
        ]),
        onClick: (0,external_Vue_.withModifiers)(_ctx.handleExpandIconClick, ["stop"])
      }, {
        default: (0,external_Vue_.withCtx)(() => [
          ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.resolveDynamicComponent)(_ctx.icon)))
        ]),
        _: 1
      }, 8, ["class", "onClick"])) : (0,external_Vue_.createCommentVNode)("v-if", true),
      _ctx.showCheckbox ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(_component_el_checkbox, {
        key: 1,
        "model-value": _ctx.checked,
        indeterminate: _ctx.indeterminate,
        disabled: _ctx.disabled,
        onChange: _ctx.handleCheckChange,
        onClick: _cache[0] || (_cache[0] = (0,external_Vue_.withModifiers)(() => {
        }, ["stop"]))
      }, null, 8, ["model-value", "indeterminate", "disabled", "onChange"])) : (0,external_Vue_.createCommentVNode)("v-if", true),
      (0,external_Vue_.createVNode)(_component_el_node_content, { node: _ctx.node }, null, 8, ["node"])
    ], 6)
  ], 42, src_tree_node_hoisted_1);
}
var tree_node_ElTreeNode = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(src_tree_node_sfc_main, [["render", src_tree_node_sfc_render], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/tree-v2/src/tree-node.vue"]]);


//# sourceMappingURL=tree-node.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/tree-v2/src/tree.mjs













const src_tree_sfc_main = (0,external_Vue_.defineComponent)({
  name: "ElTreeV2",
  components: {
    ElTreeNode: tree_node_ElTreeNode,
    FixedSizeList: FixedSizeList
  },
  props: treeProps,
  emits: treeEmits,
  setup(props, ctx) {
    (0,external_Vue_.provide)(ROOT_TREE_INJECTION_KEY, {
      ctx,
      props,
      instance: (0,external_Vue_.getCurrentInstance)()
    });
    (0,external_Vue_.provide)(tokens_form/* formItemContextKey */.K, void 0);
    const { t } = useLocale();
    const ns = (0,use_namespace/* useNamespace */.s)("tree");
    const {
      flattenTree,
      isNotEmpty,
      toggleExpand,
      isExpanded,
      isIndeterminate,
      isChecked,
      isDisabled,
      isCurrent,
      isForceHiddenExpandIcon,
      toggleCheckbox,
      handleNodeClick,
      handleNodeCheck,
      getCurrentNode,
      getCurrentKey,
      setCurrentKey,
      getCheckedKeys,
      getCheckedNodes,
      getHalfCheckedKeys,
      getHalfCheckedNodes,
      setChecked,
      setCheckedKeys,
      filter,
      setData
    } = useTree_useTree(props, ctx.emit);
    ctx.expose({
      getCurrentNode,
      getCurrentKey,
      setCurrentKey,
      getCheckedKeys,
      getCheckedNodes,
      getHalfCheckedKeys,
      getHalfCheckedNodes,
      setChecked,
      setCheckedKeys,
      filter,
      setData
    });
    return {
      t,
      ns,
      flattenTree,
      itemSize: 26,
      isNotEmpty,
      toggleExpand,
      toggleCheckbox,
      isExpanded,
      isIndeterminate,
      isChecked,
      isDisabled,
      isCurrent,
      isForceHiddenExpandIcon,
      handleNodeClick,
      handleNodeCheck
    };
  }
});
function src_tree_sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  var _a;
  const _component_el_tree_node = (0,external_Vue_.resolveComponent)("el-tree-node");
  const _component_fixed_size_list = (0,external_Vue_.resolveComponent)("fixed-size-list");
  return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
    class: (0,external_Vue_.normalizeClass)([_ctx.ns.b(), { [_ctx.ns.m("highlight-current")]: _ctx.highlightCurrent }]),
    role: "tree"
  }, [
    _ctx.isNotEmpty ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(_component_fixed_size_list, {
      key: 0,
      "class-name": _ctx.ns.b("virtual-list"),
      data: _ctx.flattenTree,
      total: _ctx.flattenTree.length,
      height: _ctx.height,
      "item-size": _ctx.itemSize,
      "perf-mode": _ctx.perfMode
    }, {
      default: (0,external_Vue_.withCtx)(({ data, index, style }) => [
        ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(_component_el_tree_node, {
          key: data[index].key,
          style: (0,external_Vue_.normalizeStyle)(style),
          node: data[index],
          expanded: _ctx.isExpanded(data[index]),
          "show-checkbox": _ctx.showCheckbox,
          checked: _ctx.isChecked(data[index]),
          indeterminate: _ctx.isIndeterminate(data[index]),
          disabled: _ctx.isDisabled(data[index]),
          current: _ctx.isCurrent(data[index]),
          "hidden-expand-icon": _ctx.isForceHiddenExpandIcon(data[index]),
          onClick: _ctx.handleNodeClick,
          onToggle: _ctx.toggleExpand,
          onCheck: _ctx.handleNodeCheck
        }, null, 8, ["style", "node", "expanded", "show-checkbox", "checked", "indeterminate", "disabled", "current", "hidden-expand-icon", "onClick", "onToggle", "onCheck"]))
      ]),
      _: 1
    }, 8, ["class-name", "data", "total", "height", "item-size", "perf-mode"])) : ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
      key: 1,
      class: (0,external_Vue_.normalizeClass)(_ctx.ns.e("empty-block"))
    }, [
      (0,external_Vue_.createElementVNode)("span", {
        class: (0,external_Vue_.normalizeClass)(_ctx.ns.e("empty-text"))
      }, (0,external_Vue_.toDisplayString)((_a = _ctx.emptyText) != null ? _a : _ctx.t("el.tree.emptyText")), 3)
    ], 2))
  ], 2);
}
var TreeV2 = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(src_tree_sfc_main, [["render", src_tree_sfc_render], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/tree-v2/src/tree.vue"]]);


//# sourceMappingURL=tree.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/tree-v2/index.mjs




const ElTreeV2 = (0,install/* withInstall */.nz)(TreeV2);


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/upload/src/ajax.mjs




const ajax_SCOPE = "ElUpload";
class UploadAjaxError extends Error {
  constructor(message, status, method, url) {
    super(message);
    this.name = "UploadAjaxError";
    this.status = status;
    this.method = method;
    this.url = url;
  }
}
function getError(action, option, xhr) {
  let msg;
  if (xhr.response) {
    msg = `${xhr.response.error || xhr.response}`;
  } else if (xhr.responseText) {
    msg = `${xhr.responseText}`;
  } else {
    msg = `fail to ${option.method} ${action} ${xhr.status}`;
  }
  return new UploadAjaxError(msg, xhr.status, option.method, action);
}
function getBody(xhr) {
  const text = xhr.responseText || xhr.response;
  if (!text) {
    return text;
  }
  try {
    return JSON.parse(text);
  } catch (e) {
    return text;
  }
}
const ajaxUpload = (option) => {
  if (typeof XMLHttpRequest === "undefined")
    (0,error/* throwError */._)(ajax_SCOPE, "XMLHttpRequest is undefined");
  const xhr = new XMLHttpRequest();
  const action = option.action;
  if (xhr.upload) {
    xhr.upload.addEventListener("progress", (evt) => {
      const progressEvt = evt;
      progressEvt.percent = evt.total > 0 ? evt.loaded / evt.total * 100 : 0;
      option.onProgress(progressEvt);
    });
  }
  const formData = new FormData();
  if (option.data) {
    for (const [key, value] of Object.entries(option.data)) {
      if (Array.isArray(value))
        formData.append(key, ...value);
      else
        formData.append(key, value);
    }
  }
  formData.append(option.filename, option.file, option.file.name);
  xhr.addEventListener("error", () => {
    option.onError(getError(action, option, xhr));
  });
  xhr.addEventListener("load", () => {
    if (xhr.status < 200 || xhr.status >= 300) {
      return option.onError(getError(action, option, xhr));
    }
    option.onSuccess(getBody(xhr));
  });
  xhr.open(option.method, action, true);
  if (option.withCredentials && "withCredentials" in xhr) {
    xhr.withCredentials = true;
  }
  const headers = option.headers || {};
  if (headers instanceof Headers) {
    headers.forEach((value, key) => xhr.setRequestHeader(key, value));
  } else {
    for (const [key, value] of Object.entries(headers)) {
      if ((0,lodash_es_isNil/* default */.Z)(value))
        continue;
      xhr.setRequestHeader(key, String(value));
    }
  }
  xhr.send(formData);
  return xhr;
};


//# sourceMappingURL=ajax.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/upload/src/upload.mjs






const uploadListTypes = ["text", "picture", "picture-card"];
let fileId = 1;
const genFileId = () => Date.now() + fileId++;
const uploadBaseProps = (0,runtime/* buildProps */.o8)({
  action: {
    type: String,
    default: "#"
  },
  headers: {
    type: (0,runtime/* definePropType */.Cq)(Object)
  },
  method: {
    type: String,
    default: "post"
  },
  data: {
    type: Object,
    default: () => (0,typescript/* mutable */.N)({})
  },
  multiple: {
    type: Boolean,
    default: false
  },
  name: {
    type: String,
    default: "file"
  },
  drag: {
    type: Boolean,
    default: false
  },
  withCredentials: Boolean,
  showFileList: {
    type: Boolean,
    default: true
  },
  accept: {
    type: String,
    default: ""
  },
  type: {
    type: String,
    default: "select"
  },
  fileList: {
    type: (0,runtime/* definePropType */.Cq)(Array),
    default: () => (0,typescript/* mutable */.N)([])
  },
  autoUpload: {
    type: Boolean,
    default: true
  },
  listType: {
    type: String,
    values: uploadListTypes,
    default: "text"
  },
  httpRequest: {
    type: (0,runtime/* definePropType */.Cq)(Function),
    default: ajaxUpload
  },
  disabled: Boolean,
  limit: Number
});
const uploadProps = (0,runtime/* buildProps */.o8)({
  ...uploadBaseProps,
  beforeUpload: {
    type: (0,runtime/* definePropType */.Cq)(Function),
    default: shared_esm_bundler/* NOOP */.dG
  },
  beforeRemove: {
    type: (0,runtime/* definePropType */.Cq)(Function)
  },
  onRemove: {
    type: (0,runtime/* definePropType */.Cq)(Function),
    default: shared_esm_bundler/* NOOP */.dG
  },
  onChange: {
    type: (0,runtime/* definePropType */.Cq)(Function),
    default: shared_esm_bundler/* NOOP */.dG
  },
  onPreview: {
    type: (0,runtime/* definePropType */.Cq)(Function),
    default: shared_esm_bundler/* NOOP */.dG
  },
  onSuccess: {
    type: (0,runtime/* definePropType */.Cq)(Function),
    default: shared_esm_bundler/* NOOP */.dG
  },
  onProgress: {
    type: (0,runtime/* definePropType */.Cq)(Function),
    default: shared_esm_bundler/* NOOP */.dG
  },
  onError: {
    type: (0,runtime/* definePropType */.Cq)(Function),
    default: shared_esm_bundler/* NOOP */.dG
  },
  onExceed: {
    type: (0,runtime/* definePropType */.Cq)(Function),
    default: shared_esm_bundler/* NOOP */.dG
  }
});


//# sourceMappingURL=upload.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/upload/src/upload-list.mjs






const uploadListProps = (0,runtime/* buildProps */.o8)({
  files: {
    type: (0,runtime/* definePropType */.Cq)(Array),
    default: () => (0,typescript/* mutable */.N)([])
  },
  disabled: {
    type: Boolean,
    default: false
  },
  handlePreview: {
    type: (0,runtime/* definePropType */.Cq)(Function),
    default: shared_esm_bundler/* NOOP */.dG
  },
  listType: {
    type: String,
    values: uploadListTypes,
    default: "text"
  }
});
const uploadListEmits = {
  remove: (file) => !!file
};


//# sourceMappingURL=upload-list.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/upload/src/upload-list2.mjs










const upload_list2_hoisted_1 = ["onKeydown"];
const upload_list2_hoisted_2 = ["src"];
const upload_list2_hoisted_3 = ["onClick"];
const upload_list2_hoisted_4 = ["onClick"];
const upload_list2_hoisted_5 = ["onClick"];
const upload_list2_default_ = {
  name: "ElUploadList"
};
const upload_list2_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...upload_list2_default_,
  props: uploadListProps,
  emits: uploadListEmits,
  setup(__props, { emit }) {
    const props = __props;
    const { t } = useLocale();
    const nsUpload = (0,use_namespace/* useNamespace */.s)("upload");
    const nsIcon = (0,use_namespace/* useNamespace */.s)("icon");
    const nsList = (0,use_namespace/* useNamespace */.s)("list");
    const focusing = (0,external_Vue_.ref)(false);
    const handleClick = (file) => {
      props.handlePreview(file);
    };
    const handleRemove = (file) => {
      emit("remove", file);
    };
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(external_Vue_.TransitionGroup, {
        tag: "ul",
        class: (0,external_Vue_.normalizeClass)([
          (0,external_Vue_.unref)(nsUpload).b("list"),
          (0,external_Vue_.unref)(nsUpload).bm("list", _ctx.listType),
          (0,external_Vue_.unref)(nsUpload).is("disabled", _ctx.disabled)
        ]),
        name: (0,external_Vue_.unref)(nsList).b()
      }, {
        default: (0,external_Vue_.withCtx)(() => [
          ((0,external_Vue_.openBlock)(true), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, null, (0,external_Vue_.renderList)(_ctx.files, (file) => {
            return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("li", {
              key: file.uid || file.name,
              class: (0,external_Vue_.normalizeClass)([
                (0,external_Vue_.unref)(nsUpload).be("list", "item"),
                (0,external_Vue_.unref)(nsUpload).is(file.status),
                { focusing: focusing.value }
              ]),
              tabindex: "0",
              onKeydown: (0,external_Vue_.withKeys)(($event) => !_ctx.disabled && handleRemove(file), ["delete"]),
              onFocus: _cache[0] || (_cache[0] = ($event) => focusing.value = true),
              onBlur: _cache[1] || (_cache[1] = ($event) => focusing.value = false),
              onClick: _cache[2] || (_cache[2] = ($event) => focusing.value = false)
            }, [
              (0,external_Vue_.renderSlot)(_ctx.$slots, "default", { file }, () => [
                _ctx.listType === "picture" || file.status !== "uploading" && _ctx.listType === "picture-card" ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("img", {
                  key: 0,
                  class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(nsUpload).be("list", "item-thumbnail")),
                  src: file.url,
                  alt: ""
                }, null, 10, upload_list2_hoisted_2)) : (0,external_Vue_.createCommentVNode)("v-if", true),
                _ctx.listType !== "picture" && (file.status === "uploading" || _ctx.listType !== "picture-card") ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
                  key: 1,
                  class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(nsUpload).be("list", "item-info"))
                }, [
                  (0,external_Vue_.createElementVNode)("a", {
                    class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(nsUpload).be("list", "item-name")),
                    onClick: (0,external_Vue_.withModifiers)(($event) => handleClick(file), ["prevent"])
                  }, [
                    (0,external_Vue_.createVNode)((0,external_Vue_.unref)(components_icon/* ElIcon */.gn), {
                      class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(nsIcon).m("document"))
                    }, {
                      default: (0,external_Vue_.withCtx)(() => [
                        (0,external_Vue_.createVNode)((0,external_Vue_.unref)(dist/* Document */.BBB))
                      ]),
                      _: 1
                    }, 8, ["class"]),
                    (0,external_Vue_.createElementVNode)("span", {
                      class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(nsUpload).be("list", "item-file-name"))
                    }, (0,external_Vue_.toDisplayString)(file.name), 3)
                  ], 10, upload_list2_hoisted_3),
                  file.status === "uploading" ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.unref)(ElProgress), {
                    key: 0,
                    type: _ctx.listType === "picture-card" ? "circle" : "line",
                    "stroke-width": _ctx.listType === "picture-card" ? 6 : 2,
                    percentage: Number(file.percentage),
                    style: (0,external_Vue_.normalizeStyle)(_ctx.listType === "picture-card" ? "" : "margin-top: 0.5rem")
                  }, null, 8, ["type", "stroke-width", "percentage", "style"])) : (0,external_Vue_.createCommentVNode)("v-if", true)
                ], 2)) : (0,external_Vue_.createCommentVNode)("v-if", true),
                (0,external_Vue_.createElementVNode)("label", {
                  class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(nsUpload).be("list", "item-status-label"))
                }, [
                  _ctx.listType === "text" ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.unref)(components_icon/* ElIcon */.gn), {
                    key: 0,
                    class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(nsIcon).m("upload-success"), (0,external_Vue_.unref)(nsIcon).m("circle-check")])
                  }, {
                    default: (0,external_Vue_.withCtx)(() => [
                      (0,external_Vue_.createVNode)((0,external_Vue_.unref)(dist/* CircleCheck */.yGk))
                    ]),
                    _: 1
                  }, 8, ["class"])) : ["picture-card", "picture"].includes(_ctx.listType) ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.unref)(components_icon/* ElIcon */.gn), {
                    key: 1,
                    class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(nsIcon).m("upload-success"), (0,external_Vue_.unref)(nsIcon).m("check")])
                  }, {
                    default: (0,external_Vue_.withCtx)(() => [
                      (0,external_Vue_.createVNode)((0,external_Vue_.unref)(dist/* Check */.JrY))
                    ]),
                    _: 1
                  }, 8, ["class"])) : (0,external_Vue_.createCommentVNode)("v-if", true)
                ], 2),
                !_ctx.disabled ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.unref)(components_icon/* ElIcon */.gn), {
                  key: 2,
                  class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(nsIcon).m("close")),
                  onClick: ($event) => handleRemove(file)
                }, {
                  default: (0,external_Vue_.withCtx)(() => [
                    (0,external_Vue_.createVNode)((0,external_Vue_.unref)(dist/* Close */.x8P))
                  ]),
                  _: 2
                }, 1032, ["class", "onClick"])) : (0,external_Vue_.createCommentVNode)("v-if", true),
                (0,external_Vue_.createCommentVNode)(" Due to close btn only appears when li gets focused disappears after li gets blurred, thus keyboard navigation can never reach close btn"),
                (0,external_Vue_.createCommentVNode)(" This is a bug which needs to be fixed "),
                (0,external_Vue_.createCommentVNode)(" TODO: Fix the incorrect navigation interaction "),
                !_ctx.disabled ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("i", {
                  key: 3,
                  class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(nsIcon).m("close-tip"))
                }, (0,external_Vue_.toDisplayString)((0,external_Vue_.unref)(t)("el.upload.deleteTip")), 3)) : (0,external_Vue_.createCommentVNode)("v-if", true),
                _ctx.listType === "picture-card" ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("span", {
                  key: 4,
                  class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(nsUpload).be("list", "item-actions"))
                }, [
                  (0,external_Vue_.createElementVNode)("span", {
                    class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(nsUpload).be("list", "item-preview")),
                    onClick: ($event) => _ctx.handlePreview(file)
                  }, [
                    (0,external_Vue_.createVNode)((0,external_Vue_.unref)(components_icon/* ElIcon */.gn), {
                      class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(nsIcon).m("zoom-in"))
                    }, {
                      default: (0,external_Vue_.withCtx)(() => [
                        (0,external_Vue_.createVNode)((0,external_Vue_.unref)(dist/* ZoomIn */.DYM))
                      ]),
                      _: 1
                    }, 8, ["class"])
                  ], 10, upload_list2_hoisted_4),
                  !_ctx.disabled ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("span", {
                    key: 0,
                    class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(nsUpload).be("list", "item-delete")),
                    onClick: ($event) => handleRemove(file)
                  }, [
                    (0,external_Vue_.createVNode)((0,external_Vue_.unref)(components_icon/* ElIcon */.gn), {
                      class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(nsIcon).m("delete"))
                    }, {
                      default: (0,external_Vue_.withCtx)(() => [
                        (0,external_Vue_.createVNode)((0,external_Vue_.unref)(dist/* Delete */.HG3))
                      ]),
                      _: 1
                    }, 8, ["class"])
                  ], 10, upload_list2_hoisted_5)) : (0,external_Vue_.createCommentVNode)("v-if", true)
                ], 2)) : (0,external_Vue_.createCommentVNode)("v-if", true)
              ])
            ], 42, upload_list2_hoisted_1);
          }), 128)),
          (0,external_Vue_.renderSlot)(_ctx.$slots, "append")
        ]),
        _: 3
      }, 8, ["class", "name"]);
    };
  }
});
var UploadList = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(upload_list2_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/upload/src/upload-list.vue"]]);


//# sourceMappingURL=upload-list2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/upload/src/upload-dragger.mjs




const uploadDraggerProps = (0,runtime/* buildProps */.o8)({
  disabled: {
    type: Boolean,
    default: false
  }
});
const uploadDraggerEmits = {
  file: (file) => (0,shared_esm_bundler/* isArray */.kJ)(file)
};


//# sourceMappingURL=upload-dragger.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/tokens/upload.mjs
const uploadContextKey = Symbol("uploadContextKey");


//# sourceMappingURL=upload.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/upload/src/upload-dragger2.mjs









const upload_dragger2_hoisted_1 = ["onDrop", "onDragover"];
const upload_dragger2_default_ = {
  name: "ElUploadDrag"
};
const upload_dragger2_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...upload_dragger2_default_,
  props: uploadDraggerProps,
  emits: uploadDraggerEmits,
  setup(__props, { emit }) {
    const props = __props;
    const COMPONENT_NAME = "ElUploadDrag";
    const uploaderContext = (0,external_Vue_.inject)(uploadContextKey);
    if (!uploaderContext) {
      (0,error/* throwError */._)(COMPONENT_NAME, "usage: <el-upload><el-upload-dragger /></el-upload>");
    }
    const ns = (0,use_namespace/* useNamespace */.s)("upload");
    const dragover = (0,external_Vue_.ref)(false);
    const onDrop = (e) => {
      if (props.disabled)
        return;
      dragover.value = false;
      const files = Array.from(e.dataTransfer.files);
      const accept = uploaderContext.accept.value;
      if (!accept) {
        emit("file", files);
        return;
      }
      const filesFiltered = files.filter((file) => {
        const { type, name } = file;
        const extension = name.includes(".") ? `.${name.split(".").pop()}` : "";
        const baseType = type.replace(/\/.*$/, "");
        return accept.split(",").map((type2) => type2.trim()).filter((type2) => type2).some((acceptedType) => {
          if (acceptedType.startsWith(".")) {
            return extension === acceptedType;
          }
          if (/\/\*$/.test(acceptedType)) {
            return baseType === acceptedType.replace(/\/\*$/, "");
          }
          if (/^[^/]+\/[^/]+$/.test(acceptedType)) {
            return type === acceptedType;
          }
          return false;
        });
      });
      emit("file", filesFiltered);
    };
    const onDragover = () => {
      if (!props.disabled)
        dragover.value = true;
    };
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
        class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(ns).b("dragger"), (0,external_Vue_.unref)(ns).is("dragover", dragover.value)]),
        onDrop: (0,external_Vue_.withModifiers)(onDrop, ["prevent"]),
        onDragover: (0,external_Vue_.withModifiers)(onDragover, ["prevent"]),
        onDragleave: _cache[0] || (_cache[0] = (0,external_Vue_.withModifiers)(($event) => dragover.value = false, ["prevent"]))
      }, [
        (0,external_Vue_.renderSlot)(_ctx.$slots, "default")
      ], 42, upload_dragger2_hoisted_1);
    };
  }
});
var UploadDragger = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(upload_dragger2_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/upload/src/upload-dragger.vue"]]);


//# sourceMappingURL=upload-dragger2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/upload/src/upload-content.mjs





const uploadContentProps = (0,runtime/* buildProps */.o8)({
  ...uploadBaseProps,
  beforeUpload: {
    type: (0,runtime/* definePropType */.Cq)(Function),
    default: shared_esm_bundler/* NOOP */.dG
  },
  onRemove: {
    type: (0,runtime/* definePropType */.Cq)(Function),
    default: shared_esm_bundler/* NOOP */.dG
  },
  onStart: {
    type: (0,runtime/* definePropType */.Cq)(Function),
    default: shared_esm_bundler/* NOOP */.dG
  },
  onSuccess: {
    type: (0,runtime/* definePropType */.Cq)(Function),
    default: shared_esm_bundler/* NOOP */.dG
  },
  onProgress: {
    type: (0,runtime/* definePropType */.Cq)(Function),
    default: shared_esm_bundler/* NOOP */.dG
  },
  onError: {
    type: (0,runtime/* definePropType */.Cq)(Function),
    default: shared_esm_bundler/* NOOP */.dG
  },
  onExceed: {
    type: (0,runtime/* definePropType */.Cq)(Function),
    default: shared_esm_bundler/* NOOP */.dG
  }
});


//# sourceMappingURL=upload-content.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/upload/src/upload-content2.mjs










const upload_content2_hoisted_1 = ["onKeydown"];
const upload_content2_hoisted_2 = ["name", "multiple", "accept"];
const upload_content2_default_ = {
  name: "ElUploadContent",
  inheritAttrs: false
};
const upload_content2_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...upload_content2_default_,
  props: uploadContentProps,
  setup(__props, { expose }) {
    const props = __props;
    const ns = (0,use_namespace/* useNamespace */.s)("upload");
    const requests = (0,external_Vue_.shallowRef)({});
    const inputRef = (0,external_Vue_.shallowRef)();
    const uploadFiles = (files) => {
      if (files.length === 0)
        return;
      const { autoUpload, limit, fileList, multiple, onStart, onExceed } = props;
      if (limit && fileList.length + files.length > limit) {
        onExceed(files, fileList);
        return;
      }
      if (!multiple) {
        files = files.slice(0, 1);
      }
      for (const file of files) {
        const rawFile = file;
        rawFile.uid = genFileId();
        onStart(rawFile);
        if (autoUpload)
          upload(rawFile);
      }
    };
    const upload = async (rawFile) => {
      inputRef.value.value = "";
      if (!props.beforeUpload) {
        return doUpload(rawFile);
      }
      let hookResult;
      try {
        hookResult = await props.beforeUpload(rawFile);
      } catch (e) {
        hookResult = false;
      }
      if (hookResult === false) {
        props.onRemove(rawFile);
        return;
      }
      let file = rawFile;
      if (hookResult instanceof Blob) {
        if (hookResult instanceof File) {
          file = hookResult;
        } else {
          file = new File([hookResult], rawFile.name, {
            type: rawFile.type
          });
        }
      }
      doUpload(Object.assign(file, {
        uid: rawFile.uid
      }));
    };
    const doUpload = (rawFile) => {
      const {
        headers,
        data,
        method,
        withCredentials,
        name: filename,
        action,
        onProgress,
        onSuccess,
        onError,
        httpRequest
      } = props;
      const { uid } = rawFile;
      const options = {
        headers: headers || {},
        withCredentials,
        file: rawFile,
        data,
        method,
        filename,
        action,
        onProgress: (evt) => {
          onProgress(evt, rawFile);
        },
        onSuccess: (res) => {
          onSuccess(res, rawFile);
          delete requests.value[uid];
        },
        onError: (err) => {
          onError(err, rawFile);
          delete requests.value[uid];
        }
      };
      const request = httpRequest(options);
      requests.value[uid] = request;
      if (request instanceof Promise) {
        request.then(options.onSuccess, options.onError);
      }
    };
    const handleChange = (e) => {
      const files = e.target.files;
      if (!files)
        return;
      uploadFiles(Array.from(files));
    };
    const handleClick = () => {
      if (!props.disabled) {
        inputRef.value.value = "";
        inputRef.value.click();
      }
    };
    const handleKeydown = () => {
      handleClick();
    };
    const abort = (file) => {
      const _reqs = (0,objects/* entriesOf */.vu)(requests.value).filter(file ? ([uid]) => String(file.uid) === uid : () => true);
      _reqs.forEach(([uid, req]) => {
        if (req instanceof XMLHttpRequest)
          req.abort();
        delete requests.value[uid];
      });
    };
    expose({
      abort,
      upload
    });
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
        class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(ns).b(), (0,external_Vue_.unref)(ns).m(_ctx.listType), (0,external_Vue_.unref)(ns).is("drag", _ctx.drag)]),
        tabindex: "0",
        onClick: handleClick,
        onKeydown: (0,external_Vue_.withKeys)((0,external_Vue_.withModifiers)(handleKeydown, ["self"]), ["enter", "space"])
      }, [
        _ctx.drag ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(UploadDragger, {
          key: 0,
          disabled: _ctx.disabled,
          onFile: uploadFiles
        }, {
          default: (0,external_Vue_.withCtx)(() => [
            (0,external_Vue_.renderSlot)(_ctx.$slots, "default")
          ]),
          _: 3
        }, 8, ["disabled"])) : (0,external_Vue_.renderSlot)(_ctx.$slots, "default", { key: 1 }),
        (0,external_Vue_.createElementVNode)("input", {
          ref_key: "inputRef",
          ref: inputRef,
          class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("input")),
          name: _ctx.name,
          multiple: _ctx.multiple,
          accept: _ctx.accept,
          type: "file",
          onChange: handleChange,
          onClick: _cache[0] || (_cache[0] = (0,external_Vue_.withModifiers)(() => {
          }, ["stop"]))
        }, null, 42, upload_content2_hoisted_2)
      ], 42, upload_content2_hoisted_1);
    };
  }
});
var UploadContent = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(upload_content2_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/upload/src/upload-content.vue"]]);


//# sourceMappingURL=upload-content2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/upload/src/use-handlers.mjs






const use_handlers_SCOPE = "ElUpload";
const revokeObjectURL = (file) => {
  var _a;
  if ((_a = file.url) == null ? void 0 : _a.startsWith("blob:")) {
    URL.revokeObjectURL(file.url);
  }
};
const useHandlers = (props, uploadRef) => {
  const uploadFiles = (0,core/* useVModel */.NCN)(props, "fileList", void 0, { passive: true });
  const getFile = (rawFile) => uploadFiles.value.find((file) => file.uid === rawFile.uid);
  function abort(file) {
    var _a;
    (_a = uploadRef.value) == null ? void 0 : _a.abort(file);
  }
  function clearFiles(states = ["ready", "uploading", "success", "fail"]) {
    uploadFiles.value = uploadFiles.value.filter((row) => !states.includes(row.status));
  }
  const handleError = (err, rawFile) => {
    const file = getFile(rawFile);
    if (!file)
      return;
    console.error(err);
    file.status = "fail";
    uploadFiles.value.splice(uploadFiles.value.indexOf(file), 1);
    props.onError(err, file, uploadFiles.value);
    props.onChange(file, uploadFiles.value);
  };
  const handleProgress = (evt, rawFile) => {
    const file = getFile(rawFile);
    if (!file)
      return;
    props.onProgress(evt, file, uploadFiles.value);
    file.status = "uploading";
    file.percentage = Math.round(evt.percent);
  };
  const handleSuccess = (response, rawFile) => {
    const file = getFile(rawFile);
    if (!file)
      return;
    file.status = "success";
    file.response = response;
    props.onSuccess(response, file, uploadFiles.value);
    props.onChange(file, uploadFiles.value);
  };
  const handleStart = (file) => {
    const uploadFile = {
      name: file.name,
      percentage: 0,
      status: "ready",
      size: file.size,
      raw: file,
      uid: file.uid
    };
    if (props.listType === "picture-card" || props.listType === "picture") {
      try {
        uploadFile.url = URL.createObjectURL(file);
      } catch (err) {
        (0,error/* debugWarn */.N)(use_handlers_SCOPE, err.message);
        props.onError(err, uploadFile, uploadFiles.value);
      }
    }
    uploadFiles.value.push(uploadFile);
    props.onChange(uploadFile, uploadFiles.value);
  };
  const handleRemove = async (file) => {
    const uploadFile = file instanceof File ? getFile(file) : file;
    if (!uploadFile)
      (0,error/* throwError */._)(use_handlers_SCOPE, "file to be removed not found");
    const doRemove = (file2) => {
      abort(file2);
      const fileList = uploadFiles.value;
      fileList.splice(fileList.indexOf(file2), 1);
      props.onRemove(file2, fileList);
      revokeObjectURL(file2);
    };
    if (props.beforeRemove) {
      const before = await props.beforeRemove(uploadFile, uploadFiles.value);
      if (before !== false)
        doRemove(uploadFile);
    } else {
      doRemove(uploadFile);
    }
  };
  function submit() {
    uploadFiles.value.filter(({ status }) => status === "ready").forEach(({ raw }) => {
      var _a;
      return raw && ((_a = uploadRef.value) == null ? void 0 : _a.upload(raw));
    });
  }
  (0,external_Vue_.watch)(() => props.listType, (val) => {
    if (val !== "picture-card" && val !== "picture") {
      return;
    }
    uploadFiles.value = uploadFiles.value.map((file) => {
      const { raw, url } = file;
      if (!url && raw) {
        try {
          file.url = URL.createObjectURL(raw);
        } catch (err) {
          props.onError(err, file, uploadFiles.value);
        }
      }
      return file;
    });
  });
  (0,external_Vue_.watch)(uploadFiles, (files) => {
    for (const file of files) {
      file.uid || (file.uid = genFileId());
      file.status || (file.status = "success");
    }
  }, { immediate: true, deep: true });
  return {
    uploadFiles,
    abort,
    clearFiles,
    handleError,
    handleProgress,
    handleStart,
    handleSuccess,
    handleRemove,
    submit
  };
};


//# sourceMappingURL=use-handlers.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/upload/src/upload2.mjs











const upload2_default_ = {
  name: "ElUpload"
};
const upload2_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...upload2_default_,
  props: uploadProps,
  setup(__props, { expose }) {
    const props = __props;
    const slots = (0,external_Vue_.useSlots)();
    const disabled = (0,use_common_props/* useDisabled */.B4)();
    const uploadRef = (0,external_Vue_.shallowRef)();
    const {
      abort,
      submit,
      clearFiles,
      uploadFiles,
      handleStart,
      handleError,
      handleRemove,
      handleSuccess,
      handleProgress
    } = useHandlers(props, uploadRef);
    const isPictureCard = (0,external_Vue_.computed)(() => props.listType === "picture-card");
    const uploadContentProps = (0,external_Vue_.computed)(() => ({
      ...props,
      onStart: handleStart,
      onProgress: handleProgress,
      onSuccess: handleSuccess,
      onError: handleError,
      onRemove: handleRemove
    }));
    (0,external_Vue_.onBeforeUnmount)(() => {
      uploadFiles.value.forEach(({ url }) => {
        if (url == null ? void 0 : url.startsWith("blob:"))
          URL.revokeObjectURL(url);
      });
    });
    (0,external_Vue_.provide)(uploadContextKey, {
      accept: (0,external_Vue_.toRef)(props, "accept")
    });
    expose({
      abort,
      submit,
      clearFiles,
      handleStart,
      handleRemove
    });
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", null, [
        (0,external_Vue_.unref)(isPictureCard) && _ctx.showFileList ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(UploadList, {
          key: 0,
          disabled: (0,external_Vue_.unref)(disabled),
          "list-type": _ctx.listType,
          files: (0,external_Vue_.unref)(uploadFiles),
          "handle-preview": _ctx.onPreview,
          onRemove: (0,external_Vue_.unref)(handleRemove)
        }, (0,external_Vue_.createSlots)({
          append: (0,external_Vue_.withCtx)(() => [
            _ctx.listType === "picture-card" ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(UploadContent, (0,external_Vue_.mergeProps)({
              key: 0,
              ref_key: "uploadRef",
              ref: uploadRef
            }, (0,external_Vue_.unref)(uploadContentProps)), {
              default: (0,external_Vue_.withCtx)(() => [
                (0,external_Vue_.unref)(slots).trigger ? (0,external_Vue_.renderSlot)(_ctx.$slots, "trigger", { key: 0 }) : (0,external_Vue_.createCommentVNode)("v-if", true),
                !(0,external_Vue_.unref)(slots).trigger && (0,external_Vue_.unref)(slots).default ? (0,external_Vue_.renderSlot)(_ctx.$slots, "default", { key: 1 }) : (0,external_Vue_.createCommentVNode)("v-if", true)
              ]),
              _: 3
            }, 16)) : (0,external_Vue_.createCommentVNode)("v-if", true)
          ]),
          _: 2
        }, [
          _ctx.$slots.file ? {
            name: "default",
            fn: (0,external_Vue_.withCtx)(({ file }) => [
              (0,external_Vue_.renderSlot)(_ctx.$slots, "file", { file })
            ])
          } : void 0
        ]), 1032, ["disabled", "list-type", "files", "handle-preview", "onRemove"])) : (0,external_Vue_.createCommentVNode)("v-if", true),
        _ctx.listType !== "picture-card" ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(UploadContent, (0,external_Vue_.mergeProps)({
          key: 1,
          ref_key: "uploadRef",
          ref: uploadRef
        }, (0,external_Vue_.unref)(uploadContentProps)), {
          default: (0,external_Vue_.withCtx)(() => [
            (0,external_Vue_.unref)(slots).trigger ? (0,external_Vue_.renderSlot)(_ctx.$slots, "trigger", { key: 0 }) : (0,external_Vue_.createCommentVNode)("v-if", true),
            !(0,external_Vue_.unref)(slots).trigger && (0,external_Vue_.unref)(slots).default ? (0,external_Vue_.renderSlot)(_ctx.$slots, "default", { key: 1 }) : (0,external_Vue_.createCommentVNode)("v-if", true)
          ]),
          _: 3
        }, 16)) : (0,external_Vue_.createCommentVNode)("v-if", true),
        _ctx.$slots.trigger ? (0,external_Vue_.renderSlot)(_ctx.$slots, "default", { key: 2 }) : (0,external_Vue_.createCommentVNode)("v-if", true),
        (0,external_Vue_.renderSlot)(_ctx.$slots, "tip"),
        !(0,external_Vue_.unref)(isPictureCard) && _ctx.showFileList ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(UploadList, {
          key: 3,
          disabled: (0,external_Vue_.unref)(disabled),
          "list-type": _ctx.listType,
          files: (0,external_Vue_.unref)(uploadFiles),
          "handle-preview": _ctx.onPreview,
          onRemove: (0,external_Vue_.unref)(handleRemove)
        }, (0,external_Vue_.createSlots)({ _: 2 }, [
          _ctx.$slots.file ? {
            name: "default",
            fn: (0,external_Vue_.withCtx)(({ file }) => [
              (0,external_Vue_.renderSlot)(_ctx.$slots, "file", { file })
            ])
          } : void 0
        ]), 1032, ["disabled", "list-type", "files", "handle-preview", "onRemove"])) : (0,external_Vue_.createCommentVNode)("v-if", true)
      ]);
    };
  }
});
var Upload = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(upload2_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/upload/src/upload.vue"]]);


//# sourceMappingURL=upload2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/upload/index.mjs








const ElUpload = (0,install/* withInstall */.nz)(Upload);


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/component.mjs





































































var Components = [
  ElAffix,
  ElAlert,
  ElAutocomplete,
  ElAutoResizer,
  ElAvatar,
  ElBacktop,
  ElBadge,
  ElBreadcrumb,
  ElBreadcrumbItem,
  ElButton,
  ElButtonGroup,
  ElCalendar,
  ElCard,
  ElCarousel,
  ElCarouselItem,
  ElCascader,
  ElCascaderPanel,
  ElCheckTag,
  components_checkbox/* ElCheckbox */.Xb,
  components_checkbox/* ElCheckboxButton */.lm,
  components_checkbox/* ElCheckboxGroup */.z5,
  ElCol,
  ElCollapse,
  ElCollapseItem,
  ElCollapseTransition,
  ElColorPicker,
  ElConfigProvider,
  ElContainer,
  ElAside,
  ElFooter,
  ElHeader,
  ElMain,
  ElDatePicker,
  ElDescriptions,
  ElDescriptionsItem,
  ElDialog,
  ElDivider,
  ElDrawer,
  ElDropdown,
  ElDropdownItem,
  ElDropdownMenu,
  ElEmpty,
  components_form/* ElForm */.ly,
  components_form/* ElFormItem */.nH,
  components_icon/* ElIcon */.gn,
  ElImage,
  ElImageViewer,
  components_input/* ElInput */.EZ,
  ElInputNumber,
  ElLink,
  ElMenu,
  ElMenuItem,
  ElMenuItemGroup,
  ElPageHeader,
  ElPagination,
  ElPopconfirm,
  ElPopover,
  ElPopper,
  ElProgress,
  ElRadio,
  ElRadioButton,
  ElRadioGroup,
  ElRate,
  ElResult,
  ElRow,
  ElScrollbar,
  ElSelect,
  ElOption,
  ElOptionGroup,
  ElSelectV2,
  ElSkeleton,
  ElSkeletonItem,
  ElSlider,
  ElSpace,
  ElSteps,
  ElStep,
  ElSwitch,
  ElTable,
  table_ElTableColumn,
  ElTableV2,
  ElTabs,
  ElTabPane,
  ElTag,
  ElTimePicker,
  ElTimeSelect,
  ElTimeline,
  ElTimelineItem,
  ElTooltip,
  ElTooltipV2,
  ElTransfer,
  ElTree,
  ElTreeSelect,
  ElTreeV2,
  ElUpload
];


//# sourceMappingURL=component.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/infinite-scroll/src/index.mjs








const src_SCOPE = "ElInfiniteScroll";
const CHECK_INTERVAL = 50;
const DEFAULT_DELAY = 200;
const DEFAULT_DISTANCE = 0;
const attributes = {
  delay: {
    type: Number,
    default: DEFAULT_DELAY
  },
  distance: {
    type: Number,
    default: DEFAULT_DISTANCE
  },
  disabled: {
    type: Boolean,
    default: false
  },
  immediate: {
    type: Boolean,
    default: true
  }
};
const getScrollOptions = (el, instance) => {
  return Object.entries(attributes).reduce((acm, [name, option]) => {
    var _a, _b;
    const { type, default: defaultValue } = option;
    const attrVal = el.getAttribute(`infinite-scroll-${name}`);
    let value = (_b = (_a = instance[attrVal]) != null ? _a : attrVal) != null ? _b : defaultValue;
    value = value === "false" ? false : value;
    value = type(value);
    acm[name] = Number.isNaN(value) ? defaultValue : value;
    return acm;
  }, {});
};
const destroyObserver = (el) => {
  const { observer } = el[src_SCOPE];
  if (observer) {
    observer.disconnect();
    delete el[src_SCOPE].observer;
  }
};
const handleScroll = (el, cb) => {
  const { container, containerEl, instance, observer, lastScrollTop } = el[src_SCOPE];
  const { disabled, distance } = getScrollOptions(el, instance);
  const { clientHeight, scrollHeight, scrollTop } = containerEl;
  const delta = scrollTop - lastScrollTop;
  el[src_SCOPE].lastScrollTop = scrollTop;
  if (observer || disabled || delta < 0)
    return;
  let shouldTrigger = false;
  if (container === el) {
    shouldTrigger = scrollHeight - (clientHeight + scrollTop) <= distance;
  } else {
    const { clientTop, scrollHeight: height } = el;
    const offsetTop = getOffsetTopDistance(el, containerEl);
    shouldTrigger = scrollTop + clientHeight >= offsetTop + clientTop + height - distance;
  }
  if (shouldTrigger) {
    cb.call(instance);
  }
};
function checkFull(el, cb) {
  const { containerEl, instance } = el[src_SCOPE];
  const { disabled } = getScrollOptions(el, instance);
  if (disabled || containerEl.clientHeight === 0)
    return;
  if (containerEl.scrollHeight <= containerEl.clientHeight) {
    cb.call(instance);
  } else {
    destroyObserver(el);
  }
}
const InfiniteScroll = {
  async mounted(el, binding) {
    const { instance, value: cb } = binding;
    if (!(0,shared_esm_bundler/* isFunction */.mf)(cb)) {
      (0,error/* throwError */._)(src_SCOPE, "'v-infinite-scroll' binding value must be a function");
    }
    await (0,external_Vue_.nextTick)();
    const { delay, immediate } = getScrollOptions(el, instance);
    const container = getScrollContainer(el, true);
    const containerEl = container === window ? document.documentElement : container;
    const onScroll = (0,throttle/* default */.Z)(handleScroll.bind(null, el, cb), delay);
    if (!container)
      return;
    el[src_SCOPE] = {
      instance,
      container,
      containerEl,
      delay,
      cb,
      onScroll,
      lastScrollTop: containerEl.scrollTop
    };
    if (immediate) {
      const observer = new MutationObserver((0,throttle/* default */.Z)(checkFull.bind(null, el, cb), CHECK_INTERVAL));
      el[src_SCOPE].observer = observer;
      observer.observe(el, { childList: true, subtree: true });
      checkFull(el, cb);
    }
    container.addEventListener("scroll", onScroll);
  },
  unmounted(el) {
    const { container, onScroll } = el[src_SCOPE];
    container == null ? void 0 : container.removeEventListener("scroll", onScroll);
    destroyObserver(el);
  },
  async updated(el) {
    if (!el[src_SCOPE]) {
      await (0,external_Vue_.nextTick)();
    }
    const { containerEl, cb, observer } = el[src_SCOPE];
    if (containerEl.clientHeight && observer) {
      checkFull(el, cb);
    }
  }
};


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/infinite-scroll/index.mjs


const _InfiniteScroll = InfiniteScroll;
_InfiniteScroll.install = (app) => {
  app.directive("InfiniteScroll", _InfiniteScroll);
};
const ElInfiniteScroll = _InfiniteScroll;


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/loading/src/loading.mjs






function createLoadingComponent(options) {
  let afterLeaveTimer;
  const ns = (0,use_namespace/* useNamespace */.s)("loading");
  const afterLeaveFlag = (0,external_Vue_.ref)(false);
  const data = (0,external_Vue_.reactive)({
    ...options,
    originalPosition: "",
    originalOverflow: "",
    visible: false
  });
  function setText(text) {
    data.text = text;
  }
  function destroySelf() {
    const target = data.parent;
    if (!target.vLoadingAddClassList) {
      let loadingNumber = target.getAttribute("loading-number");
      loadingNumber = Number.parseInt(loadingNumber) - 1;
      if (!loadingNumber) {
        (0,dom_style/* removeClass */.IV)(target, ns.bm("parent", "relative"));
        target.removeAttribute("loading-number");
      } else {
        target.setAttribute("loading-number", loadingNumber.toString());
      }
      (0,dom_style/* removeClass */.IV)(target, ns.bm("parent", "hidden"));
    }
    removeElLoadingChild();
    loadingInstance.unmount();
  }
  function removeElLoadingChild() {
    var _a, _b;
    (_b = (_a = vm.$el) == null ? void 0 : _a.parentNode) == null ? void 0 : _b.removeChild(vm.$el);
  }
  function close() {
    var _a;
    if (options.beforeClose && !options.beforeClose())
      return;
    const target = data.parent;
    target.vLoadingAddClassList = void 0;
    afterLeaveFlag.value = true;
    clearTimeout(afterLeaveTimer);
    afterLeaveTimer = window.setTimeout(() => {
      if (afterLeaveFlag.value) {
        afterLeaveFlag.value = false;
        destroySelf();
      }
    }, 400);
    data.visible = false;
    (_a = options.closed) == null ? void 0 : _a.call(options);
  }
  function handleAfterLeave() {
    if (!afterLeaveFlag.value)
      return;
    afterLeaveFlag.value = false;
    destroySelf();
  }
  const elLoadingComponent = {
    name: "ElLoading",
    setup() {
      return () => {
        const svg = data.spinner || data.svg;
        const spinner = (0,external_Vue_.h)("svg", {
          class: "circular",
          viewBox: data.svgViewBox ? data.svgViewBox : "25 25 50 50",
          ...svg ? { innerHTML: svg } : {}
        }, [
          (0,external_Vue_.h)("circle", {
            class: "path",
            cx: "50",
            cy: "50",
            r: "20",
            fill: "none"
          })
        ]);
        const spinnerText = data.text ? (0,external_Vue_.h)("p", { class: ns.b("text") }, [data.text]) : void 0;
        return (0,external_Vue_.h)(external_Vue_.Transition, {
          name: ns.b("fade"),
          onAfterLeave: handleAfterLeave
        }, {
          default: (0,external_Vue_.withCtx)(() => [
            (0,external_Vue_.withDirectives)((0,external_Vue_.createVNode)("div", {
              style: {
                backgroundColor: data.background || ""
              },
              class: [
                ns.b("mask"),
                data.customClass,
                data.fullscreen ? "is-fullscreen" : ""
              ]
            }, [
              (0,external_Vue_.h)("div", {
                class: ns.b("spinner")
              }, [spinner, spinnerText])
            ]), [[external_Vue_.vShow, data.visible]])
          ])
        });
      };
    }
  };
  const loadingInstance = (0,external_Vue_.createApp)(elLoadingComponent);
  const vm = loadingInstance.mount(document.createElement("div"));
  return {
    ...(0,external_Vue_.toRefs)(data),
    setText,
    removeElLoadingChild,
    close,
    handleAfterLeave,
    vm,
    get $el() {
      return vm.$el;
    }
  };
}


//# sourceMappingURL=loading.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/loading/src/service.mjs










let fullscreenInstance = void 0;
const Loading = function(options = {}) {
  if (!shared/* isClient */.C5)
    return void 0;
  const resolved = resolveOptions(options);
  if (resolved.fullscreen && fullscreenInstance) {
    return fullscreenInstance;
  }
  const instance = createLoadingComponent({
    ...resolved,
    closed: () => {
      var _a;
      (_a = resolved.closed) == null ? void 0 : _a.call(resolved);
      if (resolved.fullscreen)
        fullscreenInstance = void 0;
    }
  });
  addStyle(resolved, resolved.parent, instance);
  addClassList(resolved, resolved.parent, instance);
  resolved.parent.vLoadingAddClassList = () => addClassList(resolved, resolved.parent, instance);
  let loadingNumber = resolved.parent.getAttribute("loading-number");
  if (!loadingNumber) {
    loadingNumber = "1";
  } else {
    loadingNumber = `${Number.parseInt(loadingNumber) + 1}`;
  }
  resolved.parent.setAttribute("loading-number", loadingNumber);
  resolved.parent.appendChild(instance.$el);
  (0,external_Vue_.nextTick)(() => instance.visible.value = resolved.visible);
  if (resolved.fullscreen) {
    fullscreenInstance = instance;
  }
  return instance;
};
const resolveOptions = (options) => {
  var _a, _b, _c, _d;
  let target;
  if ((0,shared_esm_bundler/* isString */.HD)(options.target)) {
    target = (_a = document.querySelector(options.target)) != null ? _a : document.body;
  } else {
    target = options.target || document.body;
  }
  return {
    parent: target === document.body || options.body ? document.body : target,
    background: options.background || "",
    svg: options.svg || "",
    svgViewBox: options.svgViewBox || "",
    spinner: options.spinner || false,
    text: options.text || "",
    fullscreen: target === document.body && ((_b = options.fullscreen) != null ? _b : true),
    lock: (_c = options.lock) != null ? _c : false,
    customClass: options.customClass || "",
    visible: (_d = options.visible) != null ? _d : true,
    target
  };
};
const addStyle = async (options, parent, instance) => {
  const { nextZIndex } = useZIndex();
  const maskStyle = {};
  if (options.fullscreen) {
    instance.originalPosition.value = (0,dom_style/* getStyle */.C2)(document.body, "position");
    instance.originalOverflow.value = (0,dom_style/* getStyle */.C2)(document.body, "overflow");
    maskStyle.zIndex = nextZIndex();
  } else if (options.parent === document.body) {
    instance.originalPosition.value = (0,dom_style/* getStyle */.C2)(document.body, "position");
    await (0,external_Vue_.nextTick)();
    for (const property of ["top", "left"]) {
      const scroll = property === "top" ? "scrollTop" : "scrollLeft";
      maskStyle[property] = `${options.target.getBoundingClientRect()[property] + document.body[scroll] + document.documentElement[scroll] - Number.parseInt((0,dom_style/* getStyle */.C2)(document.body, `margin-${property}`), 10)}px`;
    }
    for (const property of ["height", "width"]) {
      maskStyle[property] = `${options.target.getBoundingClientRect()[property]}px`;
    }
  } else {
    instance.originalPosition.value = (0,dom_style/* getStyle */.C2)(parent, "position");
  }
  for (const [key, value] of Object.entries(maskStyle)) {
    instance.$el.style[key] = value;
  }
};
const addClassList = (options, parent, instance) => {
  const ns = (0,use_namespace/* useNamespace */.s)("loading");
  if (instance.originalPosition.value !== "absolute" && instance.originalPosition.value !== "fixed") {
    (0,dom_style/* addClass */.cn)(parent, ns.bm("parent", "relative"));
  } else {
    (0,dom_style/* removeClass */.IV)(parent, ns.bm("parent", "relative"));
  }
  if (options.fullscreen && options.lock) {
    (0,dom_style/* addClass */.cn)(parent, ns.bm("parent", "hidden"));
  } else {
    (0,dom_style/* removeClass */.IV)(parent, ns.bm("parent", "hidden"));
  }
};


//# sourceMappingURL=service.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/loading/src/directive.mjs




const INSTANCE_KEY = Symbol("ElLoading");
const createInstance = (el, binding) => {
  var _a, _b, _c, _d;
  const vm = binding.instance;
  const getBindingProp = (key) => (0,shared_esm_bundler/* isObject */.Kn)(binding.value) ? binding.value[key] : void 0;
  const resolveExpression = (key) => {
    const data = (0,shared_esm_bundler/* isString */.HD)(key) && (vm == null ? void 0 : vm[key]) || key;
    if (data)
      return (0,external_Vue_.ref)(data);
    else
      return data;
  };
  const getProp = (name) => resolveExpression(getBindingProp(name) || el.getAttribute(`element-loading-${(0,shared_esm_bundler/* hyphenate */.rs)(name)}`));
  const fullscreen = (_a = getBindingProp("fullscreen")) != null ? _a : binding.modifiers.fullscreen;
  const options = {
    text: getProp("text"),
    svg: getProp("svg"),
    svgViewBox: getProp("svgViewBox"),
    spinner: getProp("spinner"),
    background: getProp("background"),
    customClass: getProp("customClass"),
    fullscreen,
    target: (_b = getBindingProp("target")) != null ? _b : fullscreen ? void 0 : el,
    body: (_c = getBindingProp("body")) != null ? _c : binding.modifiers.body,
    lock: (_d = getBindingProp("lock")) != null ? _d : binding.modifiers.lock
  };
  el[INSTANCE_KEY] = {
    options,
    instance: Loading(options)
  };
};
const updateOptions = (newOptions, originalOptions) => {
  for (const key of Object.keys(originalOptions)) {
    if ((0,external_Vue_.isRef)(originalOptions[key]))
      originalOptions[key].value = newOptions[key];
  }
};
const vLoading = {
  mounted(el, binding) {
    if (binding.value) {
      createInstance(el, binding);
    }
  },
  updated(el, binding) {
    const instance = el[INSTANCE_KEY];
    if (binding.oldValue !== binding.value) {
      if (binding.value && !binding.oldValue) {
        createInstance(el, binding);
      } else if (binding.value && binding.oldValue) {
        if ((0,shared_esm_bundler/* isObject */.Kn)(binding.value))
          updateOptions(binding.value, instance.options);
      } else {
        instance == null ? void 0 : instance.instance.close();
      }
    }
  },
  unmounted(el) {
    var _a;
    (_a = el[INSTANCE_KEY]) == null ? void 0 : _a.instance.close();
  }
};


//# sourceMappingURL=directive.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/loading/index.mjs






const ElLoading = {
  install(app) {
    app.directive("loading", vLoading);
    app.config.globalProperties.$loading = Loading;
  },
  directive: vLoading,
  service: Loading
};


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/message/src/message.mjs






const messageTypes = ["success", "info", "warning", "error"];
const messageDefaults = (0,typescript/* mutable */.N)({
  customClass: "",
  center: false,
  dangerouslyUseHTMLString: false,
  duration: 3e3,
  icon: "",
  id: "",
  message: "",
  onClose: void 0,
  showClose: false,
  type: "info",
  offset: 16,
  zIndex: 0,
  grouping: false,
  repeatNum: 1,
  appendTo: shared/* isClient */.C5 ? document.body : void 0
});
const messageProps = (0,runtime/* buildProps */.o8)({
  customClass: {
    type: String,
    default: messageDefaults.customClass
  },
  center: {
    type: Boolean,
    default: messageDefaults.center
  },
  dangerouslyUseHTMLString: {
    type: Boolean,
    default: messageDefaults.dangerouslyUseHTMLString
  },
  duration: {
    type: Number,
    default: messageDefaults.duration
  },
  icon: {
    type: icon/* iconPropType */.AA,
    default: messageDefaults.icon
  },
  id: {
    type: String,
    default: messageDefaults.id
  },
  message: {
    type: (0,runtime/* definePropType */.Cq)([
      String,
      Object,
      Function
    ]),
    default: messageDefaults.message
  },
  onClose: {
    type: (0,runtime/* definePropType */.Cq)(Function),
    required: false
  },
  showClose: {
    type: Boolean,
    default: messageDefaults.showClose
  },
  type: {
    type: String,
    values: messageTypes,
    default: messageDefaults.type
  },
  offset: {
    type: Number,
    default: messageDefaults.offset
  },
  zIndex: {
    type: Number,
    default: messageDefaults.zIndex
  },
  grouping: {
    type: Boolean,
    default: messageDefaults.grouping
  },
  repeatNum: {
    type: Number,
    default: messageDefaults.repeatNum
  }
});
const messageEmits = {
  destroy: () => true
};


//# sourceMappingURL=message.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/message/src/instance.mjs


const instances = (0,external_Vue_.shallowReactive)([]);
const getInstance = (id) => {
  const idx = instances.findIndex((instance) => instance.id === id);
  const current = instances[idx];
  let prev;
  if (idx > 0) {
    prev = instances[idx - 1];
  }
  return { current, prev };
};
const getLastOffset = (id) => {
  const { prev } = getInstance(id);
  if (!prev)
    return 0;
  return prev.vm.exposeProxy.bottom;
};


//# sourceMappingURL=instance.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/message/src/message2.mjs














const message2_hoisted_1 = ["id"];
const message2_hoisted_2 = ["innerHTML"];
const message2_default_ = {
  name: "ElMessage"
};
const message2_sfc_main = /* @__PURE__ */ (0,external_Vue_.defineComponent)({
  ...message2_default_,
  props: messageProps,
  emits: messageEmits,
  setup(__props, { expose }) {
    const props = __props;
    const { Close } = icon/* TypeComponents */.f5;
    const ns = (0,use_namespace/* useNamespace */.s)("message");
    const messageRef = (0,external_Vue_.ref)();
    const visible = (0,external_Vue_.ref)(false);
    const height = (0,external_Vue_.ref)(0);
    let stopTimer = void 0;
    const badgeType = (0,external_Vue_.computed)(() => props.type ? props.type === "error" ? "danger" : props.type : "info");
    const typeClass = (0,external_Vue_.computed)(() => {
      const type = props.type;
      return { [ns.bm("icon", type)]: type && icon/* TypeComponentsMap */.Rp[type] };
    });
    const iconComponent = (0,external_Vue_.computed)(() => props.icon || icon/* TypeComponentsMap */.Rp[props.type] || "");
    const lastOffset = (0,external_Vue_.computed)(() => getLastOffset(props.id));
    const offset = (0,external_Vue_.computed)(() => props.offset + lastOffset.value);
    const bottom = (0,external_Vue_.computed)(() => height.value + offset.value);
    const customStyle = (0,external_Vue_.computed)(() => ({
      top: `${offset.value}px`,
      zIndex: props.zIndex
    }));
    function startTimer() {
      if (props.duration === 0)
        return;
      ({ stop: stopTimer } = (0,shared/* useTimeoutFn */.eM)(() => {
        close();
      }, props.duration));
    }
    function clearTimer() {
      stopTimer == null ? void 0 : stopTimer();
    }
    function close() {
      visible.value = false;
    }
    function keydown({ code }) {
      if (code === aria_EVENT_CODE.esc) {
        close();
      }
    }
    (0,external_Vue_.onMounted)(() => {
      startTimer();
      visible.value = true;
    });
    (0,external_Vue_.watch)(() => props.repeatNum, () => {
      clearTimer();
      startTimer();
    });
    (0,core/* useEventListener */.ORN)(document, "keydown", keydown);
    (0,core/* useResizeObserver */.yU7)(messageRef, () => {
      height.value = messageRef.value.getBoundingClientRect().height;
    });
    expose({
      visible,
      bottom,
      close
    });
    return (_ctx, _cache) => {
      return (0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(external_Vue_.Transition, {
        name: (0,external_Vue_.unref)(ns).b("fade"),
        onBeforeLeave: _ctx.onClose,
        onAfterLeave: _cache[0] || (_cache[0] = ($event) => _ctx.$emit("destroy")),
        persisted: ""
      }, {
        default: (0,external_Vue_.withCtx)(() => [
          (0,external_Vue_.withDirectives)((0,external_Vue_.createElementVNode)("div", {
            id: _ctx.id,
            ref_key: "messageRef",
            ref: messageRef,
            class: (0,external_Vue_.normalizeClass)([
              (0,external_Vue_.unref)(ns).b(),
              { [(0,external_Vue_.unref)(ns).m(_ctx.type)]: _ctx.type && !_ctx.icon },
              (0,external_Vue_.unref)(ns).is("center", _ctx.center),
              (0,external_Vue_.unref)(ns).is("closable", _ctx.showClose),
              _ctx.customClass
            ]),
            style: (0,external_Vue_.normalizeStyle)((0,external_Vue_.unref)(customStyle)),
            role: "alert",
            onMouseenter: clearTimer,
            onMouseleave: startTimer
          }, [
            _ctx.repeatNum > 1 ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.unref)(ElBadge), {
              key: 0,
              value: _ctx.repeatNum,
              type: (0,external_Vue_.unref)(badgeType),
              class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("badge"))
            }, null, 8, ["value", "type", "class"])) : (0,external_Vue_.createCommentVNode)("v-if", true),
            (0,external_Vue_.unref)(iconComponent) ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.unref)(components_icon/* ElIcon */.gn), {
              key: 1,
              class: (0,external_Vue_.normalizeClass)([(0,external_Vue_.unref)(ns).e("icon"), (0,external_Vue_.unref)(typeClass)])
            }, {
              default: (0,external_Vue_.withCtx)(() => [
                ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.resolveDynamicComponent)((0,external_Vue_.unref)(iconComponent))))
              ]),
              _: 1
            }, 8, ["class"])) : (0,external_Vue_.createCommentVNode)("v-if", true),
            (0,external_Vue_.renderSlot)(_ctx.$slots, "default", {}, () => [
              !_ctx.dangerouslyUseHTMLString ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("p", {
                key: 0,
                class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("content"))
              }, (0,external_Vue_.toDisplayString)(_ctx.message), 3)) : ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, { key: 1 }, [
                (0,external_Vue_.createCommentVNode)(" Caution here, message could've been compromised, never use user's input as message "),
                (0,external_Vue_.createElementVNode)("p", {
                  class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("content")),
                  innerHTML: _ctx.message
                }, null, 10, message2_hoisted_2)
              ], 2112))
            ]),
            _ctx.showClose ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.unref)(components_icon/* ElIcon */.gn), {
              key: 2,
              class: (0,external_Vue_.normalizeClass)((0,external_Vue_.unref)(ns).e("closeBtn")),
              onClick: (0,external_Vue_.withModifiers)(close, ["stop"])
            }, {
              default: (0,external_Vue_.withCtx)(() => [
                (0,external_Vue_.createVNode)((0,external_Vue_.unref)(Close))
              ]),
              _: 1
            }, 8, ["class", "onClick"])) : (0,external_Vue_.createCommentVNode)("v-if", true)
          ], 46, message2_hoisted_1), [
            [external_Vue_.vShow, visible.value]
          ])
        ]),
        _: 3
      }, 8, ["name", "onBeforeLeave"]);
    };
  }
});
var MessageConstructor = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(message2_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/message/src/message.vue"]]);


//# sourceMappingURL=message2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/message/src/method.mjs













let seed = 1;
const normalizeOptions = (params) => {
  const options = !params || (0,shared_esm_bundler/* isString */.HD)(params) || (0,external_Vue_.isVNode)(params) || (0,shared_esm_bundler/* isFunction */.mf)(params) ? { message: params } : params;
  const normalized = {
    ...messageDefaults,
    ...options
  };
  if ((0,shared_esm_bundler/* isString */.HD)(normalized.appendTo)) {
    let appendTo = document.querySelector(normalized.appendTo);
    if (!(0,types/* isElement */.kK)(appendTo)) {
      (0,error/* debugWarn */.N)("ElMessage", "the appendTo option is not an HTMLElement. Falling back to document.body.");
      appendTo = document.body;
    }
    normalized.appendTo = appendTo;
  }
  return normalized;
};
const closeMessage = (instance) => {
  const idx = instances.indexOf(instance);
  if (idx === -1)
    return;
  instances.splice(idx, 1);
  const { handler } = instance;
  handler.close();
};
const createMessage = ({ appendTo, ...options }, context) => {
  const { nextZIndex } = useZIndex();
  const id = `message_${seed++}`;
  const userOnClose = options.onClose;
  const container = document.createElement("div");
  const props = {
    ...options,
    zIndex: nextZIndex() + options.zIndex,
    id,
    onClose: () => {
      userOnClose == null ? void 0 : userOnClose();
      closeMessage(instance);
    },
    onDestroy: () => {
      (0,external_Vue_.render)(null, container);
    }
  };
  const vnode = (0,external_Vue_.createVNode)(MessageConstructor, props, (0,shared_esm_bundler/* isFunction */.mf)(props.message) || (0,external_Vue_.isVNode)(props.message) ? { default: props.message } : null);
  vnode.appContext = context || message._context;
  (0,external_Vue_.render)(vnode, container);
  appendTo.appendChild(container.firstElementChild);
  const vm = vnode.component;
  const handler = {
    close: () => {
      vm.exposeProxy.visible = false;
    }
  };
  const instance = {
    id,
    vnode,
    vm,
    handler,
    props: vnode.component.props
  };
  return instance;
};
const message = (options = {}, context) => {
  if (!shared/* isClient */.C5)
    return { close: () => void 0 };
  if ((0,shared/* isNumber */.hj)(messageConfig.max) && instances.length >= messageConfig.max) {
    return { close: () => void 0 };
  }
  const normalized = normalizeOptions(options);
  if (normalized.grouping && instances.length) {
    const instance2 = instances.find(({ vnode: vm }) => {
      var _a;
      return ((_a = vm.props) == null ? void 0 : _a.message) === normalized.message;
    });
    if (instance2) {
      instance2.props.repeatNum += 1;
      instance2.props.type = normalized.type;
      return instance2.handler;
    }
  }
  const instance = createMessage(normalized, context);
  instances.push(instance);
  return instance.handler;
};
messageTypes.forEach((type) => {
  message[type] = (options = {}, appContext) => {
    const normalized = normalizeOptions(options);
    return message({ ...normalized, type }, appContext);
  };
});
function closeAll(type) {
  for (const instance of instances) {
    if (!type || type === instance.props.type) {
      instance.handler.close();
    }
  }
}
message.closeAll = closeAll;
message._context = null;


//# sourceMappingURL=method.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/message/index.mjs





const ElMessage = (0,install/* withInstallFunction */.oN)(message, "$message");


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/directives/trap-focus/index.mjs







const FOCUSABLE_CHILDREN = "_trap-focus-children";
const TRAP_FOCUS_HANDLER = "_trap-focus-handler";
const FOCUS_STACK = [];
const FOCUS_HANDLER = (e) => {
  var _a;
  if (FOCUS_STACK.length === 0)
    return;
  const focusableElement = FOCUS_STACK[FOCUS_STACK.length - 1][FOCUSABLE_CHILDREN];
  if (focusableElement.length > 0 && e.code === aria_EVENT_CODE.tab) {
    if (focusableElement.length === 1) {
      e.preventDefault();
      if (document.activeElement !== focusableElement[0]) {
        focusableElement[0].focus();
      }
      return;
    }
    const goingBackward = e.shiftKey;
    const isFirst = e.target === focusableElement[0];
    const isLast = e.target === focusableElement[focusableElement.length - 1];
    if (isFirst && goingBackward) {
      e.preventDefault();
      focusableElement[focusableElement.length - 1].focus();
    }
    if (isLast && !goingBackward) {
      e.preventDefault();
      focusableElement[0].focus();
    }
    if (false) {}
  }
};
const TrapFocus = {
  beforeMount(el) {
    el[FOCUSABLE_CHILDREN] = aria_obtainAllFocusableElements(el);
    FOCUS_STACK.push(el);
    if (FOCUS_STACK.length <= 1) {
      event_on(document, "keydown", FOCUS_HANDLER);
    }
  },
  updated(el) {
    (0,external_Vue_.nextTick)(() => {
      el[FOCUSABLE_CHILDREN] = aria_obtainAllFocusableElements(el);
    });
  },
  unmounted() {
    FOCUS_STACK.shift();
    if (FOCUS_STACK.length === 0) {
      off(document, "keydown", FOCUS_HANDLER);
    }
  }
};


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/hooks/use-restore-active/index.mjs


const useRestoreActive = (toggle, initialFocus) => {
  let previousActive;
  (0,external_Vue_.watch)(() => toggle.value, (val) => {
    var _a, _b;
    if (val) {
      previousActive = document.activeElement;
      if ((0,external_Vue_.isRef)(initialFocus)) {
        (_b = (_a = initialFocus.value).focus) == null ? void 0 : _b.call(_a);
      }
    } else {
      if (false) {} else {
        previousActive.focus();
      }
    }
  });
};


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/message-box/src/index.mjs

























const message_box_src_sfc_main = (0,external_Vue_.defineComponent)({
  name: "ElMessageBox",
  directives: {
    TrapFocus: TrapFocus
  },
  components: {
    ElButton: ElButton,
    ElFocusTrap: ElFocusTrap,
    ElInput: components_input/* ElInput */.EZ,
    ElOverlay: ElOverlay,
    ElIcon: components_icon/* ElIcon */.gn,
    ...icon/* TypeComponents */.f5
  },
  inheritAttrs: false,
  props: {
    buttonSize: {
      type: String,
      validator: isValidComponentSize
    },
    modal: {
      type: Boolean,
      default: true
    },
    lockScroll: {
      type: Boolean,
      default: true
    },
    showClose: {
      type: Boolean,
      default: true
    },
    closeOnClickModal: {
      type: Boolean,
      default: true
    },
    closeOnPressEscape: {
      type: Boolean,
      default: true
    },
    closeOnHashChange: {
      type: Boolean,
      default: true
    },
    center: Boolean,
    draggable: Boolean,
    roundButton: {
      default: false,
      type: Boolean
    },
    container: {
      type: String,
      default: "body"
    },
    boxType: {
      type: String,
      default: ""
    }
  },
  emits: ["vanish", "action"],
  setup(props, { emit }) {
    const { t } = useLocale();
    const ns = (0,use_namespace/* useNamespace */.s)("message-box");
    const visible = (0,external_Vue_.ref)(false);
    const { nextZIndex } = useZIndex();
    const state = (0,external_Vue_.reactive)({
      autofocus: true,
      beforeClose: null,
      callback: null,
      cancelButtonText: "",
      cancelButtonClass: "",
      confirmButtonText: "",
      confirmButtonClass: "",
      customClass: "",
      customStyle: {},
      dangerouslyUseHTMLString: false,
      distinguishCancelAndClose: false,
      icon: "",
      inputPattern: null,
      inputPlaceholder: "",
      inputType: "text",
      inputValue: null,
      inputValidator: null,
      inputErrorMessage: "",
      message: null,
      modalFade: true,
      modalClass: "",
      showCancelButton: false,
      showConfirmButton: true,
      type: "",
      title: void 0,
      showInput: false,
      action: "",
      confirmButtonLoading: false,
      cancelButtonLoading: false,
      confirmButtonDisabled: false,
      editorErrorMessage: "",
      validateError: false,
      zIndex: nextZIndex()
    });
    const typeClass = (0,external_Vue_.computed)(() => {
      const type = state.type;
      return { [ns.bm("icon", type)]: type && icon/* TypeComponentsMap */.Rp[type] };
    });
    const contentId = (0,use_id/* useId */.M)();
    const inputId = (0,use_id/* useId */.M)();
    const btnSize = (0,use_common_props/* useSize */.tH)((0,external_Vue_.computed)(() => props.buttonSize), { prop: true, form: true, formItem: true });
    const iconComponent = (0,external_Vue_.computed)(() => state.icon || icon/* TypeComponentsMap */.Rp[state.type] || "");
    const hasMessage = (0,external_Vue_.computed)(() => !!state.message);
    const rootRef = (0,external_Vue_.ref)();
    const headerRef = (0,external_Vue_.ref)();
    const focusStartRef = (0,external_Vue_.ref)();
    const inputRef = (0,external_Vue_.ref)();
    const confirmRef = (0,external_Vue_.ref)();
    const confirmButtonClasses = (0,external_Vue_.computed)(() => state.confirmButtonClass);
    (0,external_Vue_.watch)(() => state.inputValue, async (val) => {
      await (0,external_Vue_.nextTick)();
      if (props.boxType === "prompt" && val !== null) {
        validate();
      }
    }, { immediate: true });
    (0,external_Vue_.watch)(() => visible.value, (val) => {
      var _a, _b;
      if (val) {
        if (props.boxType !== "prompt") {
          if (state.autofocus) {
            focusStartRef.value = (_b = (_a = confirmRef.value) == null ? void 0 : _a.$el) != null ? _b : rootRef.value;
          } else {
            focusStartRef.value = rootRef.value;
          }
        }
        state.zIndex = nextZIndex();
      }
      if (props.boxType !== "prompt")
        return;
      if (val) {
        (0,external_Vue_.nextTick)().then(() => {
          var _a2;
          if (inputRef.value && inputRef.value.$el) {
            if (state.autofocus) {
              focusStartRef.value = (_a2 = getInputElement()) != null ? _a2 : rootRef.value;
            } else {
              focusStartRef.value = rootRef.value;
            }
          }
        });
      } else {
        state.editorErrorMessage = "";
        state.validateError = false;
      }
    });
    const draggable = (0,external_Vue_.computed)(() => props.draggable);
    useDraggable(rootRef, headerRef, draggable);
    (0,external_Vue_.onMounted)(async () => {
      await (0,external_Vue_.nextTick)();
      if (props.closeOnHashChange) {
        event_on(window, "hashchange", doClose);
      }
    });
    (0,external_Vue_.onBeforeUnmount)(() => {
      if (props.closeOnHashChange) {
        off(window, "hashchange", doClose);
      }
    });
    function doClose() {
      if (!visible.value)
        return;
      visible.value = false;
      (0,external_Vue_.nextTick)(() => {
        if (state.action)
          emit("action", state.action);
      });
    }
    const handleWrapperClick = () => {
      if (props.closeOnClickModal) {
        handleAction(state.distinguishCancelAndClose ? "close" : "cancel");
      }
    };
    const overlayEvent = useSameTarget(handleWrapperClick);
    const handleInputEnter = (e) => {
      if (state.inputType !== "textarea") {
        e.preventDefault();
        return handleAction("confirm");
      }
    };
    const handleAction = (action) => {
      var _a;
      if (props.boxType === "prompt" && action === "confirm" && !validate()) {
        return;
      }
      state.action = action;
      if (state.beforeClose) {
        (_a = state.beforeClose) == null ? void 0 : _a.call(state, action, state, doClose);
      } else {
        doClose();
      }
    };
    const validate = () => {
      if (props.boxType === "prompt") {
        const inputPattern = state.inputPattern;
        if (inputPattern && !inputPattern.test(state.inputValue || "")) {
          state.editorErrorMessage = state.inputErrorMessage || t("el.messagebox.error");
          state.validateError = true;
          return false;
        }
        const inputValidator = state.inputValidator;
        if (typeof inputValidator === "function") {
          const validateResult = inputValidator(state.inputValue);
          if (validateResult === false) {
            state.editorErrorMessage = state.inputErrorMessage || t("el.messagebox.error");
            state.validateError = true;
            return false;
          }
          if (typeof validateResult === "string") {
            state.editorErrorMessage = validateResult;
            state.validateError = true;
            return false;
          }
        }
      }
      state.editorErrorMessage = "";
      state.validateError = false;
      return true;
    };
    const getInputElement = () => {
      const inputRefs = inputRef.value.$refs;
      return inputRefs.input || inputRefs.textarea;
    };
    const handleClose = () => {
      handleAction("close");
    };
    const onCloseRequested = () => {
      if (props.closeOnPressEscape) {
        handleClose();
      }
    };
    if (props.lockScroll) {
      useLockscreen(visible);
    }
    useRestoreActive(visible);
    return {
      ...(0,external_Vue_.toRefs)(state),
      ns,
      overlayEvent,
      visible,
      hasMessage,
      typeClass,
      contentId,
      inputId,
      btnSize,
      iconComponent,
      confirmButtonClasses,
      rootRef,
      focusStartRef,
      headerRef,
      inputRef,
      confirmRef,
      doClose,
      handleClose,
      onCloseRequested,
      handleWrapperClick,
      handleInputEnter,
      handleAction,
      t
    };
  }
});
const message_box_src_hoisted_1 = ["aria-label", "aria-describedby"];
const message_box_src_hoisted_2 = ["aria-label"];
const message_box_src_hoisted_3 = ["id"];
function message_box_src_sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_el_icon = (0,external_Vue_.resolveComponent)("el-icon");
  const _component_close = (0,external_Vue_.resolveComponent)("close");
  const _component_el_input = (0,external_Vue_.resolveComponent)("el-input");
  const _component_el_button = (0,external_Vue_.resolveComponent)("el-button");
  const _component_el_focus_trap = (0,external_Vue_.resolveComponent)("el-focus-trap");
  const _component_el_overlay = (0,external_Vue_.resolveComponent)("el-overlay");
  return (0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(external_Vue_.Transition, {
    name: "fade-in-linear",
    onAfterLeave: _cache[11] || (_cache[11] = ($event) => _ctx.$emit("vanish")),
    persisted: ""
  }, {
    default: (0,external_Vue_.withCtx)(() => [
      (0,external_Vue_.withDirectives)((0,external_Vue_.createVNode)(_component_el_overlay, {
        "z-index": _ctx.zIndex,
        "overlay-class": [_ctx.ns.is("message-box"), _ctx.modalClass],
        mask: _ctx.modal
      }, {
        default: (0,external_Vue_.withCtx)(() => [
          (0,external_Vue_.createElementVNode)("div", {
            role: "dialog",
            "aria-label": _ctx.title,
            "aria-modal": "true",
            "aria-describedby": !_ctx.showInput ? _ctx.contentId : void 0,
            class: (0,external_Vue_.normalizeClass)(`${_ctx.ns.namespace.value}-overlay-message-box`),
            onClick: _cache[8] || (_cache[8] = (...args) => _ctx.overlayEvent.onClick && _ctx.overlayEvent.onClick(...args)),
            onMousedown: _cache[9] || (_cache[9] = (...args) => _ctx.overlayEvent.onMousedown && _ctx.overlayEvent.onMousedown(...args)),
            onMouseup: _cache[10] || (_cache[10] = (...args) => _ctx.overlayEvent.onMouseup && _ctx.overlayEvent.onMouseup(...args))
          }, [
            (0,external_Vue_.createVNode)(_component_el_focus_trap, {
              loop: "",
              trapped: _ctx.visible,
              "focus-trap-el": _ctx.rootRef,
              "focus-start-el": _ctx.focusStartRef,
              onReleaseRequested: _ctx.onCloseRequested
            }, {
              default: (0,external_Vue_.withCtx)(() => [
                (0,external_Vue_.createElementVNode)("div", {
                  ref: "rootRef",
                  class: (0,external_Vue_.normalizeClass)([
                    _ctx.ns.b(),
                    _ctx.customClass,
                    _ctx.ns.is("draggable", _ctx.draggable),
                    { [_ctx.ns.m("center")]: _ctx.center }
                  ]),
                  style: (0,external_Vue_.normalizeStyle)(_ctx.customStyle),
                  tabindex: "-1",
                  onClick: _cache[7] || (_cache[7] = (0,external_Vue_.withModifiers)(() => {
                  }, ["stop"]))
                }, [
                  _ctx.title !== null && _ctx.title !== void 0 ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
                    key: 0,
                    ref: "headerRef",
                    class: (0,external_Vue_.normalizeClass)(_ctx.ns.e("header"))
                  }, [
                    (0,external_Vue_.createElementVNode)("div", {
                      class: (0,external_Vue_.normalizeClass)(_ctx.ns.e("title"))
                    }, [
                      _ctx.iconComponent && _ctx.center ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(_component_el_icon, {
                        key: 0,
                        class: (0,external_Vue_.normalizeClass)([_ctx.ns.e("status"), _ctx.typeClass])
                      }, {
                        default: (0,external_Vue_.withCtx)(() => [
                          ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.resolveDynamicComponent)(_ctx.iconComponent)))
                        ]),
                        _: 1
                      }, 8, ["class"])) : (0,external_Vue_.createCommentVNode)("v-if", true),
                      (0,external_Vue_.createElementVNode)("span", null, (0,external_Vue_.toDisplayString)(_ctx.title), 1)
                    ], 2),
                    _ctx.showClose ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("button", {
                      key: 0,
                      type: "button",
                      class: (0,external_Vue_.normalizeClass)(_ctx.ns.e("headerbtn")),
                      "aria-label": _ctx.t("el.messagebox.close"),
                      onClick: _cache[0] || (_cache[0] = ($event) => _ctx.handleAction(_ctx.distinguishCancelAndClose ? "close" : "cancel")),
                      onKeydown: _cache[1] || (_cache[1] = (0,external_Vue_.withKeys)((0,external_Vue_.withModifiers)(($event) => _ctx.handleAction(_ctx.distinguishCancelAndClose ? "close" : "cancel"), ["prevent"]), ["enter"]))
                    }, [
                      (0,external_Vue_.createVNode)(_component_el_icon, {
                        class: (0,external_Vue_.normalizeClass)(_ctx.ns.e("close"))
                      }, {
                        default: (0,external_Vue_.withCtx)(() => [
                          (0,external_Vue_.createVNode)(_component_close)
                        ]),
                        _: 1
                      }, 8, ["class"])
                    ], 42, message_box_src_hoisted_2)) : (0,external_Vue_.createCommentVNode)("v-if", true)
                  ], 2)) : (0,external_Vue_.createCommentVNode)("v-if", true),
                  (0,external_Vue_.createElementVNode)("div", {
                    id: _ctx.contentId,
                    class: (0,external_Vue_.normalizeClass)(_ctx.ns.e("content"))
                  }, [
                    (0,external_Vue_.createElementVNode)("div", {
                      class: (0,external_Vue_.normalizeClass)(_ctx.ns.e("container"))
                    }, [
                      _ctx.iconComponent && !_ctx.center && _ctx.hasMessage ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(_component_el_icon, {
                        key: 0,
                        class: (0,external_Vue_.normalizeClass)([_ctx.ns.e("status"), _ctx.typeClass])
                      }, {
                        default: (0,external_Vue_.withCtx)(() => [
                          ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.resolveDynamicComponent)(_ctx.iconComponent)))
                        ]),
                        _: 1
                      }, 8, ["class"])) : (0,external_Vue_.createCommentVNode)("v-if", true),
                      _ctx.hasMessage ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("div", {
                        key: 1,
                        class: (0,external_Vue_.normalizeClass)(_ctx.ns.e("message"))
                      }, [
                        (0,external_Vue_.renderSlot)(_ctx.$slots, "default", {}, () => [
                          !_ctx.dangerouslyUseHTMLString ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.resolveDynamicComponent)(_ctx.showInput ? "label" : "p"), {
                            key: 0,
                            for: _ctx.showInput ? _ctx.inputId : void 0
                          }, {
                            default: (0,external_Vue_.withCtx)(() => [
                              (0,external_Vue_.createTextVNode)((0,external_Vue_.toDisplayString)(!_ctx.dangerouslyUseHTMLString ? _ctx.message : ""), 1)
                            ]),
                            _: 1
                          }, 8, ["for"])) : ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.resolveDynamicComponent)(_ctx.showInput ? "label" : "p"), {
                            key: 1,
                            for: _ctx.showInput ? _ctx.inputId : void 0,
                            innerHTML: _ctx.message
                          }, null, 8, ["for", "innerHTML"]))
                        ])
                      ], 2)) : (0,external_Vue_.createCommentVNode)("v-if", true)
                    ], 2),
                    (0,external_Vue_.withDirectives)((0,external_Vue_.createElementVNode)("div", {
                      class: (0,external_Vue_.normalizeClass)(_ctx.ns.e("input"))
                    }, [
                      (0,external_Vue_.createVNode)(_component_el_input, {
                        id: _ctx.inputId,
                        ref: "inputRef",
                        modelValue: _ctx.inputValue,
                        "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => _ctx.inputValue = $event),
                        type: _ctx.inputType,
                        placeholder: _ctx.inputPlaceholder,
                        "aria-invalid": _ctx.validateError,
                        class: (0,external_Vue_.normalizeClass)({ invalid: _ctx.validateError }),
                        onKeydown: (0,external_Vue_.withKeys)(_ctx.handleInputEnter, ["enter"])
                      }, null, 8, ["id", "modelValue", "type", "placeholder", "aria-invalid", "class", "onKeydown"]),
                      (0,external_Vue_.createElementVNode)("div", {
                        class: (0,external_Vue_.normalizeClass)(_ctx.ns.e("errormsg")),
                        style: (0,external_Vue_.normalizeStyle)({
                          visibility: !!_ctx.editorErrorMessage ? "visible" : "hidden"
                        })
                      }, (0,external_Vue_.toDisplayString)(_ctx.editorErrorMessage), 7)
                    ], 2), [
                      [external_Vue_.vShow, _ctx.showInput]
                    ])
                  ], 10, message_box_src_hoisted_3),
                  (0,external_Vue_.createElementVNode)("div", {
                    class: (0,external_Vue_.normalizeClass)(_ctx.ns.e("btns"))
                  }, [
                    _ctx.showCancelButton ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(_component_el_button, {
                      key: 0,
                      loading: _ctx.cancelButtonLoading,
                      class: (0,external_Vue_.normalizeClass)([_ctx.cancelButtonClass]),
                      round: _ctx.roundButton,
                      size: _ctx.btnSize,
                      onClick: _cache[3] || (_cache[3] = ($event) => _ctx.handleAction("cancel")),
                      onKeydown: _cache[4] || (_cache[4] = (0,external_Vue_.withKeys)((0,external_Vue_.withModifiers)(($event) => _ctx.handleAction("cancel"), ["prevent"]), ["enter"]))
                    }, {
                      default: (0,external_Vue_.withCtx)(() => [
                        (0,external_Vue_.createTextVNode)((0,external_Vue_.toDisplayString)(_ctx.cancelButtonText || _ctx.t("el.messagebox.cancel")), 1)
                      ]),
                      _: 1
                    }, 8, ["loading", "class", "round", "size"])) : (0,external_Vue_.createCommentVNode)("v-if", true),
                    (0,external_Vue_.withDirectives)((0,external_Vue_.createVNode)(_component_el_button, {
                      ref: "confirmRef",
                      type: "primary",
                      loading: _ctx.confirmButtonLoading,
                      class: (0,external_Vue_.normalizeClass)([_ctx.confirmButtonClasses]),
                      round: _ctx.roundButton,
                      disabled: _ctx.confirmButtonDisabled,
                      size: _ctx.btnSize,
                      onClick: _cache[5] || (_cache[5] = ($event) => _ctx.handleAction("confirm")),
                      onKeydown: _cache[6] || (_cache[6] = (0,external_Vue_.withKeys)((0,external_Vue_.withModifiers)(($event) => _ctx.handleAction("confirm"), ["prevent"]), ["enter"]))
                    }, {
                      default: (0,external_Vue_.withCtx)(() => [
                        (0,external_Vue_.createTextVNode)((0,external_Vue_.toDisplayString)(_ctx.confirmButtonText || _ctx.t("el.messagebox.confirm")), 1)
                      ]),
                      _: 1
                    }, 8, ["loading", "class", "round", "disabled", "size"]), [
                      [external_Vue_.vShow, _ctx.showConfirmButton]
                    ])
                  ], 2)
                ], 6)
              ]),
              _: 3
            }, 8, ["trapped", "focus-trap-el", "focus-start-el", "onReleaseRequested"])
          ], 42, message_box_src_hoisted_1)
        ]),
        _: 3
      }, 8, ["z-index", "overlay-class", "mask"]), [
        [external_Vue_.vShow, _ctx.visible]
      ])
    ]),
    _: 3
  });
}
var MessageBoxConstructor = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(message_box_src_sfc_main, [["render", message_box_src_sfc_render], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/message-box/src/index.vue"]]);


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/message-box/src/messageBox.mjs







const messageInstance = /* @__PURE__ */ new Map();
const initInstance = (props, container, appContext = null) => {
  const vnode = (0,external_Vue_.h)(MessageBoxConstructor, props);
  vnode.appContext = appContext;
  (0,external_Vue_.render)(vnode, container);
  document.body.appendChild(container.firstElementChild);
  return vnode.component;
};
const genContainer = () => {
  return document.createElement("div");
};
const showMessage = (options, appContext) => {
  const container = genContainer();
  options.onVanish = () => {
    (0,external_Vue_.render)(null, container);
    messageInstance.delete(vm);
  };
  options.onAction = (action) => {
    const currentMsg = messageInstance.get(vm);
    let resolve;
    if (options.showInput) {
      resolve = { value: vm.inputValue, action };
    } else {
      resolve = action;
    }
    if (options.callback) {
      options.callback(resolve, instance.proxy);
    } else {
      if (action === "cancel" || action === "close") {
        if (options.distinguishCancelAndClose && action !== "cancel") {
          currentMsg.reject("close");
        } else {
          currentMsg.reject("cancel");
        }
      } else {
        currentMsg.resolve(resolve);
      }
    }
  };
  const instance = initInstance(options, container, appContext);
  const vm = instance.proxy;
  for (const prop in options) {
    if ((0,shared_esm_bundler/* hasOwn */.RI)(options, prop) && !(0,shared_esm_bundler/* hasOwn */.RI)(vm.$props, prop)) {
      vm[prop] = options[prop];
    }
  }
  (0,external_Vue_.watch)(() => vm.message, (newVal, oldVal) => {
    if ((0,external_Vue_.isVNode)(newVal)) {
      instance.slots.default = () => [newVal];
    } else if ((0,external_Vue_.isVNode)(oldVal) && !(0,external_Vue_.isVNode)(newVal)) {
      delete instance.slots.default;
    }
  }, {
    immediate: true
  });
  vm.visible = true;
  return vm;
};
function MessageBox(options, appContext = null) {
  if (!shared/* isClient */.C5)
    return Promise.reject();
  let callback;
  if ((0,shared_esm_bundler/* isString */.HD)(options) || (0,external_Vue_.isVNode)(options)) {
    options = {
      message: options
    };
  } else {
    callback = options.callback;
  }
  return new Promise((resolve, reject) => {
    const vm = showMessage(options, appContext != null ? appContext : MessageBox._context);
    messageInstance.set(vm, {
      options,
      callback,
      resolve,
      reject
    });
  });
}
const MESSAGE_BOX_VARIANTS = ["alert", "confirm", "prompt"];
const MESSAGE_BOX_DEFAULT_OPTS = {
  alert: { closeOnPressEscape: false, closeOnClickModal: false },
  confirm: { showCancelButton: true },
  prompt: { showCancelButton: true, showInput: true }
};
MESSAGE_BOX_VARIANTS.forEach((boxType) => {
  MessageBox[boxType] = messageBoxFactory(boxType);
});
function messageBoxFactory(boxType) {
  return (message, titleOrOpts, options, appContext) => {
    let title;
    if ((0,shared_esm_bundler/* isObject */.Kn)(titleOrOpts)) {
      options = titleOrOpts;
      title = "";
    } else if ((0,types/* isUndefined */.o8)(titleOrOpts)) {
      title = "";
    } else {
      title = titleOrOpts;
    }
    return MessageBox(Object.assign({
      title,
      message,
      type: "",
      ...MESSAGE_BOX_DEFAULT_OPTS[boxType]
    }, options, {
      boxType
    }), appContext);
  };
}
MessageBox.close = () => {
  messageInstance.forEach((_, vm) => {
    vm.doClose();
  });
  messageInstance.clear();
};
MessageBox._context = null;


//# sourceMappingURL=messageBox.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/message-box/index.mjs



const _MessageBox = MessageBox;
_MessageBox.install = (app) => {
  _MessageBox._context = app._context;
  app.config.globalProperties.$msgbox = _MessageBox;
  app.config.globalProperties.$messageBox = _MessageBox;
  app.config.globalProperties.$alert = _MessageBox.alert;
  app.config.globalProperties.$confirm = _MessageBox.confirm;
  app.config.globalProperties.$prompt = _MessageBox.prompt;
};
const ElMessageBox = _MessageBox;


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/notification/src/notification.mjs



const notificationTypes = [
  "success",
  "info",
  "warning",
  "error"
];
const notificationProps = (0,runtime/* buildProps */.o8)({
  customClass: {
    type: String,
    default: ""
  },
  dangerouslyUseHTMLString: {
    type: Boolean,
    default: false
  },
  duration: {
    type: Number,
    default: 4500
  },
  icon: {
    type: (0,runtime/* definePropType */.Cq)([String, Object]),
    default: ""
  },
  id: {
    type: String,
    default: ""
  },
  message: {
    type: (0,runtime/* definePropType */.Cq)([String, Object]),
    default: ""
  },
  offset: {
    type: Number,
    default: 0
  },
  onClick: {
    type: (0,runtime/* definePropType */.Cq)(Function),
    default: () => void 0
  },
  onClose: {
    type: (0,runtime/* definePropType */.Cq)(Function),
    required: true
  },
  position: {
    type: String,
    values: ["top-right", "top-left", "bottom-right", "bottom-left"],
    default: "top-right"
  },
  showClose: {
    type: Boolean,
    default: true
  },
  title: {
    type: String,
    default: ""
  },
  type: {
    type: String,
    values: [...notificationTypes, ""],
    default: ""
  },
  zIndex: {
    type: Number,
    default: 0
  }
});
const notificationEmits = {
  destroy: () => true
};


//# sourceMappingURL=notification.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/notification/src/notification2.mjs












const notification2_sfc_main = (0,external_Vue_.defineComponent)({
  name: "ElNotification",
  components: {
    ElIcon: components_icon/* ElIcon */.gn,
    ...icon/* TypeComponents */.f5
  },
  props: notificationProps,
  emits: notificationEmits,
  setup(props) {
    const ns = (0,use_namespace/* useNamespace */.s)("notification");
    const visible = (0,external_Vue_.ref)(false);
    let timer = void 0;
    const typeClass = (0,external_Vue_.computed)(() => {
      const type = props.type;
      return type && icon/* TypeComponentsMap */.Rp[props.type] ? ns.m(type) : "";
    });
    const iconComponent = (0,external_Vue_.computed)(() => {
      return icon/* TypeComponentsMap */.Rp[props.type] || props.icon || "";
    });
    const horizontalClass = (0,external_Vue_.computed)(() => props.position.endsWith("right") ? "right" : "left");
    const verticalProperty = (0,external_Vue_.computed)(() => props.position.startsWith("top") ? "top" : "bottom");
    const positionStyle = (0,external_Vue_.computed)(() => {
      return {
        [verticalProperty.value]: `${props.offset}px`,
        zIndex: props.zIndex
      };
    });
    function startTimer() {
      if (props.duration > 0) {
        ;
        ({ stop: timer } = (0,shared/* useTimeoutFn */.eM)(() => {
          if (visible.value)
            close();
        }, props.duration));
      }
    }
    function clearTimer() {
      timer == null ? void 0 : timer();
    }
    function close() {
      visible.value = false;
    }
    function onKeydown({ code }) {
      if (code === aria_EVENT_CODE["delete"] || code === aria_EVENT_CODE.backspace) {
        clearTimer();
      } else if (code === aria_EVENT_CODE.esc) {
        if (visible.value) {
          close();
        }
      } else {
        startTimer();
      }
    }
    (0,external_Vue_.onMounted)(() => {
      startTimer();
      visible.value = true;
    });
    (0,core/* useEventListener */.ORN)(document, "keydown", onKeydown);
    return {
      ns,
      horizontalClass,
      typeClass,
      iconComponent,
      positionStyle,
      visible,
      close,
      clearTimer,
      startTimer
    };
  }
});
const notification2_hoisted_1 = ["id"];
const notification2_hoisted_2 = ["textContent"];
const notification2_hoisted_3 = { key: 0 };
const notification2_hoisted_4 = ["innerHTML"];
function notification2_sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_el_icon = (0,external_Vue_.resolveComponent)("el-icon");
  const _component_close = (0,external_Vue_.resolveComponent)("close");
  return (0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(external_Vue_.Transition, {
    name: _ctx.ns.b("fade"),
    onBeforeLeave: _ctx.onClose,
    onAfterLeave: _cache[3] || (_cache[3] = ($event) => _ctx.$emit("destroy")),
    persisted: ""
  }, {
    default: (0,external_Vue_.withCtx)(() => [
      (0,external_Vue_.withDirectives)((0,external_Vue_.createElementVNode)("div", {
        id: _ctx.id,
        class: (0,external_Vue_.normalizeClass)([_ctx.ns.b(), _ctx.customClass, _ctx.horizontalClass]),
        style: (0,external_Vue_.normalizeStyle)(_ctx.positionStyle),
        role: "alert",
        onMouseenter: _cache[0] || (_cache[0] = (...args) => _ctx.clearTimer && _ctx.clearTimer(...args)),
        onMouseleave: _cache[1] || (_cache[1] = (...args) => _ctx.startTimer && _ctx.startTimer(...args)),
        onClick: _cache[2] || (_cache[2] = (...args) => _ctx.onClick && _ctx.onClick(...args))
      }, [
        _ctx.iconComponent ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(_component_el_icon, {
          key: 0,
          class: (0,external_Vue_.normalizeClass)([_ctx.ns.e("icon"), _ctx.typeClass])
        }, {
          default: (0,external_Vue_.withCtx)(() => [
            ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)((0,external_Vue_.resolveDynamicComponent)(_ctx.iconComponent)))
          ]),
          _: 1
        }, 8, ["class"])) : (0,external_Vue_.createCommentVNode)("v-if", true),
        (0,external_Vue_.createElementVNode)("div", {
          class: (0,external_Vue_.normalizeClass)(_ctx.ns.e("group"))
        }, [
          (0,external_Vue_.createElementVNode)("h2", {
            class: (0,external_Vue_.normalizeClass)(_ctx.ns.e("title")),
            textContent: (0,external_Vue_.toDisplayString)(_ctx.title)
          }, null, 10, notification2_hoisted_2),
          (0,external_Vue_.withDirectives)((0,external_Vue_.createElementVNode)("div", {
            class: (0,external_Vue_.normalizeClass)(_ctx.ns.e("content")),
            style: (0,external_Vue_.normalizeStyle)(!!_ctx.title ? void 0 : { margin: 0 })
          }, [
            (0,external_Vue_.renderSlot)(_ctx.$slots, "default", {}, () => [
              !_ctx.dangerouslyUseHTMLString ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)("p", notification2_hoisted_3, (0,external_Vue_.toDisplayString)(_ctx.message), 1)) : ((0,external_Vue_.openBlock)(), (0,external_Vue_.createElementBlock)(external_Vue_.Fragment, { key: 1 }, [
                (0,external_Vue_.createCommentVNode)(" Caution here, message could've been compromized, nerver use user's input as message "),
                (0,external_Vue_.createCommentVNode)(" eslint-disable-next-line "),
                (0,external_Vue_.createElementVNode)("p", { innerHTML: _ctx.message }, null, 8, notification2_hoisted_4)
              ], 2112))
            ])
          ], 6), [
            [external_Vue_.vShow, _ctx.message]
          ]),
          _ctx.showClose ? ((0,external_Vue_.openBlock)(), (0,external_Vue_.createBlock)(_component_el_icon, {
            key: 0,
            class: (0,external_Vue_.normalizeClass)(_ctx.ns.e("closeBtn")),
            onClick: (0,external_Vue_.withModifiers)(_ctx.close, ["stop"])
          }, {
            default: (0,external_Vue_.withCtx)(() => [
              (0,external_Vue_.createVNode)(_component_close)
            ]),
            _: 1
          }, 8, ["class", "onClick"])) : (0,external_Vue_.createCommentVNode)("v-if", true)
        ], 2)
      ], 46, notification2_hoisted_1), [
        [external_Vue_.vShow, _ctx.visible]
      ])
    ]),
    _: 3
  }, 8, ["name", "onBeforeLeave"]);
}
var NotificationConstructor = /* @__PURE__ */ (0,plugin_vue_export_helper/* default */.Z)(notification2_sfc_main, [["render", notification2_sfc_render], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/notification/src/notification.vue"]]);


//# sourceMappingURL=notification2.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/notification/src/notify.mjs











const notifications = {
  "top-left": [],
  "top-right": [],
  "bottom-left": [],
  "bottom-right": []
};
const GAP_SIZE = 16;
let notify_seed = 1;
const notify = function(options = {}, context = null) {
  if (!shared/* isClient */.C5)
    return { close: () => void 0 };
  if (typeof options === "string" || (0,external_Vue_.isVNode)(options)) {
    options = { message: options };
  }
  const position = options.position || "top-right";
  let verticalOffset = options.offset || 0;
  notifications[position].forEach(({ vm: vm2 }) => {
    var _a;
    verticalOffset += (((_a = vm2.el) == null ? void 0 : _a.offsetHeight) || 0) + GAP_SIZE;
  });
  verticalOffset += GAP_SIZE;
  const { nextZIndex } = useZIndex();
  const id = `notification_${notify_seed++}`;
  const userOnClose = options.onClose;
  const props = {
    zIndex: nextZIndex(),
    offset: verticalOffset,
    ...options,
    id,
    onClose: () => {
      notify_close(id, position, userOnClose);
    }
  };
  let appendTo = document.body;
  if ((0,types/* isElement */.kK)(options.appendTo)) {
    appendTo = options.appendTo;
  } else if ((0,shared_esm_bundler/* isString */.HD)(options.appendTo)) {
    appendTo = document.querySelector(options.appendTo);
  }
  if (!(0,types/* isElement */.kK)(appendTo)) {
    (0,error/* debugWarn */.N)("ElNotification", "the appendTo option is not an HTMLElement. Falling back to document.body.");
    appendTo = document.body;
  }
  const container = document.createElement("div");
  const vm = (0,external_Vue_.createVNode)(NotificationConstructor, props, (0,external_Vue_.isVNode)(props.message) ? {
    default: () => props.message
  } : null);
  vm.appContext = context != null ? context : notify._context;
  vm.props.onDestroy = () => {
    (0,external_Vue_.render)(null, container);
  };
  (0,external_Vue_.render)(vm, container);
  notifications[position].push({ vm });
  appendTo.appendChild(container.firstElementChild);
  return {
    close: () => {
      ;
      vm.component.proxy.visible = false;
    }
  };
};
notificationTypes.forEach((type) => {
  notify[type] = (options = {}) => {
    if (typeof options === "string" || (0,external_Vue_.isVNode)(options)) {
      options = {
        message: options
      };
    }
    return notify({
      ...options,
      type
    });
  };
});
function notify_close(id, position, userOnClose) {
  const orientedNotifications = notifications[position];
  const idx = orientedNotifications.findIndex(({ vm: vm2 }) => {
    var _a;
    return ((_a = vm2.component) == null ? void 0 : _a.props.id) === id;
  });
  if (idx === -1)
    return;
  const { vm } = orientedNotifications[idx];
  if (!vm)
    return;
  userOnClose == null ? void 0 : userOnClose(vm);
  const removedHeight = vm.el.offsetHeight;
  const verticalPos = position.split("-")[0];
  orientedNotifications.splice(idx, 1);
  const len = orientedNotifications.length;
  if (len < 1)
    return;
  for (let i = idx; i < len; i++) {
    const { el, component } = orientedNotifications[i].vm;
    const pos = Number.parseInt(el.style[verticalPos], 10) - removedHeight - GAP_SIZE;
    component.props.offset = pos;
  }
}
function notify_closeAll() {
  for (const orientedNotifications of Object.values(notifications)) {
    orientedNotifications.forEach(({ vm }) => {
      ;
      vm.component.proxy.visible = false;
    });
  }
}
notify.closeAll = notify_closeAll;
notify._context = null;


//# sourceMappingURL=notify.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/notification/index.mjs





const ElNotification = (0,install/* withInstallFunction */.oN)(notify, "$notify");


//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/plugin.mjs







var Plugins = [
  ElInfiniteScroll,
  ElLoading,
  ElMessage,
  ElMessageBox,
  ElNotification,
  ElPopoverDirective
];


//# sourceMappingURL=plugin.mjs.map

;// CONCATENATED MODULE: ./node_modules/element-plus/es/defaults.mjs




var installer = makeInstaller([...Components, ...Plugins]);


//# sourceMappingURL=defaults.mjs.map


/***/ }),

/***/ 96274:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "l": function() { return /* binding */ useAttrs; }
/* harmony export */ });
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(10311);
/* harmony import */ var lodash_unified__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(15937);
/* harmony import */ var _utils_error_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(24721);





const DEFAULT_EXCLUDE_KEYS = ["class", "style"];
const LISTENER_PREFIX = /^on[A-Z]/;
const useAttrs = (params = {}) => {
  const { excludeListeners = false, excludeKeys } = params;
  const allExcludeKeys = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
    return ((excludeKeys == null ? void 0 : excludeKeys.value) || []).concat(DEFAULT_EXCLUDE_KEYS);
  });
  const instance = (0,vue__WEBPACK_IMPORTED_MODULE_0__.getCurrentInstance)();
  if (!instance) {
    (0,_utils_error_mjs__WEBPACK_IMPORTED_MODULE_1__/* .debugWarn */ .N)("use-attrs", "getCurrentInstance() returned null. useAttrs() must be called at the top of a setup function");
    return (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => ({}));
  }
  return (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
    var _a;
    return (0,lodash_unified__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(Object.entries((_a = instance.proxy) == null ? void 0 : _a.$attrs).filter(([key]) => !allExcludeKeys.value.includes(key) && !(excludeListeners && LISTENER_PREFIX.test(key))));
  });
};


//# sourceMappingURL=index.mjs.map


/***/ }),

/***/ 75711:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {


// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "B4": function() { return /* binding */ useDisabled; },
  "tH": function() { return /* binding */ useSize; },
  "Pp": function() { return /* binding */ useSizeProp; }
});

// EXTERNAL MODULE: external "Vue"
var external_Vue_ = __webpack_require__(10311);
;// CONCATENATED MODULE: ./node_modules/element-plus/es/hooks/use-prop/index.mjs


const useProp = (name) => {
  const vm = (0,external_Vue_.getCurrentInstance)();
  return (0,external_Vue_.computed)(() => {
    var _a, _b;
    return (_b = ((_a = vm.proxy) == null ? void 0 : _a.$props)[name]) != null ? _b : void 0;
  });
};


//# sourceMappingURL=index.mjs.map

// EXTERNAL MODULE: ./node_modules/element-plus/es/hooks/use-global-config/index.mjs + 1 modules
var use_global_config = __webpack_require__(66722);
// EXTERNAL MODULE: ./node_modules/element-plus/es/utils/vue/props/runtime.mjs
var runtime = __webpack_require__(35027);
// EXTERNAL MODULE: ./node_modules/element-plus/es/constants/size.mjs
var size = __webpack_require__(90209);
// EXTERNAL MODULE: ./node_modules/element-plus/es/tokens/form.mjs
var tokens_form = __webpack_require__(87815);
;// CONCATENATED MODULE: ./node_modules/element-plus/es/hooks/use-common-props/index.mjs










const useSizeProp = (0,runtime/* buildProp */.l0)({
  type: String,
  values: size/* componentSizes */.k,
  required: false
});
const useSize = (fallback, ignore = {}) => {
  const emptyRef = (0,external_Vue_.ref)(void 0);
  const size = ignore.prop ? emptyRef : useProp("size");
  const globalConfig = ignore.global ? emptyRef : (0,use_global_config/* useGlobalConfig */.W)("size");
  const form = ignore.form ? { size: void 0 } : (0,external_Vue_.inject)(tokens_form/* formContextKey */.H, void 0);
  const formItem = ignore.formItem ? { size: void 0 } : (0,external_Vue_.inject)(tokens_form/* formItemContextKey */.K, void 0);
  return (0,external_Vue_.computed)(() => size.value || (0,external_Vue_.unref)(fallback) || (formItem == null ? void 0 : formItem.size) || (form == null ? void 0 : form.size) || globalConfig.value || "");
};
const useDisabled = (fallback) => {
  const disabled = useProp("disabled");
  const form = (0,external_Vue_.inject)(tokens_form/* formContextKey */.H, void 0);
  return (0,external_Vue_.computed)(() => disabled.value || (0,external_Vue_.unref)(fallback) || (form == null ? void 0 : form.disabled) || false);
};


//# sourceMappingURL=index.mjs.map


/***/ }),

/***/ 79966:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "A": function() { return /* binding */ useFormItem; },
/* harmony export */   "p": function() { return /* binding */ useFormItemInputId; }
/* harmony export */ });
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(10311);
/* harmony import */ var _use_id_index_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(82259);
/* harmony import */ var _tokens_form_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(87815);





const useFormItem = () => {
  const form = (0,vue__WEBPACK_IMPORTED_MODULE_0__.inject)(_tokens_form_mjs__WEBPACK_IMPORTED_MODULE_1__/* .formContextKey */ .H, void 0);
  const formItem = (0,vue__WEBPACK_IMPORTED_MODULE_0__.inject)(_tokens_form_mjs__WEBPACK_IMPORTED_MODULE_1__/* .formItemContextKey */ .K, void 0);
  return {
    form,
    formItem
  };
};
const useFormItemInputId = (props, {
  formItemContext,
  disableIdGeneration,
  disableIdManagement
}) => {
  if (!disableIdGeneration) {
    disableIdGeneration = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(false);
  }
  if (!disableIdManagement) {
    disableIdManagement = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(false);
  }
  const inputId = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)();
  let idUnwatch = void 0;
  const isLabeledByFormItem = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
    var _a;
    return !!(!props.label && formItemContext && formItemContext.inputIds && ((_a = formItemContext.inputIds) == null ? void 0 : _a.length) <= 1);
  });
  (0,vue__WEBPACK_IMPORTED_MODULE_0__.onMounted)(() => {
    idUnwatch = (0,vue__WEBPACK_IMPORTED_MODULE_0__.watch)([(0,vue__WEBPACK_IMPORTED_MODULE_0__.toRef)(props, "id"), disableIdGeneration], ([id, disableIdGeneration2]) => {
      const newId = id != null ? id : !disableIdGeneration2 ? (0,_use_id_index_mjs__WEBPACK_IMPORTED_MODULE_2__/* .useId */ .M)().value : void 0;
      if (newId !== inputId.value) {
        if (formItemContext == null ? void 0 : formItemContext.removeInputId) {
          inputId.value && formItemContext.removeInputId(inputId.value);
          if (!(disableIdManagement == null ? void 0 : disableIdManagement.value) && !disableIdGeneration2 && newId) {
            formItemContext.addInputId(newId);
          }
        }
        inputId.value = newId;
      }
    }, { immediate: true });
  });
  (0,vue__WEBPACK_IMPORTED_MODULE_0__.onUnmounted)(() => {
    idUnwatch && idUnwatch();
    if (formItemContext == null ? void 0 : formItemContext.removeInputId) {
      inputId.value && formItemContext.removeInputId(inputId.value);
    }
  });
  return {
    isLabeledByFormItem,
    inputId
  };
};


//# sourceMappingURL=index.mjs.map


/***/ }),

/***/ 66722:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {


// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "A": function() { return /* binding */ provideGlobalConfig; },
  "W": function() { return /* binding */ useGlobalConfig; }
});

// EXTERNAL MODULE: external "Vue"
var external_Vue_ = __webpack_require__(10311);
;// CONCATENATED MODULE: ./node_modules/element-plus/es/tokens/config-provider.mjs
const configProviderContextKey = Symbol();


//# sourceMappingURL=config-provider.mjs.map

// EXTERNAL MODULE: ./node_modules/element-plus/es/utils/error.mjs
var error = __webpack_require__(24721);
// EXTERNAL MODULE: ./node_modules/element-plus/es/utils/objects.mjs
var objects = __webpack_require__(14574);
;// CONCATENATED MODULE: ./node_modules/element-plus/es/hooks/use-global-config/index.mjs







const globalConfig = (0,external_Vue_.ref)();
function useGlobalConfig(key, defaultValue = void 0) {
  const config = (0,external_Vue_.getCurrentInstance)() ? (0,external_Vue_.inject)(configProviderContextKey, globalConfig) : globalConfig;
  if (key) {
    return (0,external_Vue_.computed)(() => {
      var _a, _b;
      return (_b = (_a = config.value) == null ? void 0 : _a[key]) != null ? _b : defaultValue;
    });
  } else {
    return config;
  }
}
const provideGlobalConfig = (config, app, global = false) => {
  var _a;
  const inSetup = !!(0,external_Vue_.getCurrentInstance)();
  const oldConfig = inSetup ? useGlobalConfig() : void 0;
  const provideFn = (_a = app == null ? void 0 : app.provide) != null ? _a : inSetup ? external_Vue_.provide : void 0;
  if (!provideFn) {
    (0,error/* debugWarn */.N)("provideGlobalConfig", "provideGlobalConfig() can only be used inside setup().");
    return;
  }
  const context = (0,external_Vue_.computed)(() => {
    const cfg = (0,external_Vue_.unref)(config);
    if (!(oldConfig == null ? void 0 : oldConfig.value))
      return cfg;
    return mergeConfig(oldConfig.value, cfg);
  });
  provideFn(configProviderContextKey, context);
  if (global || !globalConfig.value) {
    globalConfig.value = context.value;
  }
  return context;
};
const mergeConfig = (a, b) => {
  var _a;
  const keys = [.../* @__PURE__ */ new Set([...(0,objects/* keysOf */.uc)(a), ...(0,objects/* keysOf */.uc)(b)])];
  const obj = {};
  for (const key of keys) {
    obj[key] = (_a = b[key]) != null ? _a : a[key];
  }
  return obj;
};


//# sourceMappingURL=index.mjs.map


/***/ }),

/***/ 82259:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "M": function() { return /* binding */ useId; }
/* harmony export */ });
/* unused harmony export ID_INJECTION_KEY */
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(10311);
/* harmony import */ var _vueuse_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(47475);
/* harmony import */ var _utils_error_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(24721);





const defaultIdInjection = {
  prefix: Math.floor(Math.random() * 1e4),
  current: 0
};
const ID_INJECTION_KEY = Symbol("elIdInjection");
const useId = (deterministicId) => {
  const idInjection = (0,vue__WEBPACK_IMPORTED_MODULE_0__.inject)(ID_INJECTION_KEY, defaultIdInjection);
  if (!_vueuse_core__WEBPACK_IMPORTED_MODULE_1__/* .isClient */ .C5 && idInjection === defaultIdInjection) {
    (0,_utils_error_mjs__WEBPACK_IMPORTED_MODULE_2__/* .debugWarn */ .N)("IdInjection", `Looks like you are using server rendering, you must provide a id provider to ensure the hydration process to be succeed
usage: app.provide(ID_INJECTION_KEY, {
  prefix: number,
  current: number,
})`);
  }
  const idRef = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(deterministicId) || `el-id-${idInjection.prefix}-${idInjection.current++}`);
  return idRef;
};


//# sourceMappingURL=index.mjs.map


/***/ }),

/***/ 99143:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "s": function() { return /* binding */ useNamespace; },
/* harmony export */   "t": function() { return /* binding */ defaultNamespace; }
/* harmony export */ });
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(10311);
/* harmony import */ var _use_global_config_index_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(66722);



const defaultNamespace = "el";
const statePrefix = "is-";
const _bem = (namespace, block, blockSuffix, element, modifier) => {
  let cls = `${namespace}-${block}`;
  if (blockSuffix) {
    cls += `-${blockSuffix}`;
  }
  if (element) {
    cls += `__${element}`;
  }
  if (modifier) {
    cls += `--${modifier}`;
  }
  return cls;
};
const useNamespace = (block) => {
  const globalConfig = (0,_use_global_config_index_mjs__WEBPACK_IMPORTED_MODULE_1__/* .useGlobalConfig */ .W)("namespace");
  const namespace = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => globalConfig.value || defaultNamespace);
  const b = (blockSuffix = "") => _bem((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(namespace), block, blockSuffix, "", "");
  const e = (element) => element ? _bem((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(namespace), block, "", element, "") : "";
  const m = (modifier) => modifier ? _bem((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(namespace), block, "", "", modifier) : "";
  const be = (blockSuffix, element) => blockSuffix && element ? _bem((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(namespace), block, blockSuffix, element, "") : "";
  const em = (element, modifier) => element && modifier ? _bem((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(namespace), block, "", element, modifier) : "";
  const bm = (blockSuffix, modifier) => blockSuffix && modifier ? _bem((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(namespace), block, blockSuffix, "", modifier) : "";
  const bem = (blockSuffix, element, modifier) => blockSuffix && element && modifier ? _bem((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(namespace), block, blockSuffix, element, modifier) : "";
  const is = (name, ...args) => {
    const state = args.length >= 1 ? args[0] : true;
    return name && state ? `${statePrefix}${name}` : "";
  };
  const cssVar = (object) => {
    const styles = {};
    for (const key in object) {
      styles[`--${namespace.value}-${key}`] = object[key];
    }
    return styles;
  };
  const cssVarBlock = (object) => {
    const styles = {};
    for (const key in object) {
      styles[`--${namespace.value}-${block}-${key}`] = object[key];
    }
    return styles;
  };
  const cssVarName = (name) => `--${namespace.value}-${name}`;
  const cssVarBlockName = (name) => `--${namespace.value}-${block}-${name}`;
  return {
    namespace,
    b,
    e,
    m,
    be,
    em,
    bm,
    bem,
    is,
    cssVar,
    cssVarName,
    cssVarBlock,
    cssVarBlockName
  };
};


//# sourceMappingURL=index.mjs.map


/***/ }),

/***/ 87815:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "H": function() { return /* binding */ formContextKey; },
/* harmony export */   "K": function() { return /* binding */ formItemContextKey; }
/* harmony export */ });
const formContextKey = Symbol("formContextKey");
const formItemContextKey = Symbol("formItemContextKey");


//# sourceMappingURL=form.mjs.map


/***/ }),

/***/ 67675:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "C2": function() { return /* binding */ getStyle; },
/* harmony export */   "IV": function() { return /* binding */ removeClass; },
/* harmony export */   "Nn": function() { return /* binding */ addUnit; },
/* harmony export */   "cn": function() { return /* binding */ addClass; },
/* harmony export */   "pv": function() { return /* binding */ hasClass; }
/* harmony export */ });
/* unused harmony exports classNameToArray, removeStyle, setStyle */
/* harmony import */ var _vueuse_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(47475);
/* harmony import */ var _error_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(24721);
/* harmony import */ var _vue_shared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3577);







const SCOPE = "utils/dom/style";
const classNameToArray = (cls = "") => cls.split(" ").filter((item) => !!item.trim());
const hasClass = (el, cls) => {
  if (!el || !cls)
    return false;
  if (cls.includes(" "))
    throw new Error("className should not contain space.");
  return el.classList.contains(cls);
};
const addClass = (el, cls) => {
  if (!el || !cls.trim())
    return;
  el.classList.add(...classNameToArray(cls));
};
const removeClass = (el, cls) => {
  if (!el || !cls.trim())
    return;
  el.classList.remove(...classNameToArray(cls));
};
const getStyle = (element, styleName) => {
  var _a;
  if (!_vueuse_core__WEBPACK_IMPORTED_MODULE_0__/* .isClient */ .C5 || !element || !styleName)
    return "";
  let key = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .camelize */ ._A)(styleName);
  if (key === "float")
    key = "cssFloat";
  try {
    const style = element.style[key];
    if (style)
      return style;
    const computed = (_a = document.defaultView) == null ? void 0 : _a.getComputedStyle(element, "");
    return computed ? computed[key] : "";
  } catch (e) {
    return element.style[key];
  }
};
const setStyle = (element, styleName, value) => {
  if (!element || !styleName)
    return;
  if (isObject(styleName)) {
    entriesOf(styleName).forEach(([prop, value2]) => setStyle(element, prop, value2));
  } else {
    const key = camelize(styleName);
    element.style[key] = value;
  }
};
const removeStyle = (element, style) => {
  if (!element || !style)
    return;
  if (isObject(style)) {
    keysOf(style).forEach((prop) => removeStyle(element, prop));
  } else {
    setStyle(element, style, "");
  }
};
function addUnit(value, defaultUnit = "px") {
  if (!value)
    return "";
  if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isString */ .HD)(value)) {
    return value;
  } else if ((0,_vueuse_core__WEBPACK_IMPORTED_MODULE_0__/* .isNumber */ .hj)(value)) {
    return `${value}${defaultUnit}`;
  }
  (0,_error_mjs__WEBPACK_IMPORTED_MODULE_2__/* .debugWarn */ .N)(SCOPE, "binding value must be a string or number");
}


//# sourceMappingURL=style.mjs.map


/***/ }),

/***/ 24721:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "N": function() { return /* binding */ debugWarn; },
/* harmony export */   "_": function() { return /* binding */ throwError; }
/* harmony export */ });



class ElementPlusError extends Error {
  constructor(m) {
    super(m);
    this.name = "ElementPlusError";
  }
}
function throwError(scope, m) {
  throw new ElementPlusError(`[${scope}] ${m}`);
}
function debugWarn(scope, message) {
  if (false) {}
}


//# sourceMappingURL=error.mjs.map


/***/ }),

/***/ 62746:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "w": function() { return /* binding */ isKorean; }
/* harmony export */ });
const isKorean = (text) => /([(\uAC00-\uD7AF)|(\u3130-\u318F)])+/gi.test(text);


//# sourceMappingURL=i18n.mjs.map


/***/ }),

/***/ 14574:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "WJ": function() { return /* binding */ getProp; },
/* harmony export */   "uc": function() { return /* binding */ keysOf; },
/* harmony export */   "vu": function() { return /* binding */ entriesOf; }
/* harmony export */ });
/* harmony import */ var lodash_unified__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(16423);
/* harmony import */ var lodash_unified__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(48707);



const keysOf = (arr) => Object.keys(arr);
const entriesOf = (arr) => Object.entries(arr);
const getProp = (obj, path, defaultValue) => {
  return {
    get value() {
      return (0,lodash_unified__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(obj, path, defaultValue);
    },
    set value(val) {
      (0,lodash_unified__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(obj, path, val);
    }
  };
};


//# sourceMappingURL=objects.mjs.map


/***/ }),

/***/ 35162:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Cl": function() { return /* binding */ isPropAbsent; },
/* harmony export */   "kK": function() { return /* binding */ isElement; },
/* harmony export */   "o8": function() { return /* binding */ isUndefined; },
/* harmony export */   "xb": function() { return /* binding */ isEmpty; }
/* harmony export */ });
/* harmony import */ var _vue_shared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3577);
/* harmony import */ var lodash_unified__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(27601);
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(10311);






const isUndefined = (val) => val === void 0;
const isEmpty = (val) => !val && val !== 0 || (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .kJ)(val) && val.length === 0 || (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isObject */ .Kn)(val) && !Object.keys(val).length;
const isElement = (e) => {
  if (typeof Element === "undefined")
    return false;
  return e instanceof Element;
};
const isPropAbsent = (prop) => {
  return (0,lodash_unified__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(prop);
};


//# sourceMappingURL=types.mjs.map


/***/ }),

/***/ 25450:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "N": function() { return /* binding */ mutable; }
/* harmony export */ });
const mutable = (val) => val;


//# sourceMappingURL=typescript.mjs.map


/***/ }),

/***/ 79809:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AA": function() { return /* binding */ iconPropType; },
/* harmony export */   "NK": function() { return /* binding */ CloseComponents; },
/* harmony export */   "Rp": function() { return /* binding */ TypeComponentsMap; },
/* harmony export */   "f5": function() { return /* binding */ TypeComponents; },
/* harmony export */   "rU": function() { return /* binding */ ValidateComponentsMap; }
/* harmony export */ });
/* harmony import */ var _element_plus_icons_vue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(65781);
/* harmony import */ var _props_runtime_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(35027);




const iconPropType = (0,_props_runtime_mjs__WEBPACK_IMPORTED_MODULE_0__/* .definePropType */ .Cq)([
  String,
  Object,
  Function
]);
const CloseComponents = {
  Close: _element_plus_icons_vue__WEBPACK_IMPORTED_MODULE_1__/* .Close */ .x8P
};
const TypeComponents = {
  Close: _element_plus_icons_vue__WEBPACK_IMPORTED_MODULE_1__/* .Close */ .x8P,
  SuccessFilled: _element_plus_icons_vue__WEBPACK_IMPORTED_MODULE_1__/* .SuccessFilled */ .c5o,
  InfoFilled: _element_plus_icons_vue__WEBPACK_IMPORTED_MODULE_1__/* .InfoFilled */ .cEj,
  WarningFilled: _element_plus_icons_vue__WEBPACK_IMPORTED_MODULE_1__/* .WarningFilled */ .Rrw,
  CircleCloseFilled: _element_plus_icons_vue__WEBPACK_IMPORTED_MODULE_1__/* .CircleCloseFilled */ .Tw$
};
const TypeComponentsMap = {
  success: _element_plus_icons_vue__WEBPACK_IMPORTED_MODULE_1__/* .SuccessFilled */ .c5o,
  warning: _element_plus_icons_vue__WEBPACK_IMPORTED_MODULE_1__/* .WarningFilled */ .Rrw,
  error: _element_plus_icons_vue__WEBPACK_IMPORTED_MODULE_1__/* .CircleCloseFilled */ .Tw$,
  info: _element_plus_icons_vue__WEBPACK_IMPORTED_MODULE_1__/* .InfoFilled */ .cEj
};
const ValidateComponentsMap = {
  validating: _element_plus_icons_vue__WEBPACK_IMPORTED_MODULE_1__/* .Loading */ .gbz,
  success: _element_plus_icons_vue__WEBPACK_IMPORTED_MODULE_1__/* .CircleCheck */ .yGk,
  error: _element_plus_icons_vue__WEBPACK_IMPORTED_MODULE_1__/* .CircleClose */ .K41
};


//# sourceMappingURL=icon.mjs.map


/***/ }),

/***/ 2123:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "dH": function() { return /* binding */ withInstallDirective; },
/* harmony export */   "dp": function() { return /* binding */ withNoopInstall; },
/* harmony export */   "nz": function() { return /* binding */ withInstall; },
/* harmony export */   "oN": function() { return /* binding */ withInstallFunction; }
/* harmony export */ });
/* harmony import */ var _vue_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3577);


const withInstall = (main, extra) => {
  ;
  main.install = (app) => {
    for (const comp of [main, ...Object.values(extra != null ? extra : {})]) {
      app.component(comp.name, comp);
    }
  };
  if (extra) {
    for (const [key, comp] of Object.entries(extra)) {
      ;
      main[key] = comp;
    }
  }
  return main;
};
const withInstallFunction = (fn, name) => {
  ;
  fn.install = (app) => {
    ;
    fn._context = app._context;
    app.config.globalProperties[name] = fn;
  };
  return fn;
};
const withInstallDirective = (directive, name) => {
  ;
  directive.install = (app) => {
    app.directive(name, directive);
  };
  return directive;
};
const withNoopInstall = (component) => {
  ;
  component.install = _vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .NOOP */ .dG;
  return component;
};


//# sourceMappingURL=install.mjs.map


/***/ }),

/***/ 35027:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Cq": function() { return /* binding */ definePropType; },
/* harmony export */   "l0": function() { return /* binding */ buildProp; },
/* harmony export */   "o8": function() { return /* binding */ buildProps; }
/* harmony export */ });
/* unused harmony exports epPropKey, isEpProp */
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(10311);
/* harmony import */ var lodash_unified__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(15937);
/* harmony import */ var _vue_shared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3577);






const epPropKey = "__epPropKey";
const definePropType = (val) => val;
const isEpProp = (val) => (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isObject */ .Kn)(val) && !!val[epPropKey];
const buildProp = (prop, key) => {
  if (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isObject */ .Kn)(prop) || isEpProp(prop))
    return prop;
  const { values, required, default: defaultValue, type, validator } = prop;
  const _validator = values || validator ? (val) => {
    let valid = false;
    let allowedValues = [];
    if (values) {
      allowedValues = Array.from(values);
      if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hasOwn */ .RI)(prop, "default")) {
        allowedValues.push(defaultValue);
      }
      valid || (valid = allowedValues.includes(val));
    }
    if (validator)
      valid || (valid = validator(val));
    if (!valid && allowedValues.length > 0) {
      const allowValuesText = [...new Set(allowedValues)].map((value) => JSON.stringify(value)).join(", ");
      (0,vue__WEBPACK_IMPORTED_MODULE_0__.warn)(`Invalid prop: validation failed${key ? ` for prop "${key}"` : ""}. Expected one of [${allowValuesText}], got value ${JSON.stringify(val)}.`);
    }
    return valid;
  } : void 0;
  const epProp = {
    type,
    required: !!required,
    validator: _validator,
    [epPropKey]: true
  };
  if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hasOwn */ .RI)(prop, "default"))
    epProp.default = defaultValue;
  return epProp;
};
const buildProps = (props) => (0,lodash_unified__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(Object.entries(props).map(([key, option]) => [
  key,
  buildProp(option, key)
]));


//# sourceMappingURL=runtime.mjs.map


/***/ })

}]);